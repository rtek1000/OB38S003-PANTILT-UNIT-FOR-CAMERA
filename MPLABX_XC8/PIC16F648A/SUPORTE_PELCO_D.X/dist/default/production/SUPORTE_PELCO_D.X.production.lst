

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed Feb 12 01:05:09 2025

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	16F648A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Generated 12/10/2023 GMT
    41                           ; 
    42                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F648A Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  008C                     	;# 
   102  008E                     	;# 
   103  0092                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009F                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000E                     	;# 
   122  000E                     	;# 
   123  000F                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0015                     	;# 
   128  0015                     	;# 
   129  0016                     	;# 
   130  0017                     	;# 
   131  0018                     	;# 
   132  0019                     	;# 
   133  001A                     	;# 
   134  001F                     	;# 
   135  0081                     	;# 
   136  0085                     	;# 
   137  0086                     	;# 
   138  008C                     	;# 
   139  008E                     	;# 
   140  0092                     	;# 
   141  0098                     	;# 
   142  0099                     	;# 
   143  009A                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009F                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  000A                     	;# 
   156  000B                     	;# 
   157  000C                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0015                     	;# 
   165  0015                     	;# 
   166  0016                     	;# 
   167  0017                     	;# 
   168  0018                     	;# 
   169  0019                     	;# 
   170  001A                     	;# 
   171  001F                     	;# 
   172  0081                     	;# 
   173  0085                     	;# 
   174  0086                     	;# 
   175  008C                     	;# 
   176  008E                     	;# 
   177  0092                     	;# 
   178  0098                     	;# 
   179  0099                     	;# 
   180  009A                     	;# 
   181  009B                     	;# 
   182  009C                     	;# 
   183  009D                     	;# 
   184  009F                     	;# 
   185  0000                     	;# 
   186  0001                     	;# 
   187  0002                     	;# 
   188  0003                     	;# 
   189  0004                     	;# 
   190  0005                     	;# 
   191  0006                     	;# 
   192  000A                     	;# 
   193  000B                     	;# 
   194  000C                     	;# 
   195  000E                     	;# 
   196  000E                     	;# 
   197  000F                     	;# 
   198  0010                     	;# 
   199  0011                     	;# 
   200  0012                     	;# 
   201  0015                     	;# 
   202  0015                     	;# 
   203  0016                     	;# 
   204  0017                     	;# 
   205  0018                     	;# 
   206  0019                     	;# 
   207  001A                     	;# 
   208  001F                     	;# 
   209  0081                     	;# 
   210  0085                     	;# 
   211  0086                     	;# 
   212  008C                     	;# 
   213  008E                     	;# 
   214  0092                     	;# 
   215  0098                     	;# 
   216  0099                     	;# 
   217  009A                     	;# 
   218  009B                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009F                     	;# 
   222  0000                     	;# 
   223  0001                     	;# 
   224  0002                     	;# 
   225  0003                     	;# 
   226  0004                     	;# 
   227  0005                     	;# 
   228  0006                     	;# 
   229  000A                     	;# 
   230  000B                     	;# 
   231  000C                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0015                     	;# 
   239  0015                     	;# 
   240  0016                     	;# 
   241  0017                     	;# 
   242  0018                     	;# 
   243  0019                     	;# 
   244  001A                     	;# 
   245  001F                     	;# 
   246  0081                     	;# 
   247  0085                     	;# 
   248  0086                     	;# 
   249  008C                     	;# 
   250  008E                     	;# 
   251  0092                     	;# 
   252  0098                     	;# 
   253  0099                     	;# 
   254  009A                     	;# 
   255  009B                     	;# 
   256  009C                     	;# 
   257  009D                     	;# 
   258  009F                     	;# 
   259                           
   260                           	psect	stringtext
   261  0800                     __pstringtext:
   262  0800                     stringtab:
   263  0800                     __stringtab:
   264                           
   265                           ;	String table - string pointers are 2 bytes each
   266  0800  1BFF               	btfsc	btemp+1,7
   267  0801  280A               	ljmp	stringcode
   268  0802  1383               	bcf	3,7
   269  0803  187F               	btfsc	btemp+1,0
   270  0804  1783               	bsf	3,7
   271  0805  0800               	movf	0,w
   272  0806  0A84               	incf	4,f
   273  0807  1903               	skipnz
   274  0808  0AFF               	incf	btemp+1,f
   275  0809  0008               	return
   276  080A                     stringcode:
   277  080A  087F               	movf	btemp+1,w
   278  080B  397F               	andlw	127
   279  080C  008A               	movwf	10
   280  080D  0804               	movf	4,w
   281  080E  0A84               	incf	4,f
   282  080F  1903               	skipnz
   283  0810  0AFF               	incf	btemp+1,f
   284  0811  0082               	movwf	2
   285  0812                     __stringbase:
   286  0812                     __end_of__stringtab:
   287  0812                     _speed_ref:
   288  0812  3406               	retlw	6
   289  0813  340C               	retlw	12
   290  0814  3412               	retlw	18
   291  0815  3419               	retlw	25
   292  0816  341F               	retlw	31
   293  0817  3425               	retlw	37
   294  0818  342C               	retlw	44
   295  0819  3432               	retlw	50
   296  081A                     __end_of_speed_ref:
   297  081A                     _steps_2B:
   298  081A  3400               	retlw	0
   299  081B  3400               	retlw	0
   300  081C  3400               	retlw	0
   301  081D  3400               	retlw	0
   302  081E  3400               	retlw	0
   303  081F  3401               	retlw	1
   304  0820  3401               	retlw	1
   305  0821  3401               	retlw	1
   306  0822                     __end_of_steps_2B:
   307  0822                     _steps_2A:
   308  0822  3400               	retlw	0
   309  0823  3400               	retlw	0
   310  0824  3400               	retlw	0
   311  0825  3401               	retlw	1
   312  0826  3401               	retlw	1
   313  0827  3401               	retlw	1
   314  0828  3400               	retlw	0
   315  0829  3400               	retlw	0
   316  082A                     __end_of_steps_2A:
   317  082A                     _steps_1B:
   318  082A  3400               	retlw	0
   319  082B  3401               	retlw	1
   320  082C  3401               	retlw	1
   321  082D  3401               	retlw	1
   322  082E  3400               	retlw	0
   323  082F  3400               	retlw	0
   324  0830  3400               	retlw	0
   325  0831  3400               	retlw	0
   326  0832                     __end_of_steps_1B:
   327  0832                     _steps_1A:
   328  0832  3401               	retlw	1
   329  0833  3401               	retlw	1
   330  0834  3400               	retlw	0
   331  0835  3400               	retlw	0
   332  0836  3400               	retlw	0
   333  0837  3400               	retlw	0
   334  0838  3400               	retlw	0
   335  0839  3401               	retlw	1
   336  083A                     __end_of_steps_1A:
   337  0003                     _STATUSbits	set	3
   338  0019                     _TXREG	set	25
   339  0010                     _T1CONbits	set	16
   340  000B                     _INTCONbits	set	11
   341  001F                     _CMCON	set	31
   342  0006                     _PORTB	set	6
   343  0005                     _PORTA	set	5
   344  0006                     _PORTBbits	set	6
   345  0005                     _PORTAbits	set	5
   346  000E                     _TMR1L	set	14
   347  000F                     _TMR1H	set	15
   348  001A                     _RCREG	set	26
   349  000C                     _PIR1bits	set	12
   350  00C4                     _CREN	set	196
   351  00C7                     _SPEN	set	199
   352  009D                     _EECON2	set	157
   353  009A                     _EEDATA	set	154
   354  009C                     _EECON1	set	156
   355  009B                     _EEADR	set	155
   356  009C                     _EECON1bits	set	156
   357  0099                     _SPBRG	set	153
   358  0086                     _TRISB	set	134
   359  0085                     _TRISA	set	133
   360  0081                     _OPTION_REGbits	set	129
   361  008E                     _PCONbits	set	142
   362  008C                     _PIE1bits	set	140
   363  04C1                     _TRMT	set	1217
   364  04C5                     _TXEN	set	1221
   365  04C4                     _SYNC	set	1220
   366  04C2                     _BRGH	set	1218
   367  083A                     STR_2:
   368  083A  3447               	retlw	71	;'G'
   369  083B  346F               	retlw	111	;'o'
   370  083C  3474               	retlw	116	;'t'
   371  083D  346F               	retlw	111	;'o'
   372  083E  3420               	retlw	32	;' '
   373  083F  3450               	retlw	80	;'P'
   374  0840  3441               	retlw	65	;'A'
   375  0841  344E               	retlw	78	;'N'
   376  0842  3420               	retlw	32	;' '
   377  0843  3461               	retlw	97	;'a'
   378  0844  346E               	retlw	110	;'n'
   379  0845  3464               	retlw	100	;'d'
   380  0846  3420               	retlw	32	;' '
   381  0847  3454               	retlw	84	;'T'
   382  0848  3449               	retlw	73	;'I'
   383  0849  344C               	retlw	76	;'L'
   384  084A  3454               	retlw	84	;'T'
   385  084B  3420               	retlw	32	;' '
   386  084C  3448               	retlw	72	;'H'
   387  084D  346F               	retlw	111	;'o'
   388  084E  346D               	retlw	109	;'m'
   389  084F  3465               	retlw	101	;'e'
   390  0850  340D               	retlw	13
   391  0851  340A               	retlw	10
   392  0852  3400               	retlw	0
   393  0853                     STR_3:
   394  0853  3457               	retlw	87	;'W'
   395  0854  3461               	retlw	97	;'a'
   396  0855  3469               	retlw	105	;'i'
   397  0856  3474               	retlw	116	;'t'
   398  0857  3469               	retlw	105	;'i'
   399  0858  346E               	retlw	110	;'n'
   400  0859  3467               	retlw	103	;'g'
   401  085A  3420               	retlw	32	;' '
   402  085B  3466               	retlw	102	;'f'
   403  085C  346F               	retlw	111	;'o'
   404  085D  3472               	retlw	114	;'r'
   405  085E  3420               	retlw	32	;' '
   406  085F  3463               	retlw	99	;'c'
   407  0860  346F               	retlw	111	;'o'
   408  0861  346D               	retlw	109	;'m'
   409  0862  346D               	retlw	109	;'m'
   410  0863  3461               	retlw	97	;'a'
   411  0864  346E               	retlw	110	;'n'
   412  0865  3464               	retlw	100	;'d'
   413  0866  3473               	retlw	115	;'s'
   414  0867  340D               	retlw	13
   415  0868  340A               	retlw	10
   416  0869  3400               	retlw	0
   417  086A                     STR_12:
   418  086A  340D               	retlw	13
   419  086B  340A               	retlw	10
   420  086C  3450               	retlw	80	;'P'
   421  086D  344C               	retlw	76	;'L'
   422  086E  3445               	retlw	69	;'E'
   423  086F  3441               	retlw	65	;'A'
   424  0870  3453               	retlw	83	;'S'
   425  0871  3445               	retlw	69	;'E'
   426  0872  3420               	retlw	32	;' '
   427  0873  3452               	retlw	82	;'R'
   428  0874  3445               	retlw	69	;'E'
   429  0875  3442               	retlw	66	;'B'
   430  0876  344F               	retlw	79	;'O'
   431  0877  344F               	retlw	79	;'O'
   432  0878  3454               	retlw	84	;'T'
   433  0879  340D               	retlw	13
   434  087A  340A               	retlw	10
   435  087B  3400               	retlw	0
   436  087C                     STR_13:
   437  087C  340D               	retlw	13
   438  087D  340A               	retlw	10
   439  087E  344E               	retlw	78	;'N'
   440  087F  3445               	retlw	69	;'E'
   441  0880  3445               	retlw	69	;'E'
   442  0881  3444               	retlw	68	;'D'
   443  0882  3420               	retlw	32	;' '
   444  0883  3452               	retlw	82	;'R'
   445  0884  3445               	retlw	69	;'E'
   446  0885  3442               	retlw	66	;'B'
   447  0886  344F               	retlw	79	;'O'
   448  0887  344F               	retlw	79	;'O'
   449  0888  3454               	retlw	84	;'T'
   450  0889  340D               	retlw	13
   451  088A  340A               	retlw	10
   452  088B  3400               	retlw	0
   453  088C                     STR_19:
   454  088C  3443               	retlw	67	;'C'
   455  088D  344C               	retlw	76	;'L'
   456  088E  3445               	retlw	69	;'E'
   457  088F  3441               	retlw	65	;'A'
   458  0890  3452               	retlw	82	;'R'
   459  0891  3420               	retlw	32	;' '
   460  0892  3450               	retlw	80	;'P'
   461  0893  3452               	retlw	82	;'R'
   462  0894  3445               	retlw	69	;'E'
   463  0895  3453               	retlw	83	;'S'
   464  0896  3445               	retlw	69	;'E'
   465  0897  3454               	retlw	84	;'T'
   466  0898  3420               	retlw	32	;' '
   467  0899  3400               	retlw	0
   468  089A                     STR_5:
   469  089A  3453               	retlw	83	;'S'
   470  089B  3445               	retlw	69	;'E'
   471  089C  3454               	retlw	84	;'T'
   472  089D  3420               	retlw	32	;' '
   473  089E  3442               	retlw	66	;'B'
   474  089F  3441               	retlw	65	;'A'
   475  08A0  3455               	retlw	85	;'U'
   476  08A1  3444               	retlw	68	;'D'
   477  08A2  3420               	retlw	32	;' '
   478  08A3  3452               	retlw	82	;'R'
   479  08A4  3441               	retlw	65	;'A'
   480  08A5  3454               	retlw	84	;'T'
   481  08A6  3445               	retlw	69	;'E'
   482  08A7  3400               	retlw	0
   483  08A8                     STR_22:
   484  08A8  3447               	retlw	71	;'G'
   485  08A9  344F               	retlw	79	;'O'
   486  08AA  3454               	retlw	84	;'T'
   487  08AB  344F               	retlw	79	;'O'
   488  08AC  3420               	retlw	32	;' '
   489  08AD  3450               	retlw	80	;'P'
   490  08AE  3452               	retlw	82	;'R'
   491  08AF  3445               	retlw	69	;'E'
   492  08B0  3453               	retlw	83	;'S'
   493  08B1  3445               	retlw	69	;'E'
   494  08B2  3454               	retlw	84	;'T'
   495  08B3  3420               	retlw	32	;' '
   496  08B4  3400               	retlw	0
   497  08B5                     STR_1:
   498  08B5  340D               	retlw	13
   499  08B6  340A               	retlw	10
   500  08B7  340D               	retlw	13
   501  08B8  340A               	retlw	10
   502  08B9  3453               	retlw	83	;'S'
   503  08BA  3474               	retlw	116	;'t'
   504  08BB  3461               	retlw	97	;'a'
   505  08BC  3472               	retlw	114	;'r'
   506  08BD  3474               	retlw	116	;'t'
   507  08BE  340D               	retlw	13
   508  08BF  340A               	retlw	10
   509  08C0  3400               	retlw	0
   510  08C1                     STR_16:
   511  08C1  3453               	retlw	83	;'S'
   512  08C2  3445               	retlw	69	;'E'
   513  08C3  3454               	retlw	84	;'T'
   514  08C4  3420               	retlw	32	;' '
   515  08C5  3450               	retlw	80	;'P'
   516  08C6  3452               	retlw	82	;'R'
   517  08C7  3445               	retlw	69	;'E'
   518  08C8  3453               	retlw	83	;'S'
   519  08C9  3445               	retlw	69	;'E'
   520  08CA  3454               	retlw	84	;'T'
   521  08CB  3420               	retlw	32	;' '
   522  08CC  3400               	retlw	0
   523  08CD                     STR_10:
   524  08CD  3431               	retlw	49	;'1'
   525  08CE  3431               	retlw	49	;'1'
   526  08CF  3435               	retlw	53	;'5'
   527  08D0  3432               	retlw	50	;'2'
   528  08D1  3430               	retlw	48	;'0'
   529  08D2  3430               	retlw	48	;'0'
   530  08D3  340D               	retlw	13
   531  08D4  340A               	retlw	10
   532  08D5  3400               	retlw	0
   533  08D6                     STR_8:
   534  08D6  3431               	retlw	49	;'1'
   535  08D7  3439               	retlw	57	;'9'
   536  08D8  3432               	retlw	50	;'2'
   537  08D9  3430               	retlw	48	;'0'
   538  08DA  3430               	retlw	48	;'0'
   539  08DB  340D               	retlw	13
   540  08DC  340A               	retlw	10
   541  08DD  3400               	retlw	0
   542  08DE                     STR_9:
   543  08DE  3433               	retlw	51	;'3'
   544  08DF  3438               	retlw	56	;'8'
   545  08E0  3434               	retlw	52	;'4'
   546  08E1  3430               	retlw	48	;'0'
   547  08E2  3430               	retlw	48	;'0'
   548  08E3  340D               	retlw	13
   549  08E4  340A               	retlw	10
   550  08E5  3400               	retlw	0
   551  08E6                     STR_27:
   552  08E6  3452               	retlw	82	;'R'
   553  08E7  3449               	retlw	73	;'I'
   554  08E8  3447               	retlw	71	;'G'
   555  08E9  3448               	retlw	72	;'H'
   556  08EA  3454               	retlw	84	;'T'
   557  08EB  3420               	retlw	32	;' '
   558  08EC  3428               	retlw	40	;'('
   559  08ED  3400               	retlw	0
   560  08EE                     STR_6:
   561  08EE  3432               	retlw	50	;'2'
   562  08EF  3434               	retlw	52	;'4'
   563  08F0  3430               	retlw	48	;'0'
   564  08F1  3430               	retlw	48	;'0'
   565  08F2  340D               	retlw	13
   566  08F3  340A               	retlw	10
   567  08F4  3400               	retlw	0
   568  08F5                     STR_11:
   569  08F5  3439               	retlw	57	;'9'
   570  08F6  3436               	retlw	54	;'6'
   571  08F7  3430               	retlw	48	;'0'
   572  08F8  3430               	retlw	48	;'0'
   573  08F9  340D               	retlw	13
   574  08FA  340A               	retlw	10
   575  08FB  3400               	retlw	0
   576  08FC                     STR_7:
   577  08FC  3434               	retlw	52	;'4'
   578  08FD  3438               	retlw	56	;'8'
   579  08FE  3430               	retlw	48	;'0'
   580  08FF  3430               	retlw	48	;'0'
   581  0900  340D               	retlw	13
   582  0901  340A               	retlw	10
   583  0902  3400               	retlw	0
   584  0903                     STR_29:
   585  0903  3444               	retlw	68	;'D'
   586  0904  344F               	retlw	79	;'O'
   587  0905  3457               	retlw	87	;'W'
   588  0906  344E               	retlw	78	;'N'
   589  0907  3420               	retlw	32	;' '
   590  0908  3428               	retlw	40	;'('
   591  0909  3400               	retlw	0
   592  090A                     STR_14:
   593  090A  3453               	retlw	83	;'S'
   594  090B  3454               	retlw	84	;'T'
   595  090C  344F               	retlw	79	;'O'
   596  090D  3450               	retlw	80	;'P'
   597  090E  3420               	retlw	32	;' '
   598  090F  3428               	retlw	40	;'('
   599  0910  3400               	retlw	0
   600  0911                     STR_25:
   601  0911  344C               	retlw	76	;'L'
   602  0912  3445               	retlw	69	;'E'
   603  0913  3446               	retlw	70	;'F'
   604  0914  3454               	retlw	84	;'T'
   605  0915  3420               	retlw	32	;' '
   606  0916  3428               	retlw	40	;'('
   607  0917  3400               	retlw	0
   608  0918                     STR_31:
   609  0918  3455               	retlw	85	;'U'
   610  0919  3450               	retlw	80	;'P'
   611  091A  3420               	retlw	32	;' '
   612  091B  3428               	retlw	40	;'('
   613  091C  3400               	retlw	0
   614  091D                     STR_15:
   615  091D  3429               	retlw	41	;')'
   616  091E  340D               	retlw	13
   617  091F  340A               	retlw	10
   618  0920  3400               	retlw	0
   619  0921                     STR_33:
   620  0921  342C               	retlw	44	;','
   621  0922  3420               	retlw	32	;' '
   622  0923  3400               	retlw	0
   623  091D                     
   624                           	psect	cinit
   625  0013                     start_initialization:	
   626                           ; #config settings
   627                           
   628  0013                     __initialization:
   629                           
   630                           ; Clear objects allocated to COMMON
   631  0013  01FD               	clrf	__pbssCOMMON& (0+127)
   632                           
   633                           ; Clear objects allocated to BANK0
   634  0014  1383               	bcf	3,7	;select IRP bank0
   635  0015  3045               	movlw	low __pbssBANK0
   636  0016  0084               	movwf	4
   637  0017  305F               	movlw	low (__pbssBANK0+26)
   638  0018  158A  255D  118A   	fcall	clear_ram0
   639                           
   640                           ; Clear objects allocated to BANK1
   641  001B  30A0               	movlw	low __pbssBANK1
   642  001C  0084               	movwf	4
   643  001D  30DE               	movlw	low (__pbssBANK1+62)
   644  001E  158A  255D         	fcall	clear_ram0
   645  0020                     end_of_initialization:	
   646                           ;End of C runtime variable initialization code
   647                           
   648  0020                     __end_of__initialization:
   649  0020  0183               	clrf	3
   650  0021  118A  2823         	ljmp	_main	;jump to C main() function
   651                           
   652                           	psect	bssCOMMON
   653  007D                     __pbssCOMMON:
   654  007D                     _buffer_index2:
   655  007D                     	ds	1
   656                           
   657                           	psect	bssBANK0
   658  0045                     __pbssBANK0:
   659  0045                     _pan_goto:
   660  0045                     	ds	2
   661  0047                     _tilt_counter:
   662  0047                     	ds	2
   663  0049                     _pan_counter:
   664  0049                     	ds	2
   665  004B                     _is_init:
   666  004B                     	ds	1
   667  004C                     _preset_id:
   668  004C                     	ds	1
   669  004D                     _P_dat2:
   670  004D                     	ds	1
   671  004E                     _P_dat1:
   672  004E                     	ds	1
   673  004F                     _P_cmd2:
   674  004F                     	ds	1
   675  0050                     _P_cmd1:
   676  0050                     	ds	1
   677  0051                     _frame_index:
   678  0051                     	ds	1
   679  0052                     _tilt_step_phase:
   680  0052                     	ds	1
   681  0053                     _pan_step_phase:
   682  0053                     	ds	1
   683  0054                     _tilt_speed:
   684  0054                     	ds	1
   685  0055                     _tilt_enabled:
   686  0055                     	ds	1
   687  0056                     _pan_speed_old:
   688  0056                     	ds	1
   689  0057                     _pan_speed:
   690  0057                     	ds	1
   691  0058                     _pan_direction:
   692  0058                     	ds	1
   693  0059                     _pan_enabled:
   694  0059                     	ds	1
   695  005A                     _preset_enabled_old:
   696  005A                     	ds	1
   697  005B                     _preset_enabled:
   698  005B                     	ds	1
   699  005C                     _timeout_receiv:
   700  005C                     	ds	1
   701  005D                     _buffer_index1:
   702  005D                     	ds	1
   703  005E                     _data_receiv:
   704  005E                     	ds	1
   705                           
   706                           	psect	bssBANK1
   707  00A0                     __pbssBANK1:
   708  00A0                     _frame_data:
   709  00A0                     	ds	7
   710  00A7                     _buffer_data4:
   711  00A7                     	ds	7
   712  00AE                     _buffer_data3:
   713  00AE                     	ds	7
   714  00B5                     _buffer_data2:
   715  00B5                     	ds	7
   716  00BC                     _buffer_data1:
   717  00BC                     	ds	7
   718  00C3                     _buffer_data0:
   719  00C3                     	ds	7
   720  00CA                     _buffer_ready:
   721  00CA                     	ds	5
   722  00CF                     _tilt_goto:
   723  00CF                     	ds	2
   724  00D1                     _is_reboot:
   725  00D1                     	ds	1
   726  00D2                     _alarms_data:
   727  00D2                     	ds	1
   728  00D3                     _P_chksum:
   729  00D3                     	ds	1
   730  00D4                     _P_addr:
   731  00D4                     	ds	1
   732  00D5                     _response_type:
   733  00D5                     	ds	1
   734  00D6                     _header_pos:
   735  00D6                     	ds	1
   736  00D7                     _timer1_tilt_ref:
   737  00D7                     	ds	1
   738  00D8                     _timer1_pan_ref:
   739  00D8                     	ds	1
   740  00D9                     _timer1_tilt:
   741  00D9                     	ds	1
   742  00DA                     _timer1_pan:
   743  00DA                     	ds	1
   744  00DB                     _tilt_speed_old:
   745  00DB                     	ds	1
   746  00DC                     _tilt_direction:
   747  00DC                     	ds	1
   748  00DD                     _header_cnt:
   749  00DD                     	ds	1
   750                           
   751                           	psect	clrtext
   752  0D5D                     clear_ram0:	
   753                           ;	Called with FSR containing the base address, and
   754                           ;	W with the last address+1
   755                           
   756  0D5D  0064               	clrwdt	;clear the watchdog before getting into this loop
   757  0D5E                     clrloop0:
   758  0D5E  0180               	clrf	0	;clear RAM location pointed to by FSR
   759  0D5F  0A84               	incf	4,f	;increment pointer
   760  0D60  0604               	xorwf	4,w	;XOR with final address
   761  0D61  1903               	btfsc	3,2	;have we reached the end yet?
   762  0D62  3400               	retlw	0	;all done for this memory range, return
   763  0D63  0604               	xorwf	4,w	;XOR again to restore value
   764  0D64  2D5E               	goto	clrloop0	;do the next byte
   765                           
   766                           	psect	cstackBANK1
   767  00DE                     __pcstackBANK1:
   768  00DE                     main@chksum_calc:
   769                           
   770                           ; 1 bytes @ 0x0
   771  00DE                     	ds	1
   772  00DF                     main@preset_id_1:
   773                           
   774                           ; 1 bytes @ 0x1
   775  00DF                     	ds	1
   776  00E0                     main@preset_id_1_415:
   777                           
   778                           ; 1 bytes @ 0x2
   779  00E0                     	ds	1
   780  00E1                     main@preset_id_1_422:
   781                           
   782                           ; 1 bytes @ 0x3
   783  00E1                     	ds	1
   784  00E2                     main@preset_id_10:
   785                           
   786                           ; 1 bytes @ 0x4
   787  00E2                     	ds	1
   788  00E3                     main@preset_id_10_414:
   789                           
   790                           ; 1 bytes @ 0x5
   791  00E3                     	ds	1
   792  00E4                     main@preset_id_10_421:
   793                           
   794                           ; 1 bytes @ 0x6
   795  00E4                     	ds	1
   796  00E5                     main@pan_tmp:
   797                           
   798                           ; 2 bytes @ 0x7
   799  00E5                     	ds	2
   800  00E7                     main@tilt_tmp:
   801                           
   802                           ; 2 bytes @ 0x9
   803  00E7                     	ds	2
   804  00E9                     main@pan_tmp_419:
   805                           
   806                           ; 2 bytes @ 0xB
   807  00E9                     	ds	2
   808  00EB                     main@tilt_tmp_420:
   809                           
   810                           ; 2 bytes @ 0xD
   811  00EB                     	ds	2
   812  00ED                     main@m:
   813                           
   814                           ; 1 bytes @ 0xF
   815  00ED                     	ds	1
   816  00EE                     main@i:
   817                           
   818                           ; 1 bytes @ 0x10
   819  00EE                     	ds	1
   820                           
   821                           	psect	cstackCOMMON
   822  0070                     __pcstackCOMMON:
   823  0070                     ?_SPEED_calc:
   824  0070                     ?_UC_Init:	
   825                           ; 1 bytes @ 0x0
   826                           
   827  0070                     ?_UART_Init:	
   828                           ; 1 bytes @ 0x0
   829                           
   830  0070                     ?_TIMER1_Init:	
   831                           ; 1 bytes @ 0x0
   832                           
   833  0070                     ?_MOTOR_Init:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0070                     ?_BAUDS_set:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0070                     ?_UART_Write:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0070                     ?_eeprom_read:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0070                     ?_myISR:	
   846                           ; 1 bytes @ 0x0
   847                           
   848  0070                     ?_main:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0070                     ?_BAUDS_get:	
   852                           ; 1 bytes @ 0x0
   853                           
   854  0070                     ?___awdiv:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0070                     ___awdiv@divisor:	
   858                           ; 2 bytes @ 0x0
   859                           
   860                           
   861                           ; 2 bytes @ 0x0
   862  0070                     	ds	2
   863  0072                     ___awdiv@dividend:
   864                           
   865                           ; 2 bytes @ 0x2
   866  0072                     	ds	2
   867  0074                     ??___awdiv:
   868                           
   869                           ; 1 bytes @ 0x4
   870  0074                     	ds	1
   871  0075                     ___awdiv@counter:
   872                           
   873                           ; 1 bytes @ 0x5
   874  0075                     	ds	1
   875  0076                     ___awdiv@sign:
   876                           
   877                           ; 1 bytes @ 0x6
   878  0076                     	ds	1
   879  0077                     ___awdiv@quotient:
   880                           
   881                           ; 2 bytes @ 0x7
   882  0077                     	ds	2
   883  0079                     ??_SPEED_calc:
   884                           
   885                           ; 1 bytes @ 0x9
   886  0079                     	ds	2
   887  007B                     SPEED_calc@speed:
   888                           
   889                           ; 1 bytes @ 0xB
   890  007B                     	ds	1
   891  007C                     SPEED_calc@sp_calc:
   892                           
   893                           ; 1 bytes @ 0xC
   894  007C                     	ds	1
   895                           
   896                           	psect	cstackBANK0
   897  0020                     __pcstackBANK0:
   898  0020                     ??_myISR:
   899                           
   900                           ; 1 bytes @ 0x0
   901  0020                     	ds	5
   902  0025                     ??_UC_Init:
   903  0025                     ??_TIMER1_Init:	
   904                           ; 1 bytes @ 0x5
   905                           
   906  0025                     ?_delay_wdt:	
   907                           ; 1 bytes @ 0x5
   908                           
   909  0025                     ??_UART_Write:	
   910                           ; 1 bytes @ 0x5
   911                           
   912  0025                     ??_eeprom_read:	
   913                           ; 1 bytes @ 0x5
   914                           
   915  0025                     ?_eeprom_write:	
   916                           ; 1 bytes @ 0x5
   917                           
   918  0025                     ?___bmul:	
   919                           ; 1 bytes @ 0x5
   920                           
   921  0025                     ?___lbdiv:	
   922                           ; 1 bytes @ 0x5
   923                           
   924  0025                     ?___wmul:	
   925                           ; 1 bytes @ 0x5
   926                           
   927  0025                     ?___lwdiv:	
   928                           ; 2 bytes @ 0x5
   929                           
   930  0025                     eeprom_write@value:	
   931                           ; 2 bytes @ 0x5
   932                           
   933  0025                     ___bmul@multiplicand:	
   934                           ; 1 bytes @ 0x5
   935                           
   936  0025                     ___lbdiv@divisor:	
   937                           ; 1 bytes @ 0x5
   938                           
   939  0025                     delay_wdt@_ms:	
   940                           ; 1 bytes @ 0x5
   941                           
   942  0025                     ___wmul@multiplier:	
   943                           ; 2 bytes @ 0x5
   944                           
   945  0025                     ___lwdiv@divisor:	
   946                           ; 2 bytes @ 0x5
   947                           
   948                           
   949                           ; 2 bytes @ 0x5
   950  0025                     	ds	1
   951  0026                     ??_eeprom_write:
   952  0026                     ??___bmul:	
   953                           ; 1 bytes @ 0x6
   954                           
   955  0026                     ??___lbdiv:	
   956                           ; 1 bytes @ 0x6
   957                           
   958  0026                     eeprom_read@addr:	
   959                           ; 1 bytes @ 0x6
   960                           
   961                           
   962                           ; 1 bytes @ 0x6
   963  0026                     	ds	1
   964  0027                     ??_UART_Init:
   965  0027                     ??_delay_wdt:	
   966                           ; 1 bytes @ 0x7
   967                           
   968  0027                     ?_PRESET_load:	
   969                           ; 1 bytes @ 0x7
   970                           
   971  0027                     ??_BAUDS_get:	
   972                           ; 1 bytes @ 0x7
   973                           
   974  0027                     PRESET_load@pan:	
   975                           ; 1 bytes @ 0x7
   976                           
   977  0027                     eeprom_write@addr:	
   978                           ; 1 bytes @ 0x7
   979                           
   980  0027                     ___bmul@product:	
   981                           ; 1 bytes @ 0x7
   982                           
   983  0027                     ___lbdiv@dividend:	
   984                           ; 1 bytes @ 0x7
   985                           
   986  0027                     ___wmul@multiplicand:	
   987                           ; 1 bytes @ 0x7
   988                           
   989  0027                     ___lwdiv@dividend:	
   990                           ; 2 bytes @ 0x7
   991                           
   992                           
   993                           ; 2 bytes @ 0x7
   994  0027                     	ds	1
   995  0028                     ??_MOTOR_Init:
   996  0028                     ?_eeprom_update:	
   997                           ; 1 bytes @ 0x8
   998                           
   999  0028                     PRESET_load@tilt:	
  1000                           ; 1 bytes @ 0x8
  1001                           
  1002  0028                     ___bmul@multiplier:	
  1003                           ; 1 bytes @ 0x8
  1004                           
  1005  0028                     ___lbdiv@counter:	
  1006                           ; 1 bytes @ 0x8
  1007                           
  1008  0028                     eeprom_update@value:	
  1009                           ; 1 bytes @ 0x8
  1010                           
  1011                           
  1012                           ; 2 bytes @ 0x8
  1013  0028                     	ds	1
  1014  0029                     ??_PRESET_load:
  1015  0029                     ??___wmul:	
  1016                           ; 1 bytes @ 0x9
  1017                           
  1018  0029                     ??___lwdiv:	
  1019                           ; 1 bytes @ 0x9
  1020                           
  1021  0029                     UART_Init@bauds_index:	
  1022                           ; 1 bytes @ 0x9
  1023                           
  1024  0029                     UART_Write@data:	
  1025                           ; 1 bytes @ 0x9
  1026                           
  1027  0029                     ___lbdiv@quotient:	
  1028                           ; 1 bytes @ 0x9
  1029                           
  1030  0029                     ___wmul@product:	
  1031                           ; 1 bytes @ 0x9
  1032                           
  1033                           
  1034                           ; 2 bytes @ 0x9
  1035  0029                     	ds	1
  1036  002A                     ??_eeprom_update:
  1037  002A                     ___lwdiv@counter:	
  1038                           ; 1 bytes @ 0xA
  1039                           
  1040  002A                     UART_Write@timeout:	
  1041                           ; 1 bytes @ 0xA
  1042                           
  1043                           
  1044                           ; 4 bytes @ 0xA
  1045  002A                     	ds	1
  1046  002B                     PRESET_load@id:
  1047  002B                     ___lwdiv@quotient:	
  1048                           ; 1 bytes @ 0xB
  1049                           
  1050                           
  1051                           ; 2 bytes @ 0xB
  1052  002B                     	ds	1
  1053  002C                     eeprom_update@addr:
  1054  002C                     PRESET_load@_addr:	
  1055                           ; 1 bytes @ 0xC
  1056                           
  1057                           
  1058                           ; 1 bytes @ 0xC
  1059  002C                     	ds	1
  1060  002D                     ??_BAUDS_set:
  1061  002D                     ?_PRESET_save:	
  1062                           ; 1 bytes @ 0xD
  1063                           
  1064  002D                     PRESET_save@pan:	
  1065                           ; 1 bytes @ 0xD
  1066                           
  1067                           
  1068                           ; 2 bytes @ 0xD
  1069  002D                     	ds	1
  1070  002E                     ?_UART_Write_Text:
  1071  002E                     UART_Write_Text@text:	
  1072                           ; 1 bytes @ 0xE
  1073                           
  1074                           
  1075                           ; 2 bytes @ 0xE
  1076  002E                     	ds	1
  1077  002F                     BAUDS_set@index:
  1078  002F                     PRESET_save@tilt:	
  1079                           ; 1 bytes @ 0xF
  1080                           
  1081                           
  1082                           ; 2 bytes @ 0xF
  1083  002F                     	ds	1
  1084  0030                     ??_UART_Write_Text:
  1085                           
  1086                           ; 1 bytes @ 0x10
  1087  0030                     	ds	1
  1088  0031                     ??_PRESET_save:
  1089                           
  1090                           ; 1 bytes @ 0x11
  1091  0031                     	ds	2
  1092  0033                     PRESET_save@id:
  1093  0033                     UART_Write_Text@i:	
  1094                           ; 1 bytes @ 0x13
  1095                           
  1096                           
  1097                           ; 2 bytes @ 0x13
  1098  0033                     	ds	1
  1099  0034                     PRESET_save@_addr:
  1100                           
  1101                           ; 1 bytes @ 0x14
  1102  0034                     	ds	1
  1103  0035                     ?_print_cnt:
  1104  0035                     print_cnt@_pan:	
  1105                           ; 1 bytes @ 0x15
  1106                           
  1107                           
  1108                           ; 2 bytes @ 0x15
  1109  0035                     	ds	2
  1110  0037                     print_cnt@_tilt:
  1111                           
  1112                           ; 2 bytes @ 0x17
  1113  0037                     	ds	2
  1114  0039                     ??_print_cnt:
  1115  0039                     print_cnt@val1:	
  1116                           ; 1 bytes @ 0x19
  1117                           
  1118                           
  1119                           ; 2 bytes @ 0x19
  1120  0039                     	ds	2
  1121  003B                     print_cnt@val10:
  1122                           
  1123                           ; 2 bytes @ 0x1B
  1124  003B                     	ds	2
  1125  003D                     print_cnt@val100:
  1126                           
  1127                           ; 2 bytes @ 0x1D
  1128  003D                     	ds	2
  1129  003F                     print_cnt@val1000:
  1130                           
  1131                           ; 2 bytes @ 0x1F
  1132  003F                     	ds	2
  1133  0041                     print_cnt@val10000:
  1134                           
  1135                           ; 2 bytes @ 0x21
  1136  0041                     	ds	2
  1137  0043                     ??_main:
  1138                           
  1139                           ; 1 bytes @ 0x23
  1140  0043                     	ds	2
  1141                           
  1142                           	psect	maintext
  1143  0023                     __pmaintext:	
  1144 ;;
  1145 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1146 ;;
  1147 ;; *************** function _main *****************
  1148 ;; Defined at:
  1149 ;;		line 326 in file "main.c"
  1150 ;; Parameters:    Size  Location     Type
  1151 ;;		None
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;  tilt_tmp        2   13[BANK1 ] unsigned int 
  1154 ;;  pan_tmp         2   11[BANK1 ] unsigned int 
  1155 ;;  preset_id_10    1    6[BANK1 ] unsigned char 
  1156 ;;  preset_id_1     1    3[BANK1 ] unsigned char 
  1157 ;;  tilt_tmp        2    9[BANK1 ] unsigned int 
  1158 ;;  pan_tmp         2    7[BANK1 ] unsigned int 
  1159 ;;  preset_id_10    1    5[BANK1 ] unsigned char 
  1160 ;;  preset_id_1     1    2[BANK1 ] unsigned char 
  1161 ;;  preset_id_10    1    4[BANK1 ] unsigned char 
  1162 ;;  preset_id_1     1    1[BANK1 ] unsigned char 
  1163 ;;  m               1   15[BANK1 ] unsigned char 
  1164 ;;  chksum_calc     1    0[BANK1 ] unsigned char 
  1165 ;;  i               1   16[BANK1 ] unsigned char 
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  1    wreg      void 
  1168 ;; Registers used:
  1169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1170 ;; Tracked objects:
  1171 ;;		On entry : B00/0
  1172 ;;		On exit  : 300/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1175 ;;      Params:         0       0       0       0
  1176 ;;      Locals:         0       0      17       0
  1177 ;;      Temps:          0       2       0       0
  1178 ;;      Totals:         0       2      17       0
  1179 ;;Total ram usage:       19 bytes
  1180 ;; Hardware stack levels required when called: 6
  1181 ;; This function calls:
  1182 ;;		_BAUDS_set
  1183 ;;		_MOTOR_Init
  1184 ;;		_PRESET_load
  1185 ;;		_PRESET_save
  1186 ;;		_TIMER1_Init
  1187 ;;		_UART_Init
  1188 ;;		_UART_Write
  1189 ;;		_UART_Write_Text
  1190 ;;		_UC_Init
  1191 ;;		___bmul
  1192 ;;		___lbdiv
  1193 ;;		_delay_wdt
  1194 ;;		_print_cnt
  1195 ;; This function is called by:
  1196 ;;		Startup code after reset
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200  0023                     _main:	
  1201                           ;psect for function _main
  1202                           
  1203                           
  1204                           ;main.c: 327:     UC_Init();
  1205                           
  1206                           ;incstack = 0
  1207                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1208  0023  158A  259C  118A   	fcall	_UC_Init
  1209                           
  1210                           ;main.c: 329:     UART_Init();
  1211  0026  158A  2765  118A   	fcall	_UART_Init
  1212                           
  1213                           ;main.c: 331:     TIMER1_Init();
  1214  0029  158A  2565  118A   	fcall	_TIMER1_Init
  1215                           
  1216                           ;main.c: 333:     delay_wdt(500);
  1217  002C  30F4               	movlw	244
  1218  002D  1283               	bcf	3,5	;RP0=0, select bank0
  1219  002E  00A5               	movwf	delay_wdt@_ms
  1220  002F  3001               	movlw	1
  1221  0030  00A6               	movwf	delay_wdt@_ms+1
  1222  0031  158A  25CB  118A   	fcall	_delay_wdt
  1223                           
  1224                           ;main.c: 335:     UART_Write_Text("\r\n\r\nStart\r\n");
  1225  0034  30B5               	movlw	low (STR_1| (0+32768))
  1226  0035  00AE               	movwf	UART_Write_Text@text
  1227  0036  3088               	movlw	high (STR_1| (0+32768))
  1228  0037  00AF               	movwf	UART_Write_Text@text+1
  1229  0038  158A  26B0  118A   	fcall	_UART_Write_Text
  1230                           
  1231                           ;main.c: 337:     UART_Write_Text("Goto PAN and TILT Home\r\n");
  1232  003B  303A               	movlw	low (STR_2| (0+32768))
  1233  003C  00AE               	movwf	UART_Write_Text@text
  1234  003D  3088               	movlw	high (STR_2| (0+32768))
  1235  003E  00AF               	movwf	UART_Write_Text@text+1
  1236  003F  158A  26B0  118A   	fcall	_UART_Write_Text
  1237                           
  1238                           ;main.c: 339:     delay_wdt(50);
  1239  0042  3032               	movlw	50
  1240  0043  00A5               	movwf	delay_wdt@_ms
  1241  0044  3000               	movlw	0
  1242  0045  00A6               	movwf	delay_wdt@_ms+1
  1243  0046  158A  25CB  118A   	fcall	_delay_wdt
  1244                           
  1245                           ;main.c: 341:     MOTOR_Init();
  1246  0049  118A  2725  118A   	fcall	_MOTOR_Init
  1247                           
  1248                           ;main.c: 343:     UART_Write_Text("Waiting for commands\r\n");
  1249  004C  3053               	movlw	low (STR_3| (0+32768))
  1250  004D  00AE               	movwf	UART_Write_Text@text
  1251  004E  3088               	movlw	high (STR_3| (0+32768))
  1252  004F  2B30               	goto	L12
  1253  0050                     l3387:
  1254                           
  1255                           ;main.c: 349:             buffer_ready[frame_index] = 0;
  1256  0050  0851               	movf	_frame_index,w
  1257  0051  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  1258  0052  0084               	movwf	4
  1259  0053  0180               	clrf	0
  1260                           
  1261                           ;main.c: 351:             for (uint8_t i = 0; i < 7; i++) {
  1262  0054  1683               	bsf	3,5	;RP0=1, select bank1
  1263  0055  01EE               	clrf	main@i^(0+128)
  1264  0056                     l3395:
  1265                           
  1266                           ;main.c: 352:                 if (frame_index == 0) {
  1267  0056  1283               	bcf	3,5	;RP0=0, select bank0
  1268  0057  0851               	movf	_frame_index,w
  1269  0058  1D03               	btfss	3,2
  1270  0059  285E               	goto	l3399
  1271                           
  1272                           ;main.c: 353:                     frame_data[i] = buffer_data0[i];
  1273  005A  1683               	bsf	3,5	;RP0=1, select bank1
  1274  005B  086E               	movf	main@i^(0+128),w
  1275  005C  3EC3               	addlw	(low (_buffer_data0| 0))& (0+255)
  1276  005D  287C               	goto	L4
  1277  005E                     l3399:	
  1278                           ;main.c: 354:                 } else if (frame_index == 1) {
  1279                           
  1280  005E  0351               	decf	_frame_index,w
  1281  005F  1D03               	btfss	3,2
  1282  0060  2865               	goto	l3403
  1283                           
  1284                           ;main.c: 355:                     frame_data[i] = buffer_data1[i];
  1285  0061  1683               	bsf	3,5	;RP0=1, select bank1
  1286  0062  086E               	movf	main@i^(0+128),w
  1287  0063  3EBC               	addlw	(low (_buffer_data1| 0))& (0+255)
  1288  0064  287C               	goto	L4
  1289  0065                     l3403:	
  1290                           ;main.c: 356:                 } else if (frame_index == 2) {
  1291                           
  1292  0065  3002               	movlw	2
  1293  0066  0651               	xorwf	_frame_index,w
  1294  0067  1D03               	btfss	3,2
  1295  0068  286D               	goto	l3407
  1296                           
  1297                           ;main.c: 357:                     frame_data[i] = buffer_data2[i];
  1298  0069  1683               	bsf	3,5	;RP0=1, select bank1
  1299  006A  086E               	movf	main@i^(0+128),w
  1300  006B  3EB5               	addlw	(low (_buffer_data2| 0))& (0+255)
  1301  006C  287C               	goto	L4
  1302  006D                     l3407:	
  1303                           ;main.c: 358:                 } else if (frame_index == 3) {
  1304                           
  1305  006D  3003               	movlw	3
  1306  006E  0651               	xorwf	_frame_index,w
  1307  006F  1D03               	btfss	3,2
  1308  0070  2875               	goto	l3411
  1309                           
  1310                           ;main.c: 359:                     frame_data[i] = buffer_data3[i];
  1311  0071  1683               	bsf	3,5	;RP0=1, select bank1
  1312  0072  086E               	movf	main@i^(0+128),w
  1313  0073  3EAE               	addlw	(low (_buffer_data3| 0))& (0+255)
  1314  0074  287C               	goto	L4
  1315  0075                     l3411:	
  1316                           ;main.c: 360:                 } else if (frame_index == 4) {
  1317                           
  1318  0075  3004               	movlw	4
  1319  0076  0651               	xorwf	_frame_index,w
  1320  0077  1D03               	btfss	3,2
  1321  0078  2887               	goto	l3415
  1322                           
  1323                           ;main.c: 361:                     frame_data[i] = buffer_data4[i];
  1324  0079  1683               	bsf	3,5	;RP0=1, select bank1
  1325  007A  086E               	movf	main@i^(0+128),w
  1326  007B  3EA7               	addlw	(low (_buffer_data4| 0))& (0+255)
  1327  007C                     L4:
  1328  007C  0084               	movwf	4
  1329  007D  0800               	movf	0,w
  1330  007E  1283               	bcf	3,5	;RP0=0, select bank0
  1331  007F  00C3               	movwf	??_main
  1332  0080  1683               	bsf	3,5	;RP0=1, select bank1
  1333  0081  086E               	movf	main@i^(0+128),w
  1334  0082  3EA0               	addlw	(low (_frame_data| 0))& (0+255)
  1335  0083  0084               	movwf	4
  1336  0084  1283               	bcf	3,5	;RP0=0, select bank0
  1337  0085  0843               	movf	??_main,w
  1338  0086  0080               	movwf	0
  1339  0087                     l3415:
  1340                           
  1341                           ;main.c: 365:             }
  1342  0087  3001               	movlw	1
  1343  0088  00C3               	movwf	??_main
  1344  0089  0843               	movf	??_main,w
  1345  008A  1683               	bsf	3,5	;RP0=1, select bank1
  1346  008B  07EE               	addwf	main@i^(0+128),f
  1347  008C  3007               	movlw	7
  1348  008D  026E               	subwf	main@i^(0+128),w
  1349  008E  1C03               	skipc
  1350  008F  2856               	goto	l3395
  1351                           
  1352                           ;main.c: 367:             if (frame_data[0] == 0xFF) {
  1353  0090  0A20               	incf	_frame_data^(0+128),w
  1354  0091  1D03               	btfss	3,2
  1355  0092  2B34               	goto	l238
  1356                           
  1357                           ;main.c: 368:                 uint8_t chksum_calc = 0;
  1358  0093  01DE               	clrf	main@chksum_calc^(0+128)
  1359                           
  1360                           ;main.c: 370:                 for (uint8_t m = 1; m <= 5; m++) {
  1361  0094  01ED               	clrf	main@m^(0+128)
  1362  0095  0AED               	incf	main@m^(0+128),f
  1363  0096                     l3429:
  1364                           
  1365                           ;main.c: 371:                     chksum_calc += frame_data[m];
  1366  0096  086D               	movf	main@m^(0+128),w
  1367  0097  3EA0               	addlw	(low (_frame_data| 0))& (0+255)
  1368  0098  0084               	movwf	4
  1369  0099  0800               	movf	0,w
  1370  009A  1283               	bcf	3,5	;RP0=0, select bank0
  1371  009B  00C3               	movwf	??_main
  1372  009C  0843               	movf	??_main,w
  1373  009D  1683               	bsf	3,5	;RP0=1, select bank1
  1374  009E  07DE               	addwf	main@chksum_calc^(0+128),f
  1375                           
  1376                           ;main.c: 372:                 }
  1377  009F  3001               	movlw	1
  1378  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  1379  00A1  00C3               	movwf	??_main
  1380  00A2  0843               	movf	??_main,w
  1381  00A3  1683               	bsf	3,5	;RP0=1, select bank1
  1382  00A4  07ED               	addwf	main@m^(0+128),f
  1383  00A5  3006               	movlw	6
  1384  00A6  026D               	subwf	main@m^(0+128),w
  1385  00A7  1C03               	skipc
  1386  00A8  2896               	goto	l3429
  1387                           
  1388                           ;main.c: 374:                 if (chksum_calc == frame_data[6]) {
  1389  00A9  0826               	movf	(_frame_data^(0+128)+6),w
  1390  00AA  065E               	xorwf	main@chksum_calc^(0+128),w
  1391  00AB  1D03               	skipz
  1392  00AC  2B34               	goto	l238
  1393                           
  1394                           ;main.c: 376:                     P_addr = frame_data[1];
  1395  00AD  0821               	movf	(_frame_data^(0+128)+1),w
  1396  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1397  00AF  00C3               	movwf	??_main
  1398  00B0  0843               	movf	??_main,w
  1399  00B1  1683               	bsf	3,5	;RP0=1, select bank1
  1400  00B2  00D4               	movwf	_P_addr^(0+128)
  1401                           
  1402                           ;main.c: 377:                     P_cmd1 = frame_data[2];
  1403  00B3  0822               	movf	(_frame_data^(0+128)+2),w
  1404  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1405  00B5  00C3               	movwf	??_main
  1406  00B6  0843               	movf	??_main,w
  1407  00B7  00D0               	movwf	_P_cmd1
  1408                           
  1409                           ;main.c: 378:                     P_cmd2 = frame_data[3];
  1410  00B8  1683               	bsf	3,5	;RP0=1, select bank1
  1411  00B9  0823               	movf	(_frame_data^(0+128)+3),w
  1412  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1413  00BB  00C3               	movwf	??_main
  1414  00BC  0843               	movf	??_main,w
  1415  00BD  00CF               	movwf	_P_cmd2
  1416                           
  1417                           ;main.c: 379:                     P_dat1 = frame_data[4];
  1418  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  1419  00BF  0824               	movf	(_frame_data^(0+128)+4),w
  1420  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1421  00C1  00C3               	movwf	??_main
  1422  00C2  0843               	movf	??_main,w
  1423  00C3  00CE               	movwf	_P_dat1
  1424                           
  1425                           ;main.c: 380:                     P_dat2 = frame_data[5];
  1426  00C4  1683               	bsf	3,5	;RP0=1, select bank1
  1427  00C5  0825               	movf	(_frame_data^(0+128)+5),w
  1428  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  1429  00C7  00C3               	movwf	??_main
  1430  00C8  0843               	movf	??_main,w
  1431  00C9  00CD               	movwf	_P_dat2
  1432                           
  1433                           ;main.c: 381:                     P_chksum = frame_data[6];
  1434  00CA  1683               	bsf	3,5	;RP0=1, select bank1
  1435  00CB  0826               	movf	(_frame_data^(0+128)+6),w
  1436  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1437  00CD  00C3               	movwf	??_main
  1438  00CE  0843               	movf	??_main,w
  1439  00CF  1683               	bsf	3,5	;RP0=1, select bank1
  1440  00D0  00D3               	movwf	_P_chksum^(0+128)
  1441                           
  1442                           ;main.c: 383:                     response_type = 0x00;
  1443  00D1  01D5               	clrf	_response_type^(0+128)
  1444                           
  1445                           ;main.c: 386:                     if (P_addr == 0x01) {
  1446  00D2  0354               	decf	_P_addr^(0+128),w
  1447  00D3  1D03               	btfss	3,2
  1448  00D4  2B34               	goto	l238
  1449                           
  1450                           ;main.c: 387:                         if ((P_cmd1 == 0xF0) && (P_cmd2 == 0x83) && (P_dat
      +                          1 == 0x00) && (P_dat2 == 0x01)) {
  1451  00D5  30F0               	movlw	240
  1452  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  1453  00D7  0650               	xorwf	_P_cmd1,w
  1454  00D8  1D03               	btfss	3,2
  1455  00D9  28EC               	goto	l3453
  1456  00DA  3083               	movlw	131
  1457  00DB  064F               	xorwf	_P_cmd2,w
  1458  00DC  1D03               	btfss	3,2
  1459  00DD  28EC               	goto	l3453
  1460  00DE  084E               	movf	_P_dat1,w
  1461  00DF  1D03               	btfss	3,2
  1462  00E0  28EC               	goto	l3453
  1463  00E1  034D               	decf	_P_dat2,w
  1464  00E2  1D03               	btfss	3,2
  1465  00E3  28EC               	goto	l3453
  1466                           
  1467                           ;main.c: 388:                             UART_Write_Text("REBOOT\r\n");
  1468  00E4  3083               	movlw	low ((STR_13+7)| (0+32768))
  1469  00E5  00AE               	movwf	UART_Write_Text@text
  1470  00E6  3088               	movlw	high ((STR_13+7)| (0+32768))
  1471  00E7  00AF               	movwf	UART_Write_Text@text+1
  1472  00E8  158A  26B0  118A   	fcall	_UART_Write_Text
  1473  00EB                     l257:	
  1474                           ;main.c: 390:                             while (1) {
  1475                           
  1476                           
  1477                           ;main.c: 392:                             }
  1478  00EB  28EB               	goto	l257
  1479  00EC                     l3453:
  1480  00EC  0850               	movf	_P_cmd1,w
  1481  00ED  1D03               	btfss	3,2
  1482  00EE  293D               	goto	l3489
  1483  00EF  3067               	movlw	103
  1484  00F0  064F               	xorwf	_P_cmd2,w
  1485  00F1  1D03               	btfss	3,2
  1486  00F2  293D               	goto	l3489
  1487  00F3  084E               	movf	_P_dat1,w
  1488  00F4  1D03               	btfss	3,2
  1489  00F5  293D               	goto	l3489
  1490                           
  1491                           ;main.c: 395:                             if (is_reboot == 1) {
  1492  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  1493  00F7  0351               	decf	_is_reboot^(0+128),w
  1494  00F8  1D03               	btfss	3,2
  1495  00F9  2938               	goto	l3487
  1496                           
  1497                           ;main.c: 396:                                 BAUDS_set(P_dat2);
  1498  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1499  00FB  084D               	movf	_P_dat2,w
  1500  00FC  118A  27F3  118A   	fcall	_BAUDS_set
  1501                           
  1502                           ;main.c: 398:                                 UART_Write_Text("SET BAUD RATE");
  1503  00FF  309A               	movlw	low (STR_5| (0+32768))
  1504  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1505  0101  00AE               	movwf	UART_Write_Text@text
  1506  0102  3088               	movlw	high (STR_5| (0+32768))
  1507  0103  00AF               	movwf	UART_Write_Text@text+1
  1508  0104  158A  26B0  118A   	fcall	_UART_Write_Text
  1509                           
  1510                           ;main.c: 400:                                 if (P_dat2 == 0x00) {
  1511  0107  084D               	movf	_P_dat2,w
  1512  0108  1D03               	btfss	3,2
  1513  0109  290E               	goto	l3469
  1514                           
  1515                           ;main.c: 402:                                     UART_Write_Text("2400\r\n");
  1516  010A  30EE               	movlw	low (STR_6| (0+32768))
  1517  010B  00AE               	movwf	UART_Write_Text@text
  1518  010C  3088               	movlw	high (STR_6| (0+32768))
  1519  010D  2930               	goto	L5
  1520  010E                     l3469:	
  1521                           ;main.c: 403:                                 } else if (P_dat2 == 0x01) {
  1522                           
  1523  010E  034D               	decf	_P_dat2,w
  1524  010F  1D03               	btfss	3,2
  1525  0110  2915               	goto	l3473
  1526                           
  1527                           ;main.c: 405:                                     UART_Write_Text("4800\r\n");
  1528  0111  30FC               	movlw	low (STR_7| (0+32768))
  1529  0112  00AE               	movwf	UART_Write_Text@text
  1530  0113  3088               	movlw	high (STR_7| (0+32768))
  1531  0114  2930               	goto	L5
  1532  0115                     l3473:	
  1533                           ;main.c: 409:                                 } else if (P_dat2 == 0x03) {
  1534                           
  1535  0115  3003               	movlw	3
  1536  0116  064D               	xorwf	_P_dat2,w
  1537  0117  1D03               	btfss	3,2
  1538  0118  291D               	goto	l3477
  1539                           
  1540                           ;main.c: 411:                                     UART_Write_Text("19200\r\n");
  1541  0119  30D6               	movlw	low (STR_8| (0+32768))
  1542  011A  00AE               	movwf	UART_Write_Text@text
  1543  011B  3088               	movlw	high (STR_8| (0+32768))
  1544  011C  2930               	goto	L5
  1545  011D                     l3477:	
  1546                           ;main.c: 412:                                 } else if (P_dat2 == 0x04) {
  1547                           
  1548  011D  3004               	movlw	4
  1549  011E  064D               	xorwf	_P_dat2,w
  1550  011F  1D03               	btfss	3,2
  1551  0120  2925               	goto	l3481
  1552                           
  1553                           ;main.c: 414:                                     UART_Write_Text("38400\r\n");
  1554  0121  30DE               	movlw	low (STR_9| (0+32768))
  1555  0122  00AE               	movwf	UART_Write_Text@text
  1556  0123  3088               	movlw	high (STR_9| (0+32768))
  1557  0124  2930               	goto	L5
  1558  0125                     l3481:	
  1559                           ;main.c: 415:                                 } else if (P_dat2 == 0x05) {
  1560                           
  1561  0125  3005               	movlw	5
  1562  0126  064D               	xorwf	_P_dat2,w
  1563  0127  1D03               	btfss	3,2
  1564  0128  292D               	goto	l3485
  1565                           
  1566                           ;main.c: 417:                                     UART_Write_Text("115200\r\n");
  1567  0129  30CD               	movlw	low (STR_10| (0+32768))
  1568  012A  00AE               	movwf	UART_Write_Text@text
  1569  012B  3088               	movlw	high (STR_10| (0+32768))
  1570  012C  2930               	goto	L5
  1571  012D                     l3485:	
  1572                           ;main.c: 418:                                 } else {
  1573                           
  1574                           
  1575                           ;main.c: 420:                                     UART_Write_Text("9600\r\n");
  1576  012D  30F5               	movlw	low (STR_11| (0+32768))
  1577  012E  00AE               	movwf	UART_Write_Text@text
  1578  012F  3088               	movlw	high (STR_11| (0+32768))
  1579  0130                     L5:
  1580  0130  00AF               	movwf	UART_Write_Text@text+1
  1581  0131  158A  26B0  118A   	fcall	_UART_Write_Text
  1582                           
  1583                           ;main.c: 423:                                 UART_Write_Text("\r\nPLEASE REBOOT\r\n");
  1584  0134  306A               	movlw	low (STR_12| (0+32768))
  1585  0135  00AE               	movwf	UART_Write_Text@text
  1586  0136  3088               	movlw	high (STR_12| (0+32768))
  1587  0137  2B30               	goto	L12
  1588  0138                     l3487:	
  1589                           ;main.c: 424:                             } else {
  1590                           
  1591                           
  1592                           ;main.c: 425:                                 UART_Write_Text("\r\nNEED REBOOT\r\n");
  1593  0138  307C               	movlw	low (STR_13| (0+32768))
  1594  0139  1283               	bcf	3,5	;RP0=0, select bank0
  1595  013A  00AE               	movwf	UART_Write_Text@text
  1596  013B  3088               	movlw	high (STR_13| (0+32768))
  1597  013C  2B30               	goto	L12
  1598  013D                     l3489:
  1599  013D  0850               	movf	_P_cmd1,w
  1600  013E  1D03               	btfss	3,2
  1601  013F  2954               	goto	l3507
  1602  0140  084F               	movf	_P_cmd2,w
  1603  0141  1D03               	btfss	3,2
  1604  0142  2954               	goto	l3507
  1605  0143  084E               	movf	_P_dat1,w
  1606  0144  1D03               	btfss	3,2
  1607  0145  2954               	goto	l3507
  1608  0146  084D               	movf	_P_dat2,w
  1609  0147  1D03               	btfss	3,2
  1610  0148  2954               	goto	l3507
  1611                           
  1612                           ;main.c: 428:                             pan_enabled = 0;
  1613  0149  01D9               	clrf	_pan_enabled	;volatile
  1614                           
  1615                           ;main.c: 429:                             tilt_enabled = 0;
  1616  014A  01D5               	clrf	_tilt_enabled	;volatile
  1617                           
  1618                           ;main.c: 430:                             response_type = 0x01;
  1619  014B  1683               	bsf	3,5	;RP0=1, select bank1
  1620  014C  01D5               	clrf	_response_type^(0+128)
  1621  014D  0AD5               	incf	_response_type^(0+128),f
  1622                           
  1623                           ;main.c: 431:                             preset_enabled = 0;
  1624  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1625  014F  01DB               	clrf	_preset_enabled	;volatile
  1626                           
  1627                           ;main.c: 432:                             UART_Write_Text("STOP (");
  1628  0150  300A               	movlw	low (STR_14| (0+32768))
  1629  0151  00AE               	movwf	UART_Write_Text@text
  1630  0152  3089               	movlw	high (STR_14| (0+32768))
  1631  0153  2B1E               	goto	L18
  1632  0154                     l3507:	
  1633                           ;main.c: 436:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x03) &&
      +                           (P_dat1 == 0x00)) {
  1634                           
  1635                           ;main.c: 434:                             UART_Write_Text(")\r\n");
  1636                           
  1637                           ;main.c: 433:                             print_cnt(pan_counter, tilt_counter);
  1638                           
  1639  0154  0850               	movf	_P_cmd1,w
  1640  0155  1D03               	btfss	3,2
  1641  0156  29AF               	goto	l3539
  1642  0157  3003               	movlw	3
  1643  0158  064F               	xorwf	_P_cmd2,w
  1644  0159  1D03               	btfss	3,2
  1645  015A  29AF               	goto	l3539
  1646  015B  084E               	movf	_P_dat1,w
  1647  015C  1D03               	btfss	3,2
  1648  015D  29AF               	goto	l3539
  1649                           
  1650                           ;main.c: 437:                             preset_id = P_dat2;
  1651  015E  084D               	movf	_P_dat2,w
  1652  015F  00C3               	movwf	??_main
  1653  0160  0843               	movf	??_main,w
  1654  0161  00CC               	movwf	_preset_id
  1655                           
  1656                           ;main.c: 438:                             PRESET_save(preset_id, pan_counter, tilt_count
      +                          er);
  1657  0162  084A               	movf	_pan_counter+1,w	;volatile
  1658  0163  00AE               	movwf	PRESET_save@pan+1
  1659  0164  0849               	movf	_pan_counter,w	;volatile
  1660  0165  00AD               	movwf	PRESET_save@pan
  1661  0166  0848               	movf	_tilt_counter+1,w	;volatile
  1662  0167  00B0               	movwf	PRESET_save@tilt+1
  1663  0168  0847               	movf	_tilt_counter,w	;volatile
  1664  0169  00AF               	movwf	PRESET_save@tilt
  1665  016A  084C               	movf	_preset_id,w
  1666  016B  158A  2723  118A   	fcall	_PRESET_save
  1667                           
  1668                           ;main.c: 439:                             response_type = 0x01;
  1669  016E  1683               	bsf	3,5	;RP0=1, select bank1
  1670  016F  01D5               	clrf	_response_type^(0+128)
  1671  0170  0AD5               	incf	_response_type^(0+128),f
  1672                           
  1673                           ;main.c: 441:                             uint8_t preset_id_10 = preset_id / 10;
  1674  0171  300A               	movlw	10
  1675  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1676  0173  00C3               	movwf	??_main
  1677  0174  0843               	movf	??_main,w
  1678  0175  00A5               	movwf	___lbdiv@divisor
  1679  0176  084C               	movf	_preset_id,w
  1680  0177  158A  2605  118A   	fcall	___lbdiv
  1681  017A  00C4               	movwf	??_main+1
  1682  017B  0844               	movf	??_main+1,w
  1683  017C  1683               	bsf	3,5	;RP0=1, select bank1
  1684  017D  00E2               	movwf	main@preset_id_10^(0+128)
  1685                           
  1686                           ;main.c: 442:                             uint8_t preset_id_1 = preset_id - (preset_id_1
      +                          0 * 10);
  1687  017E  30F6               	movlw	246
  1688  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1689  0180  00C3               	movwf	??_main
  1690  0181  0843               	movf	??_main,w
  1691  0182  00A5               	movwf	___bmul@multiplicand
  1692  0183  1683               	bsf	3,5	;RP0=1, select bank1
  1693  0184  0862               	movf	main@preset_id_10^(0+128),w
  1694  0185  158A  2574  118A   	fcall	___bmul
  1695  0188  074C               	addwf	_preset_id,w
  1696  0189  00C4               	movwf	??_main+1
  1697  018A  0844               	movf	??_main+1,w
  1698  018B  1683               	bsf	3,5	;RP0=1, select bank1
  1699  018C  00DF               	movwf	main@preset_id_1^(0+128)
  1700                           
  1701                           ;main.c: 444:                             preset_id_10 += 48;
  1702  018D  3030               	movlw	48
  1703  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1704  018F  00C3               	movwf	??_main
  1705  0190  0843               	movf	??_main,w
  1706  0191  1683               	bsf	3,5	;RP0=1, select bank1
  1707  0192  07E2               	addwf	main@preset_id_10^(0+128),f
  1708                           
  1709                           ;main.c: 445:                             preset_id_1 += 48;
  1710  0193  3030               	movlw	48
  1711  0194  1283               	bcf	3,5	;RP0=0, select bank0
  1712  0195  00C3               	movwf	??_main
  1713  0196  0843               	movf	??_main,w
  1714  0197  1683               	bsf	3,5	;RP0=1, select bank1
  1715  0198  07DF               	addwf	main@preset_id_1^(0+128),f
  1716                           
  1717                           ;main.c: 447:                             UART_Write_Text("SET PRESET ");
  1718  0199  30C1               	movlw	low (STR_16| (0+32768))
  1719  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1720  019B  00AE               	movwf	UART_Write_Text@text
  1721  019C  3088               	movlw	high (STR_16| (0+32768))
  1722  019D  00AF               	movwf	UART_Write_Text@text+1
  1723  019E  158A  26B0  118A   	fcall	_UART_Write_Text
  1724                           
  1725                           ;main.c: 448:                             UART_Write(preset_id_10);
  1726  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  1727  01A2  0862               	movf	main@preset_id_10^(0+128),w
  1728  01A3  158A  267B  118A   	fcall	_UART_Write
  1729                           
  1730                           ;main.c: 449:                             UART_Write(preset_id_1);
  1731  01A6  1683               	bsf	3,5	;RP0=1, select bank1
  1732  01A7  085F               	movf	main@preset_id_1^(0+128),w
  1733  01A8  158A  267B  118A   	fcall	_UART_Write
  1734                           
  1735                           ;main.c: 450:                             UART_Write_Text(" (");
  1736  01AB  3007               	movlw	low ((STR_29+4)| (0+32768))
  1737  01AC  00AE               	movwf	UART_Write_Text@text
  1738  01AD  3089               	movlw	high ((STR_29+4)| (0+32768))
  1739  01AE  2B1E               	goto	L18
  1740  01AF                     l3539:	
  1741                           ;main.c: 453:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x05) &&
      +                           (P_dat1 == 0x00)) {
  1742                           
  1743                           ;main.c: 452:                             UART_Write_Text(")\r\n");
  1744                           
  1745                           ;main.c: 451:                             print_cnt(pan_counter, tilt_counter);
  1746                           
  1747  01AF  0850               	movf	_P_cmd1,w
  1748  01B0  1D03               	btfss	3,2
  1749  01B1  2A22               	goto	l3581
  1750  01B2  3005               	movlw	5
  1751  01B3  064F               	xorwf	_P_cmd2,w
  1752  01B4  1D03               	btfss	3,2
  1753  01B5  2A22               	goto	l3581
  1754  01B6  084E               	movf	_P_dat1,w
  1755  01B7  1D03               	btfss	3,2
  1756  01B8  2A22               	goto	l3581
  1757                           
  1758                           ;main.c: 454:                             preset_id = P_dat2;
  1759  01B9  084D               	movf	_P_dat2,w
  1760  01BA  00C3               	movwf	??_main
  1761  01BB  0843               	movf	??_main,w
  1762  01BC  00CC               	movwf	_preset_id
  1763                           
  1764                           ;main.c: 455:                             PRESET_save(preset_id, 0xFFFF, 0xFFFF);
  1765  01BD  30FF               	movlw	255
  1766  01BE  00AD               	movwf	PRESET_save@pan
  1767  01BF  30FF               	movlw	255
  1768  01C0  00AE               	movwf	PRESET_save@pan+1
  1769  01C1  30FF               	movlw	255
  1770  01C2  00AF               	movwf	PRESET_save@tilt
  1771  01C3  30FF               	movlw	255
  1772  01C4  00B0               	movwf	PRESET_save@tilt+1
  1773  01C5  084C               	movf	_preset_id,w
  1774  01C6  158A  2723  118A   	fcall	_PRESET_save
  1775                           
  1776                           ;main.c: 457:                             uint16_t pan_tmp = 0;
  1777  01C9  1683               	bsf	3,5	;RP0=1, select bank1
  1778  01CA  01E5               	clrf	main@pan_tmp^(0+128)
  1779  01CB  01E6               	clrf	(main@pan_tmp+1)^(0+128)
  1780                           
  1781                           ;main.c: 458:                             uint16_t tilt_tmp = 0;
  1782  01CC  01E7               	clrf	main@tilt_tmp^(0+128)
  1783  01CD  01E8               	clrf	(main@tilt_tmp+1)^(0+128)
  1784                           
  1785                           ;main.c: 459:                             PRESET_load(preset_id, &pan_tmp, &tilt_tmp);
  1786  01CE  30E5               	movlw	(low (main@pan_tmp| 0))& (0+255)
  1787  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  1788  01D0  00C3               	movwf	??_main
  1789  01D1  0843               	movf	??_main,w
  1790  01D2  00A7               	movwf	PRESET_load@pan
  1791  01D3  30E7               	movlw	(low (main@tilt_tmp| 0))& (0+255)
  1792  01D4  00C4               	movwf	??_main+1
  1793  01D5  0844               	movf	??_main+1,w
  1794  01D6  00A8               	movwf	PRESET_load@tilt
  1795  01D7  084C               	movf	_preset_id,w
  1796  01D8  158A  27A9  118A   	fcall	_PRESET_load
  1797                           
  1798                           ;main.c: 460:                             pan_goto = pan_tmp;
  1799  01DB  1683               	bsf	3,5	;RP0=1, select bank1
  1800  01DC  0866               	movf	(main@pan_tmp+1)^(0+128),w
  1801  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  1802  01DE  00C6               	movwf	_pan_goto+1	;volatile
  1803  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  1804  01E0  0865               	movf	main@pan_tmp^(0+128),w
  1805  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1806  01E2  00C5               	movwf	_pan_goto	;volatile
  1807                           
  1808                           ;main.c: 461:                             tilt_goto = tilt_tmp;
  1809  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  1810  01E4  0868               	movf	(main@tilt_tmp+1)^(0+128),w
  1811  01E5  00D0               	movwf	(_tilt_goto+1)^(0+128)	;volatile
  1812  01E6  0867               	movf	main@tilt_tmp^(0+128),w
  1813  01E7  00CF               	movwf	_tilt_goto^(0+128)	;volatile
  1814                           
  1815                           ;main.c: 463:                             response_type = 0x01;
  1816  01E8  01D5               	clrf	_response_type^(0+128)
  1817  01E9  0AD5               	incf	_response_type^(0+128),f
  1818                           
  1819                           ;main.c: 465:                             uint8_t preset_id_10 = preset_id / 10;
  1820  01EA  300A               	movlw	10
  1821  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  1822  01EC  00C3               	movwf	??_main
  1823  01ED  0843               	movf	??_main,w
  1824  01EE  00A5               	movwf	___lbdiv@divisor
  1825  01EF  084C               	movf	_preset_id,w
  1826  01F0  158A  2605  118A   	fcall	___lbdiv
  1827  01F3  00C4               	movwf	??_main+1
  1828  01F4  0844               	movf	??_main+1,w
  1829  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1830  01F6  00E3               	movwf	main@preset_id_10_414^(0+128)
  1831                           
  1832                           ;main.c: 466:                             uint8_t preset_id_1 = preset_id - (preset_id_1
      +                          0 * 10);
  1833  01F7  30F6               	movlw	246
  1834  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1835  01F9  00C3               	movwf	??_main
  1836  01FA  0843               	movf	??_main,w
  1837  01FB  00A5               	movwf	___bmul@multiplicand
  1838  01FC  1683               	bsf	3,5	;RP0=1, select bank1
  1839  01FD  0863               	movf	main@preset_id_10_414^(0+128),w
  1840  01FE  158A  2574  118A   	fcall	___bmul
  1841  0201  074C               	addwf	_preset_id,w
  1842  0202  00C4               	movwf	??_main+1
  1843  0203  0844               	movf	??_main+1,w
  1844  0204  1683               	bsf	3,5	;RP0=1, select bank1
  1845  0205  00E0               	movwf	main@preset_id_1_415^(0+128)
  1846                           
  1847                           ;main.c: 468:                             preset_id_10 += 48;
  1848  0206  3030               	movlw	48
  1849  0207  1283               	bcf	3,5	;RP0=0, select bank0
  1850  0208  00C3               	movwf	??_main
  1851  0209  0843               	movf	??_main,w
  1852  020A  1683               	bsf	3,5	;RP0=1, select bank1
  1853  020B  07E3               	addwf	main@preset_id_10_414^(0+128),f
  1854                           
  1855                           ;main.c: 469:                             preset_id_1 += 48;
  1856  020C  3030               	movlw	48
  1857  020D  1283               	bcf	3,5	;RP0=0, select bank0
  1858  020E  00C3               	movwf	??_main
  1859  020F  0843               	movf	??_main,w
  1860  0210  1683               	bsf	3,5	;RP0=1, select bank1
  1861  0211  07E0               	addwf	main@preset_id_1_415^(0+128),f
  1862                           
  1863                           ;main.c: 471:                             UART_Write_Text("CLEAR PRESET ");
  1864  0212  308C               	movlw	low (STR_19| (0+32768))
  1865  0213  1283               	bcf	3,5	;RP0=0, select bank0
  1866  0214  00AE               	movwf	UART_Write_Text@text
  1867  0215  3088               	movlw	high (STR_19| (0+32768))
  1868  0216  00AF               	movwf	UART_Write_Text@text+1
  1869  0217  158A  26B0  118A   	fcall	_UART_Write_Text
  1870                           
  1871                           ;main.c: 472:                             UART_Write(preset_id_10);
  1872  021A  1683               	bsf	3,5	;RP0=1, select bank1
  1873  021B  0863               	movf	main@preset_id_10_414^(0+128),w
  1874  021C  158A  267B  118A   	fcall	_UART_Write
  1875                           
  1876                           ;main.c: 473:                             UART_Write(preset_id_1);
  1877  021F  1683               	bsf	3,5	;RP0=1, select bank1
  1878  0220  0860               	movf	main@preset_id_1_415^(0+128),w
  1879  0221  2A96               	goto	L17
  1880  0222                     l3581:	
  1881                           ;main.c: 477:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x07) &&
      +                           (P_dat1 == 0x00)) {
  1882                           
  1883                           ;main.c: 476:                             UART_Write_Text(")\r\n");
  1884                           
  1885                           ;main.c: 475:                             print_cnt(pan_goto, tilt_goto);
  1886                           
  1887                           ;main.c: 474:                             UART_Write_Text(" (");
  1888                           
  1889  0222  0850               	movf	_P_cmd1,w
  1890  0223  1D03               	btfss	3,2
  1891  0224  2AAC               	goto	l281
  1892  0225  3007               	movlw	7
  1893  0226  064F               	xorwf	_P_cmd2,w
  1894  0227  1D03               	btfss	3,2
  1895  0228  2AAC               	goto	l281
  1896  0229  084E               	movf	_P_dat1,w
  1897  022A  1D03               	btfss	3,2
  1898  022B  2AAC               	goto	l281
  1899                           
  1900                           ;main.c: 478:                             preset_id = P_dat2;
  1901  022C  084D               	movf	_P_dat2,w
  1902  022D  00C3               	movwf	??_main
  1903  022E  0843               	movf	??_main,w
  1904  022F  00CC               	movwf	_preset_id
  1905                           
  1906                           ;main.c: 480:                             uint16_t pan_tmp = 0;
  1907  0230  1683               	bsf	3,5	;RP0=1, select bank1
  1908  0231  01E9               	clrf	main@pan_tmp_419^(0+128)
  1909  0232  01EA               	clrf	(main@pan_tmp_419+1)^(0+128)
  1910                           
  1911                           ;main.c: 481:                             uint16_t tilt_tmp = 0;
  1912  0233  01EB               	clrf	main@tilt_tmp_420^(0+128)
  1913  0234  01EC               	clrf	(main@tilt_tmp_420+1)^(0+128)
  1914                           
  1915                           ;main.c: 482:                             PRESET_load(preset_id, &pan_tmp, &tilt_tmp);
  1916  0235  30E9               	movlw	(low (main@pan_tmp_419| 0))& (0+255)
  1917  0236  1283               	bcf	3,5	;RP0=0, select bank0
  1918  0237  00C3               	movwf	??_main
  1919  0238  0843               	movf	??_main,w
  1920  0239  00A7               	movwf	PRESET_load@pan
  1921  023A  30EB               	movlw	(low (main@tilt_tmp_420| 0))& (0+255)
  1922  023B  00C4               	movwf	??_main+1
  1923  023C  0844               	movf	??_main+1,w
  1924  023D  00A8               	movwf	PRESET_load@tilt
  1925  023E  084C               	movf	_preset_id,w
  1926  023F  158A  27A9  118A   	fcall	_PRESET_load
  1927                           
  1928                           ;main.c: 483:                             pan_goto = pan_tmp;
  1929  0242  1683               	bsf	3,5	;RP0=1, select bank1
  1930  0243  086A               	movf	(main@pan_tmp_419+1)^(0+128),w
  1931  0244  1283               	bcf	3,5	;RP0=0, select bank0
  1932  0245  00C6               	movwf	_pan_goto+1	;volatile
  1933  0246  1683               	bsf	3,5	;RP0=1, select bank1
  1934  0247  0869               	movf	main@pan_tmp_419^(0+128),w
  1935  0248  1283               	bcf	3,5	;RP0=0, select bank0
  1936  0249  00C5               	movwf	_pan_goto	;volatile
  1937                           
  1938                           ;main.c: 484:                             tilt_goto = tilt_tmp;
  1939  024A  1683               	bsf	3,5	;RP0=1, select bank1
  1940  024B  086C               	movf	(main@tilt_tmp_420+1)^(0+128),w
  1941  024C  00D0               	movwf	(_tilt_goto+1)^(0+128)	;volatile
  1942  024D  086B               	movf	main@tilt_tmp_420^(0+128),w
  1943  024E  00CF               	movwf	_tilt_goto^(0+128)	;volatile
  1944                           
  1945                           ;main.c: 486:                             preset_enabled = 1;
  1946  024F  3001               	movlw	1
  1947  0250  1283               	bcf	3,5	;RP0=0, select bank0
  1948  0251  00C3               	movwf	??_main
  1949  0252  0843               	movf	??_main,w
  1950  0253  00DB               	movwf	_preset_enabled	;volatile
  1951                           
  1952                           ;main.c: 487:                             pan_speed = 0x32;
  1953  0254  3032               	movlw	50
  1954  0255  00C3               	movwf	??_main
  1955  0256  0843               	movf	??_main,w
  1956  0257  00D7               	movwf	_pan_speed	;volatile
  1957                           
  1958                           ;main.c: 488:                             tilt_speed = 0x32;
  1959  0258  3032               	movlw	50
  1960  0259  00C3               	movwf	??_main
  1961  025A  0843               	movf	??_main,w
  1962  025B  00D4               	movwf	_tilt_speed	;volatile
  1963                           
  1964                           ;main.c: 489:                             response_type = 0x01;
  1965  025C  1683               	bsf	3,5	;RP0=1, select bank1
  1966  025D  01D5               	clrf	_response_type^(0+128)
  1967  025E  0AD5               	incf	_response_type^(0+128),f
  1968                           
  1969                           ;main.c: 491:                             uint8_t preset_id_10 = preset_id / 10;
  1970  025F  300A               	movlw	10
  1971  0260  1283               	bcf	3,5	;RP0=0, select bank0
  1972  0261  00C3               	movwf	??_main
  1973  0262  0843               	movf	??_main,w
  1974  0263  00A5               	movwf	___lbdiv@divisor
  1975  0264  084C               	movf	_preset_id,w
  1976  0265  158A  2605  118A   	fcall	___lbdiv
  1977  0268  00C4               	movwf	??_main+1
  1978  0269  0844               	movf	??_main+1,w
  1979  026A  1683               	bsf	3,5	;RP0=1, select bank1
  1980  026B  00E4               	movwf	main@preset_id_10_421^(0+128)
  1981                           
  1982                           ;main.c: 492:                             uint8_t preset_id_1 = preset_id - (preset_id_1
      +                          0 * 10);
  1983  026C  30F6               	movlw	246
  1984  026D  1283               	bcf	3,5	;RP0=0, select bank0
  1985  026E  00C3               	movwf	??_main
  1986  026F  0843               	movf	??_main,w
  1987  0270  00A5               	movwf	___bmul@multiplicand
  1988  0271  1683               	bsf	3,5	;RP0=1, select bank1
  1989  0272  0864               	movf	main@preset_id_10_421^(0+128),w
  1990  0273  158A  2574  118A   	fcall	___bmul
  1991  0276  074C               	addwf	_preset_id,w
  1992  0277  00C4               	movwf	??_main+1
  1993  0278  0844               	movf	??_main+1,w
  1994  0279  1683               	bsf	3,5	;RP0=1, select bank1
  1995  027A  00E1               	movwf	main@preset_id_1_422^(0+128)
  1996                           
  1997                           ;main.c: 494:                             preset_id_10 += 48;
  1998  027B  3030               	movlw	48
  1999  027C  1283               	bcf	3,5	;RP0=0, select bank0
  2000  027D  00C3               	movwf	??_main
  2001  027E  0843               	movf	??_main,w
  2002  027F  1683               	bsf	3,5	;RP0=1, select bank1
  2003  0280  07E4               	addwf	main@preset_id_10_421^(0+128),f
  2004                           
  2005                           ;main.c: 495:                             preset_id_1 += 48;
  2006  0281  3030               	movlw	48
  2007  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2008  0283  00C3               	movwf	??_main
  2009  0284  0843               	movf	??_main,w
  2010  0285  1683               	bsf	3,5	;RP0=1, select bank1
  2011  0286  07E1               	addwf	main@preset_id_1_422^(0+128),f
  2012                           
  2013                           ;main.c: 497:                             UART_Write_Text("GOTO PRESET ");
  2014  0287  30A8               	movlw	low (STR_22| (0+32768))
  2015  0288  1283               	bcf	3,5	;RP0=0, select bank0
  2016  0289  00AE               	movwf	UART_Write_Text@text
  2017  028A  3088               	movlw	high (STR_22| (0+32768))
  2018  028B  00AF               	movwf	UART_Write_Text@text+1
  2019  028C  158A  26B0  118A   	fcall	_UART_Write_Text
  2020                           
  2021                           ;main.c: 498:                             UART_Write(preset_id_10);
  2022  028F  1683               	bsf	3,5	;RP0=1, select bank1
  2023  0290  0864               	movf	main@preset_id_10_421^(0+128),w
  2024  0291  158A  267B  118A   	fcall	_UART_Write
  2025                           
  2026                           ;main.c: 499:                             UART_Write(preset_id_1);
  2027  0294  1683               	bsf	3,5	;RP0=1, select bank1
  2028  0295  0861               	movf	main@preset_id_1_422^(0+128),w
  2029  0296                     L17:
  2030  0296  158A  267B  118A   	fcall	_UART_Write
  2031                           
  2032                           ;main.c: 500:                             UART_Write_Text(" (");
  2033  0299  3007               	movlw	low ((STR_29+4)| (0+32768))
  2034  029A  00AE               	movwf	UART_Write_Text@text
  2035  029B  3089               	movlw	high ((STR_29+4)| (0+32768))
  2036  029C  00AF               	movwf	UART_Write_Text@text+1
  2037  029D  158A  26B0  118A   	fcall	_UART_Write_Text
  2038                           
  2039                           ;main.c: 501:                             print_cnt(pan_goto, tilt_goto);
  2040  02A0  0846               	movf	_pan_goto+1,w	;volatile
  2041  02A1  00B6               	movwf	print_cnt@_pan+1
  2042  02A2  0845               	movf	_pan_goto,w	;volatile
  2043  02A3  00B5               	movwf	print_cnt@_pan
  2044  02A4  1683               	bsf	3,5	;RP0=1, select bank1
  2045  02A5  0850               	movf	(_tilt_goto+1)^(0+128),w	;volatile
  2046  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  2047  02A7  00B8               	movwf	print_cnt@_tilt+1
  2048  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  2049  02A9  084F               	movf	_tilt_goto^(0+128),w	;volatile
  2050  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2051  02AB  2B29               	goto	L16
  2052  02AC                     l281:	
  2053                           ;main.c: 503:                         } else {
  2054                           
  2055                           ;main.c: 502:                             UART_Write_Text(")\r\n");
  2056                           
  2057                           
  2058                           ;main.c: 504:                             if ((P_cmd2 & 0x04) == 0x04) {
  2059  02AC  1D4F               	btfss	_P_cmd2,2
  2060  02AD  2AC1               	goto	l283
  2061                           
  2062                           ;main.c: 505:                                 pan_speed = P_dat1;
  2063  02AE  084E               	movf	_P_dat1,w
  2064  02AF  00C3               	movwf	??_main
  2065  02B0  0843               	movf	??_main,w
  2066  02B1  00D7               	movwf	_pan_speed	;volatile
  2067                           
  2068                           ;main.c: 506:                                 pan_direction = 0;
  2069  02B2  01D8               	clrf	_pan_direction	;volatile
  2070                           
  2071                           ;main.c: 507:                                 pan_enabled = 1;
  2072  02B3  3001               	movlw	1
  2073  02B4  00C3               	movwf	??_main
  2074  02B5  0843               	movf	??_main,w
  2075  02B6  00D9               	movwf	_pan_enabled	;volatile
  2076                           
  2077                           ;main.c: 508:                                 preset_enabled = 0;
  2078  02B7  01DB               	clrf	_preset_enabled	;volatile
  2079                           
  2080                           ;main.c: 509:                                 response_type = 0x01;
  2081  02B8  1683               	bsf	3,5	;RP0=1, select bank1
  2082  02B9  01D5               	clrf	_response_type^(0+128)
  2083  02BA  0AD5               	incf	_response_type^(0+128),f
  2084                           
  2085                           ;main.c: 510:                                 is_reboot = 0;
  2086  02BB  01D1               	clrf	_is_reboot^(0+128)
  2087                           
  2088                           ;main.c: 511:                                 UART_Write_Text("LEFT (");
  2089  02BC  3011               	movlw	low (STR_25| (0+32768))
  2090  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  2091  02BE  00AE               	movwf	UART_Write_Text@text
  2092  02BF  3089               	movlw	high (STR_25| (0+32768))
  2093  02C0  2AD8               	goto	L11
  2094  02C1                     l283:	
  2095                           ;main.c: 514:                             } else if ((P_cmd2 & 0x02) == 0x02) {
  2096                           
  2097                           ;main.c: 513:                                 UART_Write_Text(")\r\n");
  2098                           
  2099                           ;main.c: 512:                                 print_cnt(pan_counter, tilt_counter);
  2100                           
  2101  02C1  1CCF               	btfss	_P_cmd2,1
  2102  02C2  2AEE               	goto	l3647
  2103                           
  2104                           ;main.c: 515:                                 pan_speed = P_dat1;
  2105  02C3  084E               	movf	_P_dat1,w
  2106  02C4  00C3               	movwf	??_main
  2107  02C5  0843               	movf	??_main,w
  2108  02C6  00D7               	movwf	_pan_speed	;volatile
  2109                           
  2110                           ;main.c: 516:                                 pan_direction = 1;
  2111  02C7  3001               	movlw	1
  2112  02C8  00C3               	movwf	??_main
  2113  02C9  0843               	movf	??_main,w
  2114  02CA  00D8               	movwf	_pan_direction	;volatile
  2115                           
  2116                           ;main.c: 517:                                 pan_enabled = 1;
  2117  02CB  3001               	movlw	1
  2118  02CC  00C3               	movwf	??_main
  2119  02CD  0843               	movf	??_main,w
  2120  02CE  00D9               	movwf	_pan_enabled	;volatile
  2121                           
  2122                           ;main.c: 518:                                 preset_enabled = 0;
  2123  02CF  01DB               	clrf	_preset_enabled	;volatile
  2124                           
  2125                           ;main.c: 519:                                 response_type = 0x01;
  2126  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  2127  02D1  01D5               	clrf	_response_type^(0+128)
  2128  02D2  0AD5               	incf	_response_type^(0+128),f
  2129                           
  2130                           ;main.c: 520:                                 is_reboot = 0;
  2131  02D3  01D1               	clrf	_is_reboot^(0+128)
  2132                           
  2133                           ;main.c: 521:                                 UART_Write_Text("RIGHT (");
  2134  02D4  30E6               	movlw	low (STR_27| (0+32768))
  2135  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  2136  02D6  00AE               	movwf	UART_Write_Text@text
  2137  02D7  3088               	movlw	high (STR_27| (0+32768))
  2138  02D8                     L11:
  2139  02D8  00AF               	movwf	UART_Write_Text@text+1
  2140  02D9  158A  26B0  118A   	fcall	_UART_Write_Text
  2141                           
  2142                           ;main.c: 522:                                 print_cnt(pan_counter, tilt_counter);
  2143  02DC  084A               	movf	_pan_counter+1,w	;volatile
  2144  02DD  00B6               	movwf	print_cnt@_pan+1
  2145  02DE  0849               	movf	_pan_counter,w	;volatile
  2146  02DF  00B5               	movwf	print_cnt@_pan
  2147  02E0  0848               	movf	_tilt_counter+1,w	;volatile
  2148  02E1  00B8               	movwf	print_cnt@_tilt+1
  2149  02E2  0847               	movf	_tilt_counter,w	;volatile
  2150  02E3  00B7               	movwf	print_cnt@_tilt
  2151  02E4  118A  255A  118A   	fcall	_print_cnt
  2152                           
  2153                           ;main.c: 523:                                 UART_Write_Text(")\r\n");
  2154  02E7  301D               	movlw	low (STR_15| (0+32768))
  2155  02E8  00AE               	movwf	UART_Write_Text@text
  2156  02E9  3089               	movlw	high (STR_15| (0+32768))
  2157  02EA  00AF               	movwf	UART_Write_Text@text+1
  2158  02EB  158A  26B0  118A   	fcall	_UART_Write_Text
  2159  02EE                     l3647:
  2160                           
  2161                           ;main.c: 526:                             if ((P_cmd2 & 0x10) == 0x10) {
  2162  02EE  1E4F               	btfss	_P_cmd2,4
  2163  02EF  2B05               	goto	l286
  2164                           
  2165                           ;main.c: 527:                                 tilt_speed = P_dat2;
  2166  02F0  084D               	movf	_P_dat2,w
  2167  02F1  00C3               	movwf	??_main
  2168  02F2  0843               	movf	??_main,w
  2169  02F3  00D4               	movwf	_tilt_speed	;volatile
  2170                           
  2171                           ;main.c: 528:                                 tilt_direction = 0;
  2172  02F4  1683               	bsf	3,5	;RP0=1, select bank1
  2173  02F5  01DC               	clrf	_tilt_direction^(0+128)	;volatile
  2174                           
  2175                           ;main.c: 529:                                 tilt_enabled = 1;
  2176  02F6  3001               	movlw	1
  2177  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  2178  02F8  00C3               	movwf	??_main
  2179  02F9  0843               	movf	??_main,w
  2180  02FA  00D5               	movwf	_tilt_enabled	;volatile
  2181                           
  2182                           ;main.c: 530:                                 preset_enabled = 0;
  2183  02FB  01DB               	clrf	_preset_enabled	;volatile
  2184                           
  2185                           ;main.c: 531:                                 response_type = 0x01;
  2186  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  2187  02FD  01D5               	clrf	_response_type^(0+128)
  2188  02FE  0AD5               	incf	_response_type^(0+128),f
  2189                           
  2190                           ;main.c: 532:                                 is_reboot = 0;
  2191  02FF  01D1               	clrf	_is_reboot^(0+128)
  2192                           
  2193                           ;main.c: 533:                                 UART_Write_Text("DOWN (");
  2194  0300  3003               	movlw	low (STR_29| (0+32768))
  2195  0301  1283               	bcf	3,5	;RP0=0, select bank0
  2196  0302  00AE               	movwf	UART_Write_Text@text
  2197  0303  3089               	movlw	high (STR_29| (0+32768))
  2198  0304  2B1E               	goto	L18
  2199  0305                     l286:	
  2200                           ;main.c: 536:                             } else if ((P_cmd2 & 0x08) == 0x08) {
  2201                           
  2202                           ;main.c: 535:                                 UART_Write_Text(")\r\n");
  2203                           
  2204                           ;main.c: 534:                                 print_cnt(pan_counter, tilt_counter);
  2205                           
  2206  0305  1DCF               	btfss	_P_cmd2,3
  2207  0306  2B34               	goto	l238
  2208                           
  2209                           ;main.c: 537:                                 tilt_speed = P_dat2;
  2210  0307  084D               	movf	_P_dat2,w
  2211  0308  00C3               	movwf	??_main
  2212  0309  0843               	movf	??_main,w
  2213  030A  00D4               	movwf	_tilt_speed	;volatile
  2214                           
  2215                           ;main.c: 538:                                 tilt_direction = 1;
  2216  030B  3001               	movlw	1
  2217  030C  00C3               	movwf	??_main
  2218  030D  0843               	movf	??_main,w
  2219  030E  1683               	bsf	3,5	;RP0=1, select bank1
  2220  030F  00DC               	movwf	_tilt_direction^(0+128)	;volatile
  2221                           
  2222                           ;main.c: 539:                                 tilt_enabled = 1;
  2223  0310  3001               	movlw	1
  2224  0311  1283               	bcf	3,5	;RP0=0, select bank0
  2225  0312  00C3               	movwf	??_main
  2226  0313  0843               	movf	??_main,w
  2227  0314  00D5               	movwf	_tilt_enabled	;volatile
  2228                           
  2229                           ;main.c: 540:                                 preset_enabled = 0;
  2230  0315  01DB               	clrf	_preset_enabled	;volatile
  2231                           
  2232                           ;main.c: 541:                                 response_type = 0x01;
  2233  0316  1683               	bsf	3,5	;RP0=1, select bank1
  2234  0317  01D5               	clrf	_response_type^(0+128)
  2235  0318  0AD5               	incf	_response_type^(0+128),f
  2236                           
  2237                           ;main.c: 542:                                 is_reboot = 0;
  2238  0319  01D1               	clrf	_is_reboot^(0+128)
  2239                           
  2240                           ;main.c: 543:                                 UART_Write_Text("UP (");
  2241  031A  3018               	movlw	low (STR_31| (0+32768))
  2242  031B  1283               	bcf	3,5	;RP0=0, select bank0
  2243  031C  00AE               	movwf	UART_Write_Text@text
  2244  031D  3089               	movlw	high (STR_31| (0+32768))
  2245  031E                     L18:
  2246  031E  00AF               	movwf	UART_Write_Text@text+1
  2247  031F  158A  26B0  118A   	fcall	_UART_Write_Text
  2248                           
  2249                           ;main.c: 544:                                 print_cnt(pan_counter, tilt_counter);
  2250  0322  084A               	movf	_pan_counter+1,w	;volatile
  2251  0323  00B6               	movwf	print_cnt@_pan+1
  2252  0324  0849               	movf	_pan_counter,w	;volatile
  2253  0325  00B5               	movwf	print_cnt@_pan
  2254  0326  0848               	movf	_tilt_counter+1,w	;volatile
  2255  0327  00B8               	movwf	print_cnt@_tilt+1
  2256  0328  0847               	movf	_tilt_counter,w	;volatile
  2257  0329                     L16:
  2258  0329  00B7               	movwf	print_cnt@_tilt
  2259  032A  118A  255A  118A   	fcall	_print_cnt
  2260                           
  2261                           ;main.c: 545:                                 UART_Write_Text(")\r\n");
  2262  032D  301D               	movlw	low (STR_15| (0+32768))
  2263  032E  00AE               	movwf	UART_Write_Text@text
  2264  032F  3089               	movlw	high (STR_15| (0+32768))
  2265  0330                     L12:
  2266  0330  00AF               	movwf	UART_Write_Text@text+1
  2267  0331  158A  26B0  118A   	fcall	_UART_Write_Text
  2268  0334                     l238:	
  2269                           ;main.c: 345:     while (1) {
  2270                           
  2271  0334  0064               	clrwdt	;# 
  2272                           
  2273                           ;main.c: 348:         if (buffer_ready[frame_index] == 1) {
  2274  0335  1283               	bcf	3,5	;RP0=0, select bank0
  2275  0336  1303               	bcf	3,6	;RP1=0, select bank0
  2276  0337  0851               	movf	_frame_index,w
  2277  0338  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  2278  0339  0084               	movwf	4
  2279  033A  1383               	bcf	3,7	;select IRP bank1
  2280  033B  0300               	decf	0,w
  2281  033C  1903               	btfsc	3,2
  2282  033D  2850               	goto	l3387
  2283                           
  2284                           ;main.c: 556:             if (frame_index < 4) {
  2285  033E  3004               	movlw	4
  2286  033F  0251               	subwf	_frame_index,w
  2287  0340  1803               	skipnc
  2288  0341  2B47               	goto	l3683
  2289                           
  2290                           ;main.c: 557:                 frame_index++;
  2291  0342  3001               	movlw	1
  2292  0343  00C3               	movwf	??_main
  2293  0344  0843               	movf	??_main,w
  2294  0345  07D1               	addwf	_frame_index,f
  2295                           
  2296                           ;main.c: 558:             } else {
  2297  0346  2B48               	goto	l3685
  2298  0347                     l3683:
  2299                           
  2300                           ;main.c: 560:                 frame_index = 0;
  2301  0347  01D1               	clrf	_frame_index
  2302  0348                     l3685:
  2303                           
  2304                           ;main.c: 563:             PORTBbits.RB3 = !PORTBbits.RB3;
  2305  0348  1003               	clrc
  2306  0349  1D86               	btfss	6,3	;volatile
  2307  034A  1403               	setc
  2308  034B  1C03               	btfss	3,0
  2309  034C  2B51               	goto	u4120
  2310  034D  1283               	bcf	3,5	;RP0=0, select bank0
  2311  034E  1303               	bcf	3,6	;RP1=0, select bank0
  2312  034F  1586               	bsf	6,3	;volatile
  2313  0350  2B34               	goto	l238
  2314  0351                     u4120:
  2315  0351  1283               	bcf	3,5	;RP0=0, select bank0
  2316  0352  1303               	bcf	3,6	;RP1=0, select bank0
  2317  0353  1186               	bcf	6,3	;volatile
  2318  0354  2B34               	goto	l238
  2319  0355                     __end_of_main:
  2320                           
  2321                           	psect	text1
  2322  055A                     __ptext1:	
  2323 ;; *************** function _print_cnt *****************
  2324 ;; Defined at:
  2325 ;;		line 843 in file "main.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;  _pan            2   21[BANK0 ] unsigned int 
  2328 ;;  _tilt           2   23[BANK0 ] unsigned int 
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;  val10000        2   33[BANK0 ] unsigned int 
  2331 ;;  val1000         2   31[BANK0 ] unsigned int 
  2332 ;;  val100          2   29[BANK0 ] unsigned int 
  2333 ;;  val10           2   27[BANK0 ] unsigned int 
  2334 ;;  val1            2   25[BANK0 ] unsigned int 
  2335 ;; Return value:  Size  Location     Type
  2336 ;;                  1    wreg      void 
  2337 ;; Registers used:
  2338 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2339 ;; Tracked objects:
  2340 ;;		On entry : 300/0
  2341 ;;		On exit  : 300/0
  2342 ;;		Unchanged: 0/0
  2343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2344 ;;      Params:         0       4       0       0
  2345 ;;      Locals:         0      10       0       0
  2346 ;;      Temps:          0       0       0       0
  2347 ;;      Totals:         0      14       0       0
  2348 ;;Total ram usage:       14 bytes
  2349 ;; Hardware stack levels used: 1
  2350 ;; Hardware stack levels required when called: 5
  2351 ;; This function calls:
  2352 ;;		_UART_Write
  2353 ;;		_UART_Write_Text
  2354 ;;		___lwdiv
  2355 ;;		___wmul
  2356 ;; This function is called by:
  2357 ;;		_main
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361  055A                     _print_cnt:	
  2362                           ;psect for function _print_cnt
  2363                           
  2364                           
  2365                           ;main.c: 845:     uint16_t val1000 = 0;
  2366                           
  2367                           ;incstack = 0
  2368                           ; Regs used in _print_cnt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2369  055A  01BF               	clrf	print_cnt@val1000
  2370  055B  01C0               	clrf	print_cnt@val1000+1
  2371                           
  2372                           ;main.c: 846:     uint16_t val100 = 0;
  2373  055C  01BD               	clrf	print_cnt@val100
  2374  055D  01BE               	clrf	print_cnt@val100+1
  2375                           
  2376                           ;main.c: 847:     uint16_t val10 = 0;
  2377  055E  01BB               	clrf	print_cnt@val10
  2378  055F  01BC               	clrf	print_cnt@val10+1
  2379                           
  2380                           ;main.c: 848:     uint16_t val1 = 0;
  2381  0560  01B9               	clrf	print_cnt@val1
  2382  0561  01BA               	clrf	print_cnt@val1+1
  2383                           
  2384                           ;main.c: 850:     val10000 = _pan / 10000;
  2385  0562  3010               	movlw	16
  2386  0563  00A5               	movwf	___lwdiv@divisor
  2387  0564  3027               	movlw	39
  2388  0565  00A6               	movwf	___lwdiv@divisor+1
  2389  0566  0836               	movf	print_cnt@_pan+1,w
  2390  0567  00A8               	movwf	___lwdiv@dividend+1
  2391  0568  0835               	movf	print_cnt@_pan,w
  2392  0569  00A7               	movwf	___lwdiv@dividend
  2393  056A  158A  26E7  118A   	fcall	___lwdiv
  2394  056D  0826               	movf	?___lwdiv+1,w
  2395  056E  00C2               	movwf	print_cnt@val10000+1
  2396  056F  0825               	movf	?___lwdiv,w
  2397  0570  00C1               	movwf	print_cnt@val10000
  2398                           
  2399                           ;main.c: 851:     _pan -= val10000 * 10000;
  2400  0571  0842               	movf	print_cnt@val10000+1,w
  2401  0572  00A6               	movwf	___wmul@multiplier+1
  2402  0573  0841               	movf	print_cnt@val10000,w
  2403  0574  00A5               	movwf	___wmul@multiplier
  2404  0575  3010               	movlw	16
  2405  0576  00A7               	movwf	___wmul@multiplicand
  2406  0577  3027               	movlw	39
  2407  0578  00A8               	movwf	___wmul@multiplicand+1
  2408  0579  158A  2626  118A   	fcall	___wmul
  2409  057C  0825               	movf	?___wmul,w
  2410  057D  02B5               	subwf	print_cnt@_pan,f
  2411  057E  0826               	movf	?___wmul+1,w
  2412  057F  1C03               	skipc
  2413  0580  03B6               	decf	print_cnt@_pan+1,f
  2414  0581  02B6               	subwf	print_cnt@_pan+1,f
  2415                           
  2416                           ;main.c: 853:     val1000 = _pan / 1000;
  2417  0582  30E8               	movlw	232
  2418  0583  00A5               	movwf	___lwdiv@divisor
  2419  0584  3003               	movlw	3
  2420  0585  00A6               	movwf	___lwdiv@divisor+1
  2421  0586  0836               	movf	print_cnt@_pan+1,w
  2422  0587  00A8               	movwf	___lwdiv@dividend+1
  2423  0588  0835               	movf	print_cnt@_pan,w
  2424  0589  00A7               	movwf	___lwdiv@dividend
  2425  058A  158A  26E7  118A   	fcall	___lwdiv
  2426  058D  0826               	movf	?___lwdiv+1,w
  2427  058E  00C0               	movwf	print_cnt@val1000+1
  2428  058F  0825               	movf	?___lwdiv,w
  2429  0590  00BF               	movwf	print_cnt@val1000
  2430                           
  2431                           ;main.c: 854:     _pan -= val1000 * 1000;
  2432  0591  0840               	movf	print_cnt@val1000+1,w
  2433  0592  00A6               	movwf	___wmul@multiplier+1
  2434  0593  083F               	movf	print_cnt@val1000,w
  2435  0594  00A5               	movwf	___wmul@multiplier
  2436  0595  30E8               	movlw	232
  2437  0596  00A7               	movwf	___wmul@multiplicand
  2438  0597  3003               	movlw	3
  2439  0598  00A8               	movwf	___wmul@multiplicand+1
  2440  0599  158A  2626  118A   	fcall	___wmul
  2441  059C  0825               	movf	?___wmul,w
  2442  059D  02B5               	subwf	print_cnt@_pan,f
  2443  059E  0826               	movf	?___wmul+1,w
  2444  059F  1C03               	skipc
  2445  05A0  03B6               	decf	print_cnt@_pan+1,f
  2446  05A1  02B6               	subwf	print_cnt@_pan+1,f
  2447                           
  2448                           ;main.c: 856:     val100 = _pan / 100;
  2449  05A2  3064               	movlw	100
  2450  05A3  00A5               	movwf	___lwdiv@divisor
  2451  05A4  3000               	movlw	0
  2452  05A5  00A6               	movwf	___lwdiv@divisor+1
  2453  05A6  0836               	movf	print_cnt@_pan+1,w
  2454  05A7  00A8               	movwf	___lwdiv@dividend+1
  2455  05A8  0835               	movf	print_cnt@_pan,w
  2456  05A9  00A7               	movwf	___lwdiv@dividend
  2457  05AA  158A  26E7  118A   	fcall	___lwdiv
  2458  05AD  0826               	movf	?___lwdiv+1,w
  2459  05AE  00BE               	movwf	print_cnt@val100+1
  2460  05AF  0825               	movf	?___lwdiv,w
  2461  05B0  00BD               	movwf	print_cnt@val100
  2462                           
  2463                           ;main.c: 857:     _pan -= val100 * 100;
  2464  05B1  083E               	movf	print_cnt@val100+1,w
  2465  05B2  00A6               	movwf	___wmul@multiplier+1
  2466  05B3  083D               	movf	print_cnt@val100,w
  2467  05B4  00A5               	movwf	___wmul@multiplier
  2468  05B5  3064               	movlw	100
  2469  05B6  00A7               	movwf	___wmul@multiplicand
  2470  05B7  3000               	movlw	0
  2471  05B8  00A8               	movwf	___wmul@multiplicand+1
  2472  05B9  158A  2626  118A   	fcall	___wmul
  2473  05BC  0825               	movf	?___wmul,w
  2474  05BD  02B5               	subwf	print_cnt@_pan,f
  2475  05BE  0826               	movf	?___wmul+1,w
  2476  05BF  1C03               	skipc
  2477  05C0  03B6               	decf	print_cnt@_pan+1,f
  2478  05C1  02B6               	subwf	print_cnt@_pan+1,f
  2479                           
  2480                           ;main.c: 859:     val10 = _pan / 10;
  2481  05C2  300A               	movlw	10
  2482  05C3  00A5               	movwf	___lwdiv@divisor
  2483  05C4  3000               	movlw	0
  2484  05C5  00A6               	movwf	___lwdiv@divisor+1
  2485  05C6  0836               	movf	print_cnt@_pan+1,w
  2486  05C7  00A8               	movwf	___lwdiv@dividend+1
  2487  05C8  0835               	movf	print_cnt@_pan,w
  2488  05C9  00A7               	movwf	___lwdiv@dividend
  2489  05CA  158A  26E7  118A   	fcall	___lwdiv
  2490  05CD  0826               	movf	?___lwdiv+1,w
  2491  05CE  00BC               	movwf	print_cnt@val10+1
  2492  05CF  0825               	movf	?___lwdiv,w
  2493  05D0  00BB               	movwf	print_cnt@val10
  2494                           
  2495                           ;main.c: 860:     _pan -= val10 * 10;
  2496  05D1  083C               	movf	print_cnt@val10+1,w
  2497  05D2  00A6               	movwf	___wmul@multiplier+1
  2498  05D3  083B               	movf	print_cnt@val10,w
  2499  05D4  00A5               	movwf	___wmul@multiplier
  2500  05D5  300A               	movlw	10
  2501  05D6  00A7               	movwf	___wmul@multiplicand
  2502  05D7  3000               	movlw	0
  2503  05D8  00A8               	movwf	___wmul@multiplicand+1
  2504  05D9  158A  2626  118A   	fcall	___wmul
  2505  05DC  0825               	movf	?___wmul,w
  2506  05DD  02B5               	subwf	print_cnt@_pan,f
  2507  05DE  0826               	movf	?___wmul+1,w
  2508  05DF  1C03               	skipc
  2509  05E0  03B6               	decf	print_cnt@_pan+1,f
  2510  05E1  02B6               	subwf	print_cnt@_pan+1,f
  2511                           
  2512                           ;main.c: 862:     val1 = _pan;
  2513  05E2  0836               	movf	print_cnt@_pan+1,w
  2514  05E3  00BA               	movwf	print_cnt@val1+1
  2515  05E4  0835               	movf	print_cnt@_pan,w
  2516  05E5  00B9               	movwf	print_cnt@val1
  2517                           
  2518                           ;main.c: 864:     val10000 += 48;
  2519  05E6  3030               	movlw	48
  2520  05E7  07C1               	addwf	print_cnt@val10000,f
  2521  05E8  1803               	skipnc
  2522  05E9  0AC2               	incf	print_cnt@val10000+1,f
  2523  05EA  3000               	movlw	0
  2524  05EB  07C2               	addwf	print_cnt@val10000+1,f
  2525                           
  2526                           ;main.c: 865:     val1000 += 48;
  2527  05EC  3030               	movlw	48
  2528  05ED  07BF               	addwf	print_cnt@val1000,f
  2529  05EE  1803               	skipnc
  2530  05EF  0AC0               	incf	print_cnt@val1000+1,f
  2531  05F0  3000               	movlw	0
  2532  05F1  07C0               	addwf	print_cnt@val1000+1,f
  2533                           
  2534                           ;main.c: 866:     val100 += 48;
  2535  05F2  3030               	movlw	48
  2536  05F3  07BD               	addwf	print_cnt@val100,f
  2537  05F4  1803               	skipnc
  2538  05F5  0ABE               	incf	print_cnt@val100+1,f
  2539  05F6  3000               	movlw	0
  2540  05F7  07BE               	addwf	print_cnt@val100+1,f
  2541                           
  2542                           ;main.c: 867:     val10 += 48;
  2543  05F8  3030               	movlw	48
  2544  05F9  07BB               	addwf	print_cnt@val10,f
  2545  05FA  1803               	skipnc
  2546  05FB  0ABC               	incf	print_cnt@val10+1,f
  2547  05FC  3000               	movlw	0
  2548  05FD  07BC               	addwf	print_cnt@val10+1,f
  2549                           
  2550                           ;main.c: 868:     val1 += 48;
  2551  05FE  3030               	movlw	48
  2552  05FF  07B9               	addwf	print_cnt@val1,f
  2553  0600  1803               	skipnc
  2554  0601  0ABA               	incf	print_cnt@val1+1,f
  2555  0602  3000               	movlw	0
  2556  0603  07BA               	addwf	print_cnt@val1+1,f
  2557                           
  2558                           ;main.c: 870:     if (val10000 > 0) {
  2559  0604  0841               	movf	print_cnt@val10000,w
  2560  0605  0442               	iorwf	print_cnt@val10000+1,w
  2561  0606  1903               	btfsc	3,2
  2562  0607  2E0C               	goto	l3229
  2563                           
  2564                           ;main.c: 871:         UART_Write((uint8_t) val10000);
  2565  0608  0841               	movf	print_cnt@val10000,w
  2566  0609  158A  267B  118A   	fcall	_UART_Write
  2567  060C                     l3229:
  2568                           
  2569                           ;main.c: 874:     if ((val10000 > 0) || (val1000 > 0)) {
  2570  060C  0841               	movf	print_cnt@val10000,w
  2571  060D  0442               	iorwf	print_cnt@val10000+1,w
  2572  060E  1D03               	btfss	3,2
  2573  060F  2E14               	goto	l3233
  2574  0610  083F               	movf	print_cnt@val1000,w
  2575  0611  0440               	iorwf	print_cnt@val1000+1,w
  2576  0612  1903               	btfsc	3,2
  2577  0613  2E18               	goto	l3235
  2578  0614                     l3233:
  2579                           
  2580                           ;main.c: 875:         UART_Write((uint8_t) val1000);
  2581  0614  083F               	movf	print_cnt@val1000,w
  2582  0615  158A  267B  118A   	fcall	_UART_Write
  2583  0618                     l3235:
  2584                           
  2585                           ;main.c: 878:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0)) {
  2586  0618  0841               	movf	print_cnt@val10000,w
  2587  0619  0442               	iorwf	print_cnt@val10000+1,w
  2588  061A  1D03               	btfss	3,2
  2589  061B  2E24               	goto	l3241
  2590  061C  083F               	movf	print_cnt@val1000,w
  2591  061D  0440               	iorwf	print_cnt@val1000+1,w
  2592  061E  1D03               	btfss	3,2
  2593  061F  2E24               	goto	l3241
  2594  0620  083D               	movf	print_cnt@val100,w
  2595  0621  043E               	iorwf	print_cnt@val100+1,w
  2596  0622  1903               	btfsc	3,2
  2597  0623  2E28               	goto	l3243
  2598  0624                     l3241:
  2599                           
  2600                           ;main.c: 879:         UART_Write((uint8_t) val100);
  2601  0624  083D               	movf	print_cnt@val100,w
  2602  0625  158A  267B  118A   	fcall	_UART_Write
  2603  0628                     l3243:
  2604                           
  2605                           ;main.c: 881:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0) || (val10 > 0)) {
  2606  0628  0841               	movf	print_cnt@val10000,w
  2607  0629  0442               	iorwf	print_cnt@val10000+1,w
  2608  062A  1D03               	btfss	3,2
  2609  062B  2E38               	goto	l3251
  2610  062C  083F               	movf	print_cnt@val1000,w
  2611  062D  0440               	iorwf	print_cnt@val1000+1,w
  2612  062E  1D03               	btfss	3,2
  2613  062F  2E38               	goto	l3251
  2614  0630  083D               	movf	print_cnt@val100,w
  2615  0631  043E               	iorwf	print_cnt@val100+1,w
  2616  0632  1D03               	btfss	3,2
  2617  0633  2E38               	goto	l3251
  2618  0634  083B               	movf	print_cnt@val10,w
  2619  0635  043C               	iorwf	print_cnt@val10+1,w
  2620  0636  1903               	btfsc	3,2
  2621  0637  2E3C               	goto	l346
  2622  0638                     l3251:
  2623                           
  2624                           ;main.c: 882:         UART_Write((uint8_t) val10);
  2625  0638  083B               	movf	print_cnt@val10,w
  2626  0639  158A  267B  118A   	fcall	_UART_Write
  2627  063C                     l346:	
  2628                           ;main.c: 883:     }
  2629                           
  2630                           
  2631                           ;main.c: 885:     UART_Write((uint8_t) val1);
  2632  063C  0839               	movf	print_cnt@val1,w
  2633  063D  158A  267B  118A   	fcall	_UART_Write
  2634                           
  2635                           ;main.c: 887:     UART_Write_Text(", ");
  2636  0640  3021               	movlw	low (STR_33| (0+32768))
  2637  0641  00AE               	movwf	UART_Write_Text@text
  2638  0642  3089               	movlw	high (STR_33| (0+32768))
  2639  0643  00AF               	movwf	UART_Write_Text@text+1
  2640  0644  158A  26B0  118A   	fcall	_UART_Write_Text
  2641                           
  2642                           ;main.c: 889:     val10000 = _tilt / 10000;
  2643  0647  3010               	movlw	16
  2644  0648  00A5               	movwf	___lwdiv@divisor
  2645  0649  3027               	movlw	39
  2646  064A  00A6               	movwf	___lwdiv@divisor+1
  2647  064B  0838               	movf	print_cnt@_tilt+1,w
  2648  064C  00A8               	movwf	___lwdiv@dividend+1
  2649  064D  0837               	movf	print_cnt@_tilt,w
  2650  064E  00A7               	movwf	___lwdiv@dividend
  2651  064F  158A  26E7  118A   	fcall	___lwdiv
  2652  0652  0826               	movf	?___lwdiv+1,w
  2653  0653  00C2               	movwf	print_cnt@val10000+1
  2654  0654  0825               	movf	?___lwdiv,w
  2655  0655  00C1               	movwf	print_cnt@val10000
  2656                           
  2657                           ;main.c: 890:     _tilt -= val10000 * 10000;
  2658  0656  0842               	movf	print_cnt@val10000+1,w
  2659  0657  00A6               	movwf	___wmul@multiplier+1
  2660  0658  0841               	movf	print_cnt@val10000,w
  2661  0659  00A5               	movwf	___wmul@multiplier
  2662  065A  3010               	movlw	16
  2663  065B  00A7               	movwf	___wmul@multiplicand
  2664  065C  3027               	movlw	39
  2665  065D  00A8               	movwf	___wmul@multiplicand+1
  2666  065E  158A  2626  118A   	fcall	___wmul
  2667  0661  0825               	movf	?___wmul,w
  2668  0662  02B7               	subwf	print_cnt@_tilt,f
  2669  0663  0826               	movf	?___wmul+1,w
  2670  0664  1C03               	skipc
  2671  0665  03B8               	decf	print_cnt@_tilt+1,f
  2672  0666  02B8               	subwf	print_cnt@_tilt+1,f
  2673                           
  2674                           ;main.c: 892:     val1000 = _tilt / 1000;
  2675  0667  30E8               	movlw	232
  2676  0668  00A5               	movwf	___lwdiv@divisor
  2677  0669  3003               	movlw	3
  2678  066A  00A6               	movwf	___lwdiv@divisor+1
  2679  066B  0838               	movf	print_cnt@_tilt+1,w
  2680  066C  00A8               	movwf	___lwdiv@dividend+1
  2681  066D  0837               	movf	print_cnt@_tilt,w
  2682  066E  00A7               	movwf	___lwdiv@dividend
  2683  066F  158A  26E7  118A   	fcall	___lwdiv
  2684  0672  0826               	movf	?___lwdiv+1,w
  2685  0673  00C0               	movwf	print_cnt@val1000+1
  2686  0674  0825               	movf	?___lwdiv,w
  2687  0675  00BF               	movwf	print_cnt@val1000
  2688                           
  2689                           ;main.c: 893:     _tilt -= val1000 * 1000;
  2690  0676  0840               	movf	print_cnt@val1000+1,w
  2691  0677  00A6               	movwf	___wmul@multiplier+1
  2692  0678  083F               	movf	print_cnt@val1000,w
  2693  0679  00A5               	movwf	___wmul@multiplier
  2694  067A  30E8               	movlw	232
  2695  067B  00A7               	movwf	___wmul@multiplicand
  2696  067C  3003               	movlw	3
  2697  067D  00A8               	movwf	___wmul@multiplicand+1
  2698  067E  158A  2626  118A   	fcall	___wmul
  2699  0681  0825               	movf	?___wmul,w
  2700  0682  02B7               	subwf	print_cnt@_tilt,f
  2701  0683  0826               	movf	?___wmul+1,w
  2702  0684  1C03               	skipc
  2703  0685  03B8               	decf	print_cnt@_tilt+1,f
  2704  0686  02B8               	subwf	print_cnt@_tilt+1,f
  2705                           
  2706                           ;main.c: 895:     val100 = _tilt / 100;
  2707  0687  3064               	movlw	100
  2708  0688  00A5               	movwf	___lwdiv@divisor
  2709  0689  3000               	movlw	0
  2710  068A  00A6               	movwf	___lwdiv@divisor+1
  2711  068B  0838               	movf	print_cnt@_tilt+1,w
  2712  068C  00A8               	movwf	___lwdiv@dividend+1
  2713  068D  0837               	movf	print_cnt@_tilt,w
  2714  068E  00A7               	movwf	___lwdiv@dividend
  2715  068F  158A  26E7  118A   	fcall	___lwdiv
  2716  0692  0826               	movf	?___lwdiv+1,w
  2717  0693  00BE               	movwf	print_cnt@val100+1
  2718  0694  0825               	movf	?___lwdiv,w
  2719  0695  00BD               	movwf	print_cnt@val100
  2720                           
  2721                           ;main.c: 896:     _tilt -= val100 * 100;
  2722  0696  083E               	movf	print_cnt@val100+1,w
  2723  0697  00A6               	movwf	___wmul@multiplier+1
  2724  0698  083D               	movf	print_cnt@val100,w
  2725  0699  00A5               	movwf	___wmul@multiplier
  2726  069A  3064               	movlw	100
  2727  069B  00A7               	movwf	___wmul@multiplicand
  2728  069C  3000               	movlw	0
  2729  069D  00A8               	movwf	___wmul@multiplicand+1
  2730  069E  158A  2626  118A   	fcall	___wmul
  2731  06A1  0825               	movf	?___wmul,w
  2732  06A2  02B7               	subwf	print_cnt@_tilt,f
  2733  06A3  0826               	movf	?___wmul+1,w
  2734  06A4  1C03               	skipc
  2735  06A5  03B8               	decf	print_cnt@_tilt+1,f
  2736  06A6  02B8               	subwf	print_cnt@_tilt+1,f
  2737                           
  2738                           ;main.c: 898:     val10 = _tilt / 10;
  2739  06A7  300A               	movlw	10
  2740  06A8  00A5               	movwf	___lwdiv@divisor
  2741  06A9  3000               	movlw	0
  2742  06AA  00A6               	movwf	___lwdiv@divisor+1
  2743  06AB  0838               	movf	print_cnt@_tilt+1,w
  2744  06AC  00A8               	movwf	___lwdiv@dividend+1
  2745  06AD  0837               	movf	print_cnt@_tilt,w
  2746  06AE  00A7               	movwf	___lwdiv@dividend
  2747  06AF  158A  26E7  118A   	fcall	___lwdiv
  2748  06B2  0826               	movf	?___lwdiv+1,w
  2749  06B3  00BC               	movwf	print_cnt@val10+1
  2750  06B4  0825               	movf	?___lwdiv,w
  2751  06B5  00BB               	movwf	print_cnt@val10
  2752                           
  2753                           ;main.c: 899:     _tilt -= val10 * 10;
  2754  06B6  083C               	movf	print_cnt@val10+1,w
  2755  06B7  00A6               	movwf	___wmul@multiplier+1
  2756  06B8  083B               	movf	print_cnt@val10,w
  2757  06B9  00A5               	movwf	___wmul@multiplier
  2758  06BA  300A               	movlw	10
  2759  06BB  00A7               	movwf	___wmul@multiplicand
  2760  06BC  3000               	movlw	0
  2761  06BD  00A8               	movwf	___wmul@multiplicand+1
  2762  06BE  158A  2626  118A   	fcall	___wmul
  2763  06C1  0825               	movf	?___wmul,w
  2764  06C2  02B7               	subwf	print_cnt@_tilt,f
  2765  06C3  0826               	movf	?___wmul+1,w
  2766  06C4  1C03               	skipc
  2767  06C5  03B8               	decf	print_cnt@_tilt+1,f
  2768  06C6  02B8               	subwf	print_cnt@_tilt+1,f
  2769                           
  2770                           ;main.c: 901:     val1 = _tilt;
  2771  06C7  0838               	movf	print_cnt@_tilt+1,w
  2772  06C8  00BA               	movwf	print_cnt@val1+1
  2773  06C9  0837               	movf	print_cnt@_tilt,w
  2774  06CA  00B9               	movwf	print_cnt@val1
  2775                           
  2776                           ;main.c: 903:     val10000 += 48;
  2777  06CB  3030               	movlw	48
  2778  06CC  07C1               	addwf	print_cnt@val10000,f
  2779  06CD  1803               	skipnc
  2780  06CE  0AC2               	incf	print_cnt@val10000+1,f
  2781  06CF  3000               	movlw	0
  2782  06D0  07C2               	addwf	print_cnt@val10000+1,f
  2783                           
  2784                           ;main.c: 904:     val1000 += 48;
  2785  06D1  3030               	movlw	48
  2786  06D2  07BF               	addwf	print_cnt@val1000,f
  2787  06D3  1803               	skipnc
  2788  06D4  0AC0               	incf	print_cnt@val1000+1,f
  2789  06D5  3000               	movlw	0
  2790  06D6  07C0               	addwf	print_cnt@val1000+1,f
  2791                           
  2792                           ;main.c: 905:     val100 += 48;
  2793  06D7  3030               	movlw	48
  2794  06D8  07BD               	addwf	print_cnt@val100,f
  2795  06D9  1803               	skipnc
  2796  06DA  0ABE               	incf	print_cnt@val100+1,f
  2797  06DB  3000               	movlw	0
  2798  06DC  07BE               	addwf	print_cnt@val100+1,f
  2799                           
  2800                           ;main.c: 906:     val10 += 48;
  2801  06DD  3030               	movlw	48
  2802  06DE  07BB               	addwf	print_cnt@val10,f
  2803  06DF  1803               	skipnc
  2804  06E0  0ABC               	incf	print_cnt@val10+1,f
  2805  06E1  3000               	movlw	0
  2806  06E2  07BC               	addwf	print_cnt@val10+1,f
  2807                           
  2808                           ;main.c: 907:     val1 += 48;
  2809  06E3  3030               	movlw	48
  2810  06E4  07B9               	addwf	print_cnt@val1,f
  2811  06E5  1803               	skipnc
  2812  06E6  0ABA               	incf	print_cnt@val1+1,f
  2813  06E7  3000               	movlw	0
  2814  06E8  07BA               	addwf	print_cnt@val1+1,f
  2815                           
  2816                           ;main.c: 909:     if (val10000 > 0) {
  2817  06E9  0841               	movf	print_cnt@val10000,w
  2818  06EA  0442               	iorwf	print_cnt@val10000+1,w
  2819  06EB  1903               	btfsc	3,2
  2820  06EC  2EF1               	goto	l3287
  2821                           
  2822                           ;main.c: 910:         UART_Write((uint8_t) val10000);
  2823  06ED  0841               	movf	print_cnt@val10000,w
  2824  06EE  158A  267B  118A   	fcall	_UART_Write
  2825  06F1                     l3287:
  2826                           
  2827                           ;main.c: 913:     if ((val10000 > 0) || (val1000 > 0)) {
  2828  06F1  0841               	movf	print_cnt@val10000,w
  2829  06F2  0442               	iorwf	print_cnt@val10000+1,w
  2830  06F3  1D03               	btfss	3,2
  2831  06F4  2EF9               	goto	l3291
  2832  06F5  083F               	movf	print_cnt@val1000,w
  2833  06F6  0440               	iorwf	print_cnt@val1000+1,w
  2834  06F7  1903               	btfsc	3,2
  2835  06F8  2EFD               	goto	l3293
  2836  06F9                     l3291:
  2837                           
  2838                           ;main.c: 914:         UART_Write((uint8_t) val1000);
  2839  06F9  083F               	movf	print_cnt@val1000,w
  2840  06FA  158A  267B  118A   	fcall	_UART_Write
  2841  06FD                     l3293:
  2842                           
  2843                           ;main.c: 917:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0)) {
  2844  06FD  0841               	movf	print_cnt@val10000,w
  2845  06FE  0442               	iorwf	print_cnt@val10000+1,w
  2846  06FF  1D03               	btfss	3,2
  2847  0700  2F09               	goto	l3299
  2848  0701  083F               	movf	print_cnt@val1000,w
  2849  0702  0440               	iorwf	print_cnt@val1000+1,w
  2850  0703  1D03               	btfss	3,2
  2851  0704  2F09               	goto	l3299
  2852  0705  083D               	movf	print_cnt@val100,w
  2853  0706  043E               	iorwf	print_cnt@val100+1,w
  2854  0707  1903               	btfsc	3,2
  2855  0708  2F0D               	goto	l3301
  2856  0709                     l3299:
  2857                           
  2858                           ;main.c: 918:         UART_Write((uint8_t) val100);
  2859  0709  083D               	movf	print_cnt@val100,w
  2860  070A  158A  267B  118A   	fcall	_UART_Write
  2861  070D                     l3301:
  2862                           
  2863                           ;main.c: 920:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0) || (val10 > 0)) {
  2864  070D  0841               	movf	print_cnt@val10000,w
  2865  070E  0442               	iorwf	print_cnt@val10000+1,w
  2866  070F  1D03               	btfss	3,2
  2867  0710  2F1D               	goto	l3309
  2868  0711  083F               	movf	print_cnt@val1000,w
  2869  0712  0440               	iorwf	print_cnt@val1000+1,w
  2870  0713  1D03               	btfss	3,2
  2871  0714  2F1D               	goto	l3309
  2872  0715  083D               	movf	print_cnt@val100,w
  2873  0716  043E               	iorwf	print_cnt@val100+1,w
  2874  0717  1D03               	btfss	3,2
  2875  0718  2F1D               	goto	l3309
  2876  0719  083B               	movf	print_cnt@val10,w
  2877  071A  043C               	iorwf	print_cnt@val10+1,w
  2878  071B  1903               	btfsc	3,2
  2879  071C  2F21               	goto	l356
  2880  071D                     l3309:
  2881                           
  2882                           ;main.c: 921:         UART_Write((uint8_t) val10);
  2883  071D  083B               	movf	print_cnt@val10,w
  2884  071E  158A  267B  118A   	fcall	_UART_Write
  2885  0721                     l356:	
  2886                           ;main.c: 922:     }
  2887                           
  2888                           
  2889                           ;main.c: 924:     UART_Write((uint8_t) val1);
  2890  0721  0839               	movf	print_cnt@val1,w
  2891  0722  158A  267B         	fcall	_UART_Write
  2892  0724  0008               	return
  2893  0725                     __end_of_print_cnt:
  2894                           
  2895                           	psect	text2
  2896  0E26                     __ptext2:	
  2897 ;; *************** function ___wmul *****************
  2898 ;; Defined at:
  2899 ;;		line 15 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/Umul16.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;  multiplier      2    5[BANK0 ] unsigned int 
  2902 ;;  multiplicand    2    7[BANK0 ] unsigned int 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  product         2    9[BANK0 ] unsigned int 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  2    5[BANK0 ] unsigned int 
  2907 ;; Registers used:
  2908 ;;		wreg, status,2, status,0
  2909 ;; Tracked objects:
  2910 ;;		On entry : 300/0
  2911 ;;		On exit  : 300/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2914 ;;      Params:         0       4       0       0
  2915 ;;      Locals:         0       2       0       0
  2916 ;;      Temps:          0       0       0       0
  2917 ;;      Totals:         0       6       0       0
  2918 ;;Total ram usage:        6 bytes
  2919 ;; Hardware stack levels used: 1
  2920 ;; Hardware stack levels required when called: 3
  2921 ;; This function calls:
  2922 ;;		Nothing
  2923 ;; This function is called by:
  2924 ;;		_print_cnt
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928  0E26                     ___wmul:	
  2929                           ;psect for function ___wmul
  2930                           
  2931                           
  2932                           ;incstack = 0
  2933                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2934  0E26  01A9               	clrf	___wmul@product
  2935  0E27  01AA               	clrf	___wmul@product+1
  2936  0E28                     l3045:
  2937  0E28  1C25               	btfss	___wmul@multiplier,0
  2938  0E29  2E30               	goto	l529
  2939  0E2A  0827               	movf	___wmul@multiplicand,w
  2940  0E2B  07A9               	addwf	___wmul@product,f
  2941  0E2C  1803               	skipnc
  2942  0E2D  0AAA               	incf	___wmul@product+1,f
  2943  0E2E  0828               	movf	___wmul@multiplicand+1,w
  2944  0E2F  07AA               	addwf	___wmul@product+1,f
  2945  0E30                     l529:
  2946  0E30  3001               	movlw	1
  2947  0E31                     u3285:
  2948  0E31  1003               	clrc
  2949  0E32  0DA7               	rlf	___wmul@multiplicand,f
  2950  0E33  0DA8               	rlf	___wmul@multiplicand+1,f
  2951  0E34  3EFF               	addlw	-1
  2952  0E35  1D03               	skipz
  2953  0E36  2E31               	goto	u3285
  2954  0E37  3001               	movlw	1
  2955  0E38                     u3295:
  2956  0E38  1003               	clrc
  2957  0E39  0CA6               	rrf	___wmul@multiplier+1,f
  2958  0E3A  0CA5               	rrf	___wmul@multiplier,f
  2959  0E3B  3EFF               	addlw	-1
  2960  0E3C  1D03               	skipz
  2961  0E3D  2E38               	goto	u3295
  2962  0E3E  0825               	movf	___wmul@multiplier,w
  2963  0E3F  0426               	iorwf	___wmul@multiplier+1,w
  2964  0E40  1D03               	btfss	3,2
  2965  0E41  2E28               	goto	l3045
  2966  0E42  082A               	movf	___wmul@product+1,w
  2967  0E43  00A6               	movwf	?___wmul+1
  2968  0E44  0829               	movf	___wmul@product,w
  2969  0E45  00A5               	movwf	?___wmul
  2970  0E46  0008               	return
  2971  0E47                     __end_of___wmul:
  2972                           
  2973                           	psect	text3
  2974  0EE7                     __ptext3:	
  2975 ;; *************** function ___lwdiv *****************
  2976 ;; Defined at:
  2977 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/lwdiv.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;  divisor         2    5[BANK0 ] unsigned int 
  2980 ;;  dividend        2    7[BANK0 ] unsigned int 
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;  quotient        2   11[BANK0 ] unsigned int 
  2983 ;;  counter         1   10[BANK0 ] unsigned char 
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  2    5[BANK0 ] unsigned int 
  2986 ;; Registers used:
  2987 ;;		wreg, status,2, status,0
  2988 ;; Tracked objects:
  2989 ;;		On entry : 300/0
  2990 ;;		On exit  : 300/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2993 ;;      Params:         0       4       0       0
  2994 ;;      Locals:         0       3       0       0
  2995 ;;      Temps:          0       1       0       0
  2996 ;;      Totals:         0       8       0       0
  2997 ;;Total ram usage:        8 bytes
  2998 ;; Hardware stack levels used: 1
  2999 ;; Hardware stack levels required when called: 3
  3000 ;; This function calls:
  3001 ;;		Nothing
  3002 ;; This function is called by:
  3003 ;;		_print_cnt
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007  0EE7                     ___lwdiv:	
  3008                           ;psect for function ___lwdiv
  3009                           
  3010                           
  3011                           ;incstack = 0
  3012                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3013  0EE7  01AB               	clrf	___lwdiv@quotient
  3014  0EE8  01AC               	clrf	___lwdiv@quotient+1
  3015  0EE9  0825               	movf	___lwdiv@divisor,w
  3016  0EEA  0426               	iorwf	___lwdiv@divisor+1,w
  3017  0EEB  1903               	btfsc	3,2
  3018  0EEC  2F1E               	goto	l3079
  3019  0EED  01AA               	clrf	___lwdiv@counter
  3020  0EEE  0AAA               	incf	___lwdiv@counter,f
  3021  0EEF                     l3067:
  3022  0EEF  1BA6               	btfsc	___lwdiv@divisor+1,7
  3023  0EF0  2EFD               	goto	l3069
  3024  0EF1  3001               	movlw	1
  3025  0EF2                     u3325:
  3026  0EF2  1003               	clrc
  3027  0EF3  0DA5               	rlf	___lwdiv@divisor,f
  3028  0EF4  0DA6               	rlf	___lwdiv@divisor+1,f
  3029  0EF5  3EFF               	addlw	-1
  3030  0EF6  1D03               	skipz
  3031  0EF7  2EF2               	goto	u3325
  3032  0EF8  3001               	movlw	1
  3033  0EF9  00A9               	movwf	??___lwdiv
  3034  0EFA  0829               	movf	??___lwdiv,w
  3035  0EFB  07AA               	addwf	___lwdiv@counter,f
  3036  0EFC  2EEF               	goto	l3067
  3037  0EFD                     l3069:
  3038  0EFD  3001               	movlw	1
  3039  0EFE                     u3345:
  3040  0EFE  1003               	clrc
  3041  0EFF  0DAB               	rlf	___lwdiv@quotient,f
  3042  0F00  0DAC               	rlf	___lwdiv@quotient+1,f
  3043  0F01  3EFF               	addlw	-1
  3044  0F02  1D03               	skipz
  3045  0F03  2EFE               	goto	u3345
  3046  0F04  0826               	movf	___lwdiv@divisor+1,w
  3047  0F05  0228               	subwf	___lwdiv@dividend+1,w
  3048  0F06  1D03               	skipz
  3049  0F07  2F0A               	goto	u3355
  3050  0F08  0825               	movf	___lwdiv@divisor,w
  3051  0F09  0227               	subwf	___lwdiv@dividend,w
  3052  0F0A                     u3355:
  3053  0F0A  1C03               	skipc
  3054  0F0B  2F13               	goto	l3075
  3055  0F0C  0825               	movf	___lwdiv@divisor,w
  3056  0F0D  02A7               	subwf	___lwdiv@dividend,f
  3057  0F0E  0826               	movf	___lwdiv@divisor+1,w
  3058  0F0F  1C03               	skipc
  3059  0F10  03A8               	decf	___lwdiv@dividend+1,f
  3060  0F11  02A8               	subwf	___lwdiv@dividend+1,f
  3061  0F12  142B               	bsf	___lwdiv@quotient,0
  3062  0F13                     l3075:
  3063  0F13  3001               	movlw	1
  3064  0F14                     u3365:
  3065  0F14  1003               	clrc
  3066  0F15  0CA6               	rrf	___lwdiv@divisor+1,f
  3067  0F16  0CA5               	rrf	___lwdiv@divisor,f
  3068  0F17  3EFF               	addlw	-1
  3069  0F18  1D03               	skipz
  3070  0F19  2F14               	goto	u3365
  3071  0F1A  3001               	movlw	1
  3072  0F1B  02AA               	subwf	___lwdiv@counter,f
  3073  0F1C  1D03               	btfss	3,2
  3074  0F1D  2EFD               	goto	l3069
  3075  0F1E                     l3079:
  3076  0F1E  082C               	movf	___lwdiv@quotient+1,w
  3077  0F1F  00A6               	movwf	?___lwdiv+1
  3078  0F20  082B               	movf	___lwdiv@quotient,w
  3079  0F21  00A5               	movwf	?___lwdiv
  3080  0F22  0008               	return
  3081  0F23                     __end_of___lwdiv:
  3082                           
  3083                           	psect	text4
  3084  0EB0                     __ptext4:	
  3085 ;; *************** function _UART_Write_Text *****************
  3086 ;; Defined at:
  3087 ;;		line 73 in file "usart.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  text            2   14[BANK0 ] PTR unsigned char 
  3090 ;;		 -> STR_33(3), STR_32(4), STR_31(5), STR_30(4), 
  3091 ;;		 -> STR_29(7), STR_28(4), STR_27(8), STR_26(4), 
  3092 ;;		 -> STR_25(7), STR_24(4), STR_23(3), STR_22(13), 
  3093 ;;		 -> STR_21(4), STR_20(3), STR_19(14), STR_18(4), 
  3094 ;;		 -> STR_17(3), STR_16(12), STR_15(4), STR_14(7), 
  3095 ;;		 -> STR_13(16), STR_12(18), STR_11(7), STR_10(9), 
  3096 ;;		 -> STR_9(8), STR_8(8), STR_7(7), STR_6(7), 
  3097 ;;		 -> STR_5(14), STR_4(9), STR_3(23), STR_2(25), 
  3098 ;;		 -> STR_1(12), 
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;  i               2   19[BANK0 ] int 
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  1    wreg      void 
  3103 ;; Registers used:
  3104 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3105 ;; Tracked objects:
  3106 ;;		On entry : 300/0
  3107 ;;		On exit  : 300/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3110 ;;      Params:         0       2       0       0
  3111 ;;      Locals:         0       2       0       0
  3112 ;;      Temps:          0       3       0       0
  3113 ;;      Totals:         0       7       0       0
  3114 ;;Total ram usage:        7 bytes
  3115 ;; Hardware stack levels used: 1
  3116 ;; Hardware stack levels required when called: 4
  3117 ;; This function calls:
  3118 ;;		_UART_Write
  3119 ;; This function is called by:
  3120 ;;		_main
  3121 ;;		_print_cnt
  3122 ;; This function uses a non-reentrant model
  3123 ;;
  3124                           
  3125  0EB0                     _UART_Write_Text:	
  3126                           ;psect for function _UART_Write_Text
  3127                           
  3128                           
  3129                           ;usart.c: 74:     int i;;usart.c: 75:     for (i = 0; text[i] != '\0'; i++)
  3130                           
  3131                           ;incstack = 0
  3132                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3133  0EB0  01B3               	clrf	UART_Write_Text@i
  3134  0EB1  01B4               	clrf	UART_Write_Text@i+1
  3135  0EB2                     l3033:
  3136  0EB2  0833               	movf	UART_Write_Text@i,w
  3137  0EB3  072E               	addwf	UART_Write_Text@text,w
  3138  0EB4  00B1               	movwf	??_UART_Write_Text+1
  3139  0EB5  082F               	movf	UART_Write_Text@text+1,w
  3140  0EB6  00B0               	movwf	??_UART_Write_Text
  3141  0EB7  1803               	skipnc
  3142  0EB8  0AB0               	incf	??_UART_Write_Text,f
  3143  0EB9  1BB3               	btfsc	UART_Write_Text@i,7
  3144  0EBA  03B0               	decf	??_UART_Write_Text,f
  3145  0EBB  1283               	bcf	3,5	;RP0=0, select bank0
  3146  0EBC  1303               	bcf	3,6	;RP1=0, select bank0
  3147  0EBD  0830               	movf	??_UART_Write_Text,w
  3148  0EBE  00B2               	movwf	??_UART_Write_Text+2
  3149  0EBF  0832               	movf	??_UART_Write_Text+2,w
  3150  0EC0  00FF               	movwf	127
  3151  0EC1  0831               	movf	??_UART_Write_Text+1,w
  3152  0EC2  0084               	movwf	4
  3153  0EC3  158A  2000  158A   	fcall	stringtab
  3154  0EC6  3A00               	xorlw	0
  3155  0EC7  1903               	btfsc	3,2
  3156  0EC8  0008               	return
  3157                           
  3158                           ;usart.c: 76:         UART_Write(text[i]);
  3159  0EC9  0833               	movf	UART_Write_Text@i,w
  3160  0ECA  072E               	addwf	UART_Write_Text@text,w
  3161  0ECB  00B1               	movwf	??_UART_Write_Text+1
  3162  0ECC  082F               	movf	UART_Write_Text@text+1,w
  3163  0ECD  00B0               	movwf	??_UART_Write_Text
  3164  0ECE  1803               	skipnc
  3165  0ECF  0AB0               	incf	??_UART_Write_Text,f
  3166  0ED0  1BB3               	btfsc	UART_Write_Text@i,7
  3167  0ED1  03B0               	decf	??_UART_Write_Text,f
  3168  0ED2  1283               	bcf	3,5	;RP0=0, select bank0
  3169  0ED3  1303               	bcf	3,6	;RP1=0, select bank0
  3170  0ED4  0830               	movf	??_UART_Write_Text,w
  3171  0ED5  00B2               	movwf	??_UART_Write_Text+2
  3172  0ED6  0832               	movf	??_UART_Write_Text+2,w
  3173  0ED7  00FF               	movwf	127
  3174  0ED8  0831               	movf	??_UART_Write_Text+1,w
  3175  0ED9  0084               	movwf	4
  3176  0EDA  158A  2000  158A   	fcall	stringtab
  3177  0EDD  158A  267B  158A   	fcall	_UART_Write
  3178  0EE0  3001               	movlw	1
  3179  0EE1  07B3               	addwf	UART_Write_Text@i,f
  3180  0EE2  1803               	skipnc
  3181  0EE3  0AB4               	incf	UART_Write_Text@i+1,f
  3182  0EE4  3000               	movlw	0
  3183  0EE5  07B4               	addwf	UART_Write_Text@i+1,f
  3184  0EE6  2EB2               	goto	l3033
  3185  0EE7                     __end_of_UART_Write_Text:
  3186                           
  3187                           	psect	text5
  3188  0E7B                     __ptext5:	
  3189 ;; *************** function _UART_Write *****************
  3190 ;; Defined at:
  3191 ;;		line 59 in file "usart.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  data            1    wreg     unsigned char 
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;  data            1    9[BANK0 ] unsigned char 
  3196 ;;  timeout         4   10[BANK0 ] unsigned long 
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  1    wreg      void 
  3199 ;; Registers used:
  3200 ;;		wreg
  3201 ;; Tracked objects:
  3202 ;;		On entry : 200/100
  3203 ;;		On exit  : 300/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3206 ;;      Params:         0       0       0       0
  3207 ;;      Locals:         0       5       0       0
  3208 ;;      Temps:          0       4       0       0
  3209 ;;      Totals:         0       9       0       0
  3210 ;;Total ram usage:        9 bytes
  3211 ;; Hardware stack levels used: 1
  3212 ;; Hardware stack levels required when called: 3
  3213 ;; This function calls:
  3214 ;;		Nothing
  3215 ;; This function is called by:
  3216 ;;		_main
  3217 ;;		_print_cnt
  3218 ;;		_UART_Write_Text
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222  0E7B                     _UART_Write:	
  3223                           ;psect for function _UART_Write
  3224                           
  3225                           
  3226                           ;incstack = 0
  3227                           ; Regs used in _UART_Write: [wreg]
  3228                           ;UART_Write@data stored from wreg
  3229  0E7B  1283               	bcf	3,5	;RP0=0, select bank0
  3230  0E7C  00A9               	movwf	UART_Write@data
  3231                           
  3232                           ;usart.c: 60:     unsigned long timeout = 0x1FFFF;
  3233  0E7D  3000               	movlw	0
  3234  0E7E  00AD               	movwf	UART_Write@timeout+3
  3235  0E7F  3001               	movlw	1
  3236  0E80  00AC               	movwf	UART_Write@timeout+2
  3237  0E81  30FF               	movlw	255
  3238  0E82  00AB               	movwf	UART_Write@timeout+1
  3239  0E83  30FF               	movlw	255
  3240  0E84  00AA               	movwf	UART_Write@timeout
  3241                           
  3242                           ;usart.c: 62:     while (!TRMT) {
  3243  0E85  2EA2               	goto	l395
  3244  0E86                     l2993:
  3245                           
  3246                           ;usart.c: 64:             timeout--;
  3247  0E86  3001               	movlw	1
  3248  0E87  00A5               	movwf	??_UART_Write
  3249  0E88  3000               	movlw	0
  3250  0E89  00A6               	movwf	??_UART_Write+1
  3251  0E8A  3000               	movlw	0
  3252  0E8B  00A7               	movwf	??_UART_Write+2
  3253  0E8C  3000               	movlw	0
  3254  0E8D  00A8               	movwf	??_UART_Write+3
  3255  0E8E  0825               	movf	??_UART_Write,w
  3256  0E8F  02AA               	subwf	UART_Write@timeout,f
  3257  0E90  0826               	movf	??_UART_Write+1,w
  3258  0E91  1C03               	skipc
  3259  0E92  0F26               	incfsz	??_UART_Write+1,w
  3260  0E93  2E95               	goto	u3165
  3261  0E94  2E96               	goto	u3166
  3262  0E95                     u3165:
  3263  0E95  02AB               	subwf	UART_Write@timeout+1,f
  3264  0E96                     u3166:
  3265  0E96  0827               	movf	??_UART_Write+2,w
  3266  0E97  1C03               	skipc
  3267  0E98  0F27               	incfsz	??_UART_Write+2,w
  3268  0E99  2E9B               	goto	u3167
  3269  0E9A  2E9C               	goto	u3168
  3270  0E9B                     u3167:
  3271  0E9B  02AC               	subwf	UART_Write@timeout+2,f
  3272  0E9C                     u3168:
  3273  0E9C  0828               	movf	??_UART_Write+3,w
  3274  0E9D  1C03               	skipc
  3275  0E9E  0F28               	incfsz	??_UART_Write+3,w
  3276  0E9F  2EA1               	goto	u3169
  3277  0EA0  2EA2               	goto	l395
  3278  0EA1                     u3169:
  3279  0EA1  02AD               	subwf	UART_Write@timeout+3,f
  3280  0EA2                     l395:	
  3281                           ;usart.c: 68:     }
  3282                           
  3283                           
  3284                           ;usart.c: 62:     while (!TRMT) {
  3285  0EA2  1683               	bsf	3,5	;RP0=1, select bank1
  3286  0EA3  1898               	btfsc	24,1	;volatile
  3287  0EA4  2EAC               	goto	l2995
  3288                           
  3289                           ;usart.c: 63:         if (timeout > 0) {
  3290  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  3291  0EA6  082D               	movf	UART_Write@timeout+3,w
  3292  0EA7  042C               	iorwf	UART_Write@timeout+2,w
  3293  0EA8  042B               	iorwf	UART_Write@timeout+1,w
  3294  0EA9  042A               	iorwf	UART_Write@timeout,w
  3295  0EAA  1D03               	btfss	3,2
  3296  0EAB  2E86               	goto	l2993
  3297  0EAC                     l2995:
  3298                           
  3299                           ;usart.c: 70:     TXREG = data;
  3300  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  3301  0EAD  0829               	movf	UART_Write@data,w
  3302  0EAE  0099               	movwf	25	;volatile
  3303  0EAF  0008               	return
  3304  0EB0                     __end_of_UART_Write:
  3305                           
  3306                           	psect	text6
  3307  0E05                     __ptext6:	
  3308 ;; *************** function ___lbdiv *****************
  3309 ;; Defined at:
  3310 ;;		line 4 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/lbdiv.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;  dividend        1    wreg     unsigned char 
  3313 ;;  divisor         1    5[BANK0 ] unsigned char 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  dividend        1    7[BANK0 ] unsigned char 
  3316 ;;  quotient        1    9[BANK0 ] unsigned char 
  3317 ;;  counter         1    8[BANK0 ] unsigned char 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      unsigned char 
  3320 ;; Registers used:
  3321 ;;		wreg, status,2, status,0
  3322 ;; Tracked objects:
  3323 ;;		On entry : 300/0
  3324 ;;		On exit  : 300/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3327 ;;      Params:         0       1       0       0
  3328 ;;      Locals:         0       3       0       0
  3329 ;;      Temps:          0       1       0       0
  3330 ;;      Totals:         0       5       0       0
  3331 ;;Total ram usage:        5 bytes
  3332 ;; Hardware stack levels used: 1
  3333 ;; Hardware stack levels required when called: 3
  3334 ;; This function calls:
  3335 ;;		Nothing
  3336 ;; This function is called by:
  3337 ;;		_main
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341  0E05                     ___lbdiv:	
  3342                           ;psect for function ___lbdiv
  3343                           
  3344                           
  3345                           ;incstack = 0
  3346                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3347                           ;___lbdiv@dividend stored from wreg
  3348  0E05  00A7               	movwf	___lbdiv@dividend
  3349  0E06  01A9               	clrf	___lbdiv@quotient
  3350  0E07  0825               	movf	___lbdiv@divisor,w
  3351  0E08  1903               	btfsc	3,2
  3352  0E09  2E24               	goto	l3363
  3353  0E0A  01A8               	clrf	___lbdiv@counter
  3354  0E0B  0AA8               	incf	___lbdiv@counter,f
  3355  0E0C                     l3351:
  3356  0E0C  1BA5               	btfsc	___lbdiv@divisor,7
  3357  0E0D  2E15               	goto	l3353
  3358  0E0E  1003               	clrc
  3359  0E0F  0DA5               	rlf	___lbdiv@divisor,f
  3360  0E10  3001               	movlw	1
  3361  0E11  00A6               	movwf	??___lbdiv
  3362  0E12  0826               	movf	??___lbdiv,w
  3363  0E13  07A8               	addwf	___lbdiv@counter,f
  3364  0E14  2E0C               	goto	l3351
  3365  0E15                     l3353:
  3366  0E15  1003               	clrc
  3367  0E16  0DA9               	rlf	___lbdiv@quotient,f
  3368  0E17  0825               	movf	___lbdiv@divisor,w
  3369  0E18  0227               	subwf	___lbdiv@dividend,w
  3370  0E19  1C03               	skipc
  3371  0E1A  2E1F               	goto	L19
  3372  0E1B  0825               	movf	___lbdiv@divisor,w
  3373  0E1C  02A7               	subwf	___lbdiv@dividend,f
  3374  0E1D  1429               	bsf	___lbdiv@quotient,0
  3375  0E1E  1003               	clrc
  3376  0E1F                     L19:
  3377  0E1F  0CA5               	rrf	___lbdiv@divisor,f
  3378  0E20  3001               	movlw	1
  3379  0E21  02A8               	subwf	___lbdiv@counter,f
  3380  0E22  1D03               	btfss	3,2
  3381  0E23  2E15               	goto	l3353
  3382  0E24                     l3363:
  3383  0E24  0829               	movf	___lbdiv@quotient,w
  3384  0E25  0008               	return
  3385  0E26                     __end_of___lbdiv:
  3386                           
  3387                           	psect	text7
  3388  0D74                     __ptext7:	
  3389 ;; *************** function ___bmul *****************
  3390 ;; Defined at:
  3391 ;;		line 4 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/Umul8.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  multiplier      1    wreg     unsigned char 
  3394 ;;  multiplicand    1    5[BANK0 ] unsigned char 
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  multiplier      1    8[BANK0 ] unsigned char 
  3397 ;;  product         1    7[BANK0 ] unsigned char 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1    wreg      unsigned char 
  3400 ;; Registers used:
  3401 ;;		wreg, status,2, status,0
  3402 ;; Tracked objects:
  3403 ;;		On entry : 300/100
  3404 ;;		On exit  : 300/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3407 ;;      Params:         0       1       0       0
  3408 ;;      Locals:         0       2       0       0
  3409 ;;      Temps:          0       1       0       0
  3410 ;;      Totals:         0       4       0       0
  3411 ;;Total ram usage:        4 bytes
  3412 ;; Hardware stack levels used: 1
  3413 ;; Hardware stack levels required when called: 3
  3414 ;; This function calls:
  3415 ;;		Nothing
  3416 ;; This function is called by:
  3417 ;;		_main
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421  0D74                     ___bmul:	
  3422                           ;psect for function ___bmul
  3423                           
  3424                           
  3425                           ;incstack = 0
  3426                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3427                           ;___bmul@multiplier stored from wreg
  3428  0D74  1283               	bcf	3,5	;RP0=0, select bank0
  3429  0D75  00A8               	movwf	___bmul@multiplier
  3430  0D76  01A7               	clrf	___bmul@product
  3431  0D77                     l3329:
  3432  0D77  1C28               	btfss	___bmul@multiplier,0
  3433  0D78  2D7D               	goto	l3333
  3434  0D79  0825               	movf	___bmul@multiplicand,w
  3435  0D7A  00A6               	movwf	??___bmul
  3436  0D7B  0826               	movf	??___bmul,w
  3437  0D7C  07A7               	addwf	___bmul@product,f
  3438  0D7D                     l3333:
  3439  0D7D  1003               	clrc
  3440  0D7E  0DA5               	rlf	___bmul@multiplicand,f
  3441  0D7F  1003               	clrc
  3442  0D80  0CA8               	rrf	___bmul@multiplier,f
  3443  0D81  0828               	movf	___bmul@multiplier,w
  3444  0D82  1D03               	btfss	3,2
  3445  0D83  2D77               	goto	l3329
  3446  0D84  0827               	movf	___bmul@product,w
  3447  0D85  0008               	return
  3448  0D86                     __end_of___bmul:
  3449                           
  3450                           	psect	text8
  3451  0D9C                     __ptext8:	
  3452 ;; *************** function _UC_Init *****************
  3453 ;; Defined at:
  3454 ;;		line 597 in file "main.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2, status,0
  3463 ;; Tracked objects:
  3464 ;;		On entry : B00/0
  3465 ;;		On exit  : B00/100
  3466 ;;		Unchanged: 800/0
  3467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3468 ;;      Params:         0       0       0       0
  3469 ;;      Locals:         0       0       0       0
  3470 ;;      Temps:          0       0       0       0
  3471 ;;      Totals:         0       0       0       0
  3472 ;;Total ram usage:        0 bytes
  3473 ;; Hardware stack levels used: 1
  3474 ;; Hardware stack levels required when called: 3
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_main
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482  0D9C                     _UC_Init:	
  3483                           ;psect for function _UC_Init
  3484                           
  3485                           
  3486                           ;main.c: 598:     PCONbits.OSCF = 1;
  3487                           
  3488                           ;incstack = 0
  3489                           ; Regs used in _UC_Init: [wreg+status,2+status,0]
  3490  0D9C  1683               	bsf	3,5	;RP0=1, select bank1
  3491  0D9D  158E               	bsf	14,3	;volatile
  3492                           
  3493                           ;main.c: 601:     if ((PCONbits.nPOR == 1) && (PCONbits.nBOR == 1)) {
  3494  0D9E  188E               	btfsc	14,1	;volatile
  3495  0D9F  1C0E               	btfss	14,0	;volatile
  3496  0DA0  2DA3               	goto	l3089
  3497                           
  3498                           ;main.c: 603:         is_reboot = 1;
  3499  0DA1  01D1               	clrf	_is_reboot^(0+128)
  3500  0DA2  0AD1               	incf	_is_reboot^(0+128),f
  3501  0DA3                     l3089:
  3502                           
  3503                           ;main.c: 606:     PORTA = 0;
  3504  0DA3  1283               	bcf	3,5	;RP0=0, select bank0
  3505  0DA4  0185               	clrf	5	;volatile
  3506                           
  3507                           ;main.c: 607:     PORTB = 0;
  3508  0DA5  0186               	clrf	6	;volatile
  3509                           
  3510                           ;main.c: 609:     CMCON = 7;
  3511  0DA6  3007               	movlw	7
  3512  0DA7  009F               	movwf	31	;volatile
  3513                           
  3514                           ;main.c: 611:     OPTION_REGbits.nRBPU = 1;
  3515  0DA8  1683               	bsf	3,5	;RP0=1, select bank1
  3516  0DA9  1781               	bsf	1,7	;volatile
  3517                           
  3518                           ;main.c: 612:     OPTION_REGbits.PSA = 1;
  3519  0DAA  1581               	bsf	1,3	;volatile
  3520                           
  3521                           ;main.c: 613:     OPTION_REGbits.PS = 0b111;
  3522  0DAB  3007               	movlw	7
  3523  0DAC  0481               	iorwf	1,f	;volatile
  3524                           
  3525                           ;main.c: 618:     INTCONbits.GIE = 1;
  3526  0DAD  178B               	bsf	11,7	;volatile
  3527                           
  3528                           ;main.c: 619:     INTCONbits.PEIE = 1;
  3529  0DAE  170B               	bsf	11,6	;volatile
  3530                           
  3531                           ;main.c: 628:     TRISA = 0b00000000;
  3532  0DAF  0185               	clrf	5	;volatile
  3533                           
  3534                           ;main.c: 638:     TRISB = 0b00000010;
  3535  0DB0  3002               	movlw	2
  3536  0DB1  0086               	movwf	6	;volatile
  3537  0DB2  0008               	return
  3538  0DB3                     __end_of_UC_Init:
  3539                           
  3540                           	psect	text9
  3541  0F65                     __ptext9:	
  3542 ;; *************** function _UART_Init *****************
  3543 ;; Defined at:
  3544 ;;		line 12 in file "usart.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  bauds_index     1    9[BANK0 ] unsigned char 
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  1    wreg      void 
  3551 ;; Registers used:
  3552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3553 ;; Tracked objects:
  3554 ;;		On entry : B00/100
  3555 ;;		On exit  : 300/100
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3558 ;;      Params:         0       0       0       0
  3559 ;;      Locals:         0       1       0       0
  3560 ;;      Temps:          0       2       0       0
  3561 ;;      Totals:         0       3       0       0
  3562 ;;Total ram usage:        3 bytes
  3563 ;; Hardware stack levels used: 1
  3564 ;; Hardware stack levels required when called: 5
  3565 ;; This function calls:
  3566 ;;		_BAUDS_get
  3567 ;; This function is called by:
  3568 ;;		_main
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572  0F65                     _UART_Init:	
  3573                           ;psect for function _UART_Init
  3574                           
  3575                           
  3576                           ;usart.c: 16:     uint8_t bauds_index = BAUDS_get();
  3577                           
  3578                           ;incstack = 0
  3579                           ; Regs used in _UART_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3580  0F65  158A  2559  158A   	fcall	_BAUDS_get
  3581  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  3582  0F69  00A7               	movwf	??_UART_Init
  3583  0F6A  0827               	movf	??_UART_Init,w
  3584  0F6B  00A9               	movwf	UART_Init@bauds_index
  3585                           
  3586                           ;usart.c: 18:     switch (bauds_index) {
  3587  0F6C  2F85               	goto	l3123
  3588  0F6D                     l385:	
  3589                           ;usart.c: 19:         case 0:
  3590                           
  3591                           
  3592                           ;usart.c: 20:             BRGH = 0;
  3593  0F6D  1683               	bsf	3,5	;RP0=1, select bank1
  3594  0F6E  1118               	bcf	24,2	;volatile
  3595  0F6F                     l3109:
  3596                           
  3597                           ;usart.c: 21:             SPBRG = 25;
  3598  0F6F  3019               	movlw	25
  3599  0F70  2F80               	goto	L23
  3600  0F71                     l387:	
  3601                           ;usart.c: 23:         case 1:
  3602                           
  3603                           ;usart.c: 22:             break;
  3604                           
  3605                           
  3606                           ;usart.c: 24:             BRGH = 1;
  3607  0F71  1683               	bsf	3,5	;RP0=1, select bank1
  3608  0F72  1518               	bsf	24,2	;volatile
  3609                           
  3610                           ;usart.c: 25:             SPBRG = 51;
  3611  0F73  3033               	movlw	51
  3612  0F74  2F80               	goto	L23
  3613  0F75                     l388:	
  3614                           ;usart.c: 30:         case 3:
  3615                           
  3616                           ;usart.c: 26:             break;
  3617                           
  3618                           
  3619                           ;usart.c: 31:             BRGH = 1;
  3620  0F75  1683               	bsf	3,5	;RP0=1, select bank1
  3621  0F76  1518               	bsf	24,2	;volatile
  3622                           
  3623                           ;usart.c: 32:             SPBRG = 12;
  3624  0F77  300C               	movlw	12
  3625  0F78  2F80               	goto	L23
  3626  0F79                     l389:	
  3627                           ;usart.c: 34:         case 4:
  3628                           
  3629                           ;usart.c: 33:             break;
  3630                           
  3631                           
  3632                           ;usart.c: 35:             BRGH = 1;
  3633  0F79  1683               	bsf	3,5	;RP0=1, select bank1
  3634  0F7A  1518               	bsf	24,2	;volatile
  3635                           
  3636                           ;usart.c: 36:             SPBRG = 6;
  3637  0F7B  3006               	movlw	6
  3638  0F7C  2F80               	goto	L23
  3639  0F7D                     l390:	
  3640                           ;usart.c: 38:         case 5:
  3641                           
  3642                           ;usart.c: 37:             break;
  3643                           
  3644                           
  3645                           ;usart.c: 39:             BRGH = 1;
  3646  0F7D  1683               	bsf	3,5	;RP0=1, select bank1
  3647  0F7E  1518               	bsf	24,2	;volatile
  3648                           
  3649                           ;usart.c: 40:             SPBRG = 1;
  3650  0F7F  3001               	movlw	1
  3651  0F80                     L23:
  3652  0F80  0099               	movwf	25	;volatile
  3653                           
  3654                           ;usart.c: 41:             break;
  3655  0F81  2F9E               	goto	l386
  3656  0F82                     l391:	
  3657                           ;usart.c: 42:         default:
  3658                           
  3659                           
  3660                           ;usart.c: 43:             BRGH = 1;
  3661  0F82  1683               	bsf	3,5	;RP0=1, select bank1
  3662  0F83  1518               	bsf	24,2	;volatile
  3663  0F84  2F6F               	goto	l3109
  3664  0F85                     l3123:
  3665  0F85  0829               	movf	UART_Init@bauds_index,w
  3666  0F86  00A7               	movwf	??_UART_Init
  3667  0F87  01A8               	clrf	??_UART_Init+1
  3668                           
  3669                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3670                           ; Switch size 1, requested type "simple"
  3671                           ; Number of cases is 1, Range of values is 0 to 0
  3672                           ; switch strategies available:
  3673                           ; Name         Instructions Cycles
  3674                           ; simple_byte            4     3 (average)
  3675                           ; direct_byte            9     7 (fixed)
  3676                           ; jumptable            260     6 (fixed)
  3677                           ;	Chosen strategy is simple_byte
  3678  0F88  0828               	movf	??_UART_Init+1,w
  3679  0F89  3A00               	xorlw	0	; case 0
  3680  0F8A  1903               	skipnz
  3681  0F8B  2F8D               	goto	l3717
  3682  0F8C  2F82               	goto	l391
  3683  0F8D                     l3717:
  3684                           
  3685                           ; Switch size 1, requested type "simple"
  3686                           ; Number of cases is 5, Range of values is 0 to 5
  3687                           ; switch strategies available:
  3688                           ; Name         Instructions Cycles
  3689                           ; simple_byte           16     9 (average)
  3690                           ; direct_byte           19     7 (fixed)
  3691                           ; jumptable            260     6 (fixed)
  3692                           ;	Chosen strategy is simple_byte
  3693  0F8D  0827               	movf	??_UART_Init,w
  3694  0F8E  3A00               	xorlw	0	; case 0
  3695  0F8F  1903               	skipnz
  3696  0F90  2F6D               	goto	l385
  3697  0F91  3A01               	xorlw	1	; case 1
  3698  0F92  1903               	skipnz
  3699  0F93  2F71               	goto	l387
  3700  0F94  3A02               	xorlw	2	; case 3
  3701  0F95  1903               	skipnz
  3702  0F96  2F75               	goto	l388
  3703  0F97  3A07               	xorlw	7	; case 4
  3704  0F98  1903               	skipnz
  3705  0F99  2F79               	goto	l389
  3706  0F9A  3A01               	xorlw	1	; case 5
  3707  0F9B  1903               	skipnz
  3708  0F9C  2F7D               	goto	l390
  3709  0F9D  2F82               	goto	l391
  3710  0F9E                     l386:
  3711                           
  3712                           ;usart.c: 50:     SYNC = 0;
  3713  0F9E  1218               	bcf	24,4	;volatile
  3714                           
  3715                           ;usart.c: 51:     SPEN = 1;
  3716  0F9F  1283               	bcf	3,5	;RP0=0, select bank0
  3717  0FA0  1798               	bsf	24,7	;volatile
  3718                           
  3719                           ;usart.c: 52:     CREN = 1;
  3720  0FA1  1618               	bsf	24,4	;volatile
  3721                           
  3722                           ;usart.c: 53:     TXEN = 1;
  3723  0FA2  1683               	bsf	3,5	;RP0=1, select bank1
  3724  0FA3  1698               	bsf	24,5	;volatile
  3725                           
  3726                           ;usart.c: 55:     PIR1bits.RCIF = 0;
  3727  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  3728  0FA5  128C               	bcf	12,5	;volatile
  3729                           
  3730                           ;usart.c: 56:     PIE1bits.RCIE = 1;
  3731  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  3732  0FA7  168C               	bsf	12,5	;volatile
  3733  0FA8  0008               	return
  3734  0FA9                     __end_of_UART_Init:
  3735                           
  3736                           	psect	text10
  3737  0D59                     __ptext10:	
  3738 ;; *************** function _BAUDS_get *****************
  3739 ;; Defined at:
  3740 ;;		line 838 in file "main.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;		None
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;		None
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  1    wreg      unsigned char 
  3747 ;; Registers used:
  3748 ;;		wreg, status,2, status,0, pclath, cstack
  3749 ;; Tracked objects:
  3750 ;;		On entry : B00/100
  3751 ;;		On exit  : 300/100
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3754 ;;      Params:         0       0       0       0
  3755 ;;      Locals:         0       0       0       0
  3756 ;;      Temps:          0       0       0       0
  3757 ;;      Totals:         0       0       0       0
  3758 ;;Total ram usage:        0 bytes
  3759 ;; Hardware stack levels used: 1
  3760 ;; Hardware stack levels required when called: 4
  3761 ;; This function calls:
  3762 ;;		_eeprom_read
  3763 ;; This function is called by:
  3764 ;;		_UART_Init
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768  0D59                     _BAUDS_get:	
  3769                           ;psect for function _BAUDS_get
  3770                           
  3771                           
  3772                           ;main.c: 840:     return eeprom_read(0xFF);
  3773                           
  3774                           ;incstack = 0
  3775                           ; Regs used in _BAUDS_get: [wreg+status,2+status,0+pclath+cstack]
  3776  0D59  30FF               	movlw	255
  3777  0D5A  158A  2586         	fcall	_eeprom_read
  3778  0D5C  0008               	return
  3779  0D5D                     __end_of_BAUDS_get:
  3780                           
  3781                           	psect	text11
  3782  0D65                     __ptext11:	
  3783 ;; *************** function _TIMER1_Init *****************
  3784 ;; Defined at:
  3785 ;;		line 649 in file "main.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;		None
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;		None
  3790 ;; Return value:  Size  Location     Type
  3791 ;;                  1    wreg      void 
  3792 ;; Registers used:
  3793 ;;		wreg
  3794 ;; Tracked objects:
  3795 ;;		On entry : 300/100
  3796 ;;		On exit  : 300/100
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3799 ;;      Params:         0       0       0       0
  3800 ;;      Locals:         0       0       0       0
  3801 ;;      Temps:          0       0       0       0
  3802 ;;      Totals:         0       0       0       0
  3803 ;;Total ram usage:        0 bytes
  3804 ;; Hardware stack levels used: 1
  3805 ;; Hardware stack levels required when called: 3
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		_main
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813  0D65                     _TIMER1_Init:	
  3814                           ;psect for function _TIMER1_Init
  3815                           
  3816                           
  3817                           ;main.c: 652:     T1CONbits.T1CKPS1 = 1;
  3818                           
  3819                           ;incstack = 0
  3820                           ; Regs used in _TIMER1_Init: [wreg]
  3821  0D65  1283               	bcf	3,5	;RP0=0, select bank0
  3822  0D66  1690               	bsf	16,5	;volatile
  3823                           
  3824                           ;main.c: 653:     T1CONbits.T1CKPS0 = 1;
  3825  0D67  1610               	bsf	16,4	;volatile
  3826                           
  3827                           ;main.c: 654:     T1CONbits.T1OSCEN = 0;
  3828  0D68  1190               	bcf	16,3	;volatile
  3829                           
  3830                           ;main.c: 655:     T1CONbits.nT1SYNC = 1;
  3831  0D69  1510               	bsf	16,2	;volatile
  3832                           
  3833                           ;main.c: 656:     T1CONbits.TMR1CS = 0;
  3834  0D6A  1090               	bcf	16,1	;volatile
  3835                           
  3836                           ;main.c: 657:     T1CONbits.TMR1ON = 1;
  3837  0D6B  1410               	bsf	16,0	;volatile
  3838                           
  3839                           ;main.c: 658:     TMR1H = 255;
  3840  0D6C  30FF               	movlw	255
  3841  0D6D  008F               	movwf	15	;volatile
  3842                           
  3843                           ;main.c: 659:     TMR1L = 131;
  3844  0D6E  3083               	movlw	131
  3845  0D6F  008E               	movwf	14	;volatile
  3846                           
  3847                           ;main.c: 661:     PIR1bits.TMR1IF = 0;
  3848  0D70  100C               	bcf	12,0	;volatile
  3849                           
  3850                           ;main.c: 662:     PIE1bits.TMR1IE = 1;
  3851  0D71  1683               	bsf	3,5	;RP0=1, select bank1
  3852  0D72  140C               	bsf	12,0	;volatile
  3853  0D73  0008               	return
  3854  0D74                     __end_of_TIMER1_Init:
  3855                           
  3856                           	psect	text12
  3857  0F23                     __ptext12:	
  3858 ;; *************** function _PRESET_save *****************
  3859 ;; Defined at:
  3860 ;;		line 807 in file "main.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;  id              1    wreg     unsigned char 
  3863 ;;  pan             2   13[BANK0 ] unsigned int 
  3864 ;;  tilt            2   15[BANK0 ] unsigned int 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  id              1   19[BANK0 ] unsigned char 
  3867 ;;  _addr           1   20[BANK0 ] unsigned char 
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  1    wreg      void 
  3870 ;; Registers used:
  3871 ;;		wreg, status,2, status,0, pclath, cstack
  3872 ;; Tracked objects:
  3873 ;;		On entry : B00/0
  3874 ;;		On exit  : 200/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3877 ;;      Params:         0       4       0       0
  3878 ;;      Locals:         0       2       0       0
  3879 ;;      Temps:          0       2       0       0
  3880 ;;      Totals:         0       8       0       0
  3881 ;;Total ram usage:        8 bytes
  3882 ;; Hardware stack levels used: 1
  3883 ;; Hardware stack levels required when called: 5
  3884 ;; This function calls:
  3885 ;;		_eeprom_update
  3886 ;; This function is called by:
  3887 ;;		_main
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891  0F23                     _PRESET_save:	
  3892                           ;psect for function _PRESET_save
  3893                           
  3894                           
  3895                           ;incstack = 0
  3896                           ; Regs used in _PRESET_save: [wreg+status,2+status,0+pclath+cstack]
  3897                           ;PRESET_save@id stored from wreg
  3898  0F23  00B3               	movwf	PRESET_save@id
  3899                           
  3900                           ;main.c: 808:     uint8_t _addr = id * 4;
  3901  0F24  0833               	movf	PRESET_save@id,w
  3902  0F25  00B1               	movwf	??_PRESET_save
  3903  0F26  3001               	movlw	1
  3904  0F27                     u3605:
  3905  0F27  1003               	clrc
  3906  0F28  0DB1               	rlf	??_PRESET_save,f
  3907  0F29  3EFF               	addlw	-1
  3908  0F2A  1D03               	skipz
  3909  0F2B  2F27               	goto	u3605
  3910  0F2C  1003               	clrc
  3911  0F2D  0D31               	rlf	??_PRESET_save,w
  3912  0F2E  00B2               	movwf	??_PRESET_save+1
  3913  0F2F  0832               	movf	??_PRESET_save+1,w
  3914  0F30  00B4               	movwf	PRESET_save@_addr
  3915                           
  3916                           ;main.c: 810:     if (id < 50) {
  3917  0F31  3032               	movlw	50
  3918  0F32  0233               	subwf	PRESET_save@id,w
  3919  0F33  1803               	skipnc
  3920  0F34  0008               	return
  3921                           
  3922                           ;main.c: 812:         eeprom_update(_addr, pan & 0xFF);
  3923  0F35  30FF               	movlw	255
  3924  0F36  052D               	andwf	PRESET_save@pan,w
  3925  0F37  00A8               	movwf	eeprom_update@value
  3926  0F38  3000               	movlw	0
  3927  0F39  052E               	andwf	PRESET_save@pan+1,w
  3928  0F3A  00A9               	movwf	eeprom_update@value+1
  3929  0F3B  0834               	movf	PRESET_save@_addr,w
  3930  0F3C  158A  25B3  158A   	fcall	_eeprom_update
  3931                           
  3932                           ;main.c: 813:         eeprom_update(_addr + 1, (pan >> 8) & 0xFF);
  3933  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  3934  0F40  082E               	movf	PRESET_save@pan+1,w
  3935  0F41  00B1               	movwf	??_PRESET_save
  3936  0F42  01B2               	clrf	??_PRESET_save+1
  3937  0F43  0831               	movf	??_PRESET_save,w
  3938  0F44  00A8               	movwf	eeprom_update@value
  3939  0F45  0832               	movf	??_PRESET_save+1,w
  3940  0F46  00A9               	movwf	eeprom_update@value+1
  3941  0F47  0834               	movf	PRESET_save@_addr,w
  3942  0F48  3E01               	addlw	1
  3943  0F49  158A  25B3  158A   	fcall	_eeprom_update
  3944                           
  3945                           ;main.c: 815:         eeprom_update(_addr + 2, tilt & 0xFF);
  3946  0F4C  30FF               	movlw	255
  3947  0F4D  1283               	bcf	3,5	;RP0=0, select bank0
  3948  0F4E  052F               	andwf	PRESET_save@tilt,w
  3949  0F4F  00A8               	movwf	eeprom_update@value
  3950  0F50  3000               	movlw	0
  3951  0F51  0530               	andwf	PRESET_save@tilt+1,w
  3952  0F52  00A9               	movwf	eeprom_update@value+1
  3953  0F53  0834               	movf	PRESET_save@_addr,w
  3954  0F54  3E02               	addlw	2
  3955  0F55  158A  25B3  158A   	fcall	_eeprom_update
  3956                           
  3957                           ;main.c: 816:         eeprom_update(_addr + 3, (tilt >> 8) & 0xFF);
  3958  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0F59  0830               	movf	PRESET_save@tilt+1,w
  3960  0F5A  00B1               	movwf	??_PRESET_save
  3961  0F5B  01B2               	clrf	??_PRESET_save+1
  3962  0F5C  0831               	movf	??_PRESET_save,w
  3963  0F5D  00A8               	movwf	eeprom_update@value
  3964  0F5E  0832               	movf	??_PRESET_save+1,w
  3965  0F5F  00A9               	movwf	eeprom_update@value+1
  3966  0F60  0834               	movf	PRESET_save@_addr,w
  3967  0F61  3E03               	addlw	3
  3968  0F62  158A  25B3         	fcall	_eeprom_update
  3969  0F64  0008               	return
  3970  0F65                     __end_of_PRESET_save:
  3971                           
  3972                           	psect	text13
  3973  0FA9                     __ptext13:	
  3974 ;; *************** function _PRESET_load *****************
  3975 ;; Defined at:
  3976 ;;		line 820 in file "main.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  id              1    wreg     unsigned char 
  3979 ;;  pan             1    7[BANK0 ] PTR unsigned int 
  3980 ;;		 -> main@pan_tmp_419(2), main@pan_tmp(2), 
  3981 ;;  tilt            1    8[BANK0 ] PTR unsigned int 
  3982 ;;		 -> main@tilt_tmp_420(2), main@tilt_tmp(2), 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  id              1   11[BANK0 ] unsigned char 
  3985 ;;  _addr           1   12[BANK0 ] unsigned char 
  3986 ;; Return value:  Size  Location     Type
  3987 ;;                  1    wreg      void 
  3988 ;; Registers used:
  3989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3990 ;; Tracked objects:
  3991 ;;		On entry : 300/0
  3992 ;;		On exit  : 300/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3995 ;;      Params:         0       2       0       0
  3996 ;;      Locals:         0       2       0       0
  3997 ;;      Temps:          0       2       0       0
  3998 ;;      Totals:         0       6       0       0
  3999 ;;Total ram usage:        6 bytes
  4000 ;; Hardware stack levels used: 1
  4001 ;; Hardware stack levels required when called: 4
  4002 ;; This function calls:
  4003 ;;		_eeprom_read
  4004 ;; This function is called by:
  4005 ;;		_main
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009  0FA9                     _PRESET_load:	
  4010                           ;psect for function _PRESET_load
  4011                           
  4012                           
  4013                           ;incstack = 0
  4014                           ; Regs used in _PRESET_load: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4015                           ;PRESET_load@id stored from wreg
  4016  0FA9  00AB               	movwf	PRESET_load@id
  4017                           
  4018                           ;main.c: 821:     uint8_t _addr = id * 4;
  4019  0FAA  082B               	movf	PRESET_load@id,w
  4020  0FAB  00A9               	movwf	??_PRESET_load
  4021  0FAC  3001               	movlw	1
  4022  0FAD                     u3625:
  4023  0FAD  1003               	clrc
  4024  0FAE  0DA9               	rlf	??_PRESET_load,f
  4025  0FAF  3EFF               	addlw	-1
  4026  0FB0  1D03               	skipz
  4027  0FB1  2FAD               	goto	u3625
  4028  0FB2  1003               	clrc
  4029  0FB3  0D29               	rlf	??_PRESET_load,w
  4030  0FB4  00AA               	movwf	??_PRESET_load+1
  4031  0FB5  082A               	movf	??_PRESET_load+1,w
  4032  0FB6  00AC               	movwf	PRESET_load@_addr
  4033                           
  4034                           ;main.c: 823:     if (id < 50) {
  4035  0FB7  3032               	movlw	50
  4036  0FB8  022B               	subwf	PRESET_load@id,w
  4037  0FB9  1803               	skipnc
  4038  0FBA  0008               	return
  4039                           
  4040                           ;main.c: 825:         *pan = (uint16_t) (eeprom_read(_addr));
  4041  0FBB  082C               	movf	PRESET_load@_addr,w
  4042  0FBC  158A  2586  158A   	fcall	_eeprom_read
  4043  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  4044  0FC0  00A9               	movwf	??_PRESET_load
  4045  0FC1  01AA               	clrf	??_PRESET_load+1
  4046  0FC2  0827               	movf	PRESET_load@pan,w
  4047  0FC3  0084               	movwf	4
  4048  0FC4  0829               	movf	??_PRESET_load,w
  4049  0FC5  1383               	bcf	3,7	;select IRP bank0
  4050  0FC6  0080               	movwf	0
  4051  0FC7  0A84               	incf	4,f
  4052  0FC8  082A               	movf	??_PRESET_load+1,w
  4053  0FC9  0080               	movwf	0
  4054                           
  4055                           ;main.c: 826:         *pan |= (uint16_t) (eeprom_read(_addr + 1) << 8);
  4056  0FCA  082C               	movf	PRESET_load@_addr,w
  4057  0FCB  3E01               	addlw	1
  4058  0FCC  158A  2586  158A   	fcall	_eeprom_read
  4059  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  4060  0FD0  00A9               	movwf	??_PRESET_load
  4061  0FD1  01AA               	clrf	??_PRESET_load+1
  4062  0FD2  0829               	movf	??_PRESET_load,w
  4063  0FD3  00AA               	movwf	??_PRESET_load+1
  4064  0FD4  01A9               	clrf	??_PRESET_load
  4065  0FD5  0827               	movf	PRESET_load@pan,w
  4066  0FD6  0084               	movwf	4
  4067  0FD7  0829               	movf	??_PRESET_load,w
  4068  0FD8  1383               	bcf	3,7	;select IRP bank0
  4069  0FD9  0480               	iorwf	0,f
  4070  0FDA  0A84               	incf	4,f
  4071  0FDB  082A               	movf	??_PRESET_load+1,w
  4072  0FDC  0480               	iorwf	0,f
  4073                           
  4074                           ;main.c: 828:         *tilt = (uint16_t) (eeprom_read(_addr + 2));
  4075  0FDD  082C               	movf	PRESET_load@_addr,w
  4076  0FDE  3E02               	addlw	2
  4077  0FDF  158A  2586  158A   	fcall	_eeprom_read
  4078  0FE2  1283               	bcf	3,5	;RP0=0, select bank0
  4079  0FE3  00A9               	movwf	??_PRESET_load
  4080  0FE4  01AA               	clrf	??_PRESET_load+1
  4081  0FE5  0828               	movf	PRESET_load@tilt,w
  4082  0FE6  0084               	movwf	4
  4083  0FE7  0829               	movf	??_PRESET_load,w
  4084  0FE8  1383               	bcf	3,7	;select IRP bank0
  4085  0FE9  0080               	movwf	0
  4086  0FEA  0A84               	incf	4,f
  4087  0FEB  082A               	movf	??_PRESET_load+1,w
  4088  0FEC  0080               	movwf	0
  4089                           
  4090                           ;main.c: 829:         *tilt |= (uint16_t) (eeprom_read(_addr + 3) << 8);
  4091  0FED  082C               	movf	PRESET_load@_addr,w
  4092  0FEE  3E03               	addlw	3
  4093  0FEF  158A  2586         	fcall	_eeprom_read
  4094  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  4095  0FF2  00A9               	movwf	??_PRESET_load
  4096  0FF3  01AA               	clrf	??_PRESET_load+1
  4097  0FF4  0829               	movf	??_PRESET_load,w
  4098  0FF5  00AA               	movwf	??_PRESET_load+1
  4099  0FF6  01A9               	clrf	??_PRESET_load
  4100  0FF7  0828               	movf	PRESET_load@tilt,w
  4101  0FF8  0084               	movwf	4
  4102  0FF9  0829               	movf	??_PRESET_load,w
  4103  0FFA  1383               	bcf	3,7	;select IRP bank0
  4104  0FFB  0480               	iorwf	0,f
  4105  0FFC  0A84               	incf	4,f
  4106  0FFD  082A               	movf	??_PRESET_load+1,w
  4107  0FFE  0480               	iorwf	0,f
  4108  0FFF  0008               	return
  4109  1000                     __end_of_PRESET_load:
  4110                           
  4111                           	psect	text14
  4112  0725                     __ptext14:	
  4113 ;; *************** function _MOTOR_Init *****************
  4114 ;; Defined at:
  4115 ;;		line 718 in file "main.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;		None
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;		None
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      void 
  4122 ;; Registers used:
  4123 ;;		wreg, status,2, status,0, pclath, cstack
  4124 ;; Tracked objects:
  4125 ;;		On entry : 300/0
  4126 ;;		On exit  : 300/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4129 ;;      Params:         0       0       0       0
  4130 ;;      Locals:         0       0       0       0
  4131 ;;      Temps:          0       1       0       0
  4132 ;;      Totals:         0       1       0       0
  4133 ;;Total ram usage:        1 bytes
  4134 ;; Hardware stack levels used: 1
  4135 ;; Hardware stack levels required when called: 4
  4136 ;; This function calls:
  4137 ;;		_delay_wdt
  4138 ;; This function is called by:
  4139 ;;		_main
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143  0725                     _MOTOR_Init:	
  4144                           ;psect for function _MOTOR_Init
  4145                           
  4146                           
  4147                           ;main.c: 719:     is_init = 1;
  4148                           
  4149                           ;incstack = 0
  4150                           ; Regs used in _MOTOR_Init: [wreg+status,2+status,0+pclath+cstack]
  4151  0725  01CB               	clrf	_is_init
  4152  0726  0ACB               	incf	_is_init,f
  4153                           
  4154                           ;main.c: 721:     delay_wdt(50);
  4155  0727  3032               	movlw	50
  4156  0728  00A5               	movwf	delay_wdt@_ms
  4157  0729  3000               	movlw	0
  4158  072A  00A6               	movwf	delay_wdt@_ms+1
  4159  072B  158A  25CB  118A   	fcall	_delay_wdt
  4160                           
  4161                           ;main.c: 724:     pan_speed = 0x32;
  4162  072E  3032               	movlw	50
  4163  072F  00A8               	movwf	??_MOTOR_Init
  4164  0730  0828               	movf	??_MOTOR_Init,w
  4165  0731  00D7               	movwf	_pan_speed	;volatile
  4166                           
  4167                           ;main.c: 725:     pan_direction = 1;
  4168  0732  3001               	movlw	1
  4169  0733  00A8               	movwf	??_MOTOR_Init
  4170  0734  0828               	movf	??_MOTOR_Init,w
  4171  0735  00D8               	movwf	_pan_direction	;volatile
  4172                           
  4173                           ;main.c: 726:     pan_enabled = 1;
  4174  0736  3001               	movlw	1
  4175  0737  00A8               	movwf	??_MOTOR_Init
  4176  0738  0828               	movf	??_MOTOR_Init,w
  4177  0739  00D9               	movwf	_pan_enabled	;volatile
  4178                           
  4179                           ;main.c: 728:     delay_wdt(22500);
  4180  073A  30E4               	movlw	228
  4181  073B  00A5               	movwf	delay_wdt@_ms
  4182  073C  3057               	movlw	87
  4183  073D  00A6               	movwf	delay_wdt@_ms+1
  4184  073E  158A  25CB  118A   	fcall	_delay_wdt
  4185                           
  4186                           ;main.c: 730:     pan_enabled = 0;
  4187  0741  01D9               	clrf	_pan_enabled	;volatile
  4188                           
  4189                           ;main.c: 732:     pan_counter = 0;
  4190  0742  01C9               	clrf	_pan_counter	;volatile
  4191  0743  01CA               	clrf	_pan_counter+1	;volatile
  4192                           
  4193                           ;main.c: 734:     delay_wdt(100);
  4194  0744  3064               	movlw	100
  4195  0745  00A5               	movwf	delay_wdt@_ms
  4196  0746  3000               	movlw	0
  4197  0747  00A6               	movwf	delay_wdt@_ms+1
  4198  0748  158A  25CB  118A   	fcall	_delay_wdt
  4199                           
  4200                           ;main.c: 737:     pan_speed = 0x32;
  4201  074B  3032               	movlw	50
  4202  074C  00A8               	movwf	??_MOTOR_Init
  4203  074D  0828               	movf	??_MOTOR_Init,w
  4204  074E  00D7               	movwf	_pan_speed	;volatile
  4205                           
  4206                           ;main.c: 738:     pan_direction = 0;
  4207  074F  01D8               	clrf	_pan_direction	;volatile
  4208                           
  4209                           ;main.c: 739:     pan_enabled = 1;
  4210  0750  3001               	movlw	1
  4211  0751  00A8               	movwf	??_MOTOR_Init
  4212  0752  0828               	movf	??_MOTOR_Init,w
  4213  0753  00D9               	movwf	_pan_enabled	;volatile
  4214                           
  4215                           ;main.c: 741:     delay_wdt(500);
  4216  0754  30F4               	movlw	244
  4217  0755  00A5               	movwf	delay_wdt@_ms
  4218  0756  3001               	movlw	1
  4219  0757  00A6               	movwf	delay_wdt@_ms+1
  4220  0758  158A  25CB  118A   	fcall	_delay_wdt
  4221                           
  4222                           ;main.c: 743:     pan_enabled = 0;
  4223  075B  01D9               	clrf	_pan_enabled	;volatile
  4224                           
  4225                           ;main.c: 745:     pan_counter = 0;
  4226  075C  01C9               	clrf	_pan_counter	;volatile
  4227  075D  01CA               	clrf	_pan_counter+1	;volatile
  4228                           
  4229                           ;main.c: 747:     delay_wdt(50);
  4230  075E  3032               	movlw	50
  4231  075F  00A5               	movwf	delay_wdt@_ms
  4232  0760  3000               	movlw	0
  4233  0761  00A6               	movwf	delay_wdt@_ms+1
  4234  0762  158A  25CB  118A   	fcall	_delay_wdt
  4235                           
  4236                           ;main.c: 750:     tilt_speed = 0x32;
  4237  0765  3032               	movlw	50
  4238  0766  00A8               	movwf	??_MOTOR_Init
  4239  0767  0828               	movf	??_MOTOR_Init,w
  4240  0768  00D4               	movwf	_tilt_speed	;volatile
  4241                           
  4242                           ;main.c: 751:     tilt_direction = 1;
  4243  0769  3001               	movlw	1
  4244  076A  00A8               	movwf	??_MOTOR_Init
  4245  076B  0828               	movf	??_MOTOR_Init,w
  4246  076C  1683               	bsf	3,5	;RP0=1, select bank1
  4247  076D  00DC               	movwf	_tilt_direction^(0+128)	;volatile
  4248                           
  4249                           ;main.c: 752:     tilt_enabled = 1;
  4250  076E  3001               	movlw	1
  4251  076F  1283               	bcf	3,5	;RP0=0, select bank0
  4252  0770  00A8               	movwf	??_MOTOR_Init
  4253  0771  0828               	movf	??_MOTOR_Init,w
  4254  0772  00D5               	movwf	_tilt_enabled	;volatile
  4255                           
  4256                           ;main.c: 754:     delay_wdt(6000);
  4257  0773  3070               	movlw	112
  4258  0774  00A5               	movwf	delay_wdt@_ms
  4259  0775  3017               	movlw	23
  4260  0776  00A6               	movwf	delay_wdt@_ms+1
  4261  0777  158A  25CB  118A   	fcall	_delay_wdt
  4262                           
  4263                           ;main.c: 756:     tilt_enabled = 0;
  4264  077A  01D5               	clrf	_tilt_enabled	;volatile
  4265                           
  4266                           ;main.c: 758:     tilt_counter = 0;
  4267  077B  01C7               	clrf	_tilt_counter	;volatile
  4268  077C  01C8               	clrf	_tilt_counter+1	;volatile
  4269                           
  4270                           ;main.c: 760:     delay_wdt(100);
  4271  077D  3064               	movlw	100
  4272  077E  00A5               	movwf	delay_wdt@_ms
  4273  077F  3000               	movlw	0
  4274  0780  00A6               	movwf	delay_wdt@_ms+1
  4275  0781  158A  25CB  118A   	fcall	_delay_wdt
  4276                           
  4277                           ;main.c: 763:     tilt_speed = 0x32;
  4278  0784  3032               	movlw	50
  4279  0785  00A8               	movwf	??_MOTOR_Init
  4280  0786  0828               	movf	??_MOTOR_Init,w
  4281  0787  00D4               	movwf	_tilt_speed	;volatile
  4282                           
  4283                           ;main.c: 764:     tilt_direction = 0;
  4284  0788  1683               	bsf	3,5	;RP0=1, select bank1
  4285  0789  01DC               	clrf	_tilt_direction^(0+128)	;volatile
  4286                           
  4287                           ;main.c: 765:     tilt_enabled = 1;
  4288  078A  3001               	movlw	1
  4289  078B  1283               	bcf	3,5	;RP0=0, select bank0
  4290  078C  00A8               	movwf	??_MOTOR_Init
  4291  078D  0828               	movf	??_MOTOR_Init,w
  4292  078E  00D5               	movwf	_tilt_enabled	;volatile
  4293                           
  4294                           ;main.c: 767:     delay_wdt(750);
  4295  078F  30EE               	movlw	238
  4296  0790  00A5               	movwf	delay_wdt@_ms
  4297  0791  3002               	movlw	2
  4298  0792  00A6               	movwf	delay_wdt@_ms+1
  4299  0793  158A  25CB         	fcall	_delay_wdt
  4300                           
  4301                           ;main.c: 769:     tilt_enabled = 0;
  4302  0795  01D5               	clrf	_tilt_enabled	;volatile
  4303                           
  4304                           ;main.c: 771:     tilt_counter = 0;
  4305  0796  01C7               	clrf	_tilt_counter	;volatile
  4306  0797  01C8               	clrf	_tilt_counter+1	;volatile
  4307                           
  4308                           ;main.c: 773:     is_init = 0;
  4309  0798  01CB               	clrf	_is_init
  4310  0799  0008               	return
  4311  079A                     __end_of_MOTOR_Init:
  4312                           
  4313                           	psect	text15
  4314  0DCB                     __ptext15:	
  4315 ;; *************** function _delay_wdt *****************
  4316 ;; Defined at:
  4317 ;;		line 708 in file "main.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  _ms             2    5[BANK0 ] unsigned int 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;		None
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      void 
  4324 ;; Registers used:
  4325 ;;		wreg, status,2, status,0
  4326 ;; Tracked objects:
  4327 ;;		On entry : 300/0
  4328 ;;		On exit  : 300/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4331 ;;      Params:         0       2       0       0
  4332 ;;      Locals:         0       0       0       0
  4333 ;;      Temps:          0       1       0       0
  4334 ;;      Totals:         0       3       0       0
  4335 ;;Total ram usage:        3 bytes
  4336 ;; Hardware stack levels used: 1
  4337 ;; Hardware stack levels required when called: 3
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_main
  4342 ;;		_MOTOR_Init
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346  0DCB                     _delay_wdt:	
  4347                           ;psect for function _delay_wdt
  4348                           
  4349                           
  4350                           ;incstack = 0
  4351                           ; Regs used in _delay_wdt: [wreg+status,2+status,0]
  4352  0DCB  0064               	clrwdt	;# 
  4353  0DCC                     l3025:	
  4354                           ;main.c: 711:     while (_ms--) {
  4355                           
  4356                           
  4357                           ;main.c: 711:     while (_ms--) {
  4358  0DCC  3001               	movlw	1
  4359  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  4360  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  4361  0DCF  02A5               	subwf	delay_wdt@_ms,f
  4362  0DD0  3000               	movlw	0
  4363  0DD1  1C03               	skipc
  4364  0DD2  03A6               	decf	delay_wdt@_ms+1,f
  4365  0DD3  02A6               	subwf	delay_wdt@_ms+1,f
  4366  0DD4  0A25               	incf	delay_wdt@_ms,w
  4367  0DD5  1903               	btfsc	3,2
  4368  0DD6  0A26               	incf	delay_wdt@_ms+1,w
  4369  0DD7  1903               	btfsc	3,2
  4370  0DD8  0008               	return
  4371  0DD9  0064               	clrwdt	;# 
  4372                           
  4373                           ;main.c: 714:         _delay((unsigned long)((1)*(4000000/4000.0)));
  4374  0DDA  30C7               	movlw	199
  4375  0DDB  1283               	bcf	3,5	;RP0=0, select bank0
  4376  0DDC  1303               	bcf	3,6	;RP1=0, select bank0
  4377  0DDD  00A7               	movwf	??_delay_wdt
  4378  0DDE                     u4147:
  4379  0DDE  2DDF               	nop2
  4380  0DDF  0BA7               	decfsz	??_delay_wdt,f
  4381  0DE0  2DDE               	goto	u4147
  4382  0DE1  2DE2               	nop2
  4383  0DE2  0000               	nop
  4384  0DE3  2DCC               	goto	l3025
  4385  0DE4                     __end_of_delay_wdt:
  4386                           
  4387                           	psect	text16
  4388  07F3                     __ptext16:	
  4389 ;; *************** function _BAUDS_set *****************
  4390 ;; Defined at:
  4391 ;;		line 833 in file "main.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  index           1    wreg     unsigned char 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  index           1   15[BANK0 ] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  1    wreg      void 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0, pclath, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : B00/0
  4402 ;;		On exit  : 200/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4405 ;;      Params:         0       0       0       0
  4406 ;;      Locals:         0       1       0       0
  4407 ;;      Temps:          0       2       0       0
  4408 ;;      Totals:         0       3       0       0
  4409 ;;Total ram usage:        3 bytes
  4410 ;; Hardware stack levels used: 1
  4411 ;; Hardware stack levels required when called: 5
  4412 ;; This function calls:
  4413 ;;		_eeprom_update
  4414 ;; This function is called by:
  4415 ;;		_main
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419  07F3                     _BAUDS_set:	
  4420                           ;psect for function _BAUDS_set
  4421                           
  4422                           
  4423                           ;incstack = 0
  4424                           ; Regs used in _BAUDS_set: [wreg+status,2+status,0+pclath+cstack]
  4425                           ;BAUDS_set@index stored from wreg
  4426  07F3  00AF               	movwf	BAUDS_set@index
  4427                           
  4428                           ;main.c: 835:     eeprom_update(0xFF, index);
  4429  07F4  082F               	movf	BAUDS_set@index,w
  4430  07F5  00AD               	movwf	??_BAUDS_set
  4431  07F6  01AE               	clrf	??_BAUDS_set+1
  4432  07F7  082D               	movf	??_BAUDS_set,w
  4433  07F8  00A8               	movwf	eeprom_update@value
  4434  07F9  082E               	movf	??_BAUDS_set+1,w
  4435  07FA  00A9               	movwf	eeprom_update@value+1
  4436  07FB  30FF               	movlw	255
  4437  07FC  158A  25B3         	fcall	_eeprom_update
  4438  07FE  0008               	return
  4439  07FF                     __end_of_BAUDS_set:
  4440                           
  4441                           	psect	text17
  4442  0DB3                     __ptext17:	
  4443 ;; *************** function _eeprom_update *****************
  4444 ;; Defined at:
  4445 ;;		line 801 in file "main.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;  addr            1    wreg     unsigned char 
  4448 ;;  value           2    8[BANK0 ] unsigned int 
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;  addr            1   12[BANK0 ] unsigned char 
  4451 ;; Return value:  Size  Location     Type
  4452 ;;                  1    wreg      void 
  4453 ;; Registers used:
  4454 ;;		wreg, status,2, status,0, pclath, cstack
  4455 ;; Tracked objects:
  4456 ;;		On entry : 300/0
  4457 ;;		On exit  : 200/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4460 ;;      Params:         0       2       0       0
  4461 ;;      Locals:         0       1       0       0
  4462 ;;      Temps:          0       2       0       0
  4463 ;;      Totals:         0       5       0       0
  4464 ;;Total ram usage:        5 bytes
  4465 ;; Hardware stack levels used: 1
  4466 ;; Hardware stack levels required when called: 4
  4467 ;; This function calls:
  4468 ;;		_eeprom_read
  4469 ;;		_eeprom_write
  4470 ;; This function is called by:
  4471 ;;		_PRESET_save
  4472 ;;		_BAUDS_set
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476  0DB3                     _eeprom_update:	
  4477                           ;psect for function _eeprom_update
  4478                           
  4479                           
  4480                           ;incstack = 0
  4481                           ; Regs used in _eeprom_update: [wreg+status,2+status,0+pclath+cstack]
  4482                           ;eeprom_update@addr stored from wreg
  4483  0DB3  00AC               	movwf	eeprom_update@addr
  4484                           
  4485                           ;main.c: 802:     if (value != eeprom_read(addr)) {
  4486  0DB4  082C               	movf	eeprom_update@addr,w
  4487  0DB5  158A  2586  158A   	fcall	_eeprom_read
  4488  0DB8  1283               	bcf	3,5	;RP0=0, select bank0
  4489  0DB9  00AA               	movwf	??_eeprom_update
  4490  0DBA  01AB               	clrf	??_eeprom_update+1
  4491  0DBB  0829               	movf	eeprom_update@value+1,w
  4492  0DBC  062B               	xorwf	??_eeprom_update+1,w
  4493  0DBD  1D03               	skipz
  4494  0DBE  2DC1               	goto	u3265
  4495  0DBF  0828               	movf	eeprom_update@value,w
  4496  0DC0  062A               	xorwf	??_eeprom_update,w
  4497  0DC1                     u3265:
  4498  0DC1  1903               	skipnz
  4499  0DC2  0008               	return
  4500                           
  4501                           ;main.c: 803:         eeprom_write(addr, value);
  4502  0DC3  0828               	movf	eeprom_update@value,w
  4503  0DC4  00AA               	movwf	??_eeprom_update
  4504  0DC5  082A               	movf	??_eeprom_update,w
  4505  0DC6  00A5               	movwf	eeprom_write@value
  4506  0DC7  082C               	movf	eeprom_update@addr,w
  4507  0DC8  158A  25E4         	fcall	_eeprom_write
  4508  0DCA  0008               	return
  4509  0DCB                     __end_of_eeprom_update:
  4510                           
  4511                           	psect	text18
  4512  0DE4                     __ptext18:	
  4513 ;; *************** function _eeprom_write *****************
  4514 ;; Defined at:
  4515 ;;		line 6 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  addr            1    wreg     unsigned char 
  4518 ;;  value           1    5[BANK0 ] unsigned char 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;  addr            1    7[BANK0 ] unsigned char 
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  1    wreg      void 
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0
  4525 ;; Tracked objects:
  4526 ;;		On entry : 300/0
  4527 ;;		On exit  : 300/100
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4530 ;;      Params:         0       1       0       0
  4531 ;;      Locals:         0       1       0       0
  4532 ;;      Temps:          0       1       0       0
  4533 ;;      Totals:         0       3       0       0
  4534 ;;Total ram usage:        3 bytes
  4535 ;; Hardware stack levels used: 1
  4536 ;; Hardware stack levels required when called: 3
  4537 ;; This function calls:
  4538 ;;		Nothing
  4539 ;; This function is called by:
  4540 ;;		_eeprom_update
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544  0DE4                     _eeprom_write:	
  4545                           ;psect for function _eeprom_write
  4546                           
  4547                           
  4548                           ;incstack = 0
  4549                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  4550                           ;eeprom_write@addr stored from wreg
  4551  0DE4  00A7               	movwf	eeprom_write@addr
  4552  0DE5                     l519:	
  4553                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 6: eeprom_write(unsigned char
      +                           addr, unsigned char value);/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 7:
      +                           {;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 8:  do{ while (EECON1bits.W
      +                          R) { continue; } EEADR = (addr); EEDATA = (value); EECON1 &= 0x3F; STATUSbits.CARRY = 0;
      +                           if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCONbits.GIE = 0; EECON1bits.WREN = 1; 
      +                          EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EECON1bits.WREN = 0; if (STATUSbits.CAR
      +                          RY) { INTCONbits.GIE = 1; } } while (0);
  4554                           
  4555  0DE5  1683               	bsf	3,5	;RP0=1, select bank1
  4556  0DE6  189C               	btfsc	28,1	;volsfr
  4557  0DE7  2DE5               	goto	l519
  4558  0DE8  1283               	bcf	3,5	;RP0=0, select bank0
  4559  0DE9  0827               	movf	eeprom_write@addr,w
  4560  0DEA  1683               	bsf	3,5	;RP0=1, select bank1
  4561  0DEB  009B               	movwf	27	;volatile
  4562  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
  4563  0DED  0825               	movf	eeprom_write@value,w
  4564  0DEE  1683               	bsf	3,5	;RP0=1, select bank1
  4565  0DEF  009A               	movwf	26	;volatile
  4566  0DF0  303F               	movlw	63
  4567  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  4568  0DF2  00A6               	movwf	??_eeprom_write
  4569  0DF3  0826               	movf	??_eeprom_write,w
  4570  0DF4  1683               	bsf	3,5	;RP0=1, select bank1
  4571  0DF5  059C               	andwf	28,f	;volsfr
  4572  0DF6  1003               	bcf	3,0	;volatile
  4573  0DF7  1B8B               	btfsc	11,7	;volatile
  4574  0DF8  1403               	bsf	3,0	;volatile
  4575  0DF9  138B               	bcf	11,7	;volatile
  4576  0DFA  151C               	bsf	28,2	;volsfr
  4577  0DFB  3055               	movlw	85
  4578  0DFC  009D               	movwf	29	;volsfr
  4579  0DFD  30AA               	movlw	170
  4580  0DFE  009D               	movwf	29	;volsfr
  4581  0DFF  149C               	bsf	28,1	;volsfr
  4582  0E00  111C               	bcf	28,2	;volsfr
  4583  0E01  1C03               	btfss	3,0	;volatile
  4584  0E02  0008               	return
  4585  0E03  178B               	bsf	11,7	;volatile
  4586  0E04  0008               	return
  4587  0E05                     __end_of_eeprom_write:
  4588                           
  4589                           	psect	text19
  4590  0D86                     __ptext19:	
  4591 ;; *************** function _eeprom_read *****************
  4592 ;; Defined at:
  4593 ;;		line 6 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;  addr            1    wreg     unsigned char 
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;  addr            1    6[BANK0 ] unsigned char 
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  1    wreg      unsigned char 
  4600 ;; Registers used:
  4601 ;;		wreg, status,2, status,0
  4602 ;; Tracked objects:
  4603 ;;		On entry : 200/100
  4604 ;;		On exit  : 300/100
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4607 ;;      Params:         0       0       0       0
  4608 ;;      Locals:         0       1       0       0
  4609 ;;      Temps:          0       1       0       0
  4610 ;;      Totals:         0       2       0       0
  4611 ;;Total ram usage:        2 bytes
  4612 ;; Hardware stack levels used: 1
  4613 ;; Hardware stack levels required when called: 3
  4614 ;; This function calls:
  4615 ;;		Nothing
  4616 ;; This function is called by:
  4617 ;;		_eeprom_update
  4618 ;;		_PRESET_load
  4619 ;;		_BAUDS_get
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623  0D86                     _eeprom_read:	
  4624                           ;psect for function _eeprom_read
  4625                           
  4626                           
  4627                           ;incstack = 0
  4628                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4629                           ;eeprom_read@addr stored from wreg
  4630  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  4631  0D87  00A6               	movwf	eeprom_read@addr
  4632  0D88  2D8A               	goto	l499
  4633  0D89                     u3181:
  4634  0D89  1283               	bcf	3,5	;RP0=0, select bank0
  4635  0D8A                     l499:	
  4636                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 6: eeprom_read(unsigned char a
      +                          ddr);/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 7: {;/opt/microchip/xc8/v2
      +                          .36/pic/sources/c90/pic/__eeread.c: 8:  do
  4637                           
  4638  0D8A  0064               	clrwdt	;# 
  4639  0D8B  1683               	bsf	3,5	;RP0=1, select bank1
  4640  0D8C  1303               	bcf	3,6	;RP1=0, select bank1
  4641  0D8D  189C               	btfsc	28,1	;volsfr
  4642  0D8E  2D89               	goto	u3181
  4643                           
  4644                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 18:  return ( EEADR = addr, EE
      +                          CON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  4645  0D8F  1283               	bcf	3,5	;RP0=0, select bank0
  4646  0D90  0826               	movf	eeprom_read@addr,w
  4647  0D91  1683               	bsf	3,5	;RP0=1, select bank1
  4648  0D92  009B               	movwf	27	;volatile
  4649  0D93  303F               	movlw	63
  4650  0D94  1283               	bcf	3,5	;RP0=0, select bank0
  4651  0D95  00A5               	movwf	??_eeprom_read
  4652  0D96  0825               	movf	??_eeprom_read,w
  4653  0D97  1683               	bsf	3,5	;RP0=1, select bank1
  4654  0D98  059C               	andwf	28,f	;volsfr
  4655  0D99  141C               	bsf	28,0	;volsfr
  4656  0D9A  081A               	movf	26,w	;volatile
  4657  0D9B  0008               	return
  4658  0D9C                     __end_of_eeprom_read:
  4659                           
  4660                           	psect	text20
  4661  0355                     __ptext20:	
  4662 ;; *************** function _myISR *****************
  4663 ;; Defined at:
  4664 ;;		line 151 in file "main.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;		None
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;		None
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  1    wreg      void 
  4671 ;; Registers used:
  4672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 300/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4678 ;;      Params:         0       0       0       0
  4679 ;;      Locals:         0       0       0       0
  4680 ;;      Temps:          0       5       0       0
  4681 ;;      Totals:         0       5       0       0
  4682 ;;Total ram usage:        5 bytes
  4683 ;; Hardware stack levels used: 1
  4684 ;; Hardware stack levels required when called: 2
  4685 ;; This function calls:
  4686 ;;		_SPEED_calc
  4687 ;; This function is called by:
  4688 ;;		Interrupt level 1
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692  0355                     _myISR:	
  4693                           ;psect for function _myISR
  4694                           
  4695                           
  4696                           ;main.c: 152:     if (PIR1bits.RCIF == 1) {
  4697  0355  1E8C               	btfss	12,5	;volatile
  4698  0356  2BB7               	goto	i1l167
  4699                           
  4700                           ;main.c: 153:         data_receiv = RCREG;
  4701  0357  081A               	movf	26,w	;volatile
  4702  0358  00A0               	movwf	??_myISR
  4703  0359  0820               	movf	??_myISR,w
  4704  035A  00DE               	movwf	_data_receiv	;volatile
  4705                           
  4706                           ;main.c: 157:         if (is_init == 1) {
  4707  035B  034B               	decf	_is_init,w
  4708  035C  1903               	btfsc	3,2
  4709  035D  2D4F               	goto	i1l169
  4710                           
  4711                           ;main.c: 161:         if (data_receiv == 0xFF) {
  4712  035E  0A5E               	incf	_data_receiv,w	;volatile
  4713  035F  1D03               	btfss	3,2
  4714  0360  2B62               	goto	i1l2463
  4715                           
  4716                           ;main.c: 162:             timeout_receiv = 0;
  4717  0361  01DC               	clrf	_timeout_receiv	;volatile
  4718  0362                     i1l2463:
  4719                           
  4720                           ;main.c: 165:         if ((buffer_index2 <= 6) || ((buffer_index2 == 0) && (data_receiv 
      +                          == 0xFF))) {
  4721  0362  3007               	movlw	7
  4722  0363  027D               	subwf	_buffer_index2,w	;volatile
  4723  0364  1C03               	skipc
  4724  0365  2B6C               	goto	i1l2469
  4725  0366  087D               	movf	_buffer_index2,w	;volatile
  4726  0367  1D03               	btfss	3,2
  4727  0368  2B9E               	goto	i1l2499
  4728  0369  0A5E               	incf	_data_receiv,w	;volatile
  4729  036A  1D03               	btfss	3,2
  4730  036B  2B9E               	goto	i1l2499
  4731  036C                     i1l2469:
  4732                           
  4733                           ;main.c: 166:             if (buffer_index1 == 0) {
  4734  036C  085D               	movf	_buffer_index1,w	;volatile
  4735  036D  1D03               	btfss	3,2
  4736  036E  2B74               	goto	i1l2475
  4737                           
  4738                           ;main.c: 167:                 buffer_data0[buffer_index2++] = data_receiv;
  4739  036F  085E               	movf	_data_receiv,w	;volatile
  4740  0370  00A0               	movwf	??_myISR
  4741  0371  087D               	movf	_buffer_index2,w
  4742  0372  3EC3               	addlw	(low (_buffer_data0| 0))& (0+255)
  4743  0373  2B96               	goto	L25
  4744  0374                     i1l2475:	
  4745                           ;main.c: 168:             } else if (buffer_index1 == 1) {
  4746                           
  4747  0374  035D               	decf	_buffer_index1,w	;volatile
  4748  0375  1D03               	btfss	3,2
  4749  0376  2B7C               	goto	i1l2481
  4750                           
  4751                           ;main.c: 169:                 buffer_data1[buffer_index2++] = data_receiv;
  4752  0377  085E               	movf	_data_receiv,w	;volatile
  4753  0378  00A0               	movwf	??_myISR
  4754  0379  087D               	movf	_buffer_index2,w
  4755  037A  3EBC               	addlw	(low (_buffer_data1| 0))& (0+255)
  4756  037B  2B96               	goto	L25
  4757  037C                     i1l2481:
  4758  037C  3002               	movlw	2
  4759  037D  065D               	xorwf	_buffer_index1,w	;volatile
  4760  037E  1D03               	btfss	3,2
  4761  037F  2B85               	goto	i1l2487
  4762                           
  4763                           ;main.c: 171:                 buffer_data2[buffer_index2++] = data_receiv;
  4764  0380  085E               	movf	_data_receiv,w	;volatile
  4765  0381  00A0               	movwf	??_myISR
  4766  0382  087D               	movf	_buffer_index2,w
  4767  0383  3EB5               	addlw	(low (_buffer_data2| 0))& (0+255)
  4768  0384  2B96               	goto	L25
  4769  0385                     i1l2487:
  4770  0385  3003               	movlw	3
  4771  0386  065D               	xorwf	_buffer_index1,w	;volatile
  4772  0387  1D03               	btfss	3,2
  4773  0388  2B8E               	goto	i1l2493
  4774                           
  4775                           ;main.c: 173:                 buffer_data3[buffer_index2++] = data_receiv;
  4776  0389  085E               	movf	_data_receiv,w	;volatile
  4777  038A  00A0               	movwf	??_myISR
  4778  038B  087D               	movf	_buffer_index2,w
  4779  038C  3EAE               	addlw	(low (_buffer_data3| 0))& (0+255)
  4780  038D  2B96               	goto	L25
  4781  038E                     i1l2493:
  4782  038E  3004               	movlw	4
  4783  038F  065D               	xorwf	_buffer_index1,w	;volatile
  4784  0390  1D03               	btfss	3,2
  4785  0391  2B9E               	goto	i1l2499
  4786                           
  4787                           ;main.c: 175:                 buffer_data4[buffer_index2++] = data_receiv;
  4788  0392  085E               	movf	_data_receiv,w	;volatile
  4789  0393  00A0               	movwf	??_myISR
  4790  0394  087D               	movf	_buffer_index2,w
  4791  0395  3EA7               	addlw	(low (_buffer_data4| 0))& (0+255)
  4792  0396                     L25:
  4793  0396  0084               	movwf	4
  4794  0397  0820               	movf	??_myISR,w
  4795  0398  1383               	bcf	3,7	;select IRP bank1
  4796  0399  0080               	movwf	0
  4797  039A  3001               	movlw	1
  4798  039B  00A0               	movwf	??_myISR
  4799  039C  0820               	movf	??_myISR,w
  4800  039D  07FD               	addwf	_buffer_index2,f	;volatile
  4801  039E                     i1l2499:
  4802                           
  4803                           ;main.c: 179:         if (buffer_index2 == 7) {
  4804  039E  3007               	movlw	7
  4805  039F  067D               	xorwf	_buffer_index2,w	;volatile
  4806  03A0  1D03               	btfss	3,2
  4807  03A1  2BB5               	goto	i1l2511
  4808                           
  4809                           ;main.c: 180:             buffer_index2 = 0;
  4810  03A2  01FD               	clrf	_buffer_index2	;volatile
  4811                           
  4812                           ;main.c: 182:             buffer_ready[buffer_index1] = 1;
  4813  03A3  3001               	movlw	1
  4814  03A4  00A0               	movwf	??_myISR
  4815  03A5  085D               	movf	_buffer_index1,w
  4816  03A6  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  4817  03A7  0084               	movwf	4
  4818  03A8  0820               	movf	??_myISR,w
  4819  03A9  1383               	bcf	3,7	;select IRP bank1
  4820  03AA  0080               	movwf	0
  4821                           
  4822                           ;main.c: 184:             if (buffer_index1 < 4) {
  4823  03AB  3004               	movlw	4
  4824  03AC  025D               	subwf	_buffer_index1,w	;volatile
  4825  03AD  1803               	skipnc
  4826  03AE  2BB4               	goto	i1l2509
  4827                           
  4828                           ;main.c: 185:                 buffer_index1++;
  4829  03AF  3001               	movlw	1
  4830  03B0  00A0               	movwf	??_myISR
  4831  03B1  0820               	movf	??_myISR,w
  4832  03B2  07DD               	addwf	_buffer_index1,f	;volatile
  4833                           
  4834                           ;main.c: 186:             } else {
  4835  03B3  2BB5               	goto	i1l2511
  4836  03B4                     i1l2509:
  4837                           
  4838                           ;main.c: 187:                 buffer_index1 = 0;
  4839  03B4  01DD               	clrf	_buffer_index1	;volatile
  4840  03B5                     i1l2511:
  4841                           
  4842                           ;main.c: 191:         PIR1bits.RCIF = 0;
  4843  03B5  128C               	bcf	12,5	;volatile
  4844                           
  4845                           ;main.c: 192:     } else if (PIR1bits.TMR1IF == 1) {
  4846  03B6  2D4F               	goto	i1l169
  4847  03B7                     i1l167:
  4848  03B7  1C0C               	btfss	12,0	;volatile
  4849  03B8  2D4F               	goto	i1l169
  4850                           
  4851                           ;main.c: 194:         PIE1bits.TMR1IE = 1;
  4852  03B9  1683               	bsf	3,5	;RP0=1, select bank1
  4853  03BA  140C               	bsf	12,0	;volatile
  4854                           
  4855                           ;main.c: 195:         TMR1H = 255;
  4856  03BB  30FF               	movlw	255
  4857  03BC  1283               	bcf	3,5	;RP0=0, select bank0
  4858  03BD  008F               	movwf	15	;volatile
  4859                           
  4860                           ;main.c: 196:         TMR1L = 131;
  4861  03BE  3083               	movlw	131
  4862  03BF  008E               	movwf	14	;volatile
  4863                           
  4864                           ;main.c: 198:         if (timeout_receiv < 15) {
  4865  03C0  300F               	movlw	15
  4866  03C1  025C               	subwf	_timeout_receiv,w	;volatile
  4867  03C2  1803               	skipnc
  4868  03C3  2BC9               	goto	i1l2519
  4869                           
  4870                           ;main.c: 199:             timeout_receiv++;
  4871  03C4  3001               	movlw	1
  4872  03C5  00A0               	movwf	??_myISR
  4873  03C6  0820               	movf	??_myISR,w
  4874  03C7  07DC               	addwf	_timeout_receiv,f	;volatile
  4875                           
  4876                           ;main.c: 200:         } else if (buffer_index2 > 0) {
  4877  03C8  2BCD               	goto	i1l2523
  4878  03C9                     i1l2519:
  4879  03C9  087D               	movf	_buffer_index2,w	;volatile
  4880  03CA  1903               	btfsc	3,2
  4881  03CB  2BCD               	goto	i1l2523
  4882                           
  4883                           ;main.c: 201:             buffer_index2 = 0;
  4884  03CC  01FD               	clrf	_buffer_index2	;volatile
  4885  03CD                     i1l2523:
  4886                           
  4887                           ;main.c: 204:         if (timer1_pan < timer1_pan_ref) {
  4888  03CD  1683               	bsf	3,5	;RP0=1, select bank1
  4889  03CE  0858               	movf	_timer1_pan_ref^(0+128),w	;volatile
  4890  03CF  025A               	subwf	_timer1_pan^(0+128),w	;volatile
  4891  03D0  1803               	skipnc
  4892  03D1  2BD9               	goto	i1l2527
  4893                           
  4894                           ;main.c: 205:             timer1_pan++;
  4895  03D2  3001               	movlw	1
  4896  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  4897  03D4  00A0               	movwf	??_myISR
  4898  03D5  0820               	movf	??_myISR,w
  4899  03D6  1683               	bsf	3,5	;RP0=1, select bank1
  4900  03D7  07DA               	addwf	_timer1_pan^(0+128),f	;volatile
  4901                           
  4902                           ;main.c: 206:         } else {
  4903  03D8  2CA2               	goto	i1l2593
  4904  03D9                     i1l2527:
  4905                           
  4906                           ;main.c: 207:             timer1_pan = 0;
  4907  03D9  01DA               	clrf	_timer1_pan^(0+128)	;volatile
  4908                           
  4909                           ;main.c: 215:             if ((pan_enabled == 1) || (preset_enabled == 1)) {
  4910  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  4911  03DB  0359               	decf	_pan_enabled,w	;volatile
  4912  03DC  1D03               	btfss	3,2
  4913  03DD  035B               	decf	_preset_enabled,w	;volatile
  4914  03DE  1D03               	btfss	3,2
  4915  03DF  2C9E               	goto	i1l193
  4916                           
  4917                           ;main.c: 217:                 if (pan_speed_old != pan_speed) {
  4918  03E0  0856               	movf	_pan_speed_old,w	;volatile
  4919  03E1  0657               	xorwf	_pan_speed,w	;volatile
  4920  03E2  1903               	skipnz
  4921  03E3  2BF0               	goto	i1l2539
  4922                           
  4923                           ;main.c: 218:                     pan_speed_old = pan_speed;
  4924  03E4  0857               	movf	_pan_speed,w	;volatile
  4925  03E5  00A0               	movwf	??_myISR
  4926  03E6  0820               	movf	??_myISR,w
  4927  03E7  00D6               	movwf	_pan_speed_old	;volatile
  4928                           
  4929                           ;main.c: 220:                     timer1_pan_ref = SPEED_calc(pan_speed);
  4930  03E8  0857               	movf	_pan_speed,w	;volatile
  4931  03E9  158A  2647  118A   	fcall	_SPEED_calc
  4932  03EC  00A0               	movwf	??_myISR
  4933  03ED  0820               	movf	??_myISR,w
  4934  03EE  1683               	bsf	3,5	;RP0=1, select bank1
  4935  03EF  00D8               	movwf	_timer1_pan_ref^(0+128)	;volatile
  4936  03F0                     i1l2539:
  4937                           
  4938                           ;main.c: 223:                 if ((preset_enabled == 1) && (preset_enabled_old == 0)) {
  4939  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  4940  03F1  035B               	decf	_preset_enabled,w	;volatile
  4941  03F2  1D03               	btfss	3,2
  4942  03F3  2C12               	goto	i1l2551
  4943  03F4  085A               	movf	_preset_enabled_old,w	;volatile
  4944  03F5  1D03               	btfss	3,2
  4945  03F6  2C12               	goto	i1l2551
  4946                           
  4947                           ;main.c: 224:                     preset_enabled_old = 1;
  4948  03F7  3001               	movlw	1
  4949  03F8  00A0               	movwf	??_myISR
  4950  03F9  0820               	movf	??_myISR,w
  4951  03FA  00DA               	movwf	_preset_enabled_old	;volatile
  4952                           
  4953                           ;main.c: 226:                     if (pan_goto > pan_counter) {
  4954  03FB  0846               	movf	_pan_goto+1,w	;volatile
  4955  03FC  024A               	subwf	_pan_counter+1,w	;volatile
  4956  03FD  1D03               	skipz
  4957  03FE  2C01               	goto	u249_25
  4958  03FF  0845               	movf	_pan_goto,w	;volatile
  4959  0400  0249               	subwf	_pan_counter,w	;volatile
  4960  0401                     u249_25:
  4961  0401  1803               	skipnc
  4962  0402  2C05               	goto	i1l2547
  4963                           
  4964                           ;main.c: 227:                         pan_direction = 0;
  4965  0403  01D8               	clrf	_pan_direction	;volatile
  4966                           
  4967                           ;main.c: 228:                     } else if (pan_goto < pan_counter) {
  4968  0404  2C19               	goto	i1l2557
  4969  0405                     i1l2547:
  4970  0405  084A               	movf	_pan_counter+1,w	;volatile
  4971  0406  0246               	subwf	_pan_goto+1,w	;volatile
  4972  0407  1D03               	skipz
  4973  0408  2C0B               	goto	u250_25
  4974  0409  0849               	movf	_pan_counter,w	;volatile
  4975  040A  0245               	subwf	_pan_goto,w	;volatile
  4976  040B                     u250_25:
  4977  040B  1803               	skipnc
  4978  040C  2C19               	goto	i1l2557
  4979                           
  4980                           ;main.c: 229:                         pan_direction = 1;
  4981  040D  3001               	movlw	1
  4982  040E  00A0               	movwf	??_myISR
  4983  040F  0820               	movf	??_myISR,w
  4984  0410  00D8               	movwf	_pan_direction	;volatile
  4985  0411  2C19               	goto	i1l2557
  4986  0412                     i1l2551:
  4987  0412  085B               	movf	_preset_enabled,w	;volatile
  4988  0413  1D03               	btfss	3,2
  4989  0414  2C19               	goto	i1l2557
  4990  0415  035A               	decf	_preset_enabled_old,w	;volatile
  4991  0416  1D03               	btfss	3,2
  4992  0417  2C19               	goto	i1l2557
  4993                           
  4994                           ;main.c: 232:                     preset_enabled_old = 0;
  4995  0418  01DA               	clrf	_preset_enabled_old	;volatile
  4996  0419                     i1l2557:
  4997                           
  4998                           ;main.c: 235:                 if (pan_direction == 0) {
  4999  0419  0858               	movf	_pan_direction,w	;volatile
  5000  041A  1D03               	btfss	3,2
  5001  041B  2C38               	goto	i1l2571
  5002                           
  5003                           ;main.c: 236:                     if (pan_counter < 12000) {
  5004  041C  302E               	movlw	46
  5005  041D  024A               	subwf	_pan_counter+1,w	;volatile
  5006  041E  30E0               	movlw	224
  5007  041F  1903               	skipnz
  5008  0420  0249               	subwf	_pan_counter,w	;volatile
  5009  0421  1803               	skipnc
  5010  0422  2C4F               	goto	i1l2581
  5011                           
  5012                           ;main.c: 237:                         pan_counter++;
  5013  0423  3001               	movlw	1
  5014  0424  07C9               	addwf	_pan_counter,f	;volatile
  5015  0425  1803               	skipnc
  5016  0426  0ACA               	incf	_pan_counter+1,f	;volatile
  5017  0427  3000               	movlw	0
  5018  0428  07CA               	addwf	_pan_counter+1,f	;volatile
  5019                           
  5020                           ;main.c: 239:                         if ((pan_step_phase == 0) || (pan_step_phase > 7))
      +                           {
  5021  0429  0853               	movf	_pan_step_phase,w	;volatile
  5022  042A  1903               	btfsc	3,2
  5023  042B  2C30               	goto	i1l2567
  5024  042C  3008               	movlw	8
  5025  042D  0253               	subwf	_pan_step_phase,w	;volatile
  5026  042E  1C03               	skipc
  5027  042F  2C35               	goto	i1l2569
  5028  0430                     i1l2567:
  5029                           
  5030                           ;main.c: 240:                             pan_step_phase = 7;
  5031  0430  3007               	movlw	7
  5032  0431  00A0               	movwf	??_myISR
  5033  0432  0820               	movf	??_myISR,w
  5034  0433  00D3               	movwf	_pan_step_phase	;volatile
  5035                           
  5036                           ;main.c: 241:                         } else {
  5037  0434  2C4F               	goto	i1l2581
  5038  0435                     i1l2569:
  5039                           
  5040                           ;main.c: 242:                             pan_step_phase--;
  5041  0435  3001               	movlw	1
  5042  0436  02D3               	subwf	_pan_step_phase,f	;volatile
  5043  0437  2C4F               	goto	i1l2581
  5044  0438                     i1l2571:
  5045                           
  5046                           ;main.c: 246:                     if ((pan_counter > 0) || (is_init == 1)) {
  5047  0438  0849               	movf	_pan_counter,w	;volatile
  5048  0439  044A               	iorwf	_pan_counter+1,w	;volatile
  5049  043A  1D03               	btfss	3,2
  5050  043B  2C3F               	goto	i1l2575
  5051  043C  034B               	decf	_is_init,w
  5052  043D  1D03               	btfss	3,2
  5053  043E  2C4F               	goto	i1l2581
  5054  043F                     i1l2575:
  5055                           
  5056                           ;main.c: 247:                         pan_counter--;
  5057  043F  3001               	movlw	1
  5058  0440  02C9               	subwf	_pan_counter,f	;volatile
  5059  0441  3000               	movlw	0
  5060  0442  1C03               	skipc
  5061  0443  03CA               	decf	_pan_counter+1,f	;volatile
  5062  0444  02CA               	subwf	_pan_counter+1,f	;volatile
  5063                           
  5064                           ;main.c: 249:                         if (pan_step_phase >= 7) {
  5065  0445  3007               	movlw	7
  5066  0446  0253               	subwf	_pan_step_phase,w	;volatile
  5067  0447  1C03               	skipc
  5068  0448  2C4B               	goto	i1l2579
  5069                           
  5070                           ;main.c: 250:                             pan_step_phase = 0;
  5071  0449  01D3               	clrf	_pan_step_phase	;volatile
  5072                           
  5073                           ;main.c: 251:                         } else {
  5074  044A  2C4F               	goto	i1l2581
  5075  044B                     i1l2579:
  5076                           
  5077                           ;main.c: 252:                             pan_step_phase++;
  5078  044B  3001               	movlw	1
  5079  044C  00A0               	movwf	??_myISR
  5080  044D  0820               	movf	??_myISR,w
  5081  044E  07D3               	addwf	_pan_step_phase,f	;volatile
  5082  044F                     i1l2581:
  5083                           
  5084                           ;main.c: 257:                 if (pan_goto == pan_counter) {
  5085  044F  084A               	movf	_pan_counter+1,w	;volatile
  5086  0450  0646               	xorwf	_pan_goto+1,w	;volatile
  5087  0451  1D03               	skipz
  5088  0452  2C55               	goto	u260_25
  5089  0453  0849               	movf	_pan_counter,w	;volatile
  5090  0454  0645               	xorwf	_pan_goto,w	;volatile
  5091  0455                     u260_25:
  5092  0455  1903               	btfsc	3,2
  5093                           
  5094                           ;main.c: 258:                     preset_enabled = 0;
  5095  0456  01DB               	clrf	_preset_enabled	;volatile
  5096                           
  5097                           ;main.c: 261:                 PORTAbits.RA0 = steps_1A[pan_step_phase];
  5098  0457  0853               	movf	_pan_step_phase,w
  5099  0458  3E32               	addlw	low (_steps_1A| (0+32768))
  5100  0459  0084               	movwf	4
  5101  045A  3088               	movlw	high (_steps_1A| (0+32768))
  5102  045B  1803               	skipnc
  5103  045C  3E01               	addlw	1
  5104  045D  00FF               	movwf	127
  5105  045E  158A  2000  118A   	fcall	stringtab
  5106  0461  00A0               	movwf	??_myISR
  5107  0462  0805               	movf	5,w	;volatile
  5108  0463  0620               	xorwf	??_myISR,w
  5109  0464  39FE               	andlw	-2
  5110  0465  0620               	xorwf	??_myISR,w
  5111  0466  0085               	movwf	5	;volatile
  5112                           
  5113                           ;main.c: 262:                 PORTAbits.RA7 = steps_1B[pan_step_phase];
  5114  0467  0853               	movf	_pan_step_phase,w
  5115  0468  3E2A               	addlw	low (_steps_1B| (0+32768))
  5116  0469  0084               	movwf	4
  5117  046A  3088               	movlw	high (_steps_1B| (0+32768))
  5118  046B  1803               	skipnc
  5119  046C  3E01               	addlw	1
  5120  046D  00FF               	movwf	127
  5121  046E  158A  2000  118A   	fcall	stringtab
  5122  0471  00A0               	movwf	??_myISR
  5123  0472  0CA0               	rrf	??_myISR,f
  5124  0473  0CA0               	rrf	??_myISR,f
  5125  0474  0805               	movf	5,w	;volatile
  5126  0475  0620               	xorwf	??_myISR,w
  5127  0476  397F               	andlw	-129
  5128  0477  0620               	xorwf	??_myISR,w
  5129  0478  0085               	movwf	5	;volatile
  5130                           
  5131                           ;main.c: 263:                 PORTAbits.RA6 = steps_2A[pan_step_phase];
  5132  0479  0853               	movf	_pan_step_phase,w
  5133  047A  3E22               	addlw	low (_steps_2A| (0+32768))
  5134  047B  0084               	movwf	4
  5135  047C  3088               	movlw	high (_steps_2A| (0+32768))
  5136  047D  1803               	skipnc
  5137  047E  3E01               	addlw	1
  5138  047F  00FF               	movwf	127
  5139  0480  158A  2000  118A   	fcall	stringtab
  5140  0483  00A0               	movwf	??_myISR
  5141  0484  0EA0               	swapf	??_myISR,f
  5142  0485  0DA0               	rlf	??_myISR,f
  5143  0486  0DA0               	rlf	??_myISR,f
  5144  0487  0805               	movf	5,w	;volatile
  5145  0488  0620               	xorwf	??_myISR,w
  5146  0489  39BF               	andlw	-65
  5147  048A  0620               	xorwf	??_myISR,w
  5148  048B  0085               	movwf	5	;volatile
  5149                           
  5150                           ;main.c: 264:                 PORTAbits.RA1 = steps_2B[pan_step_phase];
  5151  048C  0853               	movf	_pan_step_phase,w
  5152  048D  3E1A               	addlw	low (_steps_2B| (0+32768))
  5153  048E  0084               	movwf	4
  5154  048F  3088               	movlw	high (_steps_2B| (0+32768))
  5155  0490  1803               	skipnc
  5156  0491  3E01               	addlw	1
  5157  0492  00FF               	movwf	127
  5158  0493  158A  2000  118A   	fcall	stringtab
  5159  0496  00A0               	movwf	??_myISR
  5160  0497  0DA0               	rlf	??_myISR,f
  5161  0498  0805               	movf	5,w	;volatile
  5162  0499  0620               	xorwf	??_myISR,w
  5163  049A  39FD               	andlw	-3
  5164  049B  0620               	xorwf	??_myISR,w
  5165  049C  0085               	movwf	5	;volatile
  5166                           
  5167                           ;main.c: 265:             } else {
  5168  049D  2CA2               	goto	i1l2593
  5169  049E                     i1l193:
  5170                           
  5171                           ;main.c: 266:                 PORTAbits.RA0 = 0;
  5172  049E  1005               	bcf	5,0	;volatile
  5173                           
  5174                           ;main.c: 267:                 PORTAbits.RA7 = 0;
  5175  049F  1385               	bcf	5,7	;volatile
  5176                           
  5177                           ;main.c: 268:                 PORTAbits.RA6 = 0;
  5178  04A0  1305               	bcf	5,6	;volatile
  5179                           
  5180                           ;main.c: 269:                 PORTAbits.RA1 = 0;
  5181  04A1  1085               	bcf	5,1	;volatile
  5182  04A2                     i1l2593:
  5183                           
  5184                           ;main.c: 275:         if (timer1_tilt < timer1_tilt_ref) {
  5185  04A2  1683               	bsf	3,5	;RP0=1, select bank1
  5186  04A3  0857               	movf	_timer1_tilt_ref^(0+128),w	;volatile
  5187  04A4  0259               	subwf	_timer1_tilt^(0+128),w	;volatile
  5188  04A5  1803               	skipnc
  5189  04A6  2CAE               	goto	i1l2597
  5190                           
  5191                           ;main.c: 276:             timer1_tilt++;
  5192  04A7  3001               	movlw	1
  5193  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  5194  04A9  00A0               	movwf	??_myISR
  5195  04AA  0820               	movf	??_myISR,w
  5196  04AB  1683               	bsf	3,5	;RP0=1, select bank1
  5197  04AC  07D9               	addwf	_timer1_tilt^(0+128),f	;volatile
  5198                           
  5199                           ;main.c: 277:         } else {
  5200  04AD  2D4D               	goto	i1l218
  5201  04AE                     i1l2597:
  5202                           
  5203                           ;main.c: 278:             timer1_tilt = 0;
  5204  04AE  01D9               	clrf	_timer1_tilt^(0+128)	;volatile
  5205                           
  5206                           ;main.c: 280:             if (tilt_enabled == 1) {
  5207  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  5208  04B0  0355               	decf	_tilt_enabled,w	;volatile
  5209  04B1  1D03               	btfss	3,2
  5210  04B2  2D49               	goto	i1l219
  5211                           
  5212                           ;main.c: 282:                 if (tilt_speed_old != tilt_speed) {
  5213  04B3  1683               	bsf	3,5	;RP0=1, select bank1
  5214  04B4  085B               	movf	_tilt_speed_old^(0+128),w	;volatile
  5215  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  5216  04B6  0654               	xorwf	_tilt_speed,w	;volatile
  5217  04B7  1903               	skipnz
  5218  04B8  2CC7               	goto	i1l2607
  5219                           
  5220                           ;main.c: 283:                     tilt_speed_old = tilt_speed;
  5221  04B9  0854               	movf	_tilt_speed,w	;volatile
  5222  04BA  00A0               	movwf	??_myISR
  5223  04BB  0820               	movf	??_myISR,w
  5224  04BC  1683               	bsf	3,5	;RP0=1, select bank1
  5225  04BD  00DB               	movwf	_tilt_speed_old^(0+128)	;volatile
  5226                           
  5227                           ;main.c: 285:                     timer1_tilt_ref = SPEED_calc(tilt_speed);
  5228  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  5229  04BF  0854               	movf	_tilt_speed,w	;volatile
  5230  04C0  158A  2647  118A   	fcall	_SPEED_calc
  5231  04C3  00A0               	movwf	??_myISR
  5232  04C4  0820               	movf	??_myISR,w
  5233  04C5  1683               	bsf	3,5	;RP0=1, select bank1
  5234  04C6  00D7               	movwf	_timer1_tilt_ref^(0+128)	;volatile
  5235  04C7                     i1l2607:
  5236                           
  5237                           ;main.c: 288:                 if (tilt_direction == 0) {
  5238  04C7  1683               	bsf	3,5	;RP0=1, select bank1
  5239  04C8  085C               	movf	_tilt_direction^(0+128),w	;volatile
  5240  04C9  1D03               	btfss	3,2
  5241  04CA  2CE8               	goto	i1l2621
  5242                           
  5243                           ;main.c: 289:                     if (tilt_counter < 2800) {
  5244  04CB  300A               	movlw	10
  5245  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  5246  04CD  0248               	subwf	_tilt_counter+1,w	;volatile
  5247  04CE  30F0               	movlw	240
  5248  04CF  1903               	skipnz
  5249  04D0  0247               	subwf	_tilt_counter,w	;volatile
  5250  04D1  1803               	skipnc
  5251  04D2  2D00               	goto	i1l2631
  5252                           
  5253                           ;main.c: 290:                         tilt_counter++;
  5254  04D3  3001               	movlw	1
  5255  04D4  07C7               	addwf	_tilt_counter,f	;volatile
  5256  04D5  1803               	skipnc
  5257  04D6  0AC8               	incf	_tilt_counter+1,f	;volatile
  5258  04D7  3000               	movlw	0
  5259  04D8  07C8               	addwf	_tilt_counter+1,f	;volatile
  5260                           
  5261                           ;main.c: 292:                         if ((tilt_step_phase == 0) || (tilt_step_phase > 7
      +                          )) {
  5262  04D9  0852               	movf	_tilt_step_phase,w	;volatile
  5263  04DA  1903               	btfsc	3,2
  5264  04DB  2CE0               	goto	i1l2617
  5265  04DC  3008               	movlw	8
  5266  04DD  0252               	subwf	_tilt_step_phase,w	;volatile
  5267  04DE  1C03               	skipc
  5268  04DF  2CE5               	goto	i1l2619
  5269  04E0                     i1l2617:
  5270                           
  5271                           ;main.c: 293:                             tilt_step_phase = 7;
  5272  04E0  3007               	movlw	7
  5273  04E1  00A0               	movwf	??_myISR
  5274  04E2  0820               	movf	??_myISR,w
  5275  04E3  00D2               	movwf	_tilt_step_phase	;volatile
  5276                           
  5277                           ;main.c: 294:                         } else {
  5278  04E4  2D00               	goto	i1l2631
  5279  04E5                     i1l2619:
  5280                           
  5281                           ;main.c: 295:                             tilt_step_phase--;
  5282  04E5  3001               	movlw	1
  5283  04E6  02D2               	subwf	_tilt_step_phase,f	;volatile
  5284  04E7  2D00               	goto	i1l2631
  5285  04E8                     i1l2621:
  5286                           
  5287                           ;main.c: 299:                     if ((tilt_counter > 0) || (is_init == 1)) {
  5288  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  5289  04E9  0847               	movf	_tilt_counter,w	;volatile
  5290  04EA  0448               	iorwf	_tilt_counter+1,w	;volatile
  5291  04EB  1D03               	btfss	3,2
  5292  04EC  2CF0               	goto	i1l2625
  5293  04ED  034B               	decf	_is_init,w
  5294  04EE  1D03               	btfss	3,2
  5295  04EF  2D00               	goto	i1l2631
  5296  04F0                     i1l2625:
  5297                           
  5298                           ;main.c: 300:                         tilt_counter--;
  5299  04F0  3001               	movlw	1
  5300  04F1  02C7               	subwf	_tilt_counter,f	;volatile
  5301  04F2  3000               	movlw	0
  5302  04F3  1C03               	skipc
  5303  04F4  03C8               	decf	_tilt_counter+1,f	;volatile
  5304  04F5  02C8               	subwf	_tilt_counter+1,f	;volatile
  5305                           
  5306                           ;main.c: 302:                         if (tilt_step_phase >= 7) {
  5307  04F6  3007               	movlw	7
  5308  04F7  0252               	subwf	_tilt_step_phase,w	;volatile
  5309  04F8  1C03               	skipc
  5310  04F9  2CFC               	goto	i1l2629
  5311                           
  5312                           ;main.c: 303:                             tilt_step_phase = 0;
  5313  04FA  01D2               	clrf	_tilt_step_phase	;volatile
  5314                           
  5315                           ;main.c: 304:                         } else {
  5316  04FB  2D00               	goto	i1l2631
  5317  04FC                     i1l2629:
  5318                           
  5319                           ;main.c: 305:                             tilt_step_phase++;
  5320  04FC  3001               	movlw	1
  5321  04FD  00A0               	movwf	??_myISR
  5322  04FE  0820               	movf	??_myISR,w
  5323  04FF  07D2               	addwf	_tilt_step_phase,f	;volatile
  5324  0500                     i1l2631:
  5325                           
  5326                           ;main.c: 310:                 PORTBbits.RB4 = steps_1A[tilt_step_phase];
  5327  0500  0852               	movf	_tilt_step_phase,w
  5328  0501  3E32               	addlw	low (_steps_1A| (0+32768))
  5329  0502  0084               	movwf	4
  5330  0503  3088               	movlw	high (_steps_1A| (0+32768))
  5331  0504  1803               	skipnc
  5332  0505  3E01               	addlw	1
  5333  0506  00FF               	movwf	127
  5334  0507  158A  2000  118A   	fcall	stringtab
  5335  050A  00A0               	movwf	??_myISR
  5336  050B  0EA0               	swapf	??_myISR,f
  5337  050C  0806               	movf	6,w	;volatile
  5338  050D  0620               	xorwf	??_myISR,w
  5339  050E  39EF               	andlw	-17
  5340  050F  0620               	xorwf	??_myISR,w
  5341  0510  0086               	movwf	6	;volatile
  5342                           
  5343                           ;main.c: 311:                 PORTBbits.RB5 = steps_1B[tilt_step_phase];
  5344  0511  0852               	movf	_tilt_step_phase,w
  5345  0512  3E2A               	addlw	low (_steps_1B| (0+32768))
  5346  0513  0084               	movwf	4
  5347  0514  3088               	movlw	high (_steps_1B| (0+32768))
  5348  0515  1803               	skipnc
  5349  0516  3E01               	addlw	1
  5350  0517  00FF               	movwf	127
  5351  0518  158A  2000  118A   	fcall	stringtab
  5352  051B  00A0               	movwf	??_myISR
  5353  051C  0EA0               	swapf	??_myISR,f
  5354  051D  0DA0               	rlf	??_myISR,f
  5355  051E  0806               	movf	6,w	;volatile
  5356  051F  0620               	xorwf	??_myISR,w
  5357  0520  39DF               	andlw	-33
  5358  0521  0620               	xorwf	??_myISR,w
  5359  0522  0086               	movwf	6	;volatile
  5360                           
  5361                           ;main.c: 312:                 PORTBbits.RB6 = steps_2A[tilt_step_phase];
  5362  0523  0852               	movf	_tilt_step_phase,w
  5363  0524  3E22               	addlw	low (_steps_2A| (0+32768))
  5364  0525  0084               	movwf	4
  5365  0526  3088               	movlw	high (_steps_2A| (0+32768))
  5366  0527  1803               	skipnc
  5367  0528  3E01               	addlw	1
  5368  0529  00FF               	movwf	127
  5369  052A  158A  2000  118A   	fcall	stringtab
  5370  052D  00A0               	movwf	??_myISR
  5371  052E  0EA0               	swapf	??_myISR,f
  5372  052F  0DA0               	rlf	??_myISR,f
  5373  0530  0DA0               	rlf	??_myISR,f
  5374  0531  0806               	movf	6,w	;volatile
  5375  0532  0620               	xorwf	??_myISR,w
  5376  0533  39BF               	andlw	-65
  5377  0534  0620               	xorwf	??_myISR,w
  5378  0535  0086               	movwf	6	;volatile
  5379                           
  5380                           ;main.c: 313:                 PORTBbits.RB7 = steps_2B[tilt_step_phase];
  5381  0536  0852               	movf	_tilt_step_phase,w
  5382  0537  3E1A               	addlw	low (_steps_2B| (0+32768))
  5383  0538  0084               	movwf	4
  5384  0539  3088               	movlw	high (_steps_2B| (0+32768))
  5385  053A  1803               	skipnc
  5386  053B  3E01               	addlw	1
  5387  053C  00FF               	movwf	127
  5388  053D  158A  2000  118A   	fcall	stringtab
  5389  0540  00A0               	movwf	??_myISR
  5390  0541  0CA0               	rrf	??_myISR,f
  5391  0542  0CA0               	rrf	??_myISR,f
  5392  0543  0806               	movf	6,w	;volatile
  5393  0544  0620               	xorwf	??_myISR,w
  5394  0545  397F               	andlw	-129
  5395  0546  0620               	xorwf	??_myISR,w
  5396  0547  0086               	movwf	6	;volatile
  5397                           
  5398                           ;main.c: 314:             } else {
  5399  0548  2D4D               	goto	i1l218
  5400  0549                     i1l219:
  5401                           
  5402                           ;main.c: 315:                 PORTBbits.RB4 = 0;
  5403  0549  1206               	bcf	6,4	;volatile
  5404                           
  5405                           ;main.c: 316:                 PORTBbits.RB5 = 0;
  5406  054A  1286               	bcf	6,5	;volatile
  5407                           
  5408                           ;main.c: 317:                 PORTBbits.RB6 = 0;
  5409  054B  1306               	bcf	6,6	;volatile
  5410                           
  5411                           ;main.c: 318:                 PORTBbits.RB7 = 0;
  5412  054C  1386               	bcf	6,7	;volatile
  5413  054D                     i1l218:	
  5414                           ;main.c: 320:         }
  5415                           
  5416                           
  5417                           ;main.c: 322:         PIR1bits.TMR1IF = 0;
  5418  054D  1283               	bcf	3,5	;RP0=0, select bank0
  5419  054E  100C               	bcf	12,0	;volatile
  5420  054F                     i1l169:
  5421  054F  0824               	movf	??_myISR+4,w
  5422  0550  00FF               	movwf	127
  5423  0551  0823               	movf	??_myISR+3,w
  5424  0552  008A               	movwf	10
  5425  0553  0822               	movf	??_myISR+2,w
  5426  0554  0084               	movwf	4
  5427  0555  0E21               	swapf	??_myISR+1,w
  5428  0556  0083               	movwf	3
  5429  0557  0EFE               	swapf	126,f
  5430  0558  0E7E               	swapf	126,w
  5431  0559  0009               	retfie
  5432  055A                     __end_of_myISR:
  5433                           
  5434                           	psect	intentry
  5435  0004                     __pintentry:	
  5436                           ;incstack = 0
  5437                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5438                           
  5439  0004                     interrupt_function:
  5440  007E                     saved_w	set	btemp
  5441  0004  00FE               	movwf	btemp
  5442  0005  0E03               	swapf	3,w
  5443  0006  1283               	bcf	3,5	;RP0=0, select bank0
  5444  0007  1303               	bcf	3,6	;RP1=0, select bank0
  5445  0008  00A1               	movwf	??_myISR+1
  5446  0009  0804               	movf	4,w
  5447  000A  00A2               	movwf	??_myISR+2
  5448  000B  080A               	movf	10,w
  5449  000C  00A3               	movwf	??_myISR+3
  5450  000D  087F               	movf	btemp+1,w
  5451  000E  00A4               	movwf	??_myISR+4
  5452  000F  118A  2B55         	ljmp	_myISR
  5453                           
  5454                           	psect	text21
  5455  0E47                     __ptext21:	
  5456 ;; *************** function _SPEED_calc *****************
  5457 ;; Defined at:
  5458 ;;		line 776 in file "main.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;  speed           1    wreg     unsigned char 
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;  speed           1   11[COMMON] unsigned char 
  5463 ;;  sp_calc         1   12[COMMON] unsigned char 
  5464 ;; Return value:  Size  Location     Type
  5465 ;;                  1    wreg      unsigned char 
  5466 ;; Registers used:
  5467 ;;		wreg, status,2, status,0, pclath, cstack
  5468 ;; Tracked objects:
  5469 ;;		On entry : 300/0
  5470 ;;		On exit  : 300/0
  5471 ;;		Unchanged: 300/0
  5472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5473 ;;      Params:         0       0       0       0
  5474 ;;      Locals:         2       0       0       0
  5475 ;;      Temps:          2       0       0       0
  5476 ;;      Totals:         4       0       0       0
  5477 ;;Total ram usage:        4 bytes
  5478 ;; Hardware stack levels used: 1
  5479 ;; Hardware stack levels required when called: 1
  5480 ;; This function calls:
  5481 ;;		___awdiv
  5482 ;; This function is called by:
  5483 ;;		_myISR
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487  0E47                     _SPEED_calc:	
  5488                           ;psect for function _SPEED_calc
  5489                           
  5490                           
  5491                           ;incstack = 0
  5492                           ; Regs used in _SPEED_calc: [wreg+status,2+status,0+pclath+cstack]
  5493                           ;SPEED_calc@speed stored from wreg
  5494  0E47  00FB               	movwf	SPEED_calc@speed
  5495                           
  5496                           ;main.c: 779:     if (speed > 0x32) {
  5497  0E48  3033               	movlw	51
  5498  0E49  027B               	subwf	SPEED_calc@speed,w
  5499  0E4A  1C03               	skipc
  5500  0E4B  2E50               	goto	i1l314
  5501                           
  5502                           ;main.c: 780:         speed = 0x32;
  5503  0E4C  3032               	movlw	50
  5504  0E4D  00F9               	movwf	??_SPEED_calc
  5505  0E4E  0879               	movf	??_SPEED_calc,w
  5506  0E4F  00FB               	movwf	SPEED_calc@speed
  5507  0E50                     i1l314:	
  5508                           ;main.c: 781:     }
  5509                           
  5510                           
  5511                           ;main.c: 783:     if (speed < 0x06) {
  5512  0E50  3006               	movlw	6
  5513  0E51  027B               	subwf	SPEED_calc@speed,w
  5514  0E52  1803               	skipnc
  5515  0E53  2E58               	goto	i1l2155
  5516                           
  5517                           ;main.c: 784:         speed = 0x06;
  5518  0E54  3006               	movlw	6
  5519  0E55  00F9               	movwf	??_SPEED_calc
  5520  0E56  0879               	movf	??_SPEED_calc,w
  5521  0E57  00FB               	movwf	SPEED_calc@speed
  5522  0E58                     i1l2155:
  5523                           
  5524                           ;main.c: 787:     sp_calc = 1 + ((0x32 - speed) / 2);
  5525  0E58  3002               	movlw	2
  5526  0E59  00F0               	movwf	___awdiv@divisor
  5527  0E5A  3000               	movlw	0
  5528  0E5B  00F1               	movwf	___awdiv@divisor+1
  5529  0E5C  3032               	movlw	50
  5530  0E5D  00F9               	movwf	??_SPEED_calc
  5531  0E5E  087B               	movf	SPEED_calc@speed,w
  5532  0E5F  0279               	subwf	??_SPEED_calc,w
  5533  0E60  00F2               	movwf	___awdiv@dividend
  5534  0E61  01F3               	clrf	___awdiv@dividend+1
  5535  0E62  1C03               	skipc
  5536  0E63  03F3               	decf	___awdiv@dividend+1,f
  5537  0E64  118A  279A  158A   	fcall	___awdiv
  5538  0E67  0870               	movf	?___awdiv,w
  5539  0E68  3E01               	addlw	1
  5540  0E69  00FA               	movwf	??_SPEED_calc+1
  5541  0E6A  087A               	movf	??_SPEED_calc+1,w
  5542  0E6B  00FC               	movwf	SPEED_calc@sp_calc
  5543                           
  5544                           ;main.c: 789:     if (sp_calc < 1) {
  5545  0E6C  087C               	movf	SPEED_calc@sp_calc,w
  5546  0E6D  1D03               	btfss	3,2
  5547  0E6E  2E71               	goto	i1l2161
  5548                           
  5549                           ;main.c: 790:         sp_calc = 1;
  5550  0E6F  01FC               	clrf	SPEED_calc@sp_calc
  5551  0E70  0AFC               	incf	SPEED_calc@sp_calc,f
  5552  0E71                     i1l2161:
  5553                           
  5554                           ;main.c: 793:     if (sp_calc > 19) {
  5555  0E71  3014               	movlw	20
  5556  0E72  027C               	subwf	SPEED_calc@sp_calc,w
  5557  0E73  1C03               	skipc
  5558  0E74  2E79               	goto	i1l317
  5559                           
  5560                           ;main.c: 795:         sp_calc = 19;
  5561  0E75  3013               	movlw	19
  5562  0E76  00F9               	movwf	??_SPEED_calc
  5563  0E77  0879               	movf	??_SPEED_calc,w
  5564  0E78  00FC               	movwf	SPEED_calc@sp_calc
  5565  0E79                     i1l317:	
  5566                           ;main.c: 796:     }
  5567                           
  5568                           
  5569                           ;main.c: 798:     return sp_calc;
  5570  0E79  087C               	movf	SPEED_calc@sp_calc,w
  5571  0E7A  0008               	return
  5572  0E7B                     __end_of_SPEED_calc:
  5573                           
  5574                           	psect	text22
  5575  079A                     __ptext22:	
  5576 ;; *************** function ___awdiv *****************
  5577 ;; Defined at:
  5578 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/awdiv.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;  divisor         2    0[COMMON] int 
  5581 ;;  dividend        2    2[COMMON] int 
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;  quotient        2    7[COMMON] int 
  5584 ;;  sign            1    6[COMMON] unsigned char 
  5585 ;;  counter         1    5[COMMON] unsigned char 
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  2    0[COMMON] int 
  5588 ;; Registers used:
  5589 ;;		wreg, status,2, status,0
  5590 ;; Tracked objects:
  5591 ;;		On entry : 300/0
  5592 ;;		On exit  : 300/0
  5593 ;;		Unchanged: 300/0
  5594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5595 ;;      Params:         4       0       0       0
  5596 ;;      Locals:         4       0       0       0
  5597 ;;      Temps:          1       0       0       0
  5598 ;;      Totals:         9       0       0       0
  5599 ;;Total ram usage:        9 bytes
  5600 ;; Hardware stack levels used: 1
  5601 ;; This function calls:
  5602 ;;		Nothing
  5603 ;; This function is called by:
  5604 ;;		_SPEED_calc
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608  079A                     ___awdiv:	
  5609                           ;psect for function ___awdiv
  5610                           
  5611                           
  5612                           ;incstack = 0
  5613                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5614  079A  01F6               	clrf	___awdiv@sign
  5615  079B  1FF1               	btfss	___awdiv@divisor+1,7
  5616  079C  2FA4               	goto	i1l2085
  5617  079D  09F0               	comf	___awdiv@divisor,f
  5618  079E  09F1               	comf	___awdiv@divisor+1,f
  5619  079F  0AF0               	incf	___awdiv@divisor,f
  5620  07A0  1903               	skipnz
  5621  07A1  0AF1               	incf	___awdiv@divisor+1,f
  5622  07A2  01F6               	clrf	___awdiv@sign
  5623  07A3  0AF6               	incf	___awdiv@sign,f
  5624  07A4                     i1l2085:
  5625  07A4  1FF3               	btfss	___awdiv@dividend+1,7
  5626  07A5  2FAF               	goto	i1l2091
  5627  07A6  09F2               	comf	___awdiv@dividend,f
  5628  07A7  09F3               	comf	___awdiv@dividend+1,f
  5629  07A8  0AF2               	incf	___awdiv@dividend,f
  5630  07A9  1903               	skipnz
  5631  07AA  0AF3               	incf	___awdiv@dividend+1,f
  5632  07AB  3001               	movlw	1
  5633  07AC  00F4               	movwf	??___awdiv
  5634  07AD  0874               	movf	??___awdiv,w
  5635  07AE  06F6               	xorwf	___awdiv@sign,f
  5636  07AF                     i1l2091:
  5637  07AF  01F7               	clrf	___awdiv@quotient
  5638  07B0  01F8               	clrf	___awdiv@quotient+1
  5639  07B1  0870               	movf	___awdiv@divisor,w
  5640  07B2  0471               	iorwf	___awdiv@divisor+1,w
  5641  07B3  1903               	btfsc	3,2
  5642  07B4  2FE6               	goto	i1l2113
  5643  07B5  01F5               	clrf	___awdiv@counter
  5644  07B6  0AF5               	incf	___awdiv@counter,f
  5645  07B7                     i1l2101:
  5646  07B7  1BF1               	btfsc	___awdiv@divisor+1,7
  5647  07B8  2FC5               	goto	i1l2103
  5648  07B9  3001               	movlw	1
  5649  07BA                     u177_25:
  5650  07BA  1003               	clrc
  5651  07BB  0DF0               	rlf	___awdiv@divisor,f
  5652  07BC  0DF1               	rlf	___awdiv@divisor+1,f
  5653  07BD  3EFF               	addlw	-1
  5654  07BE  1D03               	skipz
  5655  07BF  2FBA               	goto	u177_25
  5656  07C0  3001               	movlw	1
  5657  07C1  00F4               	movwf	??___awdiv
  5658  07C2  0874               	movf	??___awdiv,w
  5659  07C3  07F5               	addwf	___awdiv@counter,f
  5660  07C4  2FB7               	goto	i1l2101
  5661  07C5                     i1l2103:
  5662  07C5  3001               	movlw	1
  5663  07C6                     u179_25:
  5664  07C6  1003               	clrc
  5665  07C7  0DF7               	rlf	___awdiv@quotient,f
  5666  07C8  0DF8               	rlf	___awdiv@quotient+1,f
  5667  07C9  3EFF               	addlw	-1
  5668  07CA  1D03               	skipz
  5669  07CB  2FC6               	goto	u179_25
  5670  07CC  0871               	movf	___awdiv@divisor+1,w
  5671  07CD  0273               	subwf	___awdiv@dividend+1,w
  5672  07CE  1D03               	skipz
  5673  07CF  2FD2               	goto	u180_25
  5674  07D0  0870               	movf	___awdiv@divisor,w
  5675  07D1  0272               	subwf	___awdiv@dividend,w
  5676  07D2                     u180_25:
  5677  07D2  1C03               	skipc
  5678  07D3  2FDB               	goto	i1l2109
  5679  07D4  0870               	movf	___awdiv@divisor,w
  5680  07D5  02F2               	subwf	___awdiv@dividend,f
  5681  07D6  0871               	movf	___awdiv@divisor+1,w
  5682  07D7  1C03               	skipc
  5683  07D8  03F3               	decf	___awdiv@dividend+1,f
  5684  07D9  02F3               	subwf	___awdiv@dividend+1,f
  5685  07DA  1477               	bsf	___awdiv@quotient,0
  5686  07DB                     i1l2109:
  5687  07DB  3001               	movlw	1
  5688  07DC                     u181_25:
  5689  07DC  1003               	clrc
  5690  07DD  0CF1               	rrf	___awdiv@divisor+1,f
  5691  07DE  0CF0               	rrf	___awdiv@divisor,f
  5692  07DF  3EFF               	addlw	-1
  5693  07E0  1D03               	skipz
  5694  07E1  2FDC               	goto	u181_25
  5695  07E2  3001               	movlw	1
  5696  07E3  02F5               	subwf	___awdiv@counter,f
  5697  07E4  1D03               	btfss	3,2
  5698  07E5  2FC5               	goto	i1l2103
  5699  07E6                     i1l2113:
  5700  07E6  0876               	movf	___awdiv@sign,w
  5701  07E7  1903               	btfsc	3,2
  5702  07E8  2FEE               	goto	i1l2117
  5703  07E9  09F7               	comf	___awdiv@quotient,f
  5704  07EA  09F8               	comf	___awdiv@quotient+1,f
  5705  07EB  0AF7               	incf	___awdiv@quotient,f
  5706  07EC  1903               	skipnz
  5707  07ED  0AF8               	incf	___awdiv@quotient+1,f
  5708  07EE                     i1l2117:
  5709  07EE  0878               	movf	___awdiv@quotient+1,w
  5710  07EF  00F1               	movwf	?___awdiv+1
  5711  07F0  0877               	movf	___awdiv@quotient,w
  5712  07F1  00F0               	movwf	?___awdiv
  5713  07F2  0008               	return
  5714  07F3                     __end_of___awdiv:
  5715  007E                     btemp	set	126	;btemp
  5716  007E                     wtemp0	set	126
  5717                           
  5718                           	psect	config
  5719                           
  5720                           ;Config register CONFIG @ 0x2007
  5721                           ;	Oscillator Selection bits
  5722                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  5723                           ;	Watchdog Timer Enable bit
  5724                           ;	WDTE = ON, WDT enabled
  5725                           ;	Power-up Timer Enable bit
  5726                           ;	PWRTE = ON, PWRT enabled
  5727                           ;	RA5/MCLR/VPP Pin Function Select bit
  5728                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  5729                           ;	Brown-out Detect Enable bit
  5730                           ;	BOREN = ON, BOD enabled
  5731                           ;	Low-Voltage Programming Enable bit
  5732                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  5733                           ;	Data EE Memory Code Protection bit
  5734                           ;	CPD = OFF, Data memory code protection off
  5735                           ;	Flash Program Memory Code Protection bit
  5736                           ;	CP = OFF, Code protection off
  5737  2007                     	org	8199
  5738  2007  3F54               	dw	16212

Data Sizes:
    Strings     234
    Constant    40
    Data        0
    BSS         89
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      63
    BANK1            80     17      79
    BANK2            80      0       0

Pointer List with Targets:

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 25
		 -> STR_33(CODE[3]), STR_32(CODE[4]), STR_31(CODE[5]), STR_30(CODE[4]), 
		 -> STR_29(CODE[7]), STR_28(CODE[4]), STR_27(CODE[8]), STR_26(CODE[4]), 
		 -> STR_25(CODE[7]), STR_24(CODE[4]), STR_23(CODE[3]), STR_22(CODE[13]), 
		 -> STR_21(CODE[4]), STR_20(CODE[3]), STR_19(CODE[14]), STR_18(CODE[4]), 
		 -> STR_17(CODE[3]), STR_16(CODE[12]), STR_15(CODE[4]), STR_14(CODE[7]), 
		 -> STR_13(CODE[16]), STR_12(CODE[18]), STR_11(CODE[7]), STR_10(CODE[9]), 
		 -> STR_9(CODE[8]), STR_8(CODE[8]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[14]), STR_4(CODE[9]), STR_3(CODE[23]), STR_2(CODE[25]), 
		 -> STR_1(CODE[12]), 

    PRESET_load@tilt	PTR unsigned int  size(1) Largest target is 2
		 -> main@tilt_tmp_420(BANK1[2]), main@tilt_tmp(BANK1[2]), 

    PRESET_load@pan	PTR unsigned int  size(1) Largest target is 2
		 -> main@pan_tmp_419(BANK1[2]), main@pan_tmp(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myISR in COMMON

    _myISR->_SPEED_calc
    _SPEED_calc->___awdiv

Critical Paths under _main in BANK0

    _main->_print_cnt
    _print_cnt->_UART_Write_Text
    _UART_Write_Text->_UART_Write
    _BAUDS_get->_eeprom_read
    _PRESET_save->_eeprom_update
    _PRESET_load->_eeprom_read
    _MOTOR_Init->_delay_wdt
    _BAUDS_set->_eeprom_update
    _eeprom_update->_eeprom_write

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   19665
                                             35 BANK0      2     2      0
                                              0 BANK1     17    17      0
                          _BAUDS_set
                         _MOTOR_Init
                        _PRESET_load
                        _PRESET_save
                        _TIMER1_Init
                          _UART_Init
                         _UART_Write
                    _UART_Write_Text
                            _UC_Init
                             ___bmul
                            ___lbdiv
                          _delay_wdt
                          _print_cnt
 ---------------------------------------------------------------------------------
 (1) _print_cnt                                           14    10      4    9520
                                             21 BANK0     14    10      4
                         _UART_Write
                    _UART_Write_Text
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1576
                                              5 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4    1681
                                              5 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      7     5      2    3168
                                             14 BANK0      7     5      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           9     9      0      68
                                              5 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) ___lbdiv                                              5     4      1     511
                                              5 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     406
                                              5 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UC_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            3     3      0      65
                                              7 BANK0      3     3      0
                          _BAUDS_get
 ---------------------------------------------------------------------------------
 (2) _BAUDS_get                                            0     0      0      31
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _TIMER1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PRESET_save                                          8     4      4    1436
                                             13 BANK0      8     4      4
                      _eeprom_update
 ---------------------------------------------------------------------------------
 (1) _PRESET_load                                          6     4      2     704
                                              7 BANK0      6     4      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _MOTOR_Init                                           1     1      0     931
                                              8 BANK0      1     1      0
                          _delay_wdt
 ---------------------------------------------------------------------------------
 (1) _delay_wdt                                            3     1      2     931
                                              5 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _BAUDS_set                                            3     3      0     788
                                             13 BANK0      3     3      0
                      _eeprom_update
 ---------------------------------------------------------------------------------
 (2) _eeprom_update                                        5     3      2     757
                                              8 BANK0      5     3      2
                        _eeprom_read
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     152
                                              5 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myISR                                                5     5      0     590
                                              0 BANK0      5     5      0
                         _SPEED_calc
 ---------------------------------------------------------------------------------
 (5) _SPEED_calc                                           4     4      0     590
                                              9 COMMON     4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BAUDS_set
     _eeprom_update
       _eeprom_read
       _eeprom_write
   _MOTOR_Init
     _delay_wdt
   _PRESET_load
     _eeprom_read
   _PRESET_save
     _eeprom_update
   _TIMER1_Init
   _UART_Init
     _BAUDS_get
       _eeprom_read
   _UART_Write
   _UART_Write_Text
     _UART_Write
   _UC_Init
   ___bmul
   ___lbdiv
   _delay_wdt
   _print_cnt
     _UART_Write
     _UART_Write_Text
     ___lwdiv
     ___wmul

 _myISR (ROOT)
   _SPEED_calc
     ___awdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     25      3F       3       78.8%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50     11      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      9C       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      9C      10        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed Feb 12 01:05:09 2025

                      pc 0002           ___bmul@product 0027             ___awdiv@sign 0076  
                     fsr 0004      ___wmul@multiplicand 0027                      l238 0334  
                    l281 02AC                      l257 00EB                      l346 063C  
                    l283 02C1                      l356 0721                      l390 0F7D  
                    l286 0305                      l519 0DE5                      l391 0F82  
                    l385 0F6D                      l529 0E30                      l386 0F9E  
                    l387 0F71                      l395 0EA2                      l388 0F75  
                    l389 0F79                      l499 0D8A                      fsr0 0004  
                    indf 0000                     l3025 0DCC                     l3033 0EB2  
                   l3123 0F85                     l3109 0F6F                     l3045 0E28  
                   l3301 070D                     l3241 0624                     l3233 0614  
                   l3075 0F13                     l3067 0EEF                     l3251 0638  
                   l3243 0628                     l3235 0618                     l3411 0075  
                   l3403 0065                     l3333 0D7D                     l3069 0EFD  
                   l3309 071D                     l3229 060C                     l3351 0E0C  
                   l3079 0F1E                     l3407 006D                     l3415 0087  
                   l3089 0DA3                     l3329 0D77                     l3353 0E15  
                   l3363 0E24                     l3291 06F9                     l3507 0154  
                   l3293 06FD                     l3453 00EC                     l3429 0096  
                   l3287 06F1                     l3481 0125                     l3473 0115  
                   l3299 0709                     l3539 01AF                     l3395 0056  
                   l3387 0050                     l3717 0F8D                     l3581 0222  
                   l3485 012D                     l3477 011D                     l3469 010E  
                   l3647 02EE                     l3487 0138                     l3399 005E  
                   l3489 013D                     l3683 0347                     l3685 0348  
                   l2993 0E86                     l2995 0EAC                     STR_1 08B5  
                   STR_2 083A                     STR_3 0853                     STR_4 0883  
                   STR_5 089A                     STR_6 08EE                     STR_7 08FC  
                   STR_8 08D6                     STR_9 08DE                     _BRGH 04C2  
                   _CREN 00C4                     u4120 0351                     u3181 0D89  
                   u3165 0E95                     u3325 0EF2                     u3166 0E96  
                   u3167 0E9B                     u3168 0E9C                     u3265 0DC1  
                   u3169 0EA1                     u3345 0EFE                     u4147 0DDE  
                   u3355 0F0A                     u3605 0F27                     u3365 0F14  
                   u3285 0E31                     u3295 0E38                     u3625 0FAD  
                   _SPEN 00C7                     _TRMT 04C1                     _TXEN 04C5  
                   _SYNC 04C4           ??_eeprom_write 0026              main@pan_tmp 00E5  
                   _main 0023                     btemp 007E          __end_of_UC_Init 0DB3  
                   start 0011        ___bmul@multiplier 0028  __end_of_UART_Write_Text 0EE7  
            ?_MOTOR_Init 0070                    ?_main 0070          __end_of___awdiv 07F3  
        __end_of___lbdiv 0E26                    _EEADR 009B                    STR_10 08CD  
                  STR_11 08F5                    STR_20 0907                    STR_12 086A  
                  STR_21 091D                    STR_13 087C                    STR_30 091D  
                  STR_14 090A                    STR_22 08A8                    STR_23 0907  
                  STR_15 091D                    STR_31 0918                    STR_32 091D  
                  STR_24 091D                    STR_16 08C1                    STR_17 0907  
                  STR_33 0921                    STR_25 0911                    STR_26 091D  
                  STR_18 091D                    STR_27 08E6                    STR_19 088C  
                  STR_28 091D                    STR_29 0903                    _CMCON 001F  
            ?_SPEED_calc 0070          ___awdiv@divisor 0070          __end_of___lwdiv 0F23  
                  i1l314 0E50                    i1l218 054D                    i1l219 0549  
                  i1l317 0E79                    i1l167 03B7                    i1l193 049E  
                  i1l169 054F          ___awdiv@counter 0075                    _RCREG 001A  
        ??_eeprom_update 002A                    _TMR1H 000F                    _TMR1L 000E  
                  _SPBRG 0099                    _PORTA 0005                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086                    _TXREG 0019  
            ?_UART_Write 0070                    _myISR 0355                    main@i 00EE  
                  main@m 00ED                    pclath 000A          _timer1_tilt_ref 00D7  
           main@tilt_tmp 00E7        __end_of_BAUDS_get 0D5D        __end_of_BAUDS_set 07FF  
          print_cnt@_pan 0035            print_cnt@val1 0039                    status 0003  
                  wtemp0 007E          ___lbdiv@divisor 0025          ___lbdiv@counter 0028  
        __initialization 0013             __end_of_main 0355                   ??_main 0043  
           ?_TIMER1_Init 0070             ?_PRESET_load 0027             ?_PRESET_save 002D  
                 ?_myISR 0070                   _EEDATA 009A                   _EECON1 009C  
                 _EECON2 009D         ___awdiv@dividend 0072                ??_UC_Init 0025  
                 i1l2101 07B7                   i1l2103 07C5                   i1l2113 07E6  
                 i1l2117 07EE                   i1l2109 07DB                   i1l2161 0E71  
                 i1l2091 07AF                   i1l2155 0E58                   i1l2085 07A4  
                 i1l2511 03B5                   i1l2523 03CD                   i1l2621 04E8  
                 i1l2509 03B4                   i1l2631 0500                   i1l2607 04C7  
                 i1l2551 0412                   i1l2527 03D9                   i1l2519 03C9  
                 i1l2463 0362                   i1l2625 04F0                   i1l2617 04E0  
                 i1l2481 037C                   i1l2619 04E5                   i1l2571 0438  
                 i1l2547 0405                   i1l2539 03F0                   i1l2475 0374  
                 i1l2629 04FC                   i1l2581 044F                   i1l2557 0419  
                 i1l2493 038E                   i1l2469 036C                   i1l2575 043F  
                 i1l2567 0430                   i1l2487 0385                   i1l2569 0435  
                 i1l2593 04A2                   i1l2579 044B                   i1l2499 039E  
                 i1l2597 04AE                   u250_25 040B                   u180_25 07D2  
                 u260_25 0455                   u181_25 07DC                   u177_25 07BA  
                 u249_25 0401                   u179_25 07C6                   _P_dat1 004E  
                 _P_dat2 004D                   _P_cmd1 0050                   _P_cmd2 004F  
                 _P_addr 00D4        __end_of_UART_Init 0FA9                   ___bmul 0D74  
                 ___wmul 0E26                ??___awdiv 0074                ??___lbdiv 0026  
       ?_UART_Write_Text 002E        eeprom_update@addr 002C                ??___lwdiv 0029  
       ___awdiv@quotient 0077     __end_of_eeprom_write 0E05          SPEED_calc@speed 007B  
                 saved_w 007E           print_cnt@_tilt 0037           print_cnt@val10 003B  
       __end_of_steps_1A 083A         __end_of_steps_1B 0832         __end_of_steps_2A 082A  
       __end_of_steps_2B 0822         ___lbdiv@dividend 0027  __end_of__initialization 0020  
        eeprom_read@addr 0026      ___bmul@multiplicand 0025           __pcstackCOMMON 0070  
          _pan_direction 0058            __end_of_myISR 055A         ___lbdiv@quotient 0029  
         _OPTION_REGbits 0081        eeprom_write@value 0025                  ??_myISR 0020  
             __pbssBANK0 0045               __pbssBANK1 00A0               __pmaintext 0023  
          _pan_speed_old 0056                  ?___bmul 0025               _header_cnt 00DD  
             _header_pos 00D6                  ?___wmul 0025               __pintentry 0004  
           ??_MOTOR_Init 0028             ??_SPEED_calc 0079             ??_UART_Write 0025  
                _UC_Init 0D9C               __stringtab 0800               _frame_data 00A0  
      __end_of_delay_wdt 0DE4       __end_of_MOTOR_Init 079A      main@preset_id_1_422 00E1  
    main@preset_id_1_415 00E0                _BAUDS_get 0D59                _BAUDS_set 07F3  
     __end_of_SPEED_calc 0E7B                  ___awdiv 079A                  ___lbdiv 0E05  
     __end_of_UART_Write 0EB0                  ___lwdiv 0EE7                  __ptext1 055A  
                __ptext2 0E26                  __ptext3 0EE7                  __ptext4 0EB0  
                __ptext5 0E7B                  __ptext6 0E05                  __ptext7 0D74  
                __ptext8 0D9C                  __ptext9 0F65       eeprom_update@value 0028  
              _T1CONbits 0010                  _is_init 004B    __end_of_eeprom_update 0DCB  
                clrloop0 0D5E     end_of_initialization 0020             _eeprom_write 0DE4  
             ?_BAUDS_get 0070        __end_of_speed_ref 081A               ?_BAUDS_set 0070  
           _buffer_data0 00C3             _buffer_data1 00BC             _buffer_data2 00B5  
           _buffer_data3 00AE             _buffer_data4 00A7        __end_of_print_cnt 0725  
           _buffer_ready 00CA               _timer1_pan 00DA          print_cnt@val100 003D  
           __pstringtext 0800                _UART_Init 0F65                _PORTAbits 0005  
              _PORTBbits 0006           UART_Write@data 0029            PRESET_load@id 002B  
             _tilt_speed 0054            PRESET_save@id 0033            ??_eeprom_read 0025  
         __end_of___bmul 0D86           __end_of___wmul 0E47           _timer1_pan_ref 00D8  
             ?_UART_Init 0070      start_initialization 0013              ??_BAUDS_get 0027  
            ??_BAUDS_set 002D                 ??___bmul 0026                 ??___wmul 0029  
    __end_of_eeprom_read 0D9C              __pbssCOMMON 007D                ___latbits 0001  
          __pcstackBANK0 0020            __pcstackBANK1 00DE          main@chksum_calc 00DE  
            _data_receiv 005E                 ?_UC_Init 0070         eeprom_write@addr 0027  
            _alarms_data 00D2         ___lwdiv@dividend 0027                _delay_wdt 0DCB  
               ?___awdiv 0070                 ?___lbdiv 0025                 ?___lwdiv 0025  
            ??_UART_Init 0027            ??_TIMER1_Init 0025            ??_PRESET_load 0029  
         _pan_step_phase 0053            ??_PRESET_save 0031         ___lwdiv@quotient 002B  
              _is_reboot 00D1                _pan_speed 0057        ??_UART_Write_Text 0030  
      interrupt_function 0004           ___wmul@product 0029                clear_ram0 0D5D  
            _eeprom_read 0D86                 _PIE1bits 008C                 _PCONbits 008E  
               _PIR1bits 000C               ?_delay_wdt 0025                _speed_ref 0812  
              _preset_id 004C                _print_cnt 055A                _tilt_goto 00CF  
         _preset_enabled 005B              __stringbase 0812        ___wmul@multiplier 0025  
            _frame_index 0051          main@pan_tmp_419 00E9      __end_of_TIMER1_Init 0D74  
   main@preset_id_10_421 00E4     main@preset_id_10_414 00E3                 _P_chksum 00D3  
           delay_wdt@_ms 0025      __end_of_PRESET_load 1000      __end_of_PRESET_save 0F65  
             _EECON1bits 009C         main@preset_id_10 00E2               ?_print_cnt 0035  
            _pan_enabled 0059       __end_of__stringtab 0812              _pan_counter 0049  
          _response_type 00D5          ___lwdiv@divisor 0025          ___lwdiv@counter 002A  
               __ptext10 0D59                 __ptext11 0D65                 __ptext20 0355  
               __ptext12 0F23                 __ptext21 0E47                 __ptext13 0FA9  
               __ptext22 079A                 __ptext14 0725                 __ptext15 0DCB  
               __ptext16 07F3                 __ptext17 0DB3                 __ptext18 0DE4  
               __ptext19 0D86         main@tilt_tmp_420 00EB           _timeout_receiv 005C  
         _tilt_direction 00DC          _tilt_step_phase 0052      UART_Write_Text@text 002E  
               _pan_goto 0045           BAUDS_set@index 002F              ??_delay_wdt 0027  
               _steps_1A 0832                 _steps_1B 082A                 _steps_2A 0822  
               _steps_2B 081A              _TIMER1_Init 0D65        print_cnt@val10000 0041  
             _INTCONbits 000B          main@preset_id_1 00DF              _PRESET_load 0FA9  
          _eeprom_update 0DB3              _PRESET_save 0F23        SPEED_calc@sp_calc 007C  
         _tilt_speed_old 00DB                 intlevel1 0000         PRESET_load@_addr 002C  
              stringcode 080A            _buffer_index1 005D            _buffer_index2 007D  
      UART_Write@timeout 002A       _preset_enabled_old 005A              _timer1_tilt 00D9  
            ??_print_cnt 0039         print_cnt@val1000 003F               _MOTOR_Init 0725  
        _UART_Write_Text 0EB0               _SPEED_calc 0E47             _tilt_enabled 0055  
        PRESET_load@tilt 0028         PRESET_save@_addr 0034                 stringtab 0800  
         ?_eeprom_update 0028             _tilt_counter 0047               _UART_Write 0E7B  
         PRESET_load@pan 0027         UART_Write_Text@i 0033            ?_eeprom_write 0025  
   UART_Init@bauds_index 0029          PRESET_save@tilt 002F               _STATUSbits 0003  
           ?_eeprom_read 0070           PRESET_save@pan 002D  
