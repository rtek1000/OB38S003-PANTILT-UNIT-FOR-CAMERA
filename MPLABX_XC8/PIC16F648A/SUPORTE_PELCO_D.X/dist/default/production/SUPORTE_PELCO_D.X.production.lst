

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sun Feb 09 09:39:46 2025

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F648A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Generated 12/10/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F648A Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  008C                     	;# 
    89  008E                     	;# 
    90  0092                     	;# 
    91  0098                     	;# 
    92  0099                     	;# 
    93  009A                     	;# 
    94  009B                     	;# 
    95  009C                     	;# 
    96  009D                     	;# 
    97  009F                     	;# 
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000E                     	;# 
   109  000E                     	;# 
   110  000F                     	;# 
   111  0010                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0015                     	;# 
   115  0015                     	;# 
   116  0016                     	;# 
   117  0017                     	;# 
   118  0018                     	;# 
   119  0019                     	;# 
   120  001A                     	;# 
   121  001F                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  0086                     	;# 
   125  008C                     	;# 
   126  008E                     	;# 
   127  0092                     	;# 
   128  0098                     	;# 
   129  0099                     	;# 
   130  009A                     	;# 
   131  009B                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009F                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  008C                     	;# 
   163  008E                     	;# 
   164  0092                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009A                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009F                     	;# 
   172                           
   173                           	psect	strings
   174  0400                     __pstrings:
   175  0400                     stringtab:
   176  0400                     __stringtab:
   177  0400                     stringcode:	
   178                           ;	String table - string pointers are 1 byte each
   179                           
   180  0400                     stringdir:
   181  0400  3004               	movlw	high stringdir
   182  0401  008A               	movwf	10
   183  0402  0804               	movf	4,w
   184  0403  0A84               	incf	4,f
   185  0404  0782               	addwf	2,f
   186  0405                     __stringbase:
   187  0405  3400               	retlw	0
   188  0406                     __end_of__stringtab:
   189  0406                     _speed_ref:
   190  0406  3406               	retlw	6
   191  0407  340C               	retlw	12
   192  0408  3412               	retlw	18
   193  0409  3419               	retlw	25
   194  040A  341F               	retlw	31
   195  040B  3425               	retlw	37
   196  040C  342C               	retlw	44
   197  040D  3432               	retlw	50
   198  040E                     __end_of_speed_ref:
   199  040E                     _steps_2B:
   200  040E  3400               	retlw	0
   201  040F  3400               	retlw	0
   202  0410  3400               	retlw	0
   203  0411  3400               	retlw	0
   204  0412  3400               	retlw	0
   205  0413  3401               	retlw	1
   206  0414  3401               	retlw	1
   207  0415  3401               	retlw	1
   208  0416                     __end_of_steps_2B:
   209  0416                     _steps_2A:
   210  0416  3400               	retlw	0
   211  0417  3400               	retlw	0
   212  0418  3400               	retlw	0
   213  0419  3401               	retlw	1
   214  041A  3401               	retlw	1
   215  041B  3401               	retlw	1
   216  041C  3400               	retlw	0
   217  041D  3400               	retlw	0
   218  041E                     __end_of_steps_2A:
   219  041E                     _steps_1B:
   220  041E  3400               	retlw	0
   221  041F  3401               	retlw	1
   222  0420  3401               	retlw	1
   223  0421  3401               	retlw	1
   224  0422  3400               	retlw	0
   225  0423  3400               	retlw	0
   226  0424  3400               	retlw	0
   227  0425  3400               	retlw	0
   228  0426                     __end_of_steps_1B:
   229  0426                     _steps_1A:
   230  0426  3401               	retlw	1
   231  0427  3401               	retlw	1
   232  0428  3400               	retlw	0
   233  0429  3400               	retlw	0
   234  042A  3400               	retlw	0
   235  042B  3400               	retlw	0
   236  042C  3400               	retlw	0
   237  042D  3401               	retlw	1
   238  042E                     __end_of_steps_1A:
   239  042E                     STR_10:
   240  042E  3443               	retlw	67	;'C'
   241  042F  344C               	retlw	76	;'L'
   242  0430  3445               	retlw	69	;'E'
   243  0431  3441               	retlw	65	;'A'
   244  0432  3452               	retlw	82	;'R'
   245  0433  3420               	retlw	32	;' '
   246  0434  3450               	retlw	80	;'P'
   247  0435  3452               	retlw	82	;'R'
   248  0436  3445               	retlw	69	;'E'
   249  0437  3453               	retlw	83	;'S'
   250  0438  3445               	retlw	69	;'E'
   251  0439  3454               	retlw	84	;'T'
   252  043A  340D               	retlw	13
   253  043B  340A               	retlw	10
   254  043C  3400               	retlw	0
   255  043D                     STR_1:
   256  043D  3453               	retlw	83	;'S'
   257  043E  3445               	retlw	69	;'E'
   258  043F  3454               	retlw	84	;'T'
   259  0440  3420               	retlw	32	;' '
   260  0441  3442               	retlw	66	;'B'
   261  0442  3441               	retlw	65	;'A'
   262  0443  3455               	retlw	85	;'U'
   263  0444  3444               	retlw	68	;'D'
   264  0445  3420               	retlw	32	;' '
   265  0446  3452               	retlw	82	;'R'
   266  0447  3441               	retlw	65	;'A'
   267  0448  3454               	retlw	84	;'T'
   268  0449  3445               	retlw	69	;'E'
   269  044A  3420               	retlw	32	;' '
   270  044B  3400               	retlw	0
   271  044C                     STR_11:
   272  044C  3447               	retlw	71	;'G'
   273  044D  344F               	retlw	79	;'O'
   274  044E  3454               	retlw	84	;'T'
   275  044F  344F               	retlw	79	;'O'
   276  0450  3420               	retlw	32	;' '
   277  0451  3450               	retlw	80	;'P'
   278  0452  3452               	retlw	82	;'R'
   279  0453  3445               	retlw	69	;'E'
   280  0454  3453               	retlw	83	;'S'
   281  0455  3445               	retlw	69	;'E'
   282  0456  3454               	retlw	84	;'T'
   283  0457  340D               	retlw	13
   284  0458  340A               	retlw	10
   285  0459  3400               	retlw	0
   286  045A                     STR_9:
   287  045A  3453               	retlw	83	;'S'
   288  045B  3445               	retlw	69	;'E'
   289  045C  3454               	retlw	84	;'T'
   290  045D  3420               	retlw	32	;' '
   291  045E  3450               	retlw	80	;'P'
   292  045F  3452               	retlw	82	;'R'
   293  0460  3445               	retlw	69	;'E'
   294  0461  3453               	retlw	83	;'S'
   295  0462  3445               	retlw	69	;'E'
   296  0463  3454               	retlw	84	;'T'
   297  0464  340D               	retlw	13
   298  0465  340A               	retlw	10
   299  0466  3400               	retlw	0
   300  0467                     STR_6:
   301  0467  3431               	retlw	49	;'1'
   302  0468  3431               	retlw	49	;'1'
   303  0469  3435               	retlw	53	;'5'
   304  046A  3432               	retlw	50	;'2'
   305  046B  3430               	retlw	48	;'0'
   306  046C  3430               	retlw	48	;'0'
   307  046D  340D               	retlw	13
   308  046E  340A               	retlw	10
   309  046F  3400               	retlw	0
   310  0470                     STR_4:
   311  0470  3431               	retlw	49	;'1'
   312  0471  3439               	retlw	57	;'9'
   313  0472  3432               	retlw	50	;'2'
   314  0473  3430               	retlw	48	;'0'
   315  0474  3430               	retlw	48	;'0'
   316  0475  340D               	retlw	13
   317  0476  340A               	retlw	10
   318  0477  3400               	retlw	0
   319  0478                     STR_5:
   320  0478  3433               	retlw	51	;'3'
   321  0479  3438               	retlw	56	;'8'
   322  047A  3434               	retlw	52	;'4'
   323  047B  3430               	retlw	48	;'0'
   324  047C  3430               	retlw	48	;'0'
   325  047D  340D               	retlw	13
   326  047E  340A               	retlw	10
   327  047F  3400               	retlw	0
   328  0480                     STR_13:
   329  0480  3452               	retlw	82	;'R'
   330  0481  3449               	retlw	73	;'I'
   331  0482  3447               	retlw	71	;'G'
   332  0483  3448               	retlw	72	;'H'
   333  0484  3454               	retlw	84	;'T'
   334  0485  340D               	retlw	13
   335  0486  340A               	retlw	10
   336  0487  3400               	retlw	0
   337  0488                     STR_2:
   338  0488  3432               	retlw	50	;'2'
   339  0489  3434               	retlw	52	;'4'
   340  048A  3430               	retlw	48	;'0'
   341  048B  3430               	retlw	48	;'0'
   342  048C  340D               	retlw	13
   343  048D  340A               	retlw	10
   344  048E  3400               	retlw	0
   345  048F                     STR_7:
   346  048F  3439               	retlw	57	;'9'
   347  0490  3436               	retlw	54	;'6'
   348  0491  3430               	retlw	48	;'0'
   349  0492  3430               	retlw	48	;'0'
   350  0493  340D               	retlw	13
   351  0494  340A               	retlw	10
   352  0495  3400               	retlw	0
   353  0496                     STR_3:
   354  0496  3434               	retlw	52	;'4'
   355  0497  3438               	retlw	56	;'8'
   356  0498  3430               	retlw	48	;'0'
   357  0499  3430               	retlw	48	;'0'
   358  049A  340D               	retlw	13
   359  049B  340A               	retlw	10
   360  049C  3400               	retlw	0
   361  049D                     STR_14:
   362  049D  3444               	retlw	68	;'D'
   363  049E  344F               	retlw	79	;'O'
   364  049F  3457               	retlw	87	;'W'
   365  04A0  344E               	retlw	78	;'N'
   366  04A1  340D               	retlw	13
   367  04A2  340A               	retlw	10
   368  04A3  3400               	retlw	0
   369  04A4                     STR_8:
   370  04A4  3453               	retlw	83	;'S'
   371  04A5  3454               	retlw	84	;'T'
   372  04A6  344F               	retlw	79	;'O'
   373  04A7  3450               	retlw	80	;'P'
   374  04A8  340D               	retlw	13
   375  04A9  340A               	retlw	10
   376  04AA  3400               	retlw	0
   377  04AB                     STR_12:
   378  04AB  344C               	retlw	76	;'L'
   379  04AC  3445               	retlw	69	;'E'
   380  04AD  3446               	retlw	70	;'F'
   381  04AE  3454               	retlw	84	;'T'
   382  04AF  340D               	retlw	13
   383  04B0  340A               	retlw	10
   384  04B1  3400               	retlw	0
   385  04B2                     STR_15:
   386  04B2  3455               	retlw	85	;'U'
   387  04B3  3450               	retlw	80	;'P'
   388  04B4  340D               	retlw	13
   389  04B5  340A               	retlw	10
   390  04B6  3400               	retlw	0
   391                           
   392                           	psect	nvBANK0
   393  0068                     __pnvBANK0:
   394  0068                     _pan_direction:
   395  0068                     	ds	1
   396  0069                     _pan_enabled:
   397  0069                     	ds	1
   398  0019                     _TXREG	set	25
   399  0010                     _T1CONbits	set	16
   400  000B                     _INTCONbits	set	11
   401  001F                     _CMCON	set	31
   402  0006                     _PORTB	set	6
   403  0005                     _PORTA	set	5
   404  0005                     _PORTAbits	set	5
   405  0006                     _PORTBbits	set	6
   406  000E                     _TMR1L	set	14
   407  000F                     _TMR1H	set	15
   408  001A                     _RCREG	set	26
   409  000C                     _PIR1bits	set	12
   410  00C4                     _CREN	set	196
   411  00C7                     _SPEN	set	199
   412  0099                     _SPBRG	set	153
   413  0086                     _TRISB	set	134
   414  0085                     _TRISA	set	133
   415  0081                     _OPTION_REGbits	set	129
   416  008E                     _PCONbits	set	142
   417  008C                     _PIE1bits	set	140
   418  04C1                     _TRMT	set	1217
   419  04C5                     _TXEN	set	1221
   420  04C4                     _SYNC	set	1220
   421  04C2                     _BRGH	set	1218
   422                           
   423                           	psect	cinit
   424  0013                     start_initialization:	
   425                           ; #config settings
   426                           
   427  0013                     __initialization:
   428                           
   429                           ; Clear objects allocated to COMMON
   430  0013  01FD               	clrf	__pbssCOMMON& (0+127)
   431                           
   432                           ; Clear objects allocated to BANK0
   433  0014  1383               	bcf	3,7	;select IRP bank0
   434  0015  3020               	movlw	low __pbssBANK0
   435  0016  0084               	movwf	4
   436  0017  3053               	movlw	low (__pbssBANK0+51)
   437  0018  118A  262E  118A   	fcall	clear_ram0
   438                           
   439                           ; Clear objects allocated to BANK1
   440  001B  30A0               	movlw	low __pbssBANK1
   441  001C  0084               	movwf	4
   442  001D  30BC               	movlw	low (__pbssBANK1+28)
   443  001E  118A  262E  118A   	fcall	clear_ram0
   444  0021                     end_of_initialization:	
   445                           ;End of C runtime variable initialization code
   446                           
   447  0021                     __end_of__initialization:
   448  0021  0183               	clrf	3
   449  0022  118A  2824         	ljmp	_main	;jump to C main() function
   450                           
   451                           	psect	bssCOMMON
   452  007D                     __pbssCOMMON:
   453  007D                     _buffer_index2:
   454  007D                     	ds	1
   455                           
   456                           	psect	bssBANK0
   457  0020                     __pbssBANK0:
   458  0020                     _frame_data:
   459  0020                     	ds	7
   460  0027                     _buffer_data0:
   461  0027                     	ds	7
   462  002E                     _buffer_ready:
   463  002E                     	ds	5
   464  0033                     _tilt_counter:
   465  0033                     	ds	2
   466  0035                     _pan_counter:
   467  0035                     	ds	2
   468  0037                     _timer1_tilt_ref:
   469  0037                     	ds	1
   470  0038                     _timer1_pan_ref:
   471  0038                     	ds	1
   472  0039                     _timer1_tilt:
   473  0039                     	ds	1
   474  003A                     _timer1_pan:
   475  003A                     	ds	1
   476  003B                     _tilt_step_phase:
   477  003B                     	ds	1
   478  003C                     _pan_step_phase:
   479  003C                     	ds	1
   480  003D                     _alarms_data:
   481  003D                     	ds	1
   482  003E                     _tilt_speed_old:
   483  003E                     	ds	1
   484  003F                     _tilt_speed:
   485  003F                     	ds	1
   486  0040                     _tilt_direction:
   487  0040                     	ds	1
   488  0041                     _tilt_enabled:
   489  0041                     	ds	1
   490  0042                     _pan_speed_old:
   491  0042                     	ds	1
   492  0043                     _pan_speed:
   493  0043                     	ds	1
   494  0044                     _preset_enabled:
   495  0044                     	ds	1
   496  0045                     _preset_id:
   497  0045                     	ds	1
   498  0046                     _P_chksum:
   499  0046                     	ds	1
   500  0047                     _P_dat2:
   501  0047                     	ds	1
   502  0048                     _P_dat1:
   503  0048                     	ds	1
   504  0049                     _P_cmd2:
   505  0049                     	ds	1
   506  004A                     _P_cmd1:
   507  004A                     	ds	1
   508  004B                     _P_addr:
   509  004B                     	ds	1
   510  004C                     _response_type:
   511  004C                     	ds	1
   512  004D                     _header_pos:
   513  004D                     	ds	1
   514  004E                     _frame_index:
   515  004E                     	ds	1
   516  004F                     _timeout_receiv:
   517  004F                     	ds	1
   518  0050                     _header_cnt:
   519  0050                     	ds	1
   520  0051                     _buffer_index1:
   521  0051                     	ds	1
   522  0052                     _data_receiv:
   523  0052                     	ds	1
   524                           
   525                           	psect	bssBANK1
   526  00A0                     __pbssBANK1:
   527  00A0                     _buffer_data4:
   528  00A0                     	ds	7
   529  00A7                     _buffer_data3:
   530  00A7                     	ds	7
   531  00AE                     _buffer_data2:
   532  00AE                     	ds	7
   533  00B5                     _buffer_data1:
   534  00B5                     	ds	7
   535                           
   536                           	psect	clrtext
   537  062E                     clear_ram0:	
   538                           ;	Called with FSR containing the base address, and
   539                           ;	W with the last address+1
   540                           
   541  062E  0064               	clrwdt	;clear the watchdog before getting into this loop
   542  062F                     clrloop0:
   543  062F  0180               	clrf	0	;clear RAM location pointed to by FSR
   544  0630  0A84               	incf	4,f	;increment pointer
   545  0631  0604               	xorwf	4,w	;XOR with final address
   546  0632  1903               	btfsc	3,2	;have we reached the end yet?
   547  0633  3400               	retlw	0	;all done for this memory range, return
   548  0634  0604               	xorwf	4,w	;XOR again to restore value
   549  0635  2E2F               	goto	clrloop0	;do the next byte
   550                           
   551                           	psect	cstackCOMMON
   552  0070                     __pcstackCOMMON:
   553  0070                     ?_SPEED_calc:
   554  0070                     ?_UC_Init:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0070                     ?_TIMER1_Init:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0070                     ?_MOTOR_Init:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0070                     ?_UART_Write_Text:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0070                     ?_myISR:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0070                     ?_main:	
   570                           ; 1 bytes @ 0x0
   571                           
   572  0070                     ?_UART_Write:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0070                     ?___awdiv:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0070                     ___awdiv@divisor:	
   579                           ; 2 bytes @ 0x0
   580                           
   581                           
   582                           ; 2 bytes @ 0x0
   583  0070                     	ds	2
   584  0072                     ___awdiv@dividend:
   585                           
   586                           ; 2 bytes @ 0x2
   587  0072                     	ds	2
   588  0074                     ??___awdiv:
   589                           
   590                           ; 1 bytes @ 0x4
   591  0074                     	ds	1
   592  0075                     ___awdiv@counter:
   593                           
   594                           ; 1 bytes @ 0x5
   595  0075                     	ds	1
   596  0076                     ___awdiv@sign:
   597                           
   598                           ; 1 bytes @ 0x6
   599  0076                     	ds	1
   600  0077                     ___awdiv@quotient:
   601                           
   602                           ; 2 bytes @ 0x7
   603  0077                     	ds	2
   604  0079                     ??_SPEED_calc:
   605                           
   606                           ; 1 bytes @ 0x9
   607  0079                     	ds	2
   608  007B                     SPEED_calc@speed:
   609                           
   610                           ; 1 bytes @ 0xB
   611  007B                     	ds	1
   612  007C                     SPEED_calc@sp_calc:
   613                           
   614                           ; 1 bytes @ 0xC
   615  007C                     	ds	1
   616                           
   617                           	psect	cstackBANK0
   618  0053                     __pcstackBANK0:
   619  0053                     ??_myISR:
   620                           
   621                           ; 1 bytes @ 0x0
   622  0053                     	ds	5
   623  0058                     ??_UC_Init:
   624  0058                     ??_TIMER1_Init:	
   625                           ; 1 bytes @ 0x5
   626                           
   627  0058                     ??_MOTOR_Init:	
   628                           ; 1 bytes @ 0x5
   629                           
   630  0058                     ?_UART_Init:	
   631                           ; 1 bytes @ 0x5
   632                           
   633  0058                     ??_UART_Write:	
   634                           ; 1 bytes @ 0x5
   635                           
   636  0058                     UART_Init@baudrate:	
   637                           ; 1 bytes @ 0x5
   638                           
   639                           
   640                           ; 4 bytes @ 0x5
   641  0058                     	ds	4
   642  005C                     ??_UART_Init:
   643  005C                     UART_Write@data:	
   644                           ; 1 bytes @ 0x9
   645                           
   646                           
   647                           ; 1 bytes @ 0x9
   648  005C                     	ds	1
   649  005D                     UART_Write@timeout:
   650                           
   651                           ; 4 bytes @ 0xA
   652  005D                     	ds	4
   653  0061                     ??_UART_Write_Text:
   654  0061                     UART_Write_Text@i:	
   655                           ; 1 bytes @ 0xE
   656                           
   657                           
   658                           ; 2 bytes @ 0xE
   659  0061                     	ds	2
   660  0063                     UART_Write_Text@text:
   661                           
   662                           ; 1 bytes @ 0x10
   663  0063                     	ds	1
   664  0064                     ??_main:
   665                           
   666                           ; 1 bytes @ 0x11
   667  0064                     	ds	1
   668  0065                     main@chksum_calc:
   669                           
   670                           ; 1 bytes @ 0x12
   671  0065                     	ds	1
   672  0066                     main@m:
   673                           
   674                           ; 1 bytes @ 0x13
   675  0066                     	ds	1
   676  0067                     main@i:
   677                           
   678                           ; 1 bytes @ 0x14
   679  0067                     	ds	1
   680                           
   681                           	psect	maintext
   682  0024                     __pmaintext:	
   683 ;;
   684 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   685 ;;
   686 ;; *************** function _main *****************
   687 ;; Defined at:
   688 ;;		line 275 in file "main.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;		None
   691 ;; Auto vars:     Size  Location     Type
   692 ;;  m               1   19[BANK0 ] unsigned char 
   693 ;;  chksum_calc     1   18[BANK0 ] unsigned char 
   694 ;;  i               1   20[BANK0 ] unsigned char 
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : B00/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   704 ;;      Params:         0       0       0       0
   705 ;;      Locals:         0       3       0       0
   706 ;;      Temps:          0       1       0       0
   707 ;;      Totals:         0       4       0       0
   708 ;;Total ram usage:        4 bytes
   709 ;; Hardware stack levels required when called: 5
   710 ;; This function calls:
   711 ;;		_MOTOR_Init
   712 ;;		_TIMER1_Init
   713 ;;		_UART_Init
   714 ;;		_UART_Write_Text
   715 ;;		_UC_Init
   716 ;; This function is called by:
   717 ;;		Startup code after reset
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721  0024                     _main:	
   722                           ;psect for function _main
   723                           
   724  0024                     l1640:	
   725                           ;incstack = 0
   726                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   727                           
   728                           
   729                           ;main.c: 276:     UC_Init();
   730  0024  118A  25F4  118A   	fcall	_UC_Init
   731                           
   732                           ;main.c: 278:     TIMER1_Init();
   733  0027  118A  261D  118A   	fcall	_TIMER1_Init
   734                           
   735                           ;main.c: 280:     MOTOR_Init();
   736  002A  118A  2596  118A   	fcall	_MOTOR_Init
   737                           
   738                           ;main.c: 282:     UART_Init(9600);
   739  002D  3000               	movlw	0
   740  002E  1283               	bcf	3,5	;RP0=0, select bank0
   741  002F  1303               	bcf	3,6	;RP1=0, select bank0
   742  0030  00DB               	movwf	UART_Init@baudrate+3
   743  0031  3000               	movlw	0
   744  0032  00DA               	movwf	UART_Init@baudrate+2
   745  0033  3025               	movlw	37
   746  0034  00D9               	movwf	UART_Init@baudrate+1
   747  0035  3080               	movlw	128
   748  0036  00D8               	movwf	UART_Init@baudrate
   749  0037  118A  2609  118A   	fcall	_UART_Init
   750  003A                     l1642:
   751                           
   752                           ;main.c: 287:         if (frame_index < 2) {
   753  003A  3002               	movlw	2
   754  003B  1283               	bcf	3,5	;RP0=0, select bank0
   755  003C  1303               	bcf	3,6	;RP1=0, select bank0
   756  003D  024E               	subwf	_frame_index,w
   757  003E  1803               	skipnc
   758  003F  2841               	goto	u1361
   759  0040  2842               	goto	u1360
   760  0041                     u1361:
   761  0041  2847               	goto	l1646
   762  0042                     u1360:
   763  0042                     l1644:
   764                           
   765                           ;main.c: 288:             frame_index++;
   766  0042  3001               	movlw	1
   767  0043  00E4               	movwf	??_main
   768  0044  0864               	movf	??_main,w
   769  0045  07CE               	addwf	_frame_index,f
   770                           
   771                           ;main.c: 289:         } else {
   772  0046  2848               	goto	l1648
   773  0047                     l1646:
   774                           
   775                           ;main.c: 290:             frame_index = 0;
   776  0047  01CE               	clrf	_frame_index
   777  0048                     l1648:
   778                           
   779                           ;main.c: 293:         if (buffer_ready[frame_index] == 1) {
   780  0048  084E               	movf	_frame_index,w
   781  0049  3E2E               	addlw	(low (_buffer_ready| 0))& (0+255)
   782  004A  0084               	movwf	4
   783  004B  1383               	bcf	3,7	;select IRP bank0
   784  004C  0300               	decf	0,w
   785  004D  1D03               	btfss	3,2
   786  004E  2850               	goto	u1371
   787  004F  2851               	goto	u1370
   788  0050                     u1371:
   789  0050  283A               	goto	l1642
   790  0051                     u1370:
   791  0051                     l1650:
   792                           
   793                           ;main.c: 294:             buffer_ready[frame_index] = 0;
   794  0051  084E               	movf	_frame_index,w
   795  0052  3E2E               	addlw	(low (_buffer_ready| 0))& (0+255)
   796  0053  0084               	movwf	4
   797  0054  0180               	clrf	0
   798  0055                     l1652:
   799                           
   800                           ;main.c: 296:             for (uint8_t i = 0; i < 7; i++) {
   801  0055  01E7               	clrf	main@i
   802  0056                     l1658:
   803                           
   804                           ;main.c: 297:                 if (frame_index == 0) {
   805  0056  084E               	movf	_frame_index,w
   806  0057  1D03               	btfss	3,2
   807  0058  285A               	goto	u1381
   808  0059  285B               	goto	u1380
   809  005A                     u1381:
   810  005A  2867               	goto	l1662
   811  005B                     u1380:
   812  005B                     l1660:
   813                           
   814                           ;main.c: 298:                     frame_data[i] = buffer_data0[i];
   815  005B  0867               	movf	main@i,w
   816  005C  3E27               	addlw	(low (_buffer_data0| 0))& (0+255)
   817  005D  0084               	movwf	4
   818  005E  1383               	bcf	3,7	;select IRP bank0
   819  005F  0800               	movf	0,w
   820  0060  00E4               	movwf	??_main
   821  0061  0867               	movf	main@i,w
   822  0062  3E20               	addlw	(low (_frame_data| 0))& (0+255)
   823  0063  0084               	movwf	4
   824  0064  0864               	movf	??_main,w
   825  0065  0080               	movwf	0
   826                           
   827                           ;main.c: 299:                 } else if (frame_index == 1) {
   828  0066  28AE               	goto	l1678
   829  0067                     l1662:
   830  0067  034E               	decf	_frame_index,w
   831  0068  1D03               	btfss	3,2
   832  0069  286B               	goto	u1391
   833  006A  286C               	goto	u1390
   834  006B                     u1391:
   835  006B  2878               	goto	l1666
   836  006C                     u1390:
   837  006C                     l1664:
   838                           
   839                           ;main.c: 300:                     frame_data[i] = buffer_data1[i];
   840  006C  0867               	movf	main@i,w
   841  006D  3EB5               	addlw	(low (_buffer_data1| 0))& (0+255)
   842  006E  0084               	movwf	4
   843  006F  1383               	bcf	3,7	;select IRP bank1
   844  0070  0800               	movf	0,w
   845  0071  00E4               	movwf	??_main
   846  0072  0867               	movf	main@i,w
   847  0073  3E20               	addlw	(low (_frame_data| 0))& (0+255)
   848  0074  0084               	movwf	4
   849  0075  0864               	movf	??_main,w
   850  0076  0080               	movwf	0
   851                           
   852                           ;main.c: 301:                 } else if (frame_index == 2) {
   853  0077  28AE               	goto	l1678
   854  0078                     l1666:
   855  0078  3002               	movlw	2
   856  0079  064E               	xorwf	_frame_index,w
   857  007A  1D03               	btfss	3,2
   858  007B  287D               	goto	u1401
   859  007C  287E               	goto	u1400
   860  007D                     u1401:
   861  007D  288A               	goto	l1670
   862  007E                     u1400:
   863  007E                     l1668:
   864                           
   865                           ;main.c: 302:                     frame_data[i] = buffer_data2[i];
   866  007E  0867               	movf	main@i,w
   867  007F  3EAE               	addlw	(low (_buffer_data2| 0))& (0+255)
   868  0080  0084               	movwf	4
   869  0081  1383               	bcf	3,7	;select IRP bank1
   870  0082  0800               	movf	0,w
   871  0083  00E4               	movwf	??_main
   872  0084  0867               	movf	main@i,w
   873  0085  3E20               	addlw	(low (_frame_data| 0))& (0+255)
   874  0086  0084               	movwf	4
   875  0087  0864               	movf	??_main,w
   876  0088  0080               	movwf	0
   877                           
   878                           ;main.c: 303:                 } else if (frame_index == 3) {
   879  0089  28AE               	goto	l1678
   880  008A                     l1670:
   881  008A  3003               	movlw	3
   882  008B  064E               	xorwf	_frame_index,w
   883  008C  1D03               	btfss	3,2
   884  008D  288F               	goto	u1411
   885  008E  2890               	goto	u1410
   886  008F                     u1411:
   887  008F  289C               	goto	l1674
   888  0090                     u1410:
   889  0090                     l1672:
   890                           
   891                           ;main.c: 304:                     frame_data[i] = buffer_data3[i];
   892  0090  0867               	movf	main@i,w
   893  0091  3EA7               	addlw	(low (_buffer_data3| 0))& (0+255)
   894  0092  0084               	movwf	4
   895  0093  1383               	bcf	3,7	;select IRP bank1
   896  0094  0800               	movf	0,w
   897  0095  00E4               	movwf	??_main
   898  0096  0867               	movf	main@i,w
   899  0097  3E20               	addlw	(low (_frame_data| 0))& (0+255)
   900  0098  0084               	movwf	4
   901  0099  0864               	movf	??_main,w
   902  009A  0080               	movwf	0
   903                           
   904                           ;main.c: 305:                 } else if (frame_index == 4) {
   905  009B  28AE               	goto	l1678
   906  009C                     l1674:
   907  009C  3004               	movlw	4
   908  009D  064E               	xorwf	_frame_index,w
   909  009E  1D03               	btfss	3,2
   910  009F  28A1               	goto	u1421
   911  00A0  28A2               	goto	u1420
   912  00A1                     u1421:
   913  00A1  28AE               	goto	l201
   914  00A2                     u1420:
   915  00A2                     l1676:
   916                           
   917                           ;main.c: 306:                     frame_data[i] = buffer_data4[i];
   918  00A2  0867               	movf	main@i,w
   919  00A3  3EA0               	addlw	(low (_buffer_data4| 0))& (0+255)
   920  00A4  0084               	movwf	4
   921  00A5  1383               	bcf	3,7	;select IRP bank1
   922  00A6  0800               	movf	0,w
   923  00A7  00E4               	movwf	??_main
   924  00A8  0867               	movf	main@i,w
   925  00A9  3E20               	addlw	(low (_frame_data| 0))& (0+255)
   926  00AA  0084               	movwf	4
   927  00AB  0864               	movf	??_main,w
   928  00AC  0080               	movwf	0
   929  00AD  28AE               	goto	l1678
   930  00AE                     l201:
   931  00AE                     l1678:
   932                           
   933                           ;main.c: 308:             }
   934  00AE  3001               	movlw	1
   935  00AF  00E4               	movwf	??_main
   936  00B0  0864               	movf	??_main,w
   937  00B1  07E7               	addwf	main@i,f
   938  00B2                     l1680:
   939  00B2  3007               	movlw	7
   940  00B3  0267               	subwf	main@i,w
   941  00B4  1C03               	skipc
   942  00B5  28B7               	goto	u1431
   943  00B6  28B8               	goto	u1430
   944  00B7                     u1431:
   945  00B7  2856               	goto	l1658
   946  00B8                     u1430:
   947  00B8                     l1682:
   948                           
   949                           ;main.c: 310:             if (frame_data[0] == 0xFF) {
   950  00B8  0A20               	incf	_frame_data,w
   951  00B9  1D03               	btfss	3,2
   952  00BA  28BC               	goto	u1441
   953  00BB  28BD               	goto	u1440
   954  00BC                     u1441:
   955  00BC  283A               	goto	l1642
   956  00BD                     u1440:
   957  00BD                     l1684:
   958                           
   959                           ;main.c: 311:                 uint8_t chksum_calc = 0;
   960  00BD  01E5               	clrf	main@chksum_calc
   961  00BE                     l1686:
   962                           
   963                           ;main.c: 313:                 for (uint8_t m = 1; m <= 5; m++) {
   964  00BE  01E6               	clrf	main@m
   965  00BF  0AE6               	incf	main@m,f
   966  00C0                     l1692:
   967                           
   968                           ;main.c: 314:                     chksum_calc += frame_data[m];
   969  00C0  0866               	movf	main@m,w
   970  00C1  3E20               	addlw	(low (_frame_data| 0))& (0+255)
   971  00C2  0084               	movwf	4
   972  00C3  1383               	bcf	3,7	;select IRP bank0
   973  00C4  0800               	movf	0,w
   974  00C5  00E4               	movwf	??_main
   975  00C6  0864               	movf	??_main,w
   976  00C7  07E5               	addwf	main@chksum_calc,f
   977  00C8                     l1694:
   978                           
   979                           ;main.c: 315:                 }
   980  00C8  3001               	movlw	1
   981  00C9  00E4               	movwf	??_main
   982  00CA  0864               	movf	??_main,w
   983  00CB  07E6               	addwf	main@m,f
   984  00CC                     l1696:
   985  00CC  3006               	movlw	6
   986  00CD  0266               	subwf	main@m,w
   987  00CE  1C03               	skipc
   988  00CF  28D1               	goto	u1451
   989  00D0  28D2               	goto	u1450
   990  00D1                     u1451:
   991  00D1  28C0               	goto	l1692
   992  00D2                     u1450:
   993  00D2                     l1698:
   994                           
   995                           ;main.c: 317:                 if (chksum_calc == frame_data[6]) {
   996  00D2  0826               	movf	_frame_data+6,w
   997  00D3  0665               	xorwf	main@chksum_calc,w
   998  00D4  1D03               	skipz
   999  00D5  28D7               	goto	u1461
  1000  00D6  28D8               	goto	u1460
  1001  00D7                     u1461:
  1002  00D7  283A               	goto	l1642
  1003  00D8                     u1460:
  1004  00D8                     l1700:
  1005                           
  1006                           ;main.c: 319:                     P_addr = frame_data[1];
  1007  00D8  0821               	movf	_frame_data+1,w
  1008  00D9  00E4               	movwf	??_main
  1009  00DA  0864               	movf	??_main,w
  1010  00DB  00CB               	movwf	_P_addr
  1011                           
  1012                           ;main.c: 320:                     P_cmd1 = frame_data[2];
  1013  00DC  0822               	movf	_frame_data+2,w
  1014  00DD  00E4               	movwf	??_main
  1015  00DE  0864               	movf	??_main,w
  1016  00DF  00CA               	movwf	_P_cmd1
  1017                           
  1018                           ;main.c: 321:                     P_cmd2 = frame_data[3];
  1019  00E0  0823               	movf	_frame_data+3,w
  1020  00E1  00E4               	movwf	??_main
  1021  00E2  0864               	movf	??_main,w
  1022  00E3  00C9               	movwf	_P_cmd2
  1023                           
  1024                           ;main.c: 322:                     P_dat1 = frame_data[4];
  1025  00E4  0824               	movf	_frame_data+4,w
  1026  00E5  00E4               	movwf	??_main
  1027  00E6  0864               	movf	??_main,w
  1028  00E7  00C8               	movwf	_P_dat1
  1029                           
  1030                           ;main.c: 323:                     P_dat2 = frame_data[5];
  1031  00E8  0825               	movf	_frame_data+5,w
  1032  00E9  00E4               	movwf	??_main
  1033  00EA  0864               	movf	??_main,w
  1034  00EB  00C7               	movwf	_P_dat2
  1035                           
  1036                           ;main.c: 324:                     P_chksum = frame_data[6];
  1037  00EC  0826               	movf	_frame_data+6,w
  1038  00ED  00E4               	movwf	??_main
  1039  00EE  0864               	movf	??_main,w
  1040  00EF  00C6               	movwf	_P_chksum
  1041  00F0                     l1702:
  1042                           
  1043                           ;main.c: 326:                     response_type = 0x00;
  1044  00F0  01CC               	clrf	_response_type
  1045  00F1                     l1704:
  1046                           
  1047                           ;main.c: 329:                     if (P_addr == 0x01) {
  1048  00F1  034B               	decf	_P_addr,w
  1049  00F2  1D03               	btfss	3,2
  1050  00F3  28F5               	goto	u1471
  1051  00F4  28F6               	goto	u1470
  1052  00F5                     u1471:
  1053  00F5  283A               	goto	l1642
  1054  00F6                     u1470:
  1055  00F6                     l1706:
  1056                           
  1057                           ;main.c: 330:                         if ((P_cmd1 == 0x00) && (P_cmd2 == 0x67) && (P_dat
      +                          1 == 0x00)) {
  1058  00F6  084A               	movf	_P_cmd1,w
  1059  00F7  1D03               	btfss	3,2
  1060  00F8  28FA               	goto	u1481
  1061  00F9  28FB               	goto	u1480
  1062  00FA                     u1481:
  1063  00FA  2947               	goto	l1736
  1064  00FB                     u1480:
  1065  00FB                     l1708:
  1066  00FB  3067               	movlw	103
  1067  00FC  0649               	xorwf	_P_cmd2,w
  1068  00FD  1D03               	btfss	3,2
  1069  00FE  2900               	goto	u1491
  1070  00FF  2901               	goto	u1490
  1071  0100                     u1491:
  1072  0100  2947               	goto	l1736
  1073  0101                     u1490:
  1074  0101                     l1710:
  1075  0101  0848               	movf	_P_dat1,w
  1076  0102  1D03               	btfss	3,2
  1077  0103  2905               	goto	u1501
  1078  0104  2906               	goto	u1500
  1079  0105                     u1501:
  1080  0105  2947               	goto	l1736
  1081  0106                     u1500:
  1082  0106                     l1712:
  1083                           
  1084                           ;main.c: 332:                             UART_Write_Text("SET BAUD RATE ");
  1085  0106  3038               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1086  0107  118A  25D1  118A   	fcall	_UART_Write_Text
  1087  010A                     l1714:
  1088                           
  1089                           ;main.c: 334:                             if (P_dat2 == 0x00) {
  1090  010A  1283               	bcf	3,5	;RP0=0, select bank0
  1091  010B  1303               	bcf	3,6	;RP1=0, select bank0
  1092  010C  0847               	movf	_P_dat2,w
  1093  010D  1D03               	btfss	3,2
  1094  010E  2910               	goto	u1511
  1095  010F  2911               	goto	u1510
  1096  0110                     u1511:
  1097  0110  2916               	goto	l1718
  1098  0111                     u1510:
  1099  0111                     l1716:
  1100                           
  1101                           ;main.c: 336:                                 UART_Write_Text("2400\r\n");
  1102  0111  3083               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1103  0112  118A  25D1  118A   	fcall	_UART_Write_Text
  1104                           
  1105                           ;main.c: 337:                             } else if (P_dat2 == 0x01) {
  1106  0115  283A               	goto	l1642
  1107  0116                     l1718:
  1108  0116  0347               	decf	_P_dat2,w
  1109  0117  1D03               	btfss	3,2
  1110  0118  291A               	goto	u1521
  1111  0119  291B               	goto	u1520
  1112  011A                     u1521:
  1113  011A  2920               	goto	l1722
  1114  011B                     u1520:
  1115  011B                     l1720:
  1116                           
  1117                           ;main.c: 339:                                 UART_Write_Text("4800\r\n");
  1118  011B  3091               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1119  011C  118A  25D1  118A   	fcall	_UART_Write_Text
  1120                           
  1121                           ;main.c: 343:                             } else if (P_dat2 == 0x03) {
  1122  011F  283A               	goto	l1642
  1123  0120                     l1722:
  1124  0120  3003               	movlw	3
  1125  0121  0647               	xorwf	_P_dat2,w
  1126  0122  1D03               	btfss	3,2
  1127  0123  2925               	goto	u1531
  1128  0124  2926               	goto	u1530
  1129  0125                     u1531:
  1130  0125  292B               	goto	l1726
  1131  0126                     u1530:
  1132  0126                     l1724:
  1133                           
  1134                           ;main.c: 345:                                 UART_Write_Text("19200\r\n");
  1135  0126  306B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1136  0127  118A  25D1  118A   	fcall	_UART_Write_Text
  1137                           
  1138                           ;main.c: 346:                             } else if (P_dat2 == 0x04) {
  1139  012A  283A               	goto	l1642
  1140  012B                     l1726:
  1141  012B  3004               	movlw	4
  1142  012C  0647               	xorwf	_P_dat2,w
  1143  012D  1D03               	btfss	3,2
  1144  012E  2930               	goto	u1541
  1145  012F  2931               	goto	u1540
  1146  0130                     u1541:
  1147  0130  2936               	goto	l1730
  1148  0131                     u1540:
  1149  0131                     l1728:
  1150                           
  1151                           ;main.c: 348:                                 UART_Write_Text("38400\r\n");
  1152  0131  3073               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1153  0132  118A  25D1  118A   	fcall	_UART_Write_Text
  1154                           
  1155                           ;main.c: 349:                             } else if (P_dat2 == 0x05) {
  1156  0135  283A               	goto	l1642
  1157  0136                     l1730:
  1158  0136  3005               	movlw	5
  1159  0137  0647               	xorwf	_P_dat2,w
  1160  0138  1D03               	btfss	3,2
  1161  0139  293B               	goto	u1551
  1162  013A  293C               	goto	u1550
  1163  013B                     u1551:
  1164  013B  2941               	goto	l1734
  1165  013C                     u1550:
  1166  013C                     l1732:
  1167                           
  1168                           ;main.c: 351:                                 UART_Write_Text("115200\r\n");
  1169  013C  3062               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1170  013D  118A  25D1  118A   	fcall	_UART_Write_Text
  1171                           
  1172                           ;main.c: 352:                             } else {
  1173  0140  283A               	goto	l1642
  1174  0141                     l1734:
  1175                           
  1176                           ;main.c: 354:                                 UART_Write_Text("9600\r\n");
  1177  0141  308A               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1178  0142  118A  25D1  118A   	fcall	_UART_Write_Text
  1179  0145  283A               	goto	l1642
  1180  0146                     l218:
  1181  0146  283A               	goto	l1642
  1182  0147                     l1736:
  1183  0147  084A               	movf	_P_cmd1,w
  1184  0148  1D03               	btfss	3,2
  1185  0149  294B               	goto	u1561
  1186  014A  294C               	goto	u1560
  1187  014B                     u1561:
  1188  014B  2964               	goto	l1750
  1189  014C                     u1560:
  1190  014C                     l1738:
  1191  014C  0849               	movf	_P_cmd2,w
  1192  014D  1D03               	btfss	3,2
  1193  014E  2950               	goto	u1571
  1194  014F  2951               	goto	u1570
  1195  0150                     u1571:
  1196  0150  2964               	goto	l1750
  1197  0151                     u1570:
  1198  0151                     l1740:
  1199  0151  0848               	movf	_P_dat1,w
  1200  0152  1D03               	btfss	3,2
  1201  0153  2955               	goto	u1581
  1202  0154  2956               	goto	u1580
  1203  0155                     u1581:
  1204  0155  2964               	goto	l1750
  1205  0156                     u1580:
  1206  0156                     l1742:
  1207  0156  0847               	movf	_P_dat2,w
  1208  0157  1D03               	btfss	3,2
  1209  0158  295A               	goto	u1591
  1210  0159  295B               	goto	u1590
  1211  015A                     u1591:
  1212  015A  2964               	goto	l1750
  1213  015B                     u1590:
  1214  015B                     l1744:
  1215                           
  1216                           ;main.c: 357:                             pan_enabled = 0;
  1217  015B  01E9               	clrf	_pan_enabled	;volatile
  1218                           
  1219                           ;main.c: 358:                             tilt_enabled = 0;
  1220  015C  01C1               	clrf	_tilt_enabled	;volatile
  1221  015D                     l1746:
  1222                           
  1223                           ;main.c: 359:                             response_type = 0x01;
  1224  015D  01CC               	clrf	_response_type
  1225  015E  0ACC               	incf	_response_type,f
  1226  015F                     l1748:
  1227                           
  1228                           ;main.c: 360:                             UART_Write_Text("STOP\r\n");
  1229  015F  309F               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1230  0160  118A  25D1  118A   	fcall	_UART_Write_Text
  1231                           
  1232                           ;main.c: 361:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x03) &&
      +                           (P_dat1 == 0x00)) {
  1233  0163  283A               	goto	l1642
  1234  0164                     l1750:
  1235  0164  084A               	movf	_P_cmd1,w
  1236  0165  1D03               	btfss	3,2
  1237  0166  2968               	goto	u1601
  1238  0167  2969               	goto	u1600
  1239  0168                     u1601:
  1240  0168  297F               	goto	l1762
  1241  0169                     u1600:
  1242  0169                     l1752:
  1243  0169  3003               	movlw	3
  1244  016A  0649               	xorwf	_P_cmd2,w
  1245  016B  1D03               	btfss	3,2
  1246  016C  296E               	goto	u1611
  1247  016D  296F               	goto	u1610
  1248  016E                     u1611:
  1249  016E  297F               	goto	l1762
  1250  016F                     u1610:
  1251  016F                     l1754:
  1252  016F  0848               	movf	_P_dat1,w
  1253  0170  1D03               	btfss	3,2
  1254  0171  2973               	goto	u1621
  1255  0172  2974               	goto	u1620
  1256  0173                     u1621:
  1257  0173  297F               	goto	l1762
  1258  0174                     u1620:
  1259  0174                     l1756:
  1260                           
  1261                           ;main.c: 362:                             preset_id = P_dat2;
  1262  0174  0847               	movf	_P_dat2,w
  1263  0175  00E4               	movwf	??_main
  1264  0176  0864               	movf	??_main,w
  1265  0177  00C5               	movwf	_preset_id
  1266  0178                     l1758:
  1267                           
  1268                           ;main.c: 363:                             response_type = 0x01;
  1269  0178  01CC               	clrf	_response_type
  1270  0179  0ACC               	incf	_response_type,f
  1271  017A                     l1760:
  1272                           
  1273                           ;main.c: 364:                             UART_Write_Text("SET PRESET\r\n");
  1274  017A  3055               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1275  017B  118A  25D1  118A   	fcall	_UART_Write_Text
  1276                           
  1277                           ;main.c: 365:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x05) &&
      +                           (P_dat1 == 0x00)) {
  1278  017E  283A               	goto	l1642
  1279  017F                     l1762:
  1280  017F  084A               	movf	_P_cmd1,w
  1281  0180  1D03               	btfss	3,2
  1282  0181  2983               	goto	u1631
  1283  0182  2984               	goto	u1630
  1284  0183                     u1631:
  1285  0183  299A               	goto	l1774
  1286  0184                     u1630:
  1287  0184                     l1764:
  1288  0184  3005               	movlw	5
  1289  0185  0649               	xorwf	_P_cmd2,w
  1290  0186  1D03               	btfss	3,2
  1291  0187  2989               	goto	u1641
  1292  0188  298A               	goto	u1640
  1293  0189                     u1641:
  1294  0189  299A               	goto	l1774
  1295  018A                     u1640:
  1296  018A                     l1766:
  1297  018A  0848               	movf	_P_dat1,w
  1298  018B  1D03               	btfss	3,2
  1299  018C  298E               	goto	u1651
  1300  018D  298F               	goto	u1650
  1301  018E                     u1651:
  1302  018E  299A               	goto	l1774
  1303  018F                     u1650:
  1304  018F                     l1768:
  1305                           
  1306                           ;main.c: 366:                             preset_id = P_dat2;
  1307  018F  0847               	movf	_P_dat2,w
  1308  0190  00E4               	movwf	??_main
  1309  0191  0864               	movf	??_main,w
  1310  0192  00C5               	movwf	_preset_id
  1311  0193                     l1770:
  1312                           
  1313                           ;main.c: 367:                             response_type = 0x01;
  1314  0193  01CC               	clrf	_response_type
  1315  0194  0ACC               	incf	_response_type,f
  1316  0195                     l1772:
  1317                           
  1318                           ;main.c: 368:                             UART_Write_Text("CLEAR PRESET\r\n");
  1319  0195  3029               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1320  0196  118A  25D1  118A   	fcall	_UART_Write_Text
  1321                           
  1322                           ;main.c: 369:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x07) &&
      +                           (P_dat1 == 0x00)) {
  1323  0199  283A               	goto	l1642
  1324  019A                     l1774:
  1325  019A  084A               	movf	_P_cmd1,w
  1326  019B  1D03               	btfss	3,2
  1327  019C  299E               	goto	u1661
  1328  019D  299F               	goto	u1660
  1329  019E                     u1661:
  1330  019E  29B9               	goto	l230
  1331  019F                     u1660:
  1332  019F                     l1776:
  1333  019F  3007               	movlw	7
  1334  01A0  0649               	xorwf	_P_cmd2,w
  1335  01A1  1D03               	btfss	3,2
  1336  01A2  29A4               	goto	u1671
  1337  01A3  29A5               	goto	u1670
  1338  01A4                     u1671:
  1339  01A4  29B9               	goto	l230
  1340  01A5                     u1670:
  1341  01A5                     l1778:
  1342  01A5  0848               	movf	_P_dat1,w
  1343  01A6  1D03               	btfss	3,2
  1344  01A7  29A9               	goto	u1681
  1345  01A8  29AA               	goto	u1680
  1346  01A9                     u1681:
  1347  01A9  29B9               	goto	l230
  1348  01AA                     u1680:
  1349  01AA                     l1780:
  1350                           
  1351                           ;main.c: 370:                             preset_id = P_dat2;
  1352  01AA  0847               	movf	_P_dat2,w
  1353  01AB  00E4               	movwf	??_main
  1354  01AC  0864               	movf	??_main,w
  1355  01AD  00C5               	movwf	_preset_id
  1356                           
  1357                           ;main.c: 371:                             preset_enabled = 1;
  1358  01AE  3001               	movlw	1
  1359  01AF  00E4               	movwf	??_main
  1360  01B0  0864               	movf	??_main,w
  1361  01B1  00C4               	movwf	_preset_enabled	;volatile
  1362  01B2                     l1782:
  1363                           
  1364                           ;main.c: 372:                             response_type = 0x01;
  1365  01B2  01CC               	clrf	_response_type
  1366  01B3  0ACC               	incf	_response_type,f
  1367  01B4                     l1784:
  1368                           
  1369                           ;main.c: 373:                             UART_Write_Text("GOTO PRESET\r\n");
  1370  01B4  3047               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1371  01B5  118A  25D1  118A   	fcall	_UART_Write_Text
  1372                           
  1373                           ;main.c: 374:                         } else {
  1374  01B8  283A               	goto	l1642
  1375  01B9                     l230:
  1376                           
  1377                           ;main.c: 375:                             if ((P_cmd2 & 0x04) == 0x04) {
  1378  01B9  1D49               	btfss	_P_cmd2,2
  1379  01BA  29BC               	goto	u1691
  1380  01BB  29BD               	goto	u1690
  1381  01BC                     u1691:
  1382  01BC  29CD               	goto	l232
  1383  01BD                     u1690:
  1384  01BD                     l1786:
  1385                           
  1386                           ;main.c: 376:                                 pan_speed = P_dat1;
  1387  01BD  0848               	movf	_P_dat1,w
  1388  01BE  00E4               	movwf	??_main
  1389  01BF  0864               	movf	??_main,w
  1390  01C0  00C3               	movwf	_pan_speed	;volatile
  1391  01C1                     l1788:
  1392                           
  1393                           ;main.c: 377:                                 pan_direction = 0;
  1394  01C1  01E8               	clrf	_pan_direction	;volatile
  1395  01C2                     l1790:
  1396                           
  1397                           ;main.c: 378:                                 pan_enabled = 1;
  1398  01C2  3001               	movlw	1
  1399  01C3  00E4               	movwf	??_main
  1400  01C4  0864               	movf	??_main,w
  1401  01C5  00E9               	movwf	_pan_enabled	;volatile
  1402  01C6                     l1792:
  1403                           
  1404                           ;main.c: 379:                                 response_type = 0x01;
  1405  01C6  01CC               	clrf	_response_type
  1406  01C7  0ACC               	incf	_response_type,f
  1407  01C8                     l1794:
  1408                           
  1409                           ;main.c: 380:                                 UART_Write_Text("LEFT\r\n");
  1410  01C8  30A6               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1411  01C9  118A  25D1  118A   	fcall	_UART_Write_Text
  1412                           
  1413                           ;main.c: 381:                             } else if ((P_cmd2 & 0x02) == 0x02) {
  1414  01CC  29E3               	goto	l1802
  1415  01CD                     l232:
  1416  01CD  1CC9               	btfss	_P_cmd2,1
  1417  01CE  29D0               	goto	u1701
  1418  01CF  29D1               	goto	u1700
  1419  01D0                     u1701:
  1420  01D0  29E3               	goto	l1802
  1421  01D1                     u1700:
  1422  01D1                     l1796:
  1423                           
  1424                           ;main.c: 382:                                 pan_speed = P_dat1;
  1425  01D1  0848               	movf	_P_dat1,w
  1426  01D2  00E4               	movwf	??_main
  1427  01D3  0864               	movf	??_main,w
  1428  01D4  00C3               	movwf	_pan_speed	;volatile
  1429                           
  1430                           ;main.c: 383:                                 pan_direction = 1;
  1431  01D5  3001               	movlw	1
  1432  01D6  00E4               	movwf	??_main
  1433  01D7  0864               	movf	??_main,w
  1434  01D8  00E8               	movwf	_pan_direction	;volatile
  1435                           
  1436                           ;main.c: 384:                                 pan_enabled = 1;
  1437  01D9  3001               	movlw	1
  1438  01DA  00E4               	movwf	??_main
  1439  01DB  0864               	movf	??_main,w
  1440  01DC  00E9               	movwf	_pan_enabled	;volatile
  1441  01DD                     l1798:
  1442                           
  1443                           ;main.c: 385:                                 response_type = 0x01;
  1444  01DD  01CC               	clrf	_response_type
  1445  01DE  0ACC               	incf	_response_type,f
  1446  01DF                     l1800:
  1447                           
  1448                           ;main.c: 386:                                 UART_Write_Text("RIGHT\r\n");
  1449  01DF  307B               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1450  01E0  118A  25D1  118A   	fcall	_UART_Write_Text
  1451  01E3                     l1802:
  1452                           
  1453                           ;main.c: 389:                             if ((P_cmd2 & 0x10) == 0x10) {
  1454  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  1455  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  1456  01E5  1E49               	btfss	_P_cmd2,4
  1457  01E6  29E8               	goto	u1711
  1458  01E7  29E9               	goto	u1710
  1459  01E8                     u1711:
  1460  01E8  29F9               	goto	l235
  1461  01E9                     u1710:
  1462  01E9                     l1804:
  1463                           
  1464                           ;main.c: 390:                                 tilt_speed = P_dat2;
  1465  01E9  0847               	movf	_P_dat2,w
  1466  01EA  00E4               	movwf	??_main
  1467  01EB  0864               	movf	??_main,w
  1468  01EC  00BF               	movwf	_tilt_speed	;volatile
  1469  01ED                     l1806:
  1470                           
  1471                           ;main.c: 391:                                 tilt_direction = 0;
  1472  01ED  01C0               	clrf	_tilt_direction	;volatile
  1473  01EE                     l1808:
  1474                           
  1475                           ;main.c: 392:                                 tilt_enabled = 1;
  1476  01EE  3001               	movlw	1
  1477  01EF  00E4               	movwf	??_main
  1478  01F0  0864               	movf	??_main,w
  1479  01F1  00C1               	movwf	_tilt_enabled	;volatile
  1480  01F2                     l1810:
  1481                           
  1482                           ;main.c: 393:                                 response_type = 0x01;
  1483  01F2  01CC               	clrf	_response_type
  1484  01F3  0ACC               	incf	_response_type,f
  1485  01F4                     l1812:
  1486                           
  1487                           ;main.c: 394:                                 UART_Write_Text("DOWN\r\n");
  1488  01F4  3098               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1489  01F5  118A  25D1  118A   	fcall	_UART_Write_Text
  1490                           
  1491                           ;main.c: 395:                             } else if ((P_cmd2 & 0x08) == 0x08) {
  1492  01F8  283A               	goto	l1642
  1493  01F9                     l235:
  1494  01F9  1DC9               	btfss	_P_cmd2,3
  1495  01FA  29FC               	goto	u1721
  1496  01FB  29FD               	goto	u1720
  1497  01FC                     u1721:
  1498  01FC  2946               	goto	l218
  1499  01FD                     u1720:
  1500  01FD                     l1814:
  1501                           
  1502                           ;main.c: 396:                                 tilt_speed = P_dat2;
  1503  01FD  0847               	movf	_P_dat2,w
  1504  01FE  00E4               	movwf	??_main
  1505  01FF  0864               	movf	??_main,w
  1506  0200  00BF               	movwf	_tilt_speed	;volatile
  1507                           
  1508                           ;main.c: 397:                                 tilt_direction = 1;
  1509  0201  3001               	movlw	1
  1510  0202  00E4               	movwf	??_main
  1511  0203  0864               	movf	??_main,w
  1512  0204  00C0               	movwf	_tilt_direction	;volatile
  1513                           
  1514                           ;main.c: 398:                                 tilt_enabled = 1;
  1515  0205  3001               	movlw	1
  1516  0206  00E4               	movwf	??_main
  1517  0207  0864               	movf	??_main,w
  1518  0208  00C1               	movwf	_tilt_enabled	;volatile
  1519  0209                     l1816:
  1520                           
  1521                           ;main.c: 399:                                 response_type = 0x01;
  1522  0209  01CC               	clrf	_response_type
  1523  020A  0ACC               	incf	_response_type,f
  1524  020B                     l1818:
  1525                           
  1526                           ;main.c: 400:                                 UART_Write_Text("UP\r\n");
  1527  020B  30AD               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1528  020C  118A  25D1  118A   	fcall	_UART_Write_Text
  1529  020F  283A               	goto	l1642
  1530  0210  118A  2811         	ljmp	start
  1531  0212                     __end_of_main:
  1532                           
  1533                           	psect	text1
  1534  05F4                     __ptext1:	
  1535 ;; *************** function _UC_Init *****************
  1536 ;; Defined at:
  1537 ;;		line 416 in file "main.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;		None
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;		None
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      void 
  1544 ;; Registers used:
  1545 ;;		wreg, status,2, status,0
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1551 ;;      Params:         0       0       0       0
  1552 ;;      Locals:         0       0       0       0
  1553 ;;      Temps:          0       0       0       0
  1554 ;;      Totals:         0       0       0       0
  1555 ;;Total ram usage:        0 bytes
  1556 ;; Hardware stack levels used: 1
  1557 ;; Hardware stack levels required when called: 3
  1558 ;; This function calls:
  1559 ;;		Nothing
  1560 ;; This function is called by:
  1561 ;;		_main
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565  05F4                     _UC_Init:	
  1566                           ;psect for function _UC_Init
  1567                           
  1568  05F4                     l1426:	
  1569                           ;incstack = 0
  1570                           ; Regs used in _UC_Init: [wreg+status,2+status,0]
  1571                           
  1572                           
  1573                           ;main.c: 417:     PCONbits.OSCF = 1;
  1574  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  1575  05F5  1303               	bcf	3,6	;RP1=0, select bank1
  1576  05F6  158E               	bsf	14,3	;volatile
  1577  05F7                     l1428:
  1578                           
  1579                           ;main.c: 419:     PORTA = 0;
  1580  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  1581  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  1582  05F9  0185               	clrf	5	;volatile
  1583                           
  1584                           ;main.c: 420:     PORTB = 0;
  1585  05FA  0186               	clrf	6	;volatile
  1586  05FB                     l1430:
  1587                           
  1588                           ;main.c: 422:     CMCON = 7;
  1589  05FB  3007               	movlw	7
  1590  05FC  009F               	movwf	31	;volatile
  1591  05FD                     l1432:
  1592                           
  1593                           ;main.c: 424:     OPTION_REGbits.nRBPU = 1;
  1594  05FD  1683               	bsf	3,5	;RP0=1, select bank1
  1595  05FE  1303               	bcf	3,6	;RP1=0, select bank1
  1596  05FF  1781               	bsf	1,7	;volatile
  1597  0600                     l1434:
  1598                           
  1599                           ;main.c: 425:     OPTION_REGbits.PSA = 1;
  1600  0600  1581               	bsf	1,3	;volatile
  1601  0601                     l1436:
  1602                           
  1603                           ;main.c: 426:     OPTION_REGbits.PS = 0b111;
  1604  0601  3007               	movlw	7
  1605  0602  0481               	iorwf	1,f	;volatile
  1606  0603                     l1438:
  1607                           
  1608                           ;main.c: 431:     INTCONbits.GIE = 1;
  1609  0603  178B               	bsf	11,7	;volatile
  1610  0604                     l1440:
  1611                           
  1612                           ;main.c: 432:     INTCONbits.PEIE = 1;
  1613  0604  170B               	bsf	11,6	;volatile
  1614  0605                     l1442:
  1615                           
  1616                           ;main.c: 441:     TRISA = 0b00000000;
  1617  0605  0185               	clrf	5	;volatile
  1618  0606                     l1444:
  1619                           
  1620                           ;main.c: 451:     TRISB = 0b00000010;
  1621  0606  3002               	movlw	2
  1622  0607  0086               	movwf	6	;volatile
  1623  0608                     l244:
  1624  0608  0008               	return
  1625  0609                     __end_of_UC_Init:
  1626                           
  1627                           	psect	text2
  1628  05D1                     __ptext2:	
  1629 ;; *************** function _UART_Write_Text *****************
  1630 ;; Defined at:
  1631 ;;		line 60 in file "usart.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;  text            1    wreg     PTR unsigned char 
  1634 ;;		 -> STR_15(5), STR_14(7), STR_13(8), STR_12(7), 
  1635 ;;		 -> STR_11(14), STR_10(15), STR_9(13), STR_8(7), 
  1636 ;;		 -> STR_7(7), STR_6(9), STR_5(8), STR_4(8), 
  1637 ;;		 -> STR_3(7), STR_2(7), STR_1(15), 
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;  text            1   16[BANK0 ] PTR unsigned char 
  1640 ;;		 -> STR_15(5), STR_14(7), STR_13(8), STR_12(7), 
  1641 ;;		 -> STR_11(14), STR_10(15), STR_9(13), STR_8(7), 
  1642 ;;		 -> STR_7(7), STR_6(9), STR_5(8), STR_4(8), 
  1643 ;;		 -> STR_3(7), STR_2(7), STR_1(15), 
  1644 ;;  i               2   14[BANK0 ] int 
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  1    wreg      void 
  1647 ;; Registers used:
  1648 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1654 ;;      Params:         0       0       0       0
  1655 ;;      Locals:         0       3       0       0
  1656 ;;      Temps:          0       0       0       0
  1657 ;;      Totals:         0       3       0       0
  1658 ;;Total ram usage:        3 bytes
  1659 ;; Hardware stack levels used: 1
  1660 ;; Hardware stack levels required when called: 4
  1661 ;; This function calls:
  1662 ;;		_UART_Write
  1663 ;; This function is called by:
  1664 ;;		_main
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668  05D1                     _UART_Write_Text:	
  1669                           ;psect for function _UART_Write_Text
  1670                           
  1671                           
  1672                           ;incstack = 0
  1673                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1674                           ;UART_Write_Text@text stored from wreg
  1675  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  1676  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  1677  05D3  00E3               	movwf	UART_Write_Text@text
  1678  05D4                     l1482:
  1679                           
  1680                           ;usart.c: 61:     int i;;usart.c: 62:     for (i = 0; text[i] != '\0'; i++)
  1681  05D4  01E1               	clrf	UART_Write_Text@i
  1682  05D5  01E2               	clrf	UART_Write_Text@i+1
  1683  05D6  2DE8               	goto	l1488
  1684  05D7                     l1484:
  1685                           
  1686                           ;usart.c: 63:         UART_Write(text[i]);
  1687  05D7  0861               	movf	UART_Write_Text@i,w
  1688  05D8  0763               	addwf	UART_Write_Text@text,w
  1689  05D9  0084               	movwf	4
  1690  05DA  118A  2400  118A   	fcall	stringdir
  1691  05DD  118A  251E  118A   	fcall	_UART_Write
  1692  05E0                     l1486:
  1693  05E0  3001               	movlw	1
  1694  05E1  1283               	bcf	3,5	;RP0=0, select bank0
  1695  05E2  1303               	bcf	3,6	;RP1=0, select bank0
  1696  05E3  07E1               	addwf	UART_Write_Text@i,f
  1697  05E4  1803               	skipnc
  1698  05E5  0AE2               	incf	UART_Write_Text@i+1,f
  1699  05E6  3000               	movlw	0
  1700  05E7  07E2               	addwf	UART_Write_Text@i+1,f
  1701  05E8                     l1488:
  1702  05E8  0861               	movf	UART_Write_Text@i,w
  1703  05E9  0763               	addwf	UART_Write_Text@text,w
  1704  05EA  0084               	movwf	4
  1705  05EB  118A  2400  118A   	fcall	stringdir
  1706  05EE  3A00               	xorlw	0
  1707  05EF  1D03               	skipz
  1708  05F0  2DF2               	goto	u1041
  1709  05F1  2DF3               	goto	u1040
  1710  05F2                     u1041:
  1711  05F2  2DD7               	goto	l1484
  1712  05F3                     u1040:
  1713  05F3                     l294:
  1714  05F3  0008               	return
  1715  05F4                     __end_of_UART_Write_Text:
  1716                           
  1717                           	psect	text3
  1718  051E                     __ptext3:	
  1719 ;; *************** function _UART_Write *****************
  1720 ;; Defined at:
  1721 ;;		line 46 in file "usart.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  data            1    wreg     unsigned char 
  1724 ;; Auto vars:     Size  Location     Type
  1725 ;;  data            1    9[BANK0 ] unsigned char 
  1726 ;;  timeout         4   10[BANK0 ] unsigned long 
  1727 ;; Return value:  Size  Location     Type
  1728 ;;                  1    wreg      void 
  1729 ;; Registers used:
  1730 ;;		wreg
  1731 ;; Tracked objects:
  1732 ;;		On entry : 0/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1736 ;;      Params:         0       0       0       0
  1737 ;;      Locals:         0       5       0       0
  1738 ;;      Temps:          0       4       0       0
  1739 ;;      Totals:         0       9       0       0
  1740 ;;Total ram usage:        9 bytes
  1741 ;; Hardware stack levels used: 1
  1742 ;; Hardware stack levels required when called: 3
  1743 ;; This function calls:
  1744 ;;		Nothing
  1745 ;; This function is called by:
  1746 ;;		_UART_Write_Text
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750  051E                     _UART_Write:	
  1751                           ;psect for function _UART_Write
  1752                           
  1753                           
  1754                           ;incstack = 0
  1755                           ; Regs used in _UART_Write: [wreg]
  1756                           ;UART_Write@data stored from wreg
  1757  051E  1283               	bcf	3,5	;RP0=0, select bank0
  1758  051F  1303               	bcf	3,6	;RP1=0, select bank0
  1759  0520  00DC               	movwf	UART_Write@data
  1760  0521                     l1354:
  1761                           
  1762                           ;usart.c: 47:     unsigned long timeout = 0x1FFFF;
  1763  0521  3000               	movlw	0
  1764  0522  00E0               	movwf	UART_Write@timeout+3
  1765  0523  3001               	movlw	1
  1766  0524  00DF               	movwf	UART_Write@timeout+2
  1767  0525  30FF               	movlw	255
  1768  0526  00DE               	movwf	UART_Write@timeout+1
  1769  0527  30FF               	movlw	255
  1770  0528  00DD               	movwf	UART_Write@timeout
  1771                           
  1772                           ;usart.c: 49:     while (!TRMT) {
  1773  0529  2D50               	goto	l283
  1774  052A                     l1356:
  1775                           
  1776                           ;usart.c: 50:         if (timeout > 0) {
  1777  052A  1283               	bcf	3,5	;RP0=0, select bank0
  1778  052B  1303               	bcf	3,6	;RP1=0, select bank0
  1779  052C  0860               	movf	UART_Write@timeout+3,w
  1780  052D  045F               	iorwf	UART_Write@timeout+2,w
  1781  052E  045E               	iorwf	UART_Write@timeout+1,w
  1782  052F  045D               	iorwf	UART_Write@timeout,w
  1783  0530  1903               	skipnz
  1784  0531  2D33               	goto	u871
  1785  0532  2D34               	goto	u870
  1786  0533                     u871:
  1787  0533  2D56               	goto	l1360
  1788  0534                     u870:
  1789  0534                     l1358:
  1790                           
  1791                           ;usart.c: 51:             timeout--;
  1792  0534  3001               	movlw	1
  1793  0535  00D8               	movwf	??_UART_Write
  1794  0536  3000               	movlw	0
  1795  0537  00D9               	movwf	??_UART_Write+1
  1796  0538  3000               	movlw	0
  1797  0539  00DA               	movwf	??_UART_Write+2
  1798  053A  3000               	movlw	0
  1799  053B  00DB               	movwf	??_UART_Write+3
  1800  053C  0858               	movf	??_UART_Write,w
  1801  053D  02DD               	subwf	UART_Write@timeout,f
  1802  053E  0859               	movf	??_UART_Write+1,w
  1803  053F  1C03               	skipc
  1804  0540  0F59               	incfsz	??_UART_Write+1,w
  1805  0541  2D43               	goto	u885
  1806  0542  2D44               	goto	u886
  1807  0543                     u885:
  1808  0543  02DE               	subwf	UART_Write@timeout+1,f
  1809  0544                     u886:
  1810  0544  085A               	movf	??_UART_Write+2,w
  1811  0545  1C03               	skipc
  1812  0546  0F5A               	incfsz	??_UART_Write+2,w
  1813  0547  2D49               	goto	u887
  1814  0548  2D4A               	goto	u888
  1815  0549                     u887:
  1816  0549  02DF               	subwf	UART_Write@timeout+2,f
  1817  054A                     u888:
  1818  054A  085B               	movf	??_UART_Write+3,w
  1819  054B  1C03               	skipc
  1820  054C  0F5B               	incfsz	??_UART_Write+3,w
  1821  054D  2D4F               	goto	u889
  1822  054E  2D50               	goto	u880
  1823  054F                     u889:
  1824  054F  02E0               	subwf	UART_Write@timeout+3,f
  1825  0550                     u880:
  1826  0550                     l283:	
  1827                           ;usart.c: 55:     }
  1828                           
  1829                           
  1830                           ;usart.c: 49:     while (!TRMT) {
  1831  0550  1683               	bsf	3,5	;RP0=1, select bank1
  1832  0551  1303               	bcf	3,6	;RP1=0, select bank1
  1833  0552  1C98               	btfss	24,1	;volatile
  1834  0553  2D55               	goto	u891
  1835  0554  2D56               	goto	u890
  1836  0555                     u891:
  1837  0555  2D2A               	goto	l1356
  1838  0556                     u890:
  1839  0556                     l1360:
  1840                           
  1841                           ;usart.c: 57:     TXREG = data;
  1842  0556  1283               	bcf	3,5	;RP0=0, select bank0
  1843  0557  085C               	movf	UART_Write@data,w
  1844  0558  0099               	movwf	25	;volatile
  1845  0559                     l288:
  1846  0559  0008               	return
  1847  055A                     __end_of_UART_Write:
  1848                           
  1849                           	psect	text4
  1850  0609                     __ptext4:	
  1851 ;; *************** function _UART_Init *****************
  1852 ;; Defined at:
  1853 ;;		line 10 in file "usart.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;  baudrate        4    5[BANK0 ] const unsigned long 
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;		None
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      unsigned char 
  1860 ;; Registers used:
  1861 ;;		wreg
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1867 ;;      Params:         0       4       0       0
  1868 ;;      Locals:         0       0       0       0
  1869 ;;      Temps:          0       0       0       0
  1870 ;;      Totals:         0       4       0       0
  1871 ;;Total ram usage:        4 bytes
  1872 ;; Hardware stack levels used: 1
  1873 ;; Hardware stack levels required when called: 3
  1874 ;; This function calls:
  1875 ;;		Nothing
  1876 ;; This function is called by:
  1877 ;;		_main
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881  0609                     _UART_Init:	
  1882                           ;psect for function _UART_Init
  1883                           
  1884  0609                     l1464:	
  1885                           ;incstack = 0
  1886                           ; Regs used in _UART_Init: [wreg]
  1887                           
  1888                           
  1889                           ;usart.c: 14:     BRGH = 1;
  1890  0609  1683               	bsf	3,5	;RP0=1, select bank1
  1891  060A  1303               	bcf	3,6	;RP1=0, select bank1
  1892  060B  1518               	bsf	24,2	;volatile
  1893  060C                     l1466:
  1894                           
  1895                           ;usart.c: 15:     SPBRG = 25;
  1896  060C  3019               	movlw	25
  1897  060D  0099               	movwf	25	;volatile
  1898  060E                     l1468:
  1899                           
  1900                           ;usart.c: 16:     SYNC = 0;
  1901  060E  1218               	bcf	24,4	;volatile
  1902  060F                     l1470:
  1903                           
  1904                           ;usart.c: 17:     SPEN = 1;
  1905  060F  1283               	bcf	3,5	;RP0=0, select bank0
  1906  0610  1303               	bcf	3,6	;RP1=0, select bank0
  1907  0611  1798               	bsf	24,7	;volatile
  1908  0612                     l1472:
  1909                           
  1910                           ;usart.c: 18:     CREN = 1;
  1911  0612  1618               	bsf	24,4	;volatile
  1912  0613                     l1474:
  1913                           
  1914                           ;usart.c: 19:     TXEN = 1;
  1915  0613  1683               	bsf	3,5	;RP0=1, select bank1
  1916  0614  1303               	bcf	3,6	;RP1=0, select bank1
  1917  0615  1698               	bsf	24,5	;volatile
  1918  0616                     l1476:
  1919                           
  1920                           ;usart.c: 21:     PIR1bits.RCIF = 0;
  1921  0616  1283               	bcf	3,5	;RP0=0, select bank0
  1922  0617  1303               	bcf	3,6	;RP1=0, select bank0
  1923  0618  128C               	bcf	12,5	;volatile
  1924  0619                     l1478:
  1925                           
  1926                           ;usart.c: 22:     PIE1bits.RCIE = 1;
  1927  0619  1683               	bsf	3,5	;RP0=1, select bank1
  1928  061A  1303               	bcf	3,6	;RP1=0, select bank1
  1929  061B  168C               	bsf	12,5	;volatile
  1930  061C                     l280:
  1931  061C  0008               	return
  1932  061D                     __end_of_UART_Init:
  1933                           
  1934                           	psect	text5
  1935  061D                     __ptext5:	
  1936 ;; *************** function _TIMER1_Init *****************
  1937 ;; Defined at:
  1938 ;;		line 462 in file "main.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;		None
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;		None
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		wreg
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1952 ;;      Params:         0       0       0       0
  1953 ;;      Locals:         0       0       0       0
  1954 ;;      Temps:          0       0       0       0
  1955 ;;      Totals:         0       0       0       0
  1956 ;;Total ram usage:        0 bytes
  1957 ;; Hardware stack levels used: 1
  1958 ;; Hardware stack levels required when called: 3
  1959 ;; This function calls:
  1960 ;;		Nothing
  1961 ;; This function is called by:
  1962 ;;		_main
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966  061D                     _TIMER1_Init:	
  1967                           ;psect for function _TIMER1_Init
  1968                           
  1969  061D                     l1446:	
  1970                           ;incstack = 0
  1971                           ; Regs used in _TIMER1_Init: [wreg]
  1972                           
  1973                           
  1974                           ;main.c: 464:     T1CONbits.T1CKPS1 = 1;
  1975  061D  1283               	bcf	3,5	;RP0=0, select bank0
  1976  061E  1303               	bcf	3,6	;RP1=0, select bank0
  1977  061F  1690               	bsf	16,5	;volatile
  1978                           
  1979                           ;main.c: 465:     T1CONbits.T1CKPS0 = 1;
  1980  0620  1610               	bsf	16,4	;volatile
  1981                           
  1982                           ;main.c: 466:     T1CONbits.T1OSCEN = 0;
  1983  0621  1190               	bcf	16,3	;volatile
  1984                           
  1985                           ;main.c: 467:     T1CONbits.nT1SYNC = 1;
  1986  0622  1510               	bsf	16,2	;volatile
  1987                           
  1988                           ;main.c: 468:     T1CONbits.TMR1CS = 0;
  1989  0623  1090               	bcf	16,1	;volatile
  1990                           
  1991                           ;main.c: 469:     T1CONbits.TMR1ON = 1;
  1992  0624  1410               	bsf	16,0	;volatile
  1993  0625                     l1448:
  1994                           
  1995                           ;main.c: 470:     TMR1H = 255;
  1996  0625  30FF               	movlw	255
  1997  0626  008F               	movwf	15	;volatile
  1998                           
  1999                           ;main.c: 471:     TMR1L = 131;
  2000  0627  3083               	movlw	131
  2001  0628  008E               	movwf	14	;volatile
  2002  0629                     l1450:
  2003                           
  2004                           ;main.c: 473:     PIR1bits.TMR1IF = 0;
  2005  0629  100C               	bcf	12,0	;volatile
  2006  062A                     l1452:
  2007                           
  2008                           ;main.c: 474:     PIE1bits.TMR1IE = 1;
  2009  062A  1683               	bsf	3,5	;RP0=1, select bank1
  2010  062B  1303               	bcf	3,6	;RP1=0, select bank1
  2011  062C  140C               	bsf	12,0	;volatile
  2012  062D                     l247:
  2013  062D  0008               	return
  2014  062E                     __end_of_TIMER1_Init:
  2015                           
  2016                           	psect	text6
  2017  0596                     __ptext6:	
  2018 ;; *************** function _MOTOR_Init *****************
  2019 ;; Defined at:
  2020 ;;		line 520 in file "main.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;		None
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;		None
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  1    wreg      void 
  2027 ;; Registers used:
  2028 ;;		wreg, status,2
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2034 ;;      Params:         0       0       0       0
  2035 ;;      Locals:         0       0       0       0
  2036 ;;      Temps:          0       3       0       0
  2037 ;;      Totals:         0       3       0       0
  2038 ;;Total ram usage:        3 bytes
  2039 ;; Hardware stack levels used: 1
  2040 ;; Hardware stack levels required when called: 3
  2041 ;; This function calls:
  2042 ;;		Nothing
  2043 ;; This function is called by:
  2044 ;;		_main
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048  0596                     _MOTOR_Init:	
  2049                           ;psect for function _MOTOR_Init
  2050                           
  2051  0596                     l1454:	
  2052                           ;incstack = 0
  2053                           ; Regs used in _MOTOR_Init: [wreg+status,2]
  2054                           
  2055                           
  2056                           ;main.c: 521:     pan_enabled = 1;
  2057  0596  3001               	movlw	1
  2058  0597  1283               	bcf	3,5	;RP0=0, select bank0
  2059  0598  1303               	bcf	3,6	;RP1=0, select bank0
  2060  0599  00D8               	movwf	??_MOTOR_Init
  2061  059A  0858               	movf	??_MOTOR_Init,w
  2062  059B  00E9               	movwf	_pan_enabled	;volatile
  2063                           
  2064                           ;main.c: 522:     pan_direction = 1;
  2065  059C  3001               	movlw	1
  2066  059D  00D8               	movwf	??_MOTOR_Init
  2067  059E  0858               	movf	??_MOTOR_Init,w
  2068  059F  00E8               	movwf	_pan_direction	;volatile
  2069                           
  2070                           ;main.c: 524:     _delay((unsigned long)((2000)*(4000000/4000.0)));
  2071  05A0  300B               	movlw	11
  2072  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  2073  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  2074  05A3  00DA               	movwf	??_MOTOR_Init+2
  2075  05A4  3026               	movlw	38
  2076  05A5  00D9               	movwf	??_MOTOR_Init+1
  2077  05A6  305D               	movlw	93
  2078  05A7  00D8               	movwf	??_MOTOR_Init
  2079  05A8                     u1737:
  2080  05A8  0BD8               	decfsz	??_MOTOR_Init,f
  2081  05A9  2DA8               	goto	u1737
  2082  05AA  0BD9               	decfsz	??_MOTOR_Init+1,f
  2083  05AB  2DA8               	goto	u1737
  2084  05AC  0BDA               	decfsz	??_MOTOR_Init+2,f
  2085  05AD  2DA8               	goto	u1737
  2086  05AE  0000               	nop
  2087  05AF                     l1456:
  2088                           
  2089                           ;main.c: 526:     pan_enabled = 0;
  2090  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  2091  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  2092  05B1  01E9               	clrf	_pan_enabled	;volatile
  2093  05B2                     l1458:
  2094                           
  2095                           ;main.c: 528:     pan_counter = 0;
  2096  05B2  01B5               	clrf	_pan_counter	;volatile
  2097  05B3  01B6               	clrf	_pan_counter+1	;volatile
  2098                           
  2099                           ;main.c: 530:     tilt_enabled = 1;
  2100  05B4  3001               	movlw	1
  2101  05B5  00D8               	movwf	??_MOTOR_Init
  2102  05B6  0858               	movf	??_MOTOR_Init,w
  2103  05B7  00C1               	movwf	_tilt_enabled	;volatile
  2104                           
  2105                           ;main.c: 531:     tilt_direction = 1;
  2106  05B8  3001               	movlw	1
  2107  05B9  00D8               	movwf	??_MOTOR_Init
  2108  05BA  0858               	movf	??_MOTOR_Init,w
  2109  05BB  00C0               	movwf	_tilt_direction	;volatile
  2110                           
  2111                           ;main.c: 533:     _delay((unsigned long)((2000)*(4000000/4000.0)));
  2112  05BC  300B               	movlw	11
  2113  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  2114  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  2115  05BF  00DA               	movwf	??_MOTOR_Init+2
  2116  05C0  3026               	movlw	38
  2117  05C1  00D9               	movwf	??_MOTOR_Init+1
  2118  05C2  305D               	movlw	93
  2119  05C3  00D8               	movwf	??_MOTOR_Init
  2120  05C4                     u1747:
  2121  05C4  0BD8               	decfsz	??_MOTOR_Init,f
  2122  05C5  2DC4               	goto	u1747
  2123  05C6  0BD9               	decfsz	??_MOTOR_Init+1,f
  2124  05C7  2DC4               	goto	u1747
  2125  05C8  0BDA               	decfsz	??_MOTOR_Init+2,f
  2126  05C9  2DC4               	goto	u1747
  2127  05CA  0000               	nop
  2128  05CB                     l1460:
  2129                           
  2130                           ;main.c: 535:     tilt_enabled = 0;
  2131  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  2132  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  2133  05CD  01C1               	clrf	_tilt_enabled	;volatile
  2134  05CE                     l1462:
  2135                           
  2136                           ;main.c: 537:     tilt_counter = 0;
  2137  05CE  01B3               	clrf	_tilt_counter	;volatile
  2138  05CF  01B4               	clrf	_tilt_counter+1	;volatile
  2139  05D0                     l250:
  2140  05D0  0008               	return
  2141  05D1                     __end_of_MOTOR_Init:
  2142                           
  2143                           	psect	text7
  2144  0212                     __ptext7:	
  2145 ;; *************** function _myISR *****************
  2146 ;; Defined at:
  2147 ;;		line 136 in file "main.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;		None
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;		None
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  1    wreg      void 
  2154 ;; Registers used:
  2155 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2161 ;;      Params:         0       0       0       0
  2162 ;;      Locals:         0       0       0       0
  2163 ;;      Temps:          0       5       0       0
  2164 ;;      Totals:         0       5       0       0
  2165 ;;Total ram usage:        5 bytes
  2166 ;; Hardware stack levels used: 1
  2167 ;; Hardware stack levels required when called: 2
  2168 ;; This function calls:
  2169 ;;		_SPEED_calc
  2170 ;; This function is called by:
  2171 ;;		Interrupt level 1
  2172 ;; This function uses a non-reentrant model
  2173 ;;
  2174                           
  2175  0212                     _myISR:	
  2176                           ;psect for function _myISR
  2177                           
  2178  0212                     i1l1490:
  2179                           
  2180                           ;main.c: 137:     if (PIR1bits.RCIF == 1) {
  2181  0212  1E8C               	btfss	12,5	;volatile
  2182  0213  2A15               	goto	u105_21
  2183  0214  2A16               	goto	u105_20
  2184  0215                     u105_21:
  2185  0215  2A7C               	goto	i1l141
  2186  0216                     u105_20:
  2187  0216                     i1l1492:
  2188                           
  2189                           ;main.c: 138:         data_receiv = RCREG;
  2190  0216  081A               	movf	26,w	;volatile
  2191  0217  00D3               	movwf	??_myISR
  2192  0218  0853               	movf	??_myISR,w
  2193  0219  00D2               	movwf	_data_receiv	;volatile
  2194  021A                     i1l1494:
  2195                           
  2196                           ;main.c: 140:         if (data_receiv == 0xFF) {
  2197  021A  0A52               	incf	_data_receiv,w	;volatile
  2198  021B  1D03               	btfss	3,2
  2199  021C  2A1E               	goto	u106_21
  2200  021D  2A1F               	goto	u106_20
  2201  021E                     u106_21:
  2202  021E  2A20               	goto	i1l1498
  2203  021F                     u106_20:
  2204  021F                     i1l1496:
  2205                           
  2206                           ;main.c: 141:             timeout_receiv = 0;
  2207  021F  01CF               	clrf	_timeout_receiv	;volatile
  2208  0220                     i1l1498:
  2209                           
  2210                           ;main.c: 144:         if ((buffer_index2 <= 6) || ((buffer_index2 == 0) && (data_receiv 
      +                          == 0xFF))) {
  2211  0220  3007               	movlw	7
  2212  0221  027D               	subwf	_buffer_index2,w	;volatile
  2213  0222  1C03               	skipc
  2214  0223  2A25               	goto	u107_21
  2215  0224  2A26               	goto	u107_20
  2216  0225                     u107_21:
  2217  0225  2A30               	goto	i1l1504
  2218  0226                     u107_20:
  2219  0226                     i1l1500:
  2220  0226  087D               	movf	_buffer_index2,w	;volatile
  2221  0227  1D03               	btfss	3,2
  2222  0228  2A2A               	goto	u108_21
  2223  0229  2A2B               	goto	u108_20
  2224  022A                     u108_21:
  2225  022A  2A5F               	goto	i1l1522
  2226  022B                     u108_20:
  2227  022B                     i1l1502:
  2228  022B  0A52               	incf	_data_receiv,w	;volatile
  2229  022C  1D03               	btfss	3,2
  2230  022D  2A2F               	goto	u109_21
  2231  022E  2A30               	goto	u109_20
  2232  022F                     u109_21:
  2233  022F  2A5F               	goto	i1l1522
  2234  0230                     u109_20:
  2235  0230                     i1l1504:
  2236                           
  2237                           ;main.c: 145:             if (buffer_index1 == 0) {
  2238  0230  0851               	movf	_buffer_index1,w	;volatile
  2239  0231  1D03               	btfss	3,2
  2240  0232  2A34               	goto	u110_21
  2241  0233  2A35               	goto	u110_20
  2242  0234                     u110_21:
  2243  0234  2A42               	goto	i1l1510
  2244  0235                     u110_20:
  2245  0235                     i1l1506:
  2246                           
  2247                           ;main.c: 146:                 buffer_data0[buffer_index2++] = data_receiv;
  2248  0235  0852               	movf	_data_receiv,w	;volatile
  2249  0236  00D3               	movwf	??_myISR
  2250  0237  087D               	movf	_buffer_index2,w
  2251  0238  3E27               	addlw	(low (_buffer_data0| 0))& (0+255)
  2252  0239  0084               	movwf	4
  2253  023A  0853               	movf	??_myISR,w
  2254  023B  1383               	bcf	3,7	;select IRP bank0
  2255  023C  0080               	movwf	0
  2256  023D                     i1l1508:
  2257  023D  3001               	movlw	1
  2258  023E  00D3               	movwf	??_myISR
  2259  023F  0853               	movf	??_myISR,w
  2260  0240  07FD               	addwf	_buffer_index2,f	;volatile
  2261                           
  2262                           ;main.c: 147:             } else if (buffer_index1 == 1) {
  2263  0241  2A5F               	goto	i1l1522
  2264  0242                     i1l1510:
  2265  0242  0351               	decf	_buffer_index1,w	;volatile
  2266  0243  1D03               	btfss	3,2
  2267  0244  2A46               	goto	u111_21
  2268  0245  2A47               	goto	u111_20
  2269  0246                     u111_21:
  2270  0246  2A50               	goto	i1l1516
  2271  0247                     u111_20:
  2272  0247                     i1l1512:
  2273                           
  2274                           ;main.c: 148:                 buffer_data1[buffer_index2++] = data_receiv;
  2275  0247  0852               	movf	_data_receiv,w	;volatile
  2276  0248  00D3               	movwf	??_myISR
  2277  0249  087D               	movf	_buffer_index2,w
  2278  024A  3EB5               	addlw	(low (_buffer_data1| 0))& (0+255)
  2279  024B  0084               	movwf	4
  2280  024C  0853               	movf	??_myISR,w
  2281  024D  1383               	bcf	3,7	;select IRP bank1
  2282  024E  0080               	movwf	0
  2283  024F  2A3D               	goto	i1l1508
  2284  0250                     i1l1516:
  2285  0250  3002               	movlw	2
  2286  0251  0651               	xorwf	_buffer_index1,w	;volatile
  2287  0252  1D03               	btfss	3,2
  2288  0253  2A55               	goto	u112_21
  2289  0254  2A56               	goto	u112_20
  2290  0255                     u112_21:
  2291  0255  2A5F               	goto	i1l147
  2292  0256                     u112_20:
  2293  0256                     i1l1518:
  2294                           
  2295                           ;main.c: 150:                 buffer_data2[buffer_index2++] = data_receiv;
  2296  0256  0852               	movf	_data_receiv,w	;volatile
  2297  0257  00D3               	movwf	??_myISR
  2298  0258  087D               	movf	_buffer_index2,w
  2299  0259  3EAE               	addlw	(low (_buffer_data2| 0))& (0+255)
  2300  025A  0084               	movwf	4
  2301  025B  0853               	movf	??_myISR,w
  2302  025C  1383               	bcf	3,7	;select IRP bank1
  2303  025D  0080               	movwf	0
  2304  025E  2A3D               	goto	i1l1508
  2305  025F                     i1l147:
  2306  025F                     i1l1522:
  2307                           
  2308                           ;main.c: 158:         if (buffer_index2 == 7) {
  2309  025F  3007               	movlw	7
  2310  0260  067D               	xorwf	_buffer_index2,w	;volatile
  2311  0261  1D03               	btfss	3,2
  2312  0262  2A64               	goto	u113_21
  2313  0263  2A65               	goto	u113_20
  2314  0264                     u113_21:
  2315  0264  2A7A               	goto	i1l1534
  2316  0265                     u113_20:
  2317  0265                     i1l1524:
  2318                           
  2319                           ;main.c: 159:             buffer_index2 = 0;
  2320  0265  01FD               	clrf	_buffer_index2	;volatile
  2321  0266                     i1l1526:
  2322                           
  2323                           ;main.c: 161:             buffer_ready[buffer_index1] = 1;
  2324  0266  3001               	movlw	1
  2325  0267  00D3               	movwf	??_myISR
  2326  0268  0851               	movf	_buffer_index1,w
  2327  0269  3E2E               	addlw	(low (_buffer_ready| 0))& (0+255)
  2328  026A  0084               	movwf	4
  2329  026B  0853               	movf	??_myISR,w
  2330  026C  1383               	bcf	3,7	;select IRP bank0
  2331  026D  0080               	movwf	0
  2332  026E                     i1l1528:
  2333                           
  2334                           ;main.c: 163:             if (buffer_index1 < 2) {
  2335  026E  3002               	movlw	2
  2336  026F  0251               	subwf	_buffer_index1,w	;volatile
  2337  0270  1803               	skipnc
  2338  0271  2A73               	goto	u114_21
  2339  0272  2A74               	goto	u114_20
  2340  0273                     u114_21:
  2341  0273  2A79               	goto	i1l1532
  2342  0274                     u114_20:
  2343  0274                     i1l1530:
  2344                           
  2345                           ;main.c: 164:                 buffer_index1++;
  2346  0274  3001               	movlw	1
  2347  0275  00D3               	movwf	??_myISR
  2348  0276  0853               	movf	??_myISR,w
  2349  0277  07D1               	addwf	_buffer_index1,f	;volatile
  2350                           
  2351                           ;main.c: 165:             } else {
  2352  0278  2A7A               	goto	i1l1534
  2353  0279                     i1l1532:
  2354                           
  2355                           ;main.c: 166:                 buffer_index1 = 0;
  2356  0279  01D1               	clrf	_buffer_index1	;volatile
  2357  027A                     i1l1534:
  2358                           
  2359                           ;main.c: 170:         PIR1bits.RCIF = 0;
  2360  027A  128C               	bcf	12,5	;volatile
  2361                           
  2362                           ;main.c: 171:     } else if (PIR1bits.TMR1IF == 1) {
  2363  027B  2BCF               	goto	i1l187
  2364  027C                     i1l141:
  2365  027C  1C0C               	btfss	12,0	;volatile
  2366  027D  2A7F               	goto	u115_21
  2367  027E  2A80               	goto	u115_20
  2368  027F                     u115_21:
  2369  027F  2BCF               	goto	i1l187
  2370  0280                     u115_20:
  2371  0280                     i1l1536:
  2372                           
  2373                           ;main.c: 173:         PIE1bits.TMR1IE = 1;
  2374  0280  1683               	bsf	3,5	;RP0=1, select bank1
  2375  0281  1303               	bcf	3,6	;RP1=0, select bank1
  2376  0282  140C               	bsf	12,0	;volatile
  2377  0283                     i1l1538:
  2378                           
  2379                           ;main.c: 174:         TMR1H = 255;
  2380  0283  30FF               	movlw	255
  2381  0284  1283               	bcf	3,5	;RP0=0, select bank0
  2382  0285  1303               	bcf	3,6	;RP1=0, select bank0
  2383  0286  008F               	movwf	15	;volatile
  2384                           
  2385                           ;main.c: 175:         TMR1L = 131;
  2386  0287  3083               	movlw	131
  2387  0288  008E               	movwf	14	;volatile
  2388                           
  2389                           ;main.c: 177:         if (timeout_receiv < 10) {
  2390  0289  300A               	movlw	10
  2391  028A  024F               	subwf	_timeout_receiv,w	;volatile
  2392  028B  1803               	skipnc
  2393  028C  2A8E               	goto	u116_21
  2394  028D  2A8F               	goto	u116_20
  2395  028E                     u116_21:
  2396  028E  2A94               	goto	i1l1542
  2397  028F                     u116_20:
  2398  028F                     i1l1540:
  2399                           
  2400                           ;main.c: 178:             timeout_receiv++;
  2401  028F  3001               	movlw	1
  2402  0290  00D3               	movwf	??_myISR
  2403  0291  0853               	movf	??_myISR,w
  2404  0292  07CF               	addwf	_timeout_receiv,f	;volatile
  2405                           
  2406                           ;main.c: 179:         } else if (buffer_index2 > 0) {
  2407  0293  2A9A               	goto	i1l1546
  2408  0294                     i1l1542:
  2409  0294  087D               	movf	_buffer_index2,w	;volatile
  2410  0295  1903               	btfsc	3,2
  2411  0296  2A98               	goto	u117_21
  2412  0297  2A99               	goto	u117_20
  2413  0298                     u117_21:
  2414  0298  2A9A               	goto	i1l1546
  2415  0299                     u117_20:
  2416  0299                     i1l1544:
  2417                           
  2418                           ;main.c: 180:             buffer_index2 = 0;
  2419  0299  01FD               	clrf	_buffer_index2	;volatile
  2420  029A                     i1l1546:
  2421                           
  2422                           ;main.c: 183:         if (timer1_pan < timer1_pan_ref) {
  2423  029A  0838               	movf	_timer1_pan_ref,w	;volatile
  2424  029B  023A               	subwf	_timer1_pan,w	;volatile
  2425  029C  1803               	skipnc
  2426  029D  2A9F               	goto	u118_21
  2427  029E  2AA0               	goto	u118_20
  2428  029F                     u118_21:
  2429  029F  2AA5               	goto	i1l1550
  2430  02A0                     u118_20:
  2431  02A0                     i1l1548:
  2432                           
  2433                           ;main.c: 184:             timer1_pan++;
  2434  02A0  3001               	movlw	1
  2435  02A1  00D3               	movwf	??_myISR
  2436  02A2  0853               	movf	??_myISR,w
  2437  02A3  07BA               	addwf	_timer1_pan,f	;volatile
  2438                           
  2439                           ;main.c: 185:         } else {
  2440  02A4  2B34               	goto	i1l1594
  2441  02A5                     i1l1550:
  2442                           
  2443                           ;main.c: 186:             timer1_pan = 0;
  2444  02A5  01BA               	clrf	_timer1_pan	;volatile
  2445  02A6                     i1l1552:
  2446                           
  2447                           ;main.c: 188:             PORTBbits.RB3 = 1;
  2448  02A6  1586               	bsf	6,3	;volatile
  2449  02A7                     i1l1554:
  2450                           
  2451                           ;main.c: 190:             if (pan_enabled == 1) {
  2452  02A7  0369               	decf	_pan_enabled,w	;volatile
  2453  02A8  1D03               	btfss	3,2
  2454  02A9  2AAB               	goto	u119_21
  2455  02AA  2AAC               	goto	u119_20
  2456  02AB                     u119_21:
  2457  02AB  2B33               	goto	i1l1592
  2458  02AC                     u119_20:
  2459  02AC                     i1l1556:
  2460                           
  2461                           ;main.c: 192:                 if (pan_speed_old != pan_speed) {
  2462  02AC  0842               	movf	_pan_speed_old,w	;volatile
  2463  02AD  0643               	xorwf	_pan_speed,w	;volatile
  2464  02AE  1903               	skipnz
  2465  02AF  2AB1               	goto	u120_21
  2466  02B0  2AB2               	goto	u120_20
  2467  02B1                     u120_21:
  2468  02B1  2ABF               	goto	i1l1562
  2469  02B2                     u120_20:
  2470  02B2                     i1l1558:
  2471                           
  2472                           ;main.c: 193:                     pan_speed_old = pan_speed;
  2473  02B2  0843               	movf	_pan_speed,w	;volatile
  2474  02B3  00D3               	movwf	??_myISR
  2475  02B4  0853               	movf	??_myISR,w
  2476  02B5  00C2               	movwf	_pan_speed_old	;volatile
  2477  02B6                     i1l1560:
  2478                           
  2479                           ;main.c: 195:                     timer1_pan_ref = SPEED_calc(pan_speed);
  2480  02B6  0843               	movf	_pan_speed,w	;volatile
  2481  02B7  118A  255A  118A   	fcall	_SPEED_calc
  2482  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  2483  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  2484  02BC  00D3               	movwf	??_myISR
  2485  02BD  0853               	movf	??_myISR,w
  2486  02BE  00B8               	movwf	_timer1_pan_ref	;volatile
  2487  02BF                     i1l1562:
  2488                           
  2489                           ;main.c: 198:                 if (pan_direction == 1) {
  2490  02BF  0368               	decf	_pan_direction,w	;volatile
  2491  02C0  1D03               	btfss	3,2
  2492  02C1  2AC3               	goto	u121_21
  2493  02C2  2AC4               	goto	u121_20
  2494  02C3                     u121_21:
  2495  02C3  2AE5               	goto	i1l1576
  2496  02C4                     u121_20:
  2497  02C4                     i1l1564:
  2498                           
  2499                           ;main.c: 199:                     if (pan_counter < 65535) {
  2500  02C4  0A35               	incf	_pan_counter,w	;volatile
  2501  02C5  1D03               	skipz
  2502  02C6  2ACC               	goto	u122_20
  2503  02C7  0A36               	incf	_pan_counter+1,w	;volatile
  2504  02C8  1903               	btfsc	3,2
  2505  02C9  2ACB               	goto	u122_21
  2506  02CA  2ACC               	goto	u122_20
  2507  02CB                     u122_21:
  2508  02CB  2AFD               	goto	i1l1584
  2509  02CC                     u122_20:
  2510  02CC                     i1l1566:
  2511                           
  2512                           ;main.c: 200:                         pan_counter++;
  2513  02CC  3001               	movlw	1
  2514  02CD  07B5               	addwf	_pan_counter,f	;volatile
  2515  02CE  1803               	skipnc
  2516  02CF  0AB6               	incf	_pan_counter+1,f	;volatile
  2517  02D0  3000               	movlw	0
  2518  02D1  07B6               	addwf	_pan_counter+1,f	;volatile
  2519  02D2                     i1l1568:
  2520                           
  2521                           ;main.c: 202:                         if ((pan_step_phase == 0) || (pan_step_phase > 7))
      +                           {
  2522  02D2  083C               	movf	_pan_step_phase,w	;volatile
  2523  02D3  1903               	btfsc	3,2
  2524  02D4  2AD6               	goto	u123_21
  2525  02D5  2AD7               	goto	u123_20
  2526  02D6                     u123_21:
  2527  02D6  2ADD               	goto	i1l1572
  2528  02D7                     u123_20:
  2529  02D7                     i1l1570:
  2530  02D7  3008               	movlw	8
  2531  02D8  023C               	subwf	_pan_step_phase,w	;volatile
  2532  02D9  1C03               	skipc
  2533  02DA  2ADC               	goto	u124_21
  2534  02DB  2ADD               	goto	u124_20
  2535  02DC                     u124_21:
  2536  02DC  2AE2               	goto	i1l1574
  2537  02DD                     u124_20:
  2538  02DD                     i1l1572:
  2539                           
  2540                           ;main.c: 203:                             pan_step_phase = 7;
  2541  02DD  3007               	movlw	7
  2542  02DE  00D3               	movwf	??_myISR
  2543  02DF  0853               	movf	??_myISR,w
  2544  02E0  00BC               	movwf	_pan_step_phase	;volatile
  2545                           
  2546                           ;main.c: 204:                         } else {
  2547  02E1  2AFD               	goto	i1l1584
  2548  02E2                     i1l1574:
  2549                           
  2550                           ;main.c: 205:                             pan_step_phase--;
  2551  02E2  3001               	movlw	1
  2552  02E3  02BC               	subwf	_pan_step_phase,f	;volatile
  2553  02E4  2AFD               	goto	i1l1584
  2554  02E5                     i1l1576:
  2555                           
  2556                           ;main.c: 209:                     if (pan_counter > 0) {
  2557  02E5  0835               	movf	_pan_counter,w	;volatile
  2558  02E6  0436               	iorwf	_pan_counter+1,w	;volatile
  2559  02E7  1903               	btfsc	3,2
  2560  02E8  2AEA               	goto	u125_21
  2561  02E9  2AEB               	goto	u125_20
  2562  02EA                     u125_21:
  2563  02EA  2AFD               	goto	i1l1584
  2564  02EB                     u125_20:
  2565  02EB                     i1l1578:
  2566                           
  2567                           ;main.c: 210:                         pan_counter--;
  2568  02EB  3001               	movlw	1
  2569  02EC  02B5               	subwf	_pan_counter,f	;volatile
  2570  02ED  3000               	movlw	0
  2571  02EE  1C03               	skipc
  2572  02EF  03B6               	decf	_pan_counter+1,f	;volatile
  2573  02F0  02B6               	subwf	_pan_counter+1,f	;volatile
  2574                           
  2575                           ;main.c: 212:                         if (pan_step_phase >= 7) {
  2576  02F1  3007               	movlw	7
  2577  02F2  023C               	subwf	_pan_step_phase,w	;volatile
  2578  02F3  1C03               	skipc
  2579  02F4  2AF6               	goto	u126_21
  2580  02F5  2AF7               	goto	u126_20
  2581  02F6                     u126_21:
  2582  02F6  2AF9               	goto	i1l1582
  2583  02F7                     u126_20:
  2584  02F7                     i1l1580:
  2585                           
  2586                           ;main.c: 213:                             pan_step_phase = 0;
  2587  02F7  01BC               	clrf	_pan_step_phase	;volatile
  2588                           
  2589                           ;main.c: 214:                         } else {
  2590  02F8  2AFD               	goto	i1l1584
  2591  02F9                     i1l1582:
  2592                           
  2593                           ;main.c: 215:                             pan_step_phase++;
  2594  02F9  3001               	movlw	1
  2595  02FA  00D3               	movwf	??_myISR
  2596  02FB  0853               	movf	??_myISR,w
  2597  02FC  07BC               	addwf	_pan_step_phase,f	;volatile
  2598  02FD                     i1l1584:
  2599                           
  2600                           ;main.c: 220:                 PORTAbits.RA0 = steps_1A[pan_step_phase];
  2601  02FD  083C               	movf	_pan_step_phase,w
  2602  02FE  3E21               	addlw	low ((_steps_1A-__stringbase)| (0+32768))
  2603  02FF  0084               	movwf	4
  2604  0300  118A  2400  118A   	fcall	stringdir
  2605  0303  00D3               	movwf	??_myISR
  2606  0304  0805               	movf	5,w	;volatile
  2607  0305  0653               	xorwf	??_myISR,w
  2608  0306  39FE               	andlw	-2
  2609  0307  0653               	xorwf	??_myISR,w
  2610  0308  0085               	movwf	5	;volatile
  2611  0309                     i1l1586:
  2612                           
  2613                           ;main.c: 221:                 PORTAbits.RA7 = steps_1B[pan_step_phase];
  2614  0309  083C               	movf	_pan_step_phase,w
  2615  030A  3E19               	addlw	low ((_steps_1B-__stringbase)| (0+32768))
  2616  030B  0084               	movwf	4
  2617  030C  118A  2400  118A   	fcall	stringdir
  2618  030F  00D3               	movwf	??_myISR
  2619  0310  0CD3               	rrf	??_myISR,f
  2620  0311  0CD3               	rrf	??_myISR,f
  2621  0312  0805               	movf	5,w	;volatile
  2622  0313  0653               	xorwf	??_myISR,w
  2623  0314  397F               	andlw	-129
  2624  0315  0653               	xorwf	??_myISR,w
  2625  0316  0085               	movwf	5	;volatile
  2626  0317                     i1l1588:
  2627                           
  2628                           ;main.c: 222:                 PORTAbits.RA6 = steps_2A[pan_step_phase];
  2629  0317  083C               	movf	_pan_step_phase,w
  2630  0318  3E11               	addlw	low ((_steps_2A-__stringbase)| (0+32768))
  2631  0319  0084               	movwf	4
  2632  031A  118A  2400  118A   	fcall	stringdir
  2633  031D  00D3               	movwf	??_myISR
  2634  031E  0ED3               	swapf	??_myISR,f
  2635  031F  0DD3               	rlf	??_myISR,f
  2636  0320  0DD3               	rlf	??_myISR,f
  2637  0321  0805               	movf	5,w	;volatile
  2638  0322  0653               	xorwf	??_myISR,w
  2639  0323  39BF               	andlw	-65
  2640  0324  0653               	xorwf	??_myISR,w
  2641  0325  0085               	movwf	5	;volatile
  2642  0326                     i1l1590:
  2643                           
  2644                           ;main.c: 223:                 PORTAbits.RA1 = steps_2B[pan_step_phase];
  2645  0326  083C               	movf	_pan_step_phase,w
  2646  0327  3E09               	addlw	low ((_steps_2B-__stringbase)| (0+32768))
  2647  0328  0084               	movwf	4
  2648  0329  118A  2400  118A   	fcall	stringdir
  2649  032C  00D3               	movwf	??_myISR
  2650  032D  0DD3               	rlf	??_myISR,f
  2651  032E  0805               	movf	5,w	;volatile
  2652  032F  0653               	xorwf	??_myISR,w
  2653  0330  39FD               	andlw	-3
  2654  0331  0653               	xorwf	??_myISR,w
  2655  0332  0085               	movwf	5	;volatile
  2656  0333                     i1l1592:
  2657                           
  2658                           ;main.c: 226:             PORTBbits.RB3 = 0;
  2659  0333  1186               	bcf	6,3	;volatile
  2660  0334                     i1l1594:
  2661                           
  2662                           ;main.c: 229:         if (timer1_tilt < timer1_tilt_ref) {
  2663  0334  0837               	movf	_timer1_tilt_ref,w	;volatile
  2664  0335  0239               	subwf	_timer1_tilt,w	;volatile
  2665  0336  1803               	skipnc
  2666  0337  2B39               	goto	u127_21
  2667  0338  2B3A               	goto	u127_20
  2668  0339                     u127_21:
  2669  0339  2B3F               	goto	i1l1598
  2670  033A                     u127_20:
  2671  033A                     i1l1596:
  2672                           
  2673                           ;main.c: 230:             timer1_tilt++;
  2674  033A  3001               	movlw	1
  2675  033B  00D3               	movwf	??_myISR
  2676  033C  0853               	movf	??_myISR,w
  2677  033D  07B9               	addwf	_timer1_tilt,f	;volatile
  2678                           
  2679                           ;main.c: 231:         } else {
  2680  033E  2BCE               	goto	i1l1638
  2681  033F                     i1l1598:
  2682                           
  2683                           ;main.c: 232:             timer1_tilt = 0;
  2684  033F  01B9               	clrf	_timer1_tilt	;volatile
  2685  0340                     i1l1600:
  2686                           
  2687                           ;main.c: 234:             if (tilt_enabled == 1) {
  2688  0340  0341               	decf	_tilt_enabled,w	;volatile
  2689  0341  1D03               	btfss	3,2
  2690  0342  2B44               	goto	u128_21
  2691  0343  2B45               	goto	u128_20
  2692  0344                     u128_21:
  2693  0344  2BCE               	goto	i1l1638
  2694  0345                     u128_20:
  2695  0345                     i1l1602:
  2696                           
  2697                           ;main.c: 236:                 if (tilt_speed_old != tilt_speed) {
  2698  0345  083E               	movf	_tilt_speed_old,w	;volatile
  2699  0346  063F               	xorwf	_tilt_speed,w	;volatile
  2700  0347  1903               	skipnz
  2701  0348  2B4A               	goto	u129_21
  2702  0349  2B4B               	goto	u129_20
  2703  034A                     u129_21:
  2704  034A  2B58               	goto	i1l1608
  2705  034B                     u129_20:
  2706  034B                     i1l1604:
  2707                           
  2708                           ;main.c: 237:                     tilt_speed_old = tilt_speed;
  2709  034B  083F               	movf	_tilt_speed,w	;volatile
  2710  034C  00D3               	movwf	??_myISR
  2711  034D  0853               	movf	??_myISR,w
  2712  034E  00BE               	movwf	_tilt_speed_old	;volatile
  2713  034F                     i1l1606:
  2714                           
  2715                           ;main.c: 239:                     timer1_tilt_ref = SPEED_calc(tilt_speed);
  2716  034F  083F               	movf	_tilt_speed,w	;volatile
  2717  0350  118A  255A  118A   	fcall	_SPEED_calc
  2718  0353  1283               	bcf	3,5	;RP0=0, select bank0
  2719  0354  1303               	bcf	3,6	;RP1=0, select bank0
  2720  0355  00D3               	movwf	??_myISR
  2721  0356  0853               	movf	??_myISR,w
  2722  0357  00B7               	movwf	_timer1_tilt_ref	;volatile
  2723  0358                     i1l1608:
  2724                           
  2725                           ;main.c: 242:                 if (tilt_direction == 1) {
  2726  0358  0340               	decf	_tilt_direction,w	;volatile
  2727  0359  1D03               	btfss	3,2
  2728  035A  2B5C               	goto	u130_21
  2729  035B  2B5D               	goto	u130_20
  2730  035C                     u130_21:
  2731  035C  2B7E               	goto	i1l1622
  2732  035D                     u130_20:
  2733  035D                     i1l1610:
  2734                           
  2735                           ;main.c: 243:                     if (tilt_counter < 65535) {
  2736  035D  0A33               	incf	_tilt_counter,w	;volatile
  2737  035E  1D03               	skipz
  2738  035F  2B65               	goto	u131_20
  2739  0360  0A34               	incf	_tilt_counter+1,w	;volatile
  2740  0361  1903               	btfsc	3,2
  2741  0362  2B64               	goto	u131_21
  2742  0363  2B65               	goto	u131_20
  2743  0364                     u131_21:
  2744  0364  2B96               	goto	i1l1630
  2745  0365                     u131_20:
  2746  0365                     i1l1612:
  2747                           
  2748                           ;main.c: 244:                         tilt_counter++;
  2749  0365  3001               	movlw	1
  2750  0366  07B3               	addwf	_tilt_counter,f	;volatile
  2751  0367  1803               	skipnc
  2752  0368  0AB4               	incf	_tilt_counter+1,f	;volatile
  2753  0369  3000               	movlw	0
  2754  036A  07B4               	addwf	_tilt_counter+1,f	;volatile
  2755  036B                     i1l1614:
  2756                           
  2757                           ;main.c: 246:                         if ((tilt_step_phase == 0) || (tilt_step_phase > 7
      +                          )) {
  2758  036B  083B               	movf	_tilt_step_phase,w	;volatile
  2759  036C  1903               	btfsc	3,2
  2760  036D  2B6F               	goto	u132_21
  2761  036E  2B70               	goto	u132_20
  2762  036F                     u132_21:
  2763  036F  2B76               	goto	i1l1618
  2764  0370                     u132_20:
  2765  0370                     i1l1616:
  2766  0370  3008               	movlw	8
  2767  0371  023B               	subwf	_tilt_step_phase,w	;volatile
  2768  0372  1C03               	skipc
  2769  0373  2B75               	goto	u133_21
  2770  0374  2B76               	goto	u133_20
  2771  0375                     u133_21:
  2772  0375  2B7B               	goto	i1l1620
  2773  0376                     u133_20:
  2774  0376                     i1l1618:
  2775                           
  2776                           ;main.c: 247:                             tilt_step_phase = 7;
  2777  0376  3007               	movlw	7
  2778  0377  00D3               	movwf	??_myISR
  2779  0378  0853               	movf	??_myISR,w
  2780  0379  00BB               	movwf	_tilt_step_phase	;volatile
  2781                           
  2782                           ;main.c: 248:                         } else {
  2783  037A  2B96               	goto	i1l1630
  2784  037B                     i1l1620:
  2785                           
  2786                           ;main.c: 249:                             tilt_step_phase--;
  2787  037B  3001               	movlw	1
  2788  037C  02BB               	subwf	_tilt_step_phase,f	;volatile
  2789  037D  2B96               	goto	i1l1630
  2790  037E                     i1l1622:
  2791                           
  2792                           ;main.c: 253:                     if (tilt_counter > 0) {
  2793  037E  0833               	movf	_tilt_counter,w	;volatile
  2794  037F  0434               	iorwf	_tilt_counter+1,w	;volatile
  2795  0380  1903               	btfsc	3,2
  2796  0381  2B83               	goto	u134_21
  2797  0382  2B84               	goto	u134_20
  2798  0383                     u134_21:
  2799  0383  2B96               	goto	i1l1630
  2800  0384                     u134_20:
  2801  0384                     i1l1624:
  2802                           
  2803                           ;main.c: 254:                         tilt_counter--;
  2804  0384  3001               	movlw	1
  2805  0385  02B3               	subwf	_tilt_counter,f	;volatile
  2806  0386  3000               	movlw	0
  2807  0387  1C03               	skipc
  2808  0388  03B4               	decf	_tilt_counter+1,f	;volatile
  2809  0389  02B4               	subwf	_tilt_counter+1,f	;volatile
  2810                           
  2811                           ;main.c: 256:                         if (tilt_step_phase >= 7) {
  2812  038A  3007               	movlw	7
  2813  038B  023B               	subwf	_tilt_step_phase,w	;volatile
  2814  038C  1C03               	skipc
  2815  038D  2B8F               	goto	u135_21
  2816  038E  2B90               	goto	u135_20
  2817  038F                     u135_21:
  2818  038F  2B92               	goto	i1l1628
  2819  0390                     u135_20:
  2820  0390                     i1l1626:
  2821                           
  2822                           ;main.c: 257:                             tilt_step_phase = 0;
  2823  0390  01BB               	clrf	_tilt_step_phase	;volatile
  2824                           
  2825                           ;main.c: 258:                         } else {
  2826  0391  2B96               	goto	i1l1630
  2827  0392                     i1l1628:
  2828                           
  2829                           ;main.c: 259:                             tilt_step_phase++;
  2830  0392  3001               	movlw	1
  2831  0393  00D3               	movwf	??_myISR
  2832  0394  0853               	movf	??_myISR,w
  2833  0395  07BB               	addwf	_tilt_step_phase,f	;volatile
  2834  0396                     i1l1630:
  2835                           
  2836                           ;main.c: 264:                 PORTBbits.RB4 = steps_1A[tilt_step_phase];
  2837  0396  083B               	movf	_tilt_step_phase,w
  2838  0397  3E21               	addlw	low ((_steps_1A-__stringbase)| (0+32768))
  2839  0398  0084               	movwf	4
  2840  0399  118A  2400  118A   	fcall	stringdir
  2841  039C  00D3               	movwf	??_myISR
  2842  039D  0ED3               	swapf	??_myISR,f
  2843  039E  0806               	movf	6,w	;volatile
  2844  039F  0653               	xorwf	??_myISR,w
  2845  03A0  39EF               	andlw	-17
  2846  03A1  0653               	xorwf	??_myISR,w
  2847  03A2  0086               	movwf	6	;volatile
  2848  03A3                     i1l1632:
  2849                           
  2850                           ;main.c: 265:                 PORTBbits.RB5 = steps_1B[tilt_step_phase];
  2851  03A3  083B               	movf	_tilt_step_phase,w
  2852  03A4  3E19               	addlw	low ((_steps_1B-__stringbase)| (0+32768))
  2853  03A5  0084               	movwf	4
  2854  03A6  118A  2400  118A   	fcall	stringdir
  2855  03A9  00D3               	movwf	??_myISR
  2856  03AA  0ED3               	swapf	??_myISR,f
  2857  03AB  0DD3               	rlf	??_myISR,f
  2858  03AC  0806               	movf	6,w	;volatile
  2859  03AD  0653               	xorwf	??_myISR,w
  2860  03AE  39DF               	andlw	-33
  2861  03AF  0653               	xorwf	??_myISR,w
  2862  03B0  0086               	movwf	6	;volatile
  2863  03B1                     i1l1634:
  2864                           
  2865                           ;main.c: 266:                 PORTBbits.RB6 = steps_2A[tilt_step_phase];
  2866  03B1  083B               	movf	_tilt_step_phase,w
  2867  03B2  3E11               	addlw	low ((_steps_2A-__stringbase)| (0+32768))
  2868  03B3  0084               	movwf	4
  2869  03B4  118A  2400  118A   	fcall	stringdir
  2870  03B7  00D3               	movwf	??_myISR
  2871  03B8  0ED3               	swapf	??_myISR,f
  2872  03B9  0DD3               	rlf	??_myISR,f
  2873  03BA  0DD3               	rlf	??_myISR,f
  2874  03BB  0806               	movf	6,w	;volatile
  2875  03BC  0653               	xorwf	??_myISR,w
  2876  03BD  39BF               	andlw	-65
  2877  03BE  0653               	xorwf	??_myISR,w
  2878  03BF  0086               	movwf	6	;volatile
  2879  03C0                     i1l1636:
  2880                           
  2881                           ;main.c: 267:                 PORTBbits.RB7 = steps_2B[tilt_step_phase];
  2882  03C0  083B               	movf	_tilt_step_phase,w
  2883  03C1  3E09               	addlw	low ((_steps_2B-__stringbase)| (0+32768))
  2884  03C2  0084               	movwf	4
  2885  03C3  118A  2400  118A   	fcall	stringdir
  2886  03C6  00D3               	movwf	??_myISR
  2887  03C7  0CD3               	rrf	??_myISR,f
  2888  03C8  0CD3               	rrf	??_myISR,f
  2889  03C9  0806               	movf	6,w	;volatile
  2890  03CA  0653               	xorwf	??_myISR,w
  2891  03CB  397F               	andlw	-129
  2892  03CC  0653               	xorwf	??_myISR,w
  2893  03CD  0086               	movwf	6	;volatile
  2894  03CE                     i1l1638:
  2895                           
  2896                           ;main.c: 271:         PIR1bits.TMR1IF = 0;
  2897  03CE  100C               	bcf	12,0	;volatile
  2898  03CF                     i1l187:
  2899  03CF  0857               	movf	??_myISR+4,w
  2900  03D0  00FF               	movwf	btemp+1
  2901  03D1  0856               	movf	??_myISR+3,w
  2902  03D2  008A               	movwf	10
  2903  03D3  0855               	movf	??_myISR+2,w
  2904  03D4  0084               	movwf	4
  2905  03D5  0E54               	swapf	??_myISR+1,w
  2906  03D6  0083               	movwf	3
  2907  03D7  0EFE               	swapf	btemp,f
  2908  03D8  0E7E               	swapf	btemp,w
  2909  03D9  0009               	retfie
  2910  03DA                     __end_of_myISR:
  2911                           
  2912                           	psect	intentry
  2913  0004                     __pintentry:	
  2914                           ;incstack = 0
  2915                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2916                           
  2917  0004                     interrupt_function:
  2918  007E                     saved_w	set	btemp
  2919  0004  00FE               	movwf	btemp
  2920  0005  0E03               	swapf	3,w
  2921  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2922  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2923  0008  00D4               	movwf	??_myISR+1
  2924  0009  0804               	movf	4,w
  2925  000A  00D5               	movwf	??_myISR+2
  2926  000B  080A               	movf	10,w
  2927  000C  00D6               	movwf	??_myISR+3
  2928  000D  087F               	movf	btemp+1,w
  2929  000E  00D7               	movwf	??_myISR+4
  2930  000F  118A  2A12         	ljmp	_myISR
  2931                           
  2932                           	psect	text8
  2933  055A                     __ptext8:	
  2934 ;; *************** function _SPEED_calc *****************
  2935 ;; Defined at:
  2936 ;;		line 540 in file "main.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;  speed           1    wreg     unsigned char 
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  speed           1   11[COMMON] unsigned char 
  2941 ;;  sp_calc         1   12[COMMON] unsigned char 
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      unsigned char 
  2944 ;; Registers used:
  2945 ;;		wreg, status,2, status,0, pclath, cstack
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2951 ;;      Params:         0       0       0       0
  2952 ;;      Locals:         2       0       0       0
  2953 ;;      Temps:          2       0       0       0
  2954 ;;      Totals:         4       0       0       0
  2955 ;;Total ram usage:        4 bytes
  2956 ;; Hardware stack levels used: 1
  2957 ;; Hardware stack levels required when called: 1
  2958 ;; This function calls:
  2959 ;;		___awdiv
  2960 ;; This function is called by:
  2961 ;;		_myISR
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965  055A                     _SPEED_calc:	
  2966                           ;psect for function _SPEED_calc
  2967                           
  2968                           
  2969                           ;incstack = 0
  2970                           ; Regs used in _SPEED_calc: [wreg+status,2+status,0+pclath+cstack]
  2971                           ;SPEED_calc@speed stored from wreg
  2972  055A  00FB               	movwf	SPEED_calc@speed
  2973  055B                     i1l1406:
  2974  055B                     i1l1408:
  2975                           
  2976                           ;main.c: 543:     if (speed > 0x32) {
  2977  055B  3033               	movlw	51
  2978  055C  027B               	subwf	SPEED_calc@speed,w
  2979  055D  1C03               	skipc
  2980  055E  2D60               	goto	u100_21
  2981  055F  2D61               	goto	u100_20
  2982  0560                     u100_21:
  2983  0560  2D65               	goto	i1l253
  2984  0561                     u100_20:
  2985  0561                     i1l1410:
  2986                           
  2987                           ;main.c: 544:         speed = 0x32;
  2988  0561  3032               	movlw	50
  2989  0562  00F9               	movwf	??_SPEED_calc
  2990  0563  0879               	movf	??_SPEED_calc,w
  2991  0564  00FB               	movwf	SPEED_calc@speed
  2992  0565                     i1l253:	
  2993                           ;main.c: 545:     }
  2994                           
  2995                           
  2996                           ;main.c: 547:     if (speed < 0x06) {
  2997  0565  3006               	movlw	6
  2998  0566  027B               	subwf	SPEED_calc@speed,w
  2999  0567  1803               	skipnc
  3000  0568  2D6A               	goto	u101_21
  3001  0569  2D6B               	goto	u101_20
  3002  056A                     u101_21:
  3003  056A  2D6F               	goto	i1l1414
  3004  056B                     u101_20:
  3005  056B                     i1l1412:
  3006                           
  3007                           ;main.c: 548:         speed = 0x06;
  3008  056B  3006               	movlw	6
  3009  056C  00F9               	movwf	??_SPEED_calc
  3010  056D  0879               	movf	??_SPEED_calc,w
  3011  056E  00FB               	movwf	SPEED_calc@speed
  3012  056F                     i1l1414:
  3013                           
  3014                           ;main.c: 551:     sp_calc = 1 + ((0x32 - speed) / 2);
  3015  056F  3002               	movlw	2
  3016  0570  00F0               	movwf	___awdiv@divisor
  3017  0571  3000               	movlw	0
  3018  0572  00F1               	movwf	___awdiv@divisor+1
  3019  0573  3032               	movlw	50
  3020  0574  00F9               	movwf	??_SPEED_calc
  3021  0575  087B               	movf	SPEED_calc@speed,w
  3022  0576  0279               	subwf	??_SPEED_calc,w
  3023  0577  00F2               	movwf	___awdiv@dividend
  3024  0578  01F3               	clrf	___awdiv@dividend+1
  3025  0579  1C03               	skipc
  3026  057A  03F3               	decf	___awdiv@dividend+1,f
  3027  057B  118A  24B7  118A   	fcall	___awdiv
  3028  057E  0870               	movf	?___awdiv,w
  3029  057F  3E01               	addlw	1
  3030  0580  00FA               	movwf	??_SPEED_calc+1
  3031  0581  087A               	movf	??_SPEED_calc+1,w
  3032  0582  00FC               	movwf	SPEED_calc@sp_calc
  3033  0583                     i1l1416:
  3034                           
  3035                           ;main.c: 553:     if (sp_calc < 1) {
  3036  0583  087C               	movf	SPEED_calc@sp_calc,w
  3037  0584  1D03               	btfss	3,2
  3038  0585  2D87               	goto	u102_21
  3039  0586  2D88               	goto	u102_20
  3040  0587                     u102_21:
  3041  0587  2D8A               	goto	i1l1420
  3042  0588                     u102_20:
  3043  0588                     i1l1418:
  3044                           
  3045                           ;main.c: 554:         sp_calc = 1;
  3046  0588  01FC               	clrf	SPEED_calc@sp_calc
  3047  0589  0AFC               	incf	SPEED_calc@sp_calc,f
  3048  058A                     i1l1420:
  3049                           
  3050                           ;main.c: 557:     if (sp_calc > 19) {
  3051  058A  3014               	movlw	20
  3052  058B  027C               	subwf	SPEED_calc@sp_calc,w
  3053  058C  1C03               	skipc
  3054  058D  2D8F               	goto	u103_21
  3055  058E  2D90               	goto	u103_20
  3056  058F                     u103_21:
  3057  058F  2D94               	goto	i1l256
  3058  0590                     u103_20:
  3059  0590                     i1l1422:
  3060                           
  3061                           ;main.c: 558:         sp_calc = 19;
  3062  0590  3013               	movlw	19
  3063  0591  00F9               	movwf	??_SPEED_calc
  3064  0592  0879               	movf	??_SPEED_calc,w
  3065  0593  00FC               	movwf	SPEED_calc@sp_calc
  3066  0594                     i1l256:	
  3067                           ;main.c: 559:     }
  3068                           
  3069                           
  3070                           ;main.c: 561:     return sp_calc;
  3071  0594  087C               	movf	SPEED_calc@sp_calc,w
  3072  0595                     i1l257:
  3073  0595  0008               	return
  3074  0596                     __end_of_SPEED_calc:
  3075                           
  3076                           	psect	text9
  3077  04B7                     __ptext9:	
  3078 ;; *************** function ___awdiv *****************
  3079 ;; Defined at:
  3080 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  divisor         2    0[COMMON] int 
  3083 ;;  dividend        2    2[COMMON] int 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  quotient        2    7[COMMON] int 
  3086 ;;  sign            1    6[COMMON] unsigned char 
  3087 ;;  counter         1    5[COMMON] unsigned char 
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  2    0[COMMON] int 
  3090 ;; Registers used:
  3091 ;;		wreg, status,2, status,0
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3097 ;;      Params:         4       0       0       0
  3098 ;;      Locals:         4       0       0       0
  3099 ;;      Temps:          1       0       0       0
  3100 ;;      Totals:         9       0       0       0
  3101 ;;Total ram usage:        9 bytes
  3102 ;; Hardware stack levels used: 1
  3103 ;; This function calls:
  3104 ;;		Nothing
  3105 ;; This function is called by:
  3106 ;;		_SPEED_calc
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110  04B7                     ___awdiv:	
  3111                           ;psect for function ___awdiv
  3112                           
  3113  04B7                     i1l1362:	
  3114                           ;incstack = 0
  3115                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3116                           
  3117  04B7  01F6               	clrf	___awdiv@sign
  3118  04B8                     i1l1364:
  3119  04B8  1FF1               	btfss	___awdiv@divisor+1,7
  3120  04B9  2CBB               	goto	u90_21
  3121  04BA  2CBC               	goto	u90_20
  3122  04BB                     u90_21:
  3123  04BB  2CC3               	goto	i1l1370
  3124  04BC                     u90_20:
  3125  04BC                     i1l1366:
  3126  04BC  09F0               	comf	___awdiv@divisor,f
  3127  04BD  09F1               	comf	___awdiv@divisor+1,f
  3128  04BE  0AF0               	incf	___awdiv@divisor,f
  3129  04BF  1903               	skipnz
  3130  04C0  0AF1               	incf	___awdiv@divisor+1,f
  3131  04C1                     i1l1368:
  3132  04C1  01F6               	clrf	___awdiv@sign
  3133  04C2  0AF6               	incf	___awdiv@sign,f
  3134  04C3                     i1l1370:
  3135  04C3  1FF3               	btfss	___awdiv@dividend+1,7
  3136  04C4  2CC6               	goto	u91_21
  3137  04C5  2CC7               	goto	u91_20
  3138  04C6                     u91_21:
  3139  04C6  2CD0               	goto	i1l1376
  3140  04C7                     u91_20:
  3141  04C7                     i1l1372:
  3142  04C7  09F2               	comf	___awdiv@dividend,f
  3143  04C8  09F3               	comf	___awdiv@dividend+1,f
  3144  04C9  0AF2               	incf	___awdiv@dividend,f
  3145  04CA  1903               	skipnz
  3146  04CB  0AF3               	incf	___awdiv@dividend+1,f
  3147  04CC                     i1l1374:
  3148  04CC  3001               	movlw	1
  3149  04CD  00F4               	movwf	??___awdiv
  3150  04CE  0874               	movf	??___awdiv,w
  3151  04CF  06F6               	xorwf	___awdiv@sign,f
  3152  04D0                     i1l1376:
  3153  04D0  01F7               	clrf	___awdiv@quotient
  3154  04D1  01F8               	clrf	___awdiv@quotient+1
  3155  04D2                     i1l1378:
  3156  04D2  0870               	movf	___awdiv@divisor,w
  3157  04D3  0471               	iorwf	___awdiv@divisor+1,w
  3158  04D4  1903               	btfsc	3,2
  3159  04D5  2CD7               	goto	u92_21
  3160  04D6  2CD8               	goto	u92_20
  3161  04D7                     u92_21:
  3162  04D7  2D0F               	goto	i1l1398
  3163  04D8                     u92_20:
  3164  04D8                     i1l1380:
  3165  04D8  01F5               	clrf	___awdiv@counter
  3166  04D9  0AF5               	incf	___awdiv@counter,f
  3167  04DA  2CE6               	goto	i1l1386
  3168  04DB                     i1l1382:
  3169  04DB  3001               	movlw	1
  3170  04DC                     u93_25:
  3171  04DC  1003               	clrc
  3172  04DD  0DF0               	rlf	___awdiv@divisor,f
  3173  04DE  0DF1               	rlf	___awdiv@divisor+1,f
  3174  04DF  3EFF               	addlw	-1
  3175  04E0  1D03               	skipz
  3176  04E1  2CDC               	goto	u93_25
  3177  04E2                     i1l1384:
  3178  04E2  3001               	movlw	1
  3179  04E3  00F4               	movwf	??___awdiv
  3180  04E4  0874               	movf	??___awdiv,w
  3181  04E5  07F5               	addwf	___awdiv@counter,f
  3182  04E6                     i1l1386:
  3183  04E6  1FF1               	btfss	___awdiv@divisor+1,7
  3184  04E7  2CE9               	goto	u94_21
  3185  04E8  2CEA               	goto	u94_20
  3186  04E9                     u94_21:
  3187  04E9  2CDB               	goto	i1l1382
  3188  04EA                     u94_20:
  3189  04EA                     i1l1388:
  3190  04EA  3001               	movlw	1
  3191  04EB                     u95_25:
  3192  04EB  1003               	clrc
  3193  04EC  0DF7               	rlf	___awdiv@quotient,f
  3194  04ED  0DF8               	rlf	___awdiv@quotient+1,f
  3195  04EE  3EFF               	addlw	-1
  3196  04EF  1D03               	skipz
  3197  04F0  2CEB               	goto	u95_25
  3198  04F1  0871               	movf	___awdiv@divisor+1,w
  3199  04F2  0273               	subwf	___awdiv@dividend+1,w
  3200  04F3  1D03               	skipz
  3201  04F4  2CF7               	goto	u96_25
  3202  04F5  0870               	movf	___awdiv@divisor,w
  3203  04F6  0272               	subwf	___awdiv@dividend,w
  3204  04F7                     u96_25:
  3205  04F7  1C03               	skipc
  3206  04F8  2CFA               	goto	u96_21
  3207  04F9  2CFB               	goto	u96_20
  3208  04FA                     u96_21:
  3209  04FA  2D02               	goto	i1l1394
  3210  04FB                     u96_20:
  3211  04FB                     i1l1390:
  3212  04FB  0870               	movf	___awdiv@divisor,w
  3213  04FC  02F2               	subwf	___awdiv@dividend,f
  3214  04FD  0871               	movf	___awdiv@divisor+1,w
  3215  04FE  1C03               	skipc
  3216  04FF  03F3               	decf	___awdiv@dividend+1,f
  3217  0500  02F3               	subwf	___awdiv@dividend+1,f
  3218  0501                     i1l1392:
  3219  0501  1477               	bsf	___awdiv@quotient,0
  3220  0502                     i1l1394:
  3221  0502  3001               	movlw	1
  3222  0503                     u97_25:
  3223  0503  1003               	clrc
  3224  0504  0CF1               	rrf	___awdiv@divisor+1,f
  3225  0505  0CF0               	rrf	___awdiv@divisor,f
  3226  0506  3EFF               	addlw	-1
  3227  0507  1D03               	skipz
  3228  0508  2D03               	goto	u97_25
  3229  0509                     i1l1396:
  3230  0509  3001               	movlw	1
  3231  050A  02F5               	subwf	___awdiv@counter,f
  3232  050B  1D03               	btfss	3,2
  3233  050C  2D0E               	goto	u98_21
  3234  050D  2D0F               	goto	u98_20
  3235  050E                     u98_21:
  3236  050E  2CEA               	goto	i1l1388
  3237  050F                     u98_20:
  3238  050F                     i1l1398:
  3239  050F  0876               	movf	___awdiv@sign,w
  3240  0510  1903               	btfsc	3,2
  3241  0511  2D13               	goto	u99_21
  3242  0512  2D14               	goto	u99_20
  3243  0513                     u99_21:
  3244  0513  2D19               	goto	i1l1402
  3245  0514                     u99_20:
  3246  0514                     i1l1400:
  3247  0514  09F7               	comf	___awdiv@quotient,f
  3248  0515  09F8               	comf	___awdiv@quotient+1,f
  3249  0516  0AF7               	incf	___awdiv@quotient,f
  3250  0517  1903               	skipnz
  3251  0518  0AF8               	incf	___awdiv@quotient+1,f
  3252  0519                     i1l1402:
  3253  0519  0878               	movf	___awdiv@quotient+1,w
  3254  051A  00F1               	movwf	?___awdiv+1
  3255  051B  0877               	movf	___awdiv@quotient,w
  3256  051C  00F0               	movwf	?___awdiv
  3257  051D                     i1l533:
  3258  051D  0008               	return
  3259  051E                     __end_of___awdiv:
  3260  007E                     btemp	set	126	;btemp
  3261  007E                     wtemp0	set	126
  3262                           
  3263                           	psect	config
  3264                           
  3265                           ;Config register CONFIG @ 0x2007
  3266                           ;	Oscillator Selection bits
  3267                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  3268                           ;	Watchdog Timer Enable bit
  3269                           ;	WDTE = OFF, WDT disabled
  3270                           ;	Power-up Timer Enable bit
  3271                           ;	PWRTE = ON, PWRT enabled
  3272                           ;	RA5/MCLR/VPP Pin Function Select bit
  3273                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  3274                           ;	Brown-out Detect Enable bit
  3275                           ;	BOREN = ON, BOD enabled
  3276                           ;	Low-Voltage Programming Enable bit
  3277                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  3278                           ;	Data EE Memory Code Protection bit
  3279                           ;	CPD = OFF, Data memory code protection off
  3280                           ;	Flash Program Memory Code Protection bit
  3281                           ;	CP = OFF, Code protection off
  3282  2007                     	org	8199
  3283  2007  3F50               	dw	16208

Data Sizes:
    Strings     137
    Constant    40
    Data        0
    BSS         80
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     21      74
    BANK1            80      0      28
    BANK2            80      0       0

Pointer List with Targets:

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 15
		 -> STR_15(CODE[5]), STR_14(CODE[7]), STR_13(CODE[8]), STR_12(CODE[7]), 
		 -> STR_11(CODE[14]), STR_10(CODE[15]), STR_9(CODE[13]), STR_8(CODE[7]), 
		 -> STR_7(CODE[7]), STR_6(CODE[9]), STR_5(CODE[8]), STR_4(CODE[8]), 
		 -> STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myISR in COMMON

    _myISR->_SPEED_calc
    _SPEED_calc->___awdiv

Critical Paths under _main in BANK0

    _main->_UART_Write_Text
    _UART_Write_Text->_UART_Write

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1065
                                             17 BANK0      4     4      0
                         _MOTOR_Init
                        _TIMER1_Init
                          _UART_Init
                    _UART_Write_Text
                            _UC_Init
 ---------------------------------------------------------------------------------
 (1) _UC_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      3     3      0     631
                                             14 BANK0      3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           9     9      0      46
                                              5 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4      76
                                              5 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _TIMER1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MOTOR_Init                                           3     3      0       0
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _myISR                                                5     5      0     590
                                              0 BANK0      5     5      0
                         _SPEED_calc
 ---------------------------------------------------------------------------------
 (4) _SPEED_calc                                           4     4      0     590
                                              9 COMMON     4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MOTOR_Init
   _TIMER1_Init
   _UART_Init
   _UART_Write_Text
     _UART_Write
   _UC_Init

 _myISR (ROOT)
   _SPEED_calc
     ___awdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     15      4A       3       92.5%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0      1C       5       35.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      74       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      74      10        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sun Feb 09 09:39:46 2025

                      pc 0002             ___awdiv@sign 0076                       fsr 0004  
                    l201 00AE                      l230 01B9                      l232 01CD  
                    l250 05D0                      l218 0146                      l235 01F9  
                    l244 0608                      l247 062D                      l280 061C  
                    l283 0550                      l294 05F3                      l288 0559  
                    u870 0534                      u871 0533                      u880 0550  
                    u890 0556                      u891 0555                      u885 0543  
                    u886 0544                      u887 0549                      u888 054A  
                    u889 054F                      fsr0 0004                      indf 0000  
                   l1430 05FB                     l1360 0556                     l1440 0604  
                   l1432 05FD                     l1450 0629                     l1354 0521  
                   l1442 0605                     l1434 0600                     l1426 05F4  
                   l1460 05CB                     l1452 062A                     l1356 052A  
                   l1444 0606                     l1436 0601                     l1428 05F7  
                   l1700 00D8                     l1462 05CE                     l1454 0596  
                   l1446 061D                     l1470 060F                     l1358 0534  
                   l1438 0603                     l1710 0101                     l1702 00F0  
                   l1456 05AF                     l1448 0625                     l1472 0612  
                   l1464 0609                     l1800 01DF                     l1720 011B  
                   l1712 0106                     l1704 00F1                     l1640 0024  
                   l1458 05B2                     l1474 0613                     l1466 060C  
                   l1482 05D4                     l1810 01F2                     l1802 01E3  
                   l1730 0136                     l1722 0120                     l1714 010A  
                   l1706 00F6                     l1650 0051                     l1642 003A  
                   l1476 0616                     l1468 060E                     l1484 05D7  
                   l1812 01F4                     l1804 01E9                     l1740 0151  
                   l1732 013C                     l1724 0126                     l1716 0111  
                   l1708 00FB                     l1660 005B                     l1652 0055  
                   l1644 0042                     l1478 0619                     l1486 05E0  
                   l1814 01FD                     l1806 01ED                     l1742 0156  
                   l1750 0164                     l1734 0141                     l1726 012B  
                   l1718 0116                     l1670 008A                     l1662 0067  
                   l1646 0047                     l1488 05E8                     l1816 0209  
                   l1808 01EE                     l1760 017A                     l1752 0169  
                   l1744 015B                     l1728 0131                     l1736 0147  
                   l1680 00B2                     l1672 0090                     l1664 006C  
                   l1648 0048                     l1818 020B                     l1770 0193  
                   l1754 016F                     l1762 017F                     l1746 015D  
                   l1738 014C                     l1682 00B8                     l1674 009C  
                   l1666 0078                     l1658 0056                     l1780 01AA  
                   l1772 0195                     l1764 0184                     l1756 0174  
                   l1748 015F                     l1692 00C0                     l1684 00BD  
                   l1676 00A2                     l1668 007E                     l1790 01C2  
                   l1782 01B2                     l1766 018A                     l1774 019A  
                   l1758 0178                     l1694 00C8                     l1686 00BE  
                   l1678 00AE                     l1792 01C6                     l1784 01B4  
                   l1776 019F                     l1768 018F                     l1696 00CC  
                   l1794 01C8                     l1786 01BD                     l1778 01A5  
                   l1698 00D2                     l1796 01D1                     l1788 01C1  
                   l1798 01DD                     STR_1 043D                     STR_2 0488  
                   STR_3 0496                     STR_4 0470                     STR_5 0478  
                   STR_6 0467                     STR_7 048F                     STR_8 04A4  
                   STR_9 045A                     _BRGH 04C2                     _CREN 00C4  
                   u1040 05F3                     u1041 05F2                     u1400 007E  
                   u1401 007D                     u1410 0090                     u1411 008F  
                   u1500 0106                     u1420 00A2                     u1501 0105  
                   u1421 00A1                     u1510 0111                     u1430 00B8  
                   u1511 0110                     u1431 00B7                     u1600 0169  
                   u1520 011B                     u1440 00BD                     u1360 0042  
                   u1601 0168                     u1521 011A                     u1441 00BC  
                   u1361 0041                     u1610 016F                     u1530 0126  
                   u1450 00D2                     u1370 0051                     u1611 016E  
                   u1531 0125                     u1451 00D1                     u1371 0050  
                   u1700 01D1                     u1620 0174                     u1540 0131  
                   u1460 00D8                     u1380 005B                     u1701 01D0  
                   u1621 0173                     u1541 0130                     u1461 00D7  
                   u1381 005A                     u1710 01E9                     u1630 0184  
                   u1550 013C                     u1470 00F6                     u1390 006C  
                   u1711 01E8                     u1631 0183                     u1551 013B  
                   u1471 00F5                     u1391 006B                     u1720 01FD  
                   u1640 018A                     u1560 014C                     u1480 00FB  
                   u1721 01FC                     u1641 0189                     u1561 014B  
                   u1481 00FA                     u1650 018F                     u1570 0151  
                   u1490 0101                     u1651 018E                     u1571 0150  
                   u1491 0100                     u1660 019F                     u1580 0156  
                   u1661 019E                     u1581 0155                     u1670 01A5  
                   u1590 015B                     u1671 01A4                     u1591 015A  
                   u1680 01AA                     u1737 05A8                     u1681 01A9  
                   u1690 01BD                     u1747 05C4                     u1691 01BC  
                   _SPEN 00C7                     _TRMT 04C1                     _TXEN 04C5  
                   _SYNC 04C4                     _main 0024                     btemp 007E  
        __end_of_UC_Init 0609                     start 0011  __end_of_UART_Write_Text 05F4  
            ?_MOTOR_Init 0070                    ?_main 0070          __end_of___awdiv 051E  
                  STR_10 042E                    STR_11 044C                    STR_12 04AB  
                  STR_13 0480                    STR_14 049D                    STR_15 04B2  
                  _CMCON 001F              ?_SPEED_calc 0070          ___awdiv@divisor 0070  
                  i1l141 027C                    i1l147 025F                    i1l253 0565  
                  i1l256 0594                    i1l257 0595                    i1l187 03CF  
                  i1l533 051D          ___awdiv@counter 0075                    _RCREG 001A  
                  _TMR1H 000F                    _TMR1L 000E                    _SPBRG 0099  
                  _PORTA 0005                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0086                    u90_20 04BC                    u90_21 04BB  
                  u91_20 04C7                    u91_21 04C6                    u92_20 04D8  
                  u92_21 04D7                    u93_25 04DC                    u94_20 04EA  
                  u94_21 04E9                    u95_25 04EB                    u96_20 04FB  
                  u96_21 04FA                    u96_25 04F7                    _TXREG 0019  
                  u97_25 0503                    u98_20 050F                    u98_21 050E  
                  u99_20 0514                    u99_21 0513              ?_UART_Write 0070  
                  _myISR 0212                    main@i 0067                    main@m 0066  
                  pclath 000A          _timer1_tilt_ref 0037                    status 0003  
                  wtemp0 007E          __initialization 0013             __end_of_main 0212  
                 ??_main 0064             ?_TIMER1_Init 0070                   ?_myISR 0070  
       ___awdiv@dividend 0072                ??_UC_Init 0058                   u100_20 0561  
                 u100_21 0560                   u101_20 056B                   u101_21 056A  
                 u102_20 0588                   u110_20 0235                   u102_21 0587  
                 u110_21 0234                   i1l1400 0514                   u103_20 0590  
                 u111_20 0247                   u103_21 058F                   u111_21 0246  
                 i1l1402 0519                   i1l1410 0561                   i1l1420 058A  
                 i1l1412 056B                   i1l1500 0226                   i1l1422 0590  
                 i1l1414 056F                   i1l1406 055B                   i1l1510 0242  
                 i1l1502 022B                   i1l1416 0583                   i1l1408 055B  
                 i1l1600 0340                   u120_20 02B2                   u112_20 0256  
                 i1l1512 0247                   i1l1504 0230                   u120_21 02B1  
                 u112_21 0255                   i1l1370 04C3                   i1l1362 04B7  
                 i1l1418 0588                   i1l1610 035D                   i1l1602 0345  
                 i1l1530 0274                   i1l1506 0235                   i1l1522 025F  
                 i1l1380 04D8                   i1l1372 04C7                   i1l1364 04B8  
                 i1l1620 037B                   i1l1612 0365                   i1l1604 034B  
                 i1l1540 028F                   i1l1532 0279                   i1l1524 0265  
                 i1l1516 0250                   i1l1508 023D                   i1l1390 04FB  
                 i1l1382 04DB                   i1l1374 04CC                   i1l1366 04BC  
                 i1l1614 036B                   i1l1630 0396                   i1l1622 037E  
                 i1l1606 034F                   i1l1550 02A5                   i1l1542 0294  
                 i1l1526 0266                   i1l1534 027A                   i1l1518 0256  
                 i1l1392 0501                   i1l1384 04E2                   i1l1376 04D0  
                 i1l1368 04C1                   i1l1632 03A3                   i1l1624 0384  
                 i1l1616 0370                   i1l1608 0358                   u121_20 02C4  
                 i1l1560 02B6                   i1l1552 02A6                   i1l1544 0299  
                 i1l1536 0280                   i1l1528 026E                   u113_20 0265  
                 u105_20 0216                   u121_21 02C3                   u113_21 0264  
                 u105_21 0215                   i1l1394 0502                   i1l1386 04E6  
                 i1l1378 04D2                   i1l1634 03B1                   i1l1626 0390  
                 i1l1618 0376                   i1l1570 02D7                   i1l1562 02BF  
                 i1l1554 02A7                   i1l1546 029A                   i1l1538 0283  
                 i1l1490 0212                   i1l1396 0509                   i1l1388 04EA  
                 i1l1636 03C0                   i1l1628 0392                   i1l1580 02F7  
                 i1l1572 02DD                   i1l1564 02C4                   i1l1556 02AC  
                 i1l1548 02A0                   i1l1492 0216                   i1l1398 050F  
                 i1l1638 03CE                   i1l1590 0326                   i1l1582 02F9  
                 i1l1574 02E2                   i1l1566 02CC                   i1l1558 02B2  
                 i1l1494 021A                   u130_20 035D                   i1l1568 02D2  
                 i1l1584 02FD                   u122_20 02CC                   i1l1576 02E5  
                 i1l1592 0333                   u114_20 0274                   i1l1496 021F  
                 u106_20 021F                   u130_21 035C                   u122_21 02CB  
                 u114_21 0273                   u106_21 021E                   i1l1586 0309  
                 i1l1578 02EB                   i1l1594 0334                   i1l1498 0220  
                 i1l1596 033A                   i1l1588 0317                   i1l1598 033F  
                 u131_20 0365                   u123_20 02D7                   u115_20 0280  
                 u107_20 0226                   u131_21 0364                   u123_21 02D6  
                 u115_21 027F                   u107_21 0225                   u132_20 0370  
                 u124_20 02DD                   u116_20 028F                   u108_20 022B  
                 u132_21 036F                   u124_21 02DC                   u116_21 028E  
                 u108_21 022A                   u133_20 0376                   u125_20 02EB  
                 u117_20 0299                   u109_20 0230                   u133_21 0375  
                 u125_21 02EA                   u117_21 0298                   u109_21 022F  
                 u134_20 0384                   u126_20 02F7                   u118_20 02A0  
                 u134_21 0383                   u126_21 02F6                   u118_21 029F  
                 u135_20 0390                   u127_20 033A                   u119_20 02AC  
                 u135_21 038F                   u127_21 0339                   u119_21 02AB  
                 u128_20 0345                   u128_21 0344                   u129_20 034B  
                 u129_21 034A                   _P_dat1 0048                   _P_dat2 0047  
                 _P_cmd1 004A                   _P_cmd2 0049                   _P_addr 004B  
      __end_of_UART_Init 061D                ??___awdiv 0074         ?_UART_Write_Text 0070  
       ___awdiv@quotient 0077          SPEED_calc@speed 007B                   saved_w 007E  
       __end_of_steps_1A 042E         __end_of_steps_1B 0426         __end_of_steps_2A 041E  
       __end_of_steps_2B 0416  __end_of__initialization 0021           __pcstackCOMMON 0070  
          _pan_direction 0068            __end_of_myISR 03DA           _OPTION_REGbits 0081  
                ??_myISR 0053               __pbssBANK0 0020               __pbssBANK1 00A0  
             __pmaintext 0024            _pan_speed_old 0042               _header_cnt 0050  
             _header_pos 004D               __pintentry 0004             ??_MOTOR_Init 0058  
           ??_SPEED_calc 0079             ??_UART_Write 0058                  _UC_Init 05F4  
             __stringtab 0400               _frame_data 0020       __end_of_MOTOR_Init 05D1  
     __end_of_SPEED_calc 0596                  ___awdiv 04B7       __end_of_UART_Write 055A  
                __ptext1 05F4                  __ptext2 05D1                  __ptext3 051E  
                __ptext4 0609                  __ptext5 061D                  __ptext6 0596  
                __ptext7 0212                  __ptext8 055A                  __ptext9 04B7  
              _T1CONbits 0010                  clrloop0 062F     end_of_initialization 0021  
      __end_of_speed_ref 040E             _buffer_data0 0027             _buffer_data1 00B5  
           _buffer_data2 00AE             _buffer_data3 00A7             _buffer_data4 00A0  
           _buffer_ready 002E               _timer1_pan 003A                _UART_Init 0609  
              _PORTAbits 0005                _PORTBbits 0006           UART_Write@data 005C  
             _tilt_speed 003F           _timer1_pan_ref 0038               ?_UART_Init 0058  
    start_initialization 0013              __pbssCOMMON 007D                ___latbits 0001  
          __pcstackBANK0 0053          main@chksum_calc 0065              _data_receiv 0052  
               ?_UC_Init 0070              _alarms_data 003D                __pnvBANK0 0068  
               ?___awdiv 0070              ??_UART_Init 005C                __pstrings 0400  
          ??_TIMER1_Init 0058           _pan_step_phase 003C                _pan_speed 0043  
      ??_UART_Write_Text 0061        interrupt_function 0004                clear_ram0 062E  
               _PIE1bits 008C                 _PCONbits 008E                 _PIR1bits 000C  
              _speed_ref 0406                _preset_id 0045           _preset_enabled 0044  
      UART_Init@baudrate 0058              __stringbase 0405              _frame_index 004E  
    __end_of_TIMER1_Init 062E                 _P_chksum 0046              _pan_enabled 0069  
     __end_of__stringtab 0406              _pan_counter 0035            _response_type 004C  
         _timeout_receiv 004F           _tilt_direction 0040          _tilt_step_phase 003B  
    UART_Write_Text@text 0063                 _steps_1A 0426                 _steps_1B 041E  
               _steps_2A 0416                 _steps_2B 040E              _TIMER1_Init 061D  
             _INTCONbits 000B        SPEED_calc@sp_calc 007C           _tilt_speed_old 003E  
               intlevel1 0000                stringcode 0400            _buffer_index1 0051  
          _buffer_index2 007D        UART_Write@timeout 005D              _timer1_tilt 0039  
             _MOTOR_Init 0596          _UART_Write_Text 05D1               _SPEED_calc 055A  
           _tilt_enabled 0041                 stringdir 0400                 stringtab 0400  
           _tilt_counter 0033               _UART_Write 051E         UART_Write_Text@i 0061  
