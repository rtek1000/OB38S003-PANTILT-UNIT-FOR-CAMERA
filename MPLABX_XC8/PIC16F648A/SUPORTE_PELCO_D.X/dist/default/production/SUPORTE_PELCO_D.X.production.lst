

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed Feb 12 14:32:24 2025

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	16F648A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    42                           	dabs	1,0x7E,2
    43  0000                     
    44                           ; Generated 12/10/2023 GMT
    45                           ; 
    46                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution. Publication is not required when
    60                           ;        this file is used in an embedded application.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC16F648A Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0015                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001F                     	;# 
   102  0081                     	;# 
   103  0085                     	;# 
   104  0086                     	;# 
   105  008C                     	;# 
   106  008E                     	;# 
   107  0092                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009F                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0015                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0017                     	;# 
   135  0018                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001F                     	;# 
   139  0081                     	;# 
   140  0085                     	;# 
   141  0086                     	;# 
   142  008C                     	;# 
   143  008E                     	;# 
   144  0092                     	;# 
   145  0098                     	;# 
   146  0099                     	;# 
   147  009A                     	;# 
   148  009B                     	;# 
   149  009C                     	;# 
   150  009D                     	;# 
   151  009F                     	;# 
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001F                     	;# 
   176  0081                     	;# 
   177  0085                     	;# 
   178  0086                     	;# 
   179  008C                     	;# 
   180  008E                     	;# 
   181  0092                     	;# 
   182  0098                     	;# 
   183  0099                     	;# 
   184  009A                     	;# 
   185  009B                     	;# 
   186  009C                     	;# 
   187  009D                     	;# 
   188  009F                     	;# 
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  000A                     	;# 
   197  000B                     	;# 
   198  000C                     	;# 
   199  000E                     	;# 
   200  000E                     	;# 
   201  000F                     	;# 
   202  0010                     	;# 
   203  0011                     	;# 
   204  0012                     	;# 
   205  0015                     	;# 
   206  0015                     	;# 
   207  0016                     	;# 
   208  0017                     	;# 
   209  0018                     	;# 
   210  0019                     	;# 
   211  001A                     	;# 
   212  001F                     	;# 
   213  0081                     	;# 
   214  0085                     	;# 
   215  0086                     	;# 
   216  008C                     	;# 
   217  008E                     	;# 
   218  0092                     	;# 
   219  0098                     	;# 
   220  0099                     	;# 
   221  009A                     	;# 
   222  009B                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009F                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  000A                     	;# 
   234  000B                     	;# 
   235  000C                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001F                     	;# 
   250  0081                     	;# 
   251  0085                     	;# 
   252  0086                     	;# 
   253  008C                     	;# 
   254  008E                     	;# 
   255  0092                     	;# 
   256  0098                     	;# 
   257  0099                     	;# 
   258  009A                     	;# 
   259  009B                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009F                     	;# 
   263                           
   264                           	psect	strings
   265  0500                     __pstrings:
   266  0500                     stringtab:
   267  0500                     __stringtab:
   268  0500                     stringcode:	
   269                           ;	String table - string pointers are 1 byte each
   270                           
   271  0500                     stringdir:
   272  0500  3005               	movlw	high stringdir
   273  0501  008A               	movwf	10
   274  0502  0804               	movf	4,w
   275  0503  0A84               	incf	4,f
   276  0504  0782               	addwf	2,f
   277  0505                     __stringbase:
   278  0505  3400               	retlw	0
   279  0506                     __end_of__stringtab:
   280  0506                     _speed_ref:
   281  0506  3406               	retlw	6
   282  0507  340C               	retlw	12
   283  0508  3412               	retlw	18
   284  0509  3419               	retlw	25
   285  050A  341F               	retlw	31
   286  050B  3425               	retlw	37
   287  050C  342C               	retlw	44
   288  050D  3432               	retlw	50
   289  050E                     __end_of_speed_ref:
   290  050E                     _steps_2B:
   291  050E  3400               	retlw	0
   292  050F  3400               	retlw	0
   293  0510  3400               	retlw	0
   294  0511  3400               	retlw	0
   295  0512  3400               	retlw	0
   296  0513  3401               	retlw	1
   297  0514  3401               	retlw	1
   298  0515  3401               	retlw	1
   299  0516                     __end_of_steps_2B:
   300  0516                     _steps_2A:
   301  0516  3400               	retlw	0
   302  0517  3400               	retlw	0
   303  0518  3400               	retlw	0
   304  0519  3401               	retlw	1
   305  051A  3401               	retlw	1
   306  051B  3401               	retlw	1
   307  051C  3400               	retlw	0
   308  051D  3400               	retlw	0
   309  051E                     __end_of_steps_2A:
   310  051E                     _steps_1B:
   311  051E  3400               	retlw	0
   312  051F  3401               	retlw	1
   313  0520  3401               	retlw	1
   314  0521  3401               	retlw	1
   315  0522  3400               	retlw	0
   316  0523  3400               	retlw	0
   317  0524  3400               	retlw	0
   318  0525  3400               	retlw	0
   319  0526                     __end_of_steps_1B:
   320  0526                     _steps_1A:
   321  0526  3401               	retlw	1
   322  0527  3401               	retlw	1
   323  0528  3400               	retlw	0
   324  0529  3400               	retlw	0
   325  052A  3400               	retlw	0
   326  052B  3400               	retlw	0
   327  052C  3400               	retlw	0
   328  052D  3401               	retlw	1
   329  052E                     __end_of_steps_1A:
   330  0003                     _STATUSbits	set	3
   331  0019                     _TXREG	set	25
   332  0012                     _T2CONbits	set	18
   333  0010                     _T1CONbits	set	16
   334  000B                     _INTCONbits	set	11
   335  001F                     _CMCON	set	31
   336  0006                     _PORTB	set	6
   337  0005                     _PORTA	set	5
   338  0005                     _PORTAbits	set	5
   339  0018                     _RCSTAbits	set	24
   340  000E                     _TMR1L	set	14
   341  000F                     _TMR1H	set	15
   342  0006                     _PORTBbits	set	6
   343  001A                     _RCREG	set	26
   344  000C                     _PIR1bits	set	12
   345  00C4                     _CREN	set	196
   346  00C7                     _SPEN	set	199
   347  009D                     _EECON2	set	157
   348  009A                     _EEDATA	set	154
   349  009C                     _EECON1	set	156
   350  009B                     _EEADR	set	155
   351  009C                     _EECON1bits	set	156
   352  0099                     _SPBRG	set	153
   353  0092                     _PR2	set	146
   354  0086                     _TRISB	set	134
   355  0085                     _TRISA	set	133
   356  0081                     _OPTION_REGbits	set	129
   357  008E                     _PCONbits	set	142
   358  008C                     _PIE1bits	set	140
   359  04C1                     _TRMT	set	1217
   360  04C5                     _TXEN	set	1221
   361  04C4                     _SYNC	set	1220
   362  04C2                     _BRGH	set	1218
   363  052E                     STR_2:
   364  052E  3447               	retlw	71	;'G'
   365  052F  346F               	retlw	111	;'o'
   366  0530  3474               	retlw	116	;'t'
   367  0531  346F               	retlw	111	;'o'
   368  0532  3420               	retlw	32	;' '
   369  0533  3450               	retlw	80	;'P'
   370  0534  3441               	retlw	65	;'A'
   371  0535  344E               	retlw	78	;'N'
   372  0536  3420               	retlw	32	;' '
   373  0537  3461               	retlw	97	;'a'
   374  0538  346E               	retlw	110	;'n'
   375  0539  3464               	retlw	100	;'d'
   376  053A  3420               	retlw	32	;' '
   377  053B  3454               	retlw	84	;'T'
   378  053C  3449               	retlw	73	;'I'
   379  053D  344C               	retlw	76	;'L'
   380  053E  3454               	retlw	84	;'T'
   381  053F  3420               	retlw	32	;' '
   382  0540  3448               	retlw	72	;'H'
   383  0541  346F               	retlw	111	;'o'
   384  0542  346D               	retlw	109	;'m'
   385  0543  3465               	retlw	101	;'e'
   386  0544  3400               	retlw	0
   387  0545                     STR_3:
   388  0545  3457               	retlw	87	;'W'
   389  0546  3461               	retlw	97	;'a'
   390  0547  3469               	retlw	105	;'i'
   391  0548  3474               	retlw	116	;'t'
   392  0549  3469               	retlw	105	;'i'
   393  054A  346E               	retlw	110	;'n'
   394  054B  3467               	retlw	103	;'g'
   395  054C  3420               	retlw	32	;' '
   396  054D  3466               	retlw	102	;'f'
   397  054E  346F               	retlw	111	;'o'
   398  054F  3472               	retlw	114	;'r'
   399  0550  3420               	retlw	32	;' '
   400  0551  3463               	retlw	99	;'c'
   401  0552  346F               	retlw	111	;'o'
   402  0553  346D               	retlw	109	;'m'
   403  0554  346D               	retlw	109	;'m'
   404  0555  3461               	retlw	97	;'a'
   405  0556  346E               	retlw	110	;'n'
   406  0557  3464               	retlw	100	;'d'
   407  0558  3473               	retlw	115	;'s'
   408  0559  3400               	retlw	0
   409  055A                     STR_18:
   410  055A  3443               	retlw	67	;'C'
   411  055B  344C               	retlw	76	;'L'
   412  055C  3445               	retlw	69	;'E'
   413  055D  3441               	retlw	65	;'A'
   414  055E  3452               	retlw	82	;'R'
   415  055F  3420               	retlw	32	;' '
   416  0560  3450               	retlw	80	;'P'
   417  0561  3452               	retlw	82	;'R'
   418  0562  3445               	retlw	69	;'E'
   419  0563  3453               	retlw	83	;'S'
   420  0564  3445               	retlw	69	;'E'
   421  0565  3454               	retlw	84	;'T'
   422  0566  3420               	retlw	32	;' '
   423  0567  3400               	retlw	0
   424  0568                     STR_5:
   425  0568  3453               	retlw	83	;'S'
   426  0569  3445               	retlw	69	;'E'
   427  056A  3454               	retlw	84	;'T'
   428  056B  3420               	retlw	32	;' '
   429  056C  3442               	retlw	66	;'B'
   430  056D  3441               	retlw	65	;'A'
   431  056E  3455               	retlw	85	;'U'
   432  056F  3444               	retlw	68	;'D'
   433  0570  3420               	retlw	32	;' '
   434  0571  3452               	retlw	82	;'R'
   435  0572  3441               	retlw	65	;'A'
   436  0573  3454               	retlw	84	;'T'
   437  0574  3445               	retlw	69	;'E'
   438  0575  3400               	retlw	0
   439  0576                     STR_19:
   440  0576  3447               	retlw	71	;'G'
   441  0577  344F               	retlw	79	;'O'
   442  0578  3454               	retlw	84	;'T'
   443  0579  344F               	retlw	79	;'O'
   444  057A  3420               	retlw	32	;' '
   445  057B  3450               	retlw	80	;'P'
   446  057C  3452               	retlw	82	;'R'
   447  057D  3445               	retlw	69	;'E'
   448  057E  3453               	retlw	83	;'S'
   449  057F  3445               	retlw	69	;'E'
   450  0580  3454               	retlw	84	;'T'
   451  0581  3420               	retlw	32	;' '
   452  0582  3400               	retlw	0
   453  0583                     STR_17:
   454  0583  3453               	retlw	83	;'S'
   455  0584  3445               	retlw	69	;'E'
   456  0585  3454               	retlw	84	;'T'
   457  0586  3420               	retlw	32	;' '
   458  0587  3450               	retlw	80	;'P'
   459  0588  3452               	retlw	82	;'R'
   460  0589  3445               	retlw	69	;'E'
   461  058A  3453               	retlw	83	;'S'
   462  058B  3445               	retlw	69	;'E'
   463  058C  3454               	retlw	84	;'T'
   464  058D  3420               	retlw	32	;' '
   465  058E  3400               	retlw	0
   466  058F                     STR_12:
   467  058F  340D               	retlw	13
   468  0590  340A               	retlw	10
   469  0591  3450               	retlw	80	;'P'
   470  0592  344C               	retlw	76	;'L'
   471  0593  3445               	retlw	69	;'E'
   472  0594  3441               	retlw	65	;'A'
   473  0595  3453               	retlw	83	;'S'
   474  0596  3445               	retlw	69	;'E'
   475  0597  3420               	retlw	32	;' '
   476  0598  3400               	retlw	0
   477  0599                     STR_1:
   478  0599  340D               	retlw	13
   479  059A  340A               	retlw	10
   480  059B  340D               	retlw	13
   481  059C  340A               	retlw	10
   482  059D  3453               	retlw	83	;'S'
   483  059E  3474               	retlw	116	;'t'
   484  059F  3461               	retlw	97	;'a'
   485  05A0  3472               	retlw	114	;'r'
   486  05A1  3474               	retlw	116	;'t'
   487  05A2  3400               	retlw	0
   488  05A3                     STR_13:
   489  05A3  340D               	retlw	13
   490  05A4  340A               	retlw	10
   491  05A5  344E               	retlw	78	;'N'
   492  05A6  3445               	retlw	69	;'E'
   493  05A7  3445               	retlw	69	;'E'
   494  05A8  3444               	retlw	68	;'D'
   495  05A9  3420               	retlw	32	;' '
   496  05AA  3400               	retlw	0
   497  05AB                     STR_15:
   498  05AB  3453               	retlw	83	;'S'
   499  05AC  3454               	retlw	84	;'T'
   500  05AD  344F               	retlw	79	;'O'
   501  05AE  3450               	retlw	80	;'P'
   502  05AF  3420               	retlw	32	;' '
   503  05B0  3428               	retlw	40	;'('
   504  05B1  3400               	retlw	0
   505  05B2                     STR_10:
   506  05B2  3431               	retlw	49	;'1'
   507  05B3  3431               	retlw	49	;'1'
   508  05B4  3435               	retlw	53	;'5'
   509  05B5  3432               	retlw	50	;'2'
   510  05B6  3430               	retlw	48	;'0'
   511  05B7  3430               	retlw	48	;'0'
   512  05B8  3400               	retlw	0
   513  05B9                     STR_4:
   514  05B9  3452               	retlw	82	;'R'
   515  05BA  3445               	retlw	69	;'E'
   516  05BB  3442               	retlw	66	;'B'
   517  05BC  344F               	retlw	79	;'O'
   518  05BD  344F               	retlw	79	;'O'
   519  05BE  3454               	retlw	84	;'T'
   520  05BF  3400               	retlw	0
   521  05C0                     STR_8:
   522  05C0  3431               	retlw	49	;'1'
   523  05C1  3439               	retlw	57	;'9'
   524  05C2  3432               	retlw	50	;'2'
   525  05C3  3430               	retlw	48	;'0'
   526  05C4  3430               	retlw	48	;'0'
   527  05C5  3400               	retlw	0
   528  05C6                     STR_9:
   529  05C6  3433               	retlw	51	;'3'
   530  05C7  3438               	retlw	56	;'8'
   531  05C8  3434               	retlw	52	;'4'
   532  05C9  3430               	retlw	48	;'0'
   533  05CA  3430               	retlw	48	;'0'
   534  05CB  3400               	retlw	0
   535  05CC                     STR_21:
   536  05CC  3452               	retlw	82	;'R'
   537  05CD  3449               	retlw	73	;'I'
   538  05CE  3447               	retlw	71	;'G'
   539  05CF  3448               	retlw	72	;'H'
   540  05D0  3454               	retlw	84	;'T'
   541  05D1  3400               	retlw	0
   542  05D2                     STR_6:
   543  05D2  3432               	retlw	50	;'2'
   544  05D3  3434               	retlw	52	;'4'
   545  05D4  3430               	retlw	48	;'0'
   546  05D5  3430               	retlw	48	;'0'
   547  05D6  3400               	retlw	0
   548  05D7                     STR_11:
   549  05D7  3439               	retlw	57	;'9'
   550  05D8  3436               	retlw	54	;'6'
   551  05D9  3430               	retlw	48	;'0'
   552  05DA  3430               	retlw	48	;'0'
   553  05DB  3400               	retlw	0
   554  05DC                     STR_7:
   555  05DC  3434               	retlw	52	;'4'
   556  05DD  3438               	retlw	56	;'8'
   557  05DE  3430               	retlw	48	;'0'
   558  05DF  3430               	retlw	48	;'0'
   559  05E0  3400               	retlw	0
   560  05E1                     STR_22:
   561  05E1  3444               	retlw	68	;'D'
   562  05E2  344F               	retlw	79	;'O'
   563  05E3  3457               	retlw	87	;'W'
   564  05E4  344E               	retlw	78	;'N'
   565  05E5  3400               	retlw	0
   566  05E6                     STR_20:
   567  05E6  344C               	retlw	76	;'L'
   568  05E7  3445               	retlw	69	;'E'
   569  05E8  3446               	retlw	70	;'F'
   570  05E9  3454               	retlw	84	;'T'
   571  05EA  3400               	retlw	0
   572  05EB                     STR_24:
   573  05EB  342C               	retlw	44	;','
   574  05EC  3420               	retlw	32	;' '
   575  05ED  3400               	retlw	0
   576  05EE                     STR_23:
   577  05EE  3455               	retlw	85	;'U'
   578  05EF  3450               	retlw	80	;'P'
   579  05F0  3400               	retlw	0
   580  05F1                     STR_16:
   581  05F1  3429               	retlw	41	;')'
   582  05F2  3400               	retlw	0
   583  05AF                     
   584                           	psect	cinit
   585  0011                     start_initialization:	
   586                           ; #config settings
   587                           
   588  0011                     __initialization:
   589                           
   590                           ; Clear objects allocated to COMMON
   591  0011  3070               	movlw	low __pbssCOMMON
   592  0012  0084               	movwf	4
   593  0013  3076               	movlw	low (__pbssCOMMON+6)
   594  0014  158A  2538  118A   	fcall	clear_ram0
   595                           
   596                           ; Clear objects allocated to BANK0
   597  0017  1383               	bcf	3,7	;select IRP bank0
   598  0018  3050               	movlw	low __pbssBANK0
   599  0019  0084               	movwf	4
   600  001A  3070               	movlw	low (__pbssBANK0+32)
   601  001B  158A  2538  118A   	fcall	clear_ram0
   602                           
   603                           ; Clear objects allocated to BANK1
   604  001E  30A0               	movlw	low __pbssBANK1
   605  001F  0084               	movwf	4
   606  0020  30D8               	movlw	low (__pbssBANK1+56)
   607  0021  158A  2538         	fcall	clear_ram0
   608  0023                     end_of_initialization:	
   609                           ;End of C runtime variable initialization code
   610                           
   611  0023                     __end_of__initialization:
   612  0023  0183               	clrf	3
   613  0024  118A  2826         	ljmp	_main	;jump to C main() function
   614                           
   615                           	psect	bssCOMMON
   616  0070                     __pbssCOMMON:
   617  0070                     _is_init:
   618  0070                     	ds	1
   619  0071                     _tilt_step_phase:
   620  0071                     	ds	1
   621  0072                     _pan_step_phase:
   622  0072                     	ds	1
   623  0073                     _buffer_index2:
   624  0073                     	ds	1
   625  0074                     _buffer_index1:
   626  0074                     	ds	1
   627  0075                     _data_receiv:
   628  0075                     	ds	1
   629                           
   630                           	psect	bssBANK0
   631  0050                     __pbssBANK0:
   632  0050                     _tilt_goto:
   633  0050                     	ds	2
   634  0052                     _pan_goto:
   635  0052                     	ds	2
   636  0054                     _tilt_counter:
   637  0054                     	ds	2
   638  0056                     _pan_counter:
   639  0056                     	ds	2
   640  0058                     _is_reboot:
   641  0058                     	ds	1
   642  0059                     _preset_id:
   643  0059                     	ds	1
   644  005A                     _P_dat2:
   645  005A                     	ds	1
   646  005B                     _P_dat1:
   647  005B                     	ds	1
   648  005C                     _P_cmd2:
   649  005C                     	ds	1
   650  005D                     _P_cmd1:
   651  005D                     	ds	1
   652  005E                     _P_addr:
   653  005E                     	ds	1
   654  005F                     _response_type:
   655  005F                     	ds	1
   656  0060                     _frame_index:
   657  0060                     	ds	1
   658  0061                     _timer1_tilt_ref:
   659  0061                     	ds	1
   660  0062                     _timer1_pan_ref:
   661  0062                     	ds	1
   662  0063                     _timer1_tilt:
   663  0063                     	ds	1
   664  0064                     _timer1_pan:
   665  0064                     	ds	1
   666  0065                     _tilt_speed:
   667  0065                     	ds	1
   668  0066                     _tilt_direction:
   669  0066                     	ds	1
   670  0067                     _tilt_enabled:
   671  0067                     	ds	1
   672  0068                     _pan_speed:
   673  0068                     	ds	1
   674  0069                     _pan_direction:
   675  0069                     	ds	1
   676  006A                     _pan_enabled:
   677  006A                     	ds	1
   678  006B                     _preset_tilt_enabled:
   679  006B                     	ds	1
   680  006C                     _preset_pan_enabled:
   681  006C                     	ds	1
   682  006D                     _timeout_uart2:
   683  006D                     	ds	1
   684  006E                     _timeout_uart1:
   685  006E                     	ds	1
   686  006F                     _timeout_receiv:
   687  006F                     	ds	1
   688                           
   689                           	psect	bssBANK1
   690  00A0                     __pbssBANK1:
   691  00A0                     _frame_data:
   692  00A0                     	ds	7
   693  00A7                     _buffer_data4:
   694  00A7                     	ds	7
   695  00AE                     _buffer_data3:
   696  00AE                     	ds	7
   697  00B5                     _buffer_data2:
   698  00B5                     	ds	7
   699  00BC                     _buffer_data1:
   700  00BC                     	ds	7
   701  00C3                     _buffer_data0:
   702  00C3                     	ds	7
   703  00CA                     _buffer_ready:
   704  00CA                     	ds	5
   705  00CF                     _alarms_data:
   706  00CF                     	ds	1
   707  00D0                     _P_chksum:
   708  00D0                     	ds	1
   709  00D1                     _header_pos:
   710  00D1                     	ds	1
   711  00D2                     _tilt_speed_old:
   712  00D2                     	ds	1
   713  00D3                     _pan_speed_old:
   714  00D3                     	ds	1
   715  00D4                     _preset_tilt_enabled_old:
   716  00D4                     	ds	1
   717  00D5                     _preset_pan_enabled_old:
   718  00D5                     	ds	1
   719  00D6                     _timeout_uart3:
   720  00D6                     	ds	1
   721  00D7                     _header_cnt:
   722  00D7                     	ds	1
   723                           
   724                           	psect	clrtext
   725  0D38                     clear_ram0:	
   726                           ;	Called with FSR containing the base address, and
   727                           ;	W with the last address+1
   728                           
   729  0D38  0064               	clrwdt	;clear the watchdog before getting into this loop
   730  0D39                     clrloop0:
   731  0D39  0180               	clrf	0	;clear RAM location pointed to by FSR
   732  0D3A  0A84               	incf	4,f	;increment pointer
   733  0D3B  0604               	xorwf	4,w	;XOR with final address
   734  0D3C  1903               	btfsc	3,2	;have we reached the end yet?
   735  0D3D  3400               	retlw	0	;all done for this memory range, return
   736  0D3E  0604               	xorwf	4,w	;XOR again to restore value
   737  0D3F  2D39               	goto	clrloop0	;do the next byte
   738                           
   739                           	psect	cstackCOMMON
   740  0076                     __pcstackCOMMON:
   741  0076                     ?_UC_Init:
   742  0076                     ?_UART_Init:	
   743                           ; 1 bytes @ 0x0
   744                           
   745  0076                     ?_TIMER1_Init:	
   746                           ; 1 bytes @ 0x0
   747                           
   748  0076                     ?_TIMER2_Init:	
   749                           ; 1 bytes @ 0x0
   750                           
   751  0076                     ?_UART_Write_Text_CRLF:	
   752                           ; 1 bytes @ 0x0
   753                           
   754  0076                     ?_MOTOR_Init:	
   755                           ; 1 bytes @ 0x0
   756                           
   757  0076                     ?_BAUDS_set:	
   758                           ; 1 bytes @ 0x0
   759                           
   760  0076                     ?_UART_Write_Text:	
   761                           ; 1 bytes @ 0x0
   762                           
   763  0076                     ?_SPEED_calc:	
   764                           ; 1 bytes @ 0x0
   765                           
   766  0076                     ?_eeprom_read:	
   767                           ; 1 bytes @ 0x0
   768                           
   769  0076                     ?_UART_Write:	
   770                           ; 1 bytes @ 0x0
   771                           
   772  0076                     ?_myISR:	
   773                           ; 1 bytes @ 0x0
   774                           
   775  0076                     ??_myISR:	
   776                           ; 1 bytes @ 0x0
   777                           
   778  0076                     ?_main:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  0076                     ?_BAUDS_get:	
   782                           ; 1 bytes @ 0x0
   783                           
   784                           
   785                           ; 1 bytes @ 0x0
   786  0076                     	ds	6
   787                           
   788                           	psect	cstackBANK0
   789  0020                     __pcstackBANK0:
   790  0020                     ??_UC_Init:
   791  0020                     ??_TIMER1_Init:	
   792                           ; 1 bytes @ 0x0
   793                           
   794  0020                     ??_TIMER2_Init:	
   795                           ; 1 bytes @ 0x0
   796                           
   797  0020                     ?_delay_wdt:	
   798                           ; 1 bytes @ 0x0
   799                           
   800  0020                     ??_eeprom_read:	
   801                           ; 1 bytes @ 0x0
   802                           
   803  0020                     ?_eeprom_write:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  0020                     ??_UART_Write:	
   807                           ; 1 bytes @ 0x0
   808                           
   809  0020                     ?___bmul:	
   810                           ; 1 bytes @ 0x0
   811                           
   812  0020                     ?___lbdiv:	
   813                           ; 1 bytes @ 0x0
   814                           
   815  0020                     ?___wmul:	
   816                           ; 1 bytes @ 0x0
   817                           
   818  0020                     ?___awdiv:	
   819                           ; 2 bytes @ 0x0
   820                           
   821  0020                     ?___lwdiv:	
   822                           ; 2 bytes @ 0x0
   823                           
   824  0020                     eeprom_write@value:	
   825                           ; 2 bytes @ 0x0
   826                           
   827  0020                     ___bmul@multiplicand:	
   828                           ; 1 bytes @ 0x0
   829                           
   830  0020                     ___lbdiv@divisor:	
   831                           ; 1 bytes @ 0x0
   832                           
   833  0020                     delay_wdt@_ms:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0020                     ___wmul@multiplier:	
   837                           ; 2 bytes @ 0x0
   838                           
   839  0020                     ___awdiv@divisor:	
   840                           ; 2 bytes @ 0x0
   841                           
   842  0020                     ___lwdiv@divisor:	
   843                           ; 2 bytes @ 0x0
   844                           
   845                           
   846                           ; 2 bytes @ 0x0
   847  0020                     	ds	1
   848  0021                     ??_eeprom_write:
   849  0021                     ??___bmul:	
   850                           ; 1 bytes @ 0x1
   851                           
   852  0021                     ??___lbdiv:	
   853                           ; 1 bytes @ 0x1
   854                           
   855  0021                     eeprom_read@addr:	
   856                           ; 1 bytes @ 0x1
   857                           
   858                           
   859                           ; 1 bytes @ 0x1
   860  0021                     	ds	1
   861  0022                     ??_UART_Init:
   862  0022                     ??_delay_wdt:	
   863                           ; 1 bytes @ 0x2
   864                           
   865  0022                     ?_PRESET_load:	
   866                           ; 1 bytes @ 0x2
   867                           
   868  0022                     ??_BAUDS_get:	
   869                           ; 1 bytes @ 0x2
   870                           
   871  0022                     PRESET_load@pan:	
   872                           ; 1 bytes @ 0x2
   873                           
   874  0022                     eeprom_write@addr:	
   875                           ; 1 bytes @ 0x2
   876                           
   877  0022                     ___bmul@product:	
   878                           ; 1 bytes @ 0x2
   879                           
   880  0022                     ___lbdiv@dividend:	
   881                           ; 1 bytes @ 0x2
   882                           
   883  0022                     ___wmul@multiplicand:	
   884                           ; 1 bytes @ 0x2
   885                           
   886  0022                     ___awdiv@dividend:	
   887                           ; 2 bytes @ 0x2
   888                           
   889  0022                     ___lwdiv@dividend:	
   890                           ; 2 bytes @ 0x2
   891                           
   892                           
   893                           ; 2 bytes @ 0x2
   894  0022                     	ds	1
   895  0023                     ??_MOTOR_Init:
   896  0023                     ?_eeprom_update:	
   897                           ; 1 bytes @ 0x3
   898                           
   899  0023                     eeprom_update@value:	
   900                           ; 1 bytes @ 0x3
   901                           
   902  0023                     PRESET_load@tilt:	
   903                           ; 1 bytes @ 0x3
   904                           
   905  0023                     ___bmul@multiplier:	
   906                           ; 1 bytes @ 0x3
   907                           
   908  0023                     ___lbdiv@counter:	
   909                           ; 1 bytes @ 0x3
   910                           
   911                           
   912                           ; 1 bytes @ 0x3
   913  0023                     	ds	1
   914  0024                     ??_PRESET_load:
   915  0024                     ??_eeprom_update:	
   916                           ; 1 bytes @ 0x4
   917                           
   918  0024                     ??___wmul:	
   919                           ; 1 bytes @ 0x4
   920                           
   921  0024                     ??___awdiv:	
   922                           ; 1 bytes @ 0x4
   923                           
   924  0024                     ??___lwdiv:	
   925                           ; 1 bytes @ 0x4
   926                           
   927  0024                     UART_Init@bauds_index:	
   928                           ; 1 bytes @ 0x4
   929                           
   930  0024                     UART_Write@data:	
   931                           ; 1 bytes @ 0x4
   932                           
   933  0024                     ___lbdiv@quotient:	
   934                           ; 1 bytes @ 0x4
   935                           
   936  0024                     ___wmul@product:	
   937                           ; 1 bytes @ 0x4
   938                           
   939                           
   940                           ; 2 bytes @ 0x4
   941  0024                     	ds	1
   942  0025                     eeprom_update@addr:
   943  0025                     ___awdiv@counter:	
   944                           ; 1 bytes @ 0x5
   945                           
   946  0025                     ___lwdiv@counter:	
   947                           ; 1 bytes @ 0x5
   948                           
   949  0025                     UART_Write@timeout:	
   950                           ; 1 bytes @ 0x5
   951                           
   952                           
   953                           ; 4 bytes @ 0x5
   954  0025                     	ds	1
   955  0026                     ??_BAUDS_set:
   956  0026                     ?_PRESET_save:	
   957                           ; 1 bytes @ 0x6
   958                           
   959  0026                     PRESET_load@id:	
   960                           ; 1 bytes @ 0x6
   961                           
   962  0026                     ___awdiv@sign:	
   963                           ; 1 bytes @ 0x6
   964                           
   965  0026                     PRESET_save@pan:	
   966                           ; 1 bytes @ 0x6
   967                           
   968  0026                     ___lwdiv@quotient:	
   969                           ; 2 bytes @ 0x6
   970                           
   971                           
   972                           ; 2 bytes @ 0x6
   973  0026                     	ds	1
   974  0027                     PRESET_load@_addr:
   975  0027                     BAUDS_set@index:	
   976                           ; 1 bytes @ 0x7
   977                           
   978  0027                     ___awdiv@quotient:	
   979                           ; 1 bytes @ 0x7
   980                           
   981                           
   982                           ; 2 bytes @ 0x7
   983  0027                     	ds	1
   984  0028                     PRESET_save@tilt:
   985                           
   986                           ; 2 bytes @ 0x8
   987  0028                     	ds	1
   988  0029                     ??_UART_Write_Text_CRLF:
   989  0029                     ??_UART_Write_Text:	
   990                           ; 1 bytes @ 0x9
   991                           
   992  0029                     ??_SPEED_calc:	
   993                           ; 1 bytes @ 0x9
   994                           
   995  0029                     ?_print_val:	
   996                           ; 1 bytes @ 0x9
   997                           
   998  0029                     print_val@value:	
   999                           ; 1 bytes @ 0x9
  1000                           
  1001  0029                     UART_Write_Text@i:	
  1002                           ; 2 bytes @ 0x9
  1003                           
  1004  0029                     UART_Write_Text_CRLF@i:	
  1005                           ; 2 bytes @ 0x9
  1006                           
  1007                           
  1008                           ; 2 bytes @ 0x9
  1009  0029                     	ds	1
  1010  002A                     ??_PRESET_save:
  1011                           
  1012                           ; 1 bytes @ 0xA
  1013  002A                     	ds	1
  1014  002B                     ??_print_val:
  1015  002B                     SPEED_calc@speed:	
  1016                           ; 1 bytes @ 0xB
  1017                           
  1018  002B                     UART_Write_Text@text:	
  1019                           ; 1 bytes @ 0xB
  1020                           
  1021  002B                     UART_Write_Text_CRLF@text:	
  1022                           ; 1 bytes @ 0xB
  1023                           
  1024  002B                     print_val@val1:	
  1025                           ; 1 bytes @ 0xB
  1026                           
  1027                           
  1028                           ; 2 bytes @ 0xB
  1029  002B                     	ds	1
  1030  002C                     SPEED_calc@sp_calc:
  1031  002C                     PRESET_save@id:	
  1032                           ; 1 bytes @ 0xC
  1033                           
  1034                           
  1035                           ; 1 bytes @ 0xC
  1036  002C                     	ds	1
  1037  002D                     PRESET_save@_addr:
  1038  002D                     print_val@val10:	
  1039                           ; 1 bytes @ 0xD
  1040                           
  1041                           
  1042                           ; 2 bytes @ 0xD
  1043  002D                     	ds	2
  1044  002F                     print_val@val100:
  1045                           
  1046                           ; 2 bytes @ 0xF
  1047  002F                     	ds	2
  1048  0031                     print_val@val1000:
  1049                           
  1050                           ; 2 bytes @ 0x11
  1051  0031                     	ds	2
  1052  0033                     print_val@val10000:
  1053                           
  1054                           ; 2 bytes @ 0x13
  1055  0033                     	ds	2
  1056  0035                     ?_print_cnt:
  1057  0035                     print_cnt@_pan:	
  1058                           ; 1 bytes @ 0x15
  1059                           
  1060                           
  1061                           ; 2 bytes @ 0x15
  1062  0035                     	ds	2
  1063  0037                     print_cnt@_tilt:
  1064                           
  1065                           ; 2 bytes @ 0x17
  1066  0037                     	ds	2
  1067  0039                     ??_print_cnt:
  1068  0039                     ?_print_preset:	
  1069                           ; 1 bytes @ 0x19
  1070                           
  1071  0039                     ?_print_cmd_mov:	
  1072                           ; 1 bytes @ 0x19
  1073                           
  1074  0039                     print_preset@pan:	
  1075                           ; 1 bytes @ 0x19
  1076                           
  1077  0039                     print_cmd_mov@pan:	
  1078                           ; 2 bytes @ 0x19
  1079                           
  1080                           
  1081                           ; 2 bytes @ 0x19
  1082  0039                     	ds	2
  1083  003B                     print_preset@tilt:
  1084  003B                     print_cmd_mov@tilt:	
  1085                           ; 2 bytes @ 0x1B
  1086                           
  1087                           
  1088                           ; 2 bytes @ 0x1B
  1089  003B                     	ds	2
  1090  003D                     ??_print_cmd_mov:
  1091  003D                     print_preset@text:	
  1092                           ; 1 bytes @ 0x1D
  1093                           
  1094  003D                     print_cmd_mov@text:	
  1095                           ; 1 bytes @ 0x1D
  1096                           
  1097                           
  1098                           ; 1 bytes @ 0x1D
  1099  003D                     	ds	1
  1100  003E                     ??_print_preset:
  1101                           
  1102                           ; 1 bytes @ 0x1E
  1103  003E                     	ds	2
  1104  0040                     print_preset@preset_id_1:
  1105                           
  1106                           ; 1 bytes @ 0x20
  1107  0040                     	ds	1
  1108  0041                     print_preset@id:
  1109                           
  1110                           ; 1 bytes @ 0x21
  1111  0041                     	ds	1
  1112  0042                     print_preset@preset_id_10:
  1113                           
  1114                           ; 1 bytes @ 0x22
  1115  0042                     	ds	1
  1116  0043                     ??_main:
  1117                           
  1118                           ; 1 bytes @ 0x23
  1119  0043                     	ds	2
  1120  0045                     main@chksum_calc:
  1121                           
  1122                           ; 1 bytes @ 0x25
  1123  0045                     	ds	1
  1124  0046                     main@pan_tmp:
  1125                           
  1126                           ; 2 bytes @ 0x26
  1127  0046                     	ds	2
  1128  0048                     main@tilt_tmp:
  1129                           
  1130                           ; 2 bytes @ 0x28
  1131  0048                     	ds	2
  1132  004A                     main@pan_tmp_511:
  1133                           
  1134                           ; 2 bytes @ 0x2A
  1135  004A                     	ds	2
  1136  004C                     main@tilt_tmp_512:
  1137                           
  1138                           ; 2 bytes @ 0x2C
  1139  004C                     	ds	2
  1140  004E                     main@m:
  1141                           
  1142                           ; 1 bytes @ 0x2E
  1143  004E                     	ds	1
  1144  004F                     main@i:
  1145                           
  1146                           ; 1 bytes @ 0x2F
  1147  004F                     	ds	1
  1148                           
  1149                           	psect	maintext
  1150  0026                     __pmaintext:	
  1151 ;;
  1152 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1153 ;;
  1154 ;; *************** function _main *****************
  1155 ;; Defined at:
  1156 ;;		line 362 in file "main.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;		None
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;  tilt_tmp        2   44[BANK0 ] unsigned int 
  1161 ;;  pan_tmp         2   42[BANK0 ] unsigned int 
  1162 ;;  tilt_tmp        2   40[BANK0 ] unsigned int 
  1163 ;;  pan_tmp         2   38[BANK0 ] unsigned int 
  1164 ;;  m               1   46[BANK0 ] unsigned char 
  1165 ;;  chksum_calc     1   37[BANK0 ] unsigned char 
  1166 ;;  i               1   47[BANK0 ] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      void 
  1169 ;; Registers used:
  1170 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : B00/0
  1173 ;;		On exit  : B00/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1176 ;;      Params:         0       0       0       0
  1177 ;;      Locals:         0      11       0       0
  1178 ;;      Temps:          0       2       0       0
  1179 ;;      Totals:         0      13       0       0
  1180 ;;Total ram usage:       13 bytes
  1181 ;; Hardware stack levels required when called: 6
  1182 ;; This function calls:
  1183 ;;		_BAUDS_set
  1184 ;;		_MOTOR_Init
  1185 ;;		_PRESET_load
  1186 ;;		_PRESET_save
  1187 ;;		_SPEED_calc
  1188 ;;		_TIMER1_Init
  1189 ;;		_TIMER2_Init
  1190 ;;		_UART_Init
  1191 ;;		_UART_Write_Text
  1192 ;;		_UART_Write_Text_CRLF
  1193 ;;		_UC_Init
  1194 ;;		_delay_wdt
  1195 ;;		_print_cmd_mov
  1196 ;;		_print_cnt
  1197 ;;		_print_preset
  1198 ;; This function is called by:
  1199 ;;		Startup code after reset
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203  0026                     _main:	
  1204                           ;psect for function _main
  1205                           
  1206                           
  1207                           ;main.c: 363:     UC_Init();
  1208                           
  1209                           ;incstack = 0
  1210                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1211  0026  158A  25A1  118A   	fcall	_UC_Init
  1212                           
  1213                           ;main.c: 365:     UART_Init();
  1214  0029  118A  27B7  118A   	fcall	_UART_Init
  1215                           
  1216                           ;main.c: 367:     TIMER1_Init();
  1217  002C  158A  2549  118A   	fcall	_TIMER1_Init
  1218                           
  1219                           ;main.c: 369:     TIMER2_Init();
  1220  002F  158A  2569  118A   	fcall	_TIMER2_Init
  1221                           
  1222                           ;main.c: 371:     delay_wdt(500);
  1223  0032  30F4               	movlw	244
  1224  0033  00A0               	movwf	delay_wdt@_ms
  1225  0034  3001               	movlw	1
  1226  0035  00A1               	movwf	delay_wdt@_ms+1
  1227  0036  158A  25D1  118A   	fcall	_delay_wdt
  1228                           
  1229                           ;main.c: 373:     UART_Write_Text_CRLF("\r\n\r\nStart");
  1230  0039  3094               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1231  003A  158A  266A  118A   	fcall	_UART_Write_Text_CRLF
  1232                           
  1233                           ;main.c: 375:     UART_Write_Text_CRLF("Goto PAN and TILT Home");
  1234  003D  3029               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1235  003E  158A  266A  118A   	fcall	_UART_Write_Text_CRLF
  1236                           
  1237                           ;main.c: 377:     delay_wdt(50);
  1238  0041  3032               	movlw	50
  1239  0042  00A0               	movwf	delay_wdt@_ms
  1240  0043  3000               	movlw	0
  1241  0044  00A1               	movwf	delay_wdt@_ms+1
  1242  0045  158A  25D1  118A   	fcall	_delay_wdt
  1243                           
  1244                           ;main.c: 379:     MOTOR_Init();
  1245  0048  118A  26D9  118A   	fcall	_MOTOR_Init
  1246                           
  1247                           ;main.c: 381:     UART_Write_Text_CRLF("Waiting for commands");
  1248  004B  3040               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1249  004C                     L6:
  1250  004C  158A  266A  118A   	fcall	_UART_Write_Text_CRLF
  1251  004F  2B06               	goto	l262
  1252  0050                     l3601:
  1253                           
  1254                           ;main.c: 387:             buffer_ready[frame_index] = 0;
  1255  0050  0860               	movf	_frame_index,w
  1256  0051  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  1257  0052  0084               	movwf	4
  1258  0053  0180               	clrf	0
  1259                           
  1260                           ;main.c: 389:             for (uint8_t i = 0; i < 7; i++) {
  1261  0054  01CF               	clrf	main@i
  1262  0055                     l3609:
  1263                           
  1264                           ;main.c: 390:                 if (frame_index == 0) {
  1265  0055  0860               	movf	_frame_index,w
  1266  0056  1D03               	btfss	3,2
  1267  0057  285B               	goto	l3613
  1268                           
  1269                           ;main.c: 391:                     frame_data[i] = buffer_data0[i];
  1270  0058  084F               	movf	main@i,w
  1271  0059  3EC3               	addlw	(low (_buffer_data0| 0))& (0+255)
  1272  005A  2875               	goto	L4
  1273  005B                     l3613:	
  1274                           ;main.c: 392:                 } else if (frame_index == 1) {
  1275                           
  1276  005B  0360               	decf	_frame_index,w
  1277  005C  1D03               	btfss	3,2
  1278  005D  2861               	goto	l3617
  1279                           
  1280                           ;main.c: 393:                     frame_data[i] = buffer_data1[i];
  1281  005E  084F               	movf	main@i,w
  1282  005F  3EBC               	addlw	(low (_buffer_data1| 0))& (0+255)
  1283  0060  2875               	goto	L4
  1284  0061                     l3617:	
  1285                           ;main.c: 394:                 } else if (frame_index == 2) {
  1286                           
  1287  0061  3002               	movlw	2
  1288  0062  0660               	xorwf	_frame_index,w
  1289  0063  1D03               	btfss	3,2
  1290  0064  2868               	goto	l3621
  1291                           
  1292                           ;main.c: 395:                     frame_data[i] = buffer_data2[i];
  1293  0065  084F               	movf	main@i,w
  1294  0066  3EB5               	addlw	(low (_buffer_data2| 0))& (0+255)
  1295  0067  2875               	goto	L4
  1296  0068                     l3621:	
  1297                           ;main.c: 396:                 } else if (frame_index == 3) {
  1298                           
  1299  0068  3003               	movlw	3
  1300  0069  0660               	xorwf	_frame_index,w
  1301  006A  1D03               	btfss	3,2
  1302  006B  286F               	goto	l3625
  1303                           
  1304                           ;main.c: 397:                     frame_data[i] = buffer_data3[i];
  1305  006C  084F               	movf	main@i,w
  1306  006D  3EAE               	addlw	(low (_buffer_data3| 0))& (0+255)
  1307  006E  2875               	goto	L4
  1308  006F                     l3625:	
  1309                           ;main.c: 398:                 } else if (frame_index == 4) {
  1310                           
  1311  006F  3004               	movlw	4
  1312  0070  0660               	xorwf	_frame_index,w
  1313  0071  1D03               	btfss	3,2
  1314  0072  287D               	goto	l3629
  1315                           
  1316                           ;main.c: 399:                     frame_data[i] = buffer_data4[i];
  1317  0073  084F               	movf	main@i,w
  1318  0074  3EA7               	addlw	(low (_buffer_data4| 0))& (0+255)
  1319  0075                     L4:
  1320  0075  0084               	movwf	4
  1321  0076  0800               	movf	0,w
  1322  0077  00C3               	movwf	??_main
  1323  0078  084F               	movf	main@i,w
  1324  0079  3EA0               	addlw	(low (_frame_data| 0))& (0+255)
  1325  007A  0084               	movwf	4
  1326  007B  0843               	movf	??_main,w
  1327  007C  0080               	movwf	0
  1328  007D                     l3629:
  1329                           
  1330                           ;main.c: 403:             }
  1331  007D  3001               	movlw	1
  1332  007E  00C3               	movwf	??_main
  1333  007F  0843               	movf	??_main,w
  1334  0080  07CF               	addwf	main@i,f
  1335  0081  3007               	movlw	7
  1336  0082  024F               	subwf	main@i,w
  1337  0083  1C03               	skipc
  1338  0084  2855               	goto	l3609
  1339                           
  1340                           ;main.c: 405:             if (frame_data[0] == 0xFF) {
  1341  0085  1683               	bsf	3,5	;RP0=1, select bank1
  1342  0086  0A20               	incf	_frame_data^(0+128),w
  1343  0087  1D03               	btfss	3,2
  1344  0088  2B06               	goto	l262
  1345                           
  1346                           ;main.c: 406:                 uint8_t chksum_calc = 0;
  1347  0089  1283               	bcf	3,5	;RP0=0, select bank0
  1348  008A  01C5               	clrf	main@chksum_calc
  1349                           
  1350                           ;main.c: 408:                 for (uint8_t m = 1; m <= 5; m++) {
  1351  008B  01CE               	clrf	main@m
  1352  008C  0ACE               	incf	main@m,f
  1353  008D                     l3643:
  1354                           
  1355                           ;main.c: 409:                     chksum_calc += frame_data[m];
  1356  008D  084E               	movf	main@m,w
  1357  008E  3EA0               	addlw	(low (_frame_data| 0))& (0+255)
  1358  008F  0084               	movwf	4
  1359  0090  0800               	movf	0,w
  1360  0091  00C3               	movwf	??_main
  1361  0092  0843               	movf	??_main,w
  1362  0093  07C5               	addwf	main@chksum_calc,f
  1363                           
  1364                           ;main.c: 410:                 }
  1365  0094  3001               	movlw	1
  1366  0095  00C3               	movwf	??_main
  1367  0096  0843               	movf	??_main,w
  1368  0097  07CE               	addwf	main@m,f
  1369  0098  3006               	movlw	6
  1370  0099  024E               	subwf	main@m,w
  1371  009A  1C03               	skipc
  1372  009B  288D               	goto	l3643
  1373                           
  1374                           ;main.c: 412:                 if (chksum_calc == frame_data[6]) {
  1375  009C  1683               	bsf	3,5	;RP0=1, select bank1
  1376  009D  0826               	movf	(_frame_data^(0+128)+6),w
  1377  009E  1283               	bcf	3,5	;RP0=0, select bank0
  1378  009F  0645               	xorwf	main@chksum_calc,w
  1379  00A0  1D03               	skipz
  1380  00A1  2B06               	goto	l262
  1381                           
  1382                           ;main.c: 414:                     P_addr = frame_data[1];
  1383  00A2  1683               	bsf	3,5	;RP0=1, select bank1
  1384  00A3  0821               	movf	(_frame_data^(0+128)+1),w
  1385  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1386  00A5  00C3               	movwf	??_main
  1387  00A6  0843               	movf	??_main,w
  1388  00A7  00DE               	movwf	_P_addr
  1389                           
  1390                           ;main.c: 415:                     P_cmd1 = frame_data[2];
  1391  00A8  1683               	bsf	3,5	;RP0=1, select bank1
  1392  00A9  0822               	movf	(_frame_data^(0+128)+2),w
  1393  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1394  00AB  00C3               	movwf	??_main
  1395  00AC  0843               	movf	??_main,w
  1396  00AD  00DD               	movwf	_P_cmd1
  1397                           
  1398                           ;main.c: 416:                     P_cmd2 = frame_data[3];
  1399  00AE  1683               	bsf	3,5	;RP0=1, select bank1
  1400  00AF  0823               	movf	(_frame_data^(0+128)+3),w
  1401  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  1402  00B1  00C3               	movwf	??_main
  1403  00B2  0843               	movf	??_main,w
  1404  00B3  00DC               	movwf	_P_cmd2
  1405                           
  1406                           ;main.c: 417:                     P_dat1 = frame_data[4];
  1407  00B4  1683               	bsf	3,5	;RP0=1, select bank1
  1408  00B5  0824               	movf	(_frame_data^(0+128)+4),w
  1409  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1410  00B7  00C3               	movwf	??_main
  1411  00B8  0843               	movf	??_main,w
  1412  00B9  00DB               	movwf	_P_dat1
  1413                           
  1414                           ;main.c: 418:                     P_dat2 = frame_data[5];
  1415  00BA  1683               	bsf	3,5	;RP0=1, select bank1
  1416  00BB  0825               	movf	(_frame_data^(0+128)+5),w
  1417  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  1418  00BD  00C3               	movwf	??_main
  1419  00BE  0843               	movf	??_main,w
  1420  00BF  00DA               	movwf	_P_dat2
  1421                           
  1422                           ;main.c: 419:                     P_chksum = frame_data[6];
  1423  00C0  1683               	bsf	3,5	;RP0=1, select bank1
  1424  00C1  0826               	movf	(_frame_data^(0+128)+6),w
  1425  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  1426  00C3  00C3               	movwf	??_main
  1427  00C4  0843               	movf	??_main,w
  1428  00C5  1683               	bsf	3,5	;RP0=1, select bank1
  1429  00C6  00D0               	movwf	_P_chksum^(0+128)
  1430                           
  1431                           ;main.c: 421:                     response_type = 0x00;
  1432  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1433  00C8  01DF               	clrf	_response_type
  1434                           
  1435                           ;main.c: 424:                     if (P_addr == 0x01) {
  1436  00C9  035E               	decf	_P_addr,w
  1437  00CA  1D03               	btfss	3,2
  1438  00CB  2B06               	goto	l262
  1439                           
  1440                           ;main.c: 425:                         if ((P_cmd1 == 0xF0) && (P_cmd2 == 0x83) && (P_dat
      +                          1 == 0x00) && (P_dat2 == 0x01)) {
  1441  00CC  30F0               	movlw	240
  1442  00CD  065D               	xorwf	_P_cmd1,w
  1443  00CE  1D03               	btfss	3,2
  1444  00CF  28DF               	goto	l3667
  1445  00D0  3083               	movlw	131
  1446  00D1  065C               	xorwf	_P_cmd2,w
  1447  00D2  1D03               	btfss	3,2
  1448  00D3  28DF               	goto	l3667
  1449  00D4  085B               	movf	_P_dat1,w
  1450  00D5  1D03               	btfss	3,2
  1451  00D6  28DF               	goto	l3667
  1452  00D7  035A               	decf	_P_dat2,w
  1453  00D8  1D03               	btfss	3,2
  1454  00D9  28DF               	goto	l3667
  1455                           
  1456                           ;main.c: 426:                             UART_Write_Text_CRLF("REBOOT");
  1457  00DA  30B4               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1458  00DB  158A  266A  118A   	fcall	_UART_Write_Text_CRLF
  1459  00DE                     l281:	
  1460                           ;main.c: 428:                             while (1) {
  1461                           
  1462                           
  1463                           ;main.c: 430:                             }
  1464  00DE  28DE               	goto	l281
  1465  00DF                     l3667:
  1466  00DF  085D               	movf	_P_cmd1,w
  1467  00E0  1D03               	btfss	3,2
  1468  00E1  2934               	goto	l3699
  1469  00E2  3067               	movlw	103
  1470  00E3  065C               	xorwf	_P_cmd2,w
  1471  00E4  1D03               	btfss	3,2
  1472  00E5  2934               	goto	l3699
  1473  00E6  085B               	movf	_P_dat1,w
  1474  00E7  1D03               	btfss	3,2
  1475  00E8  2934               	goto	l3699
  1476                           
  1477                           ;main.c: 433:                             if (is_reboot == 1) {
  1478  00E9  0358               	decf	_is_reboot,w
  1479  00EA  1D03               	btfss	3,2
  1480  00EB  292E               	goto	l3697
  1481                           
  1482                           ;main.c: 434:                                 BAUDS_set(P_dat2);
  1483  00EC  085A               	movf	_P_dat2,w
  1484  00ED  158A  2540  118A   	fcall	_BAUDS_set
  1485                           
  1486                           ;main.c: 436:                                 UART_Write_Text("SET BAUD RATE");
  1487  00F0  3063               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1488  00F1  158A  25EA  118A   	fcall	_UART_Write_Text
  1489                           
  1490                           ;main.c: 438:                                 switch (P_dat2) {
  1491  00F4  2913               	goto	l3693
  1492  00F5                     l3679:
  1493                           
  1494                           ;main.c: 440:                                         UART_Write_Text_CRLF("2400");
  1495  00F5  30CD               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1496  00F6  158A  266A  118A   	fcall	_UART_Write_Text_CRLF
  1497                           
  1498                           ;main.c: 441:                                         break;
  1499  00F9  292C               	goto	l3695
  1500  00FA                     l3681:
  1501                           
  1502                           ;main.c: 443:                                         UART_Write_Text_CRLF("4800");
  1503  00FA  30D7               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1504  00FB  158A  266A  118A   	fcall	_UART_Write_Text_CRLF
  1505                           
  1506                           ;main.c: 444:                                         break;
  1507  00FE  292C               	goto	l3695
  1508  00FF                     l3683:
  1509                           
  1510                           ;main.c: 446:                                         UART_Write_Text_CRLF("19200");
  1511  00FF  30BB               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1512  0100  158A  266A  118A   	fcall	_UART_Write_Text_CRLF
  1513                           
  1514                           ;main.c: 447:                                         break;
  1515  0103  292C               	goto	l3695
  1516  0104                     l3685:
  1517                           
  1518                           ;main.c: 449:                                         UART_Write_Text_CRLF("38400");
  1519  0104  30C1               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1520  0105  158A  266A  118A   	fcall	_UART_Write_Text_CRLF
  1521                           
  1522                           ;main.c: 450:                                         break;
  1523  0108  292C               	goto	l3695
  1524  0109                     l3687:
  1525                           
  1526                           ;main.c: 452:                                         UART_Write_Text_CRLF("115200");
  1527  0109  30AD               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1528  010A  158A  266A  118A   	fcall	_UART_Write_Text_CRLF
  1529                           
  1530                           ;main.c: 453:                                         break;
  1531  010D  292C               	goto	l3695
  1532  010E                     l3689:
  1533                           
  1534                           ;main.c: 456:                                         UART_Write_Text_CRLF("9600");
  1535  010E  30D2               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1536  010F  158A  266A  118A   	fcall	_UART_Write_Text_CRLF
  1537                           
  1538                           ;main.c: 457:                                         break;
  1539  0112  292C               	goto	l3695
  1540  0113                     l3693:
  1541  0113  085A               	movf	_P_dat2,w
  1542  0114  00C3               	movwf	??_main
  1543  0115  01C4               	clrf	??_main+1
  1544                           
  1545                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1546                           ; Switch size 1, requested type "simple"
  1547                           ; Number of cases is 1, Range of values is 0 to 0
  1548                           ; switch strategies available:
  1549                           ; Name         Instructions Cycles
  1550                           ; simple_byte            4     3 (average)
  1551                           ; direct_byte            9     7 (fixed)
  1552                           ; jumptable            260     6 (fixed)
  1553                           ;	Chosen strategy is simple_byte
  1554  0116  0844               	movf	??_main+1,w
  1555  0117  3A00               	xorlw	0	; case 0
  1556  0118  1903               	skipnz
  1557  0119  291B               	goto	l3999
  1558  011A  290E               	goto	l3689
  1559  011B                     l3999:
  1560                           
  1561                           ; Switch size 1, requested type "simple"
  1562                           ; Number of cases is 5, Range of values is 0 to 5
  1563                           ; switch strategies available:
  1564                           ; Name         Instructions Cycles
  1565                           ; simple_byte           16     9 (average)
  1566                           ; direct_byte           19     7 (fixed)
  1567                           ; jumptable            260     6 (fixed)
  1568                           ;	Chosen strategy is simple_byte
  1569  011B  0843               	movf	??_main,w
  1570  011C  3A00               	xorlw	0	; case 0
  1571  011D  1903               	skipnz
  1572  011E  28F5               	goto	l3679
  1573  011F  3A01               	xorlw	1	; case 1
  1574  0120  1903               	skipnz
  1575  0121  28FA               	goto	l3681
  1576  0122  3A02               	xorlw	2	; case 3
  1577  0123  1903               	skipnz
  1578  0124  28FF               	goto	l3683
  1579  0125  3A07               	xorlw	7	; case 4
  1580  0126  1903               	skipnz
  1581  0127  2904               	goto	l3685
  1582  0128  3A01               	xorlw	1	; case 5
  1583  0129  1903               	skipnz
  1584  012A  2909               	goto	l3687
  1585  012B  290E               	goto	l3689
  1586  012C                     l3695:
  1587                           
  1588                           ;main.c: 460:                                 UART_Write_Text("\r\nPLEASE ");
  1589  012C  308A               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1590  012D  292F               	goto	L5
  1591  012E                     l3697:	
  1592                           ;main.c: 461:                             } else {
  1593                           
  1594                           
  1595                           ;main.c: 462:                                 UART_Write_Text("\r\nNEED ");
  1596  012E  309E               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1597  012F                     L5:
  1598  012F  158A  25EA  118A   	fcall	_UART_Write_Text
  1599                           
  1600                           ;main.c: 465:                             UART_Write_Text_CRLF("REBOOT");
  1601                           
  1602                           ;main.c: 463:                             }
  1603  0132  30B4               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1604  0133  284C               	goto	L6
  1605  0134                     l3699:	
  1606                           ;main.c: 466:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x00) &&
      +                           (P_dat1 == 0x00) && (P_dat2 == 0x00)) {
  1607                           
  1608  0134  085D               	movf	_P_cmd1,w
  1609  0135  1D03               	btfss	3,2
  1610  0136  2957               	goto	l3717
  1611  0137  085C               	movf	_P_cmd2,w
  1612  0138  1D03               	btfss	3,2
  1613  0139  2957               	goto	l3717
  1614  013A  085B               	movf	_P_dat1,w
  1615  013B  1D03               	btfss	3,2
  1616  013C  2957               	goto	l3717
  1617  013D  085A               	movf	_P_dat2,w
  1618  013E  1D03               	btfss	3,2
  1619  013F  2957               	goto	l3717
  1620                           
  1621                           ;main.c: 467:                             pan_enabled = 0;
  1622  0140  01EA               	clrf	_pan_enabled	;volatile
  1623                           
  1624                           ;main.c: 468:                             tilt_enabled = 0;
  1625  0141  01E7               	clrf	_tilt_enabled	;volatile
  1626                           
  1627                           ;main.c: 469:                             preset_pan_enabled = 0;
  1628  0142  01EC               	clrf	_preset_pan_enabled	;volatile
  1629                           
  1630                           ;main.c: 470:                             preset_tilt_enabled = 0;
  1631  0143  01EB               	clrf	_preset_tilt_enabled	;volatile
  1632                           
  1633                           ;main.c: 472:                             response_type = 0x01;
  1634  0144  01DF               	clrf	_response_type
  1635  0145  0ADF               	incf	_response_type,f
  1636                           
  1637                           ;main.c: 473:                             UART_Write_Text("STOP (");
  1638  0146  30A6               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1639  0147  158A  25EA  118A   	fcall	_UART_Write_Text
  1640                           
  1641                           ;main.c: 474:                             print_cnt(pan_counter, tilt_counter);
  1642  014A  0857               	movf	_pan_counter+1,w	;volatile
  1643  014B  00B6               	movwf	print_cnt@_pan+1
  1644  014C  0856               	movf	_pan_counter,w	;volatile
  1645  014D  00B5               	movwf	print_cnt@_pan
  1646  014E  0855               	movf	_tilt_counter+1,w	;volatile
  1647  014F  00B8               	movwf	print_cnt@_tilt+1
  1648  0150  0854               	movf	_tilt_counter,w	;volatile
  1649  0151  00B7               	movwf	print_cnt@_tilt
  1650  0152  118A  24EC  118A   	fcall	_print_cnt
  1651                           
  1652                           ;main.c: 475:                             UART_Write_Text_CRLF(")");
  1653  0155  30EC               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1654  0156  284C               	goto	L6
  1655  0157                     l3717:	
  1656                           ;main.c: 477:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x03) &&
      +                           (P_dat1 == 0x00)) {
  1657                           
  1658  0157  085D               	movf	_P_cmd1,w
  1659  0158  1D03               	btfss	3,2
  1660  0159  2985               	goto	l3731
  1661  015A  3003               	movlw	3
  1662  015B  065C               	xorwf	_P_cmd2,w
  1663  015C  1D03               	btfss	3,2
  1664  015D  2985               	goto	l3731
  1665  015E  085B               	movf	_P_dat1,w
  1666  015F  1D03               	btfss	3,2
  1667  0160  2985               	goto	l3731
  1668                           
  1669                           ;main.c: 478:                             preset_id = P_dat2;
  1670  0161  085A               	movf	_P_dat2,w
  1671  0162  00C3               	movwf	??_main
  1672  0163  0843               	movf	??_main,w
  1673  0164  00D9               	movwf	_preset_id
  1674                           
  1675                           ;main.c: 479:                             PRESET_save(preset_id, pan_counter, tilt_count
      +                          er);
  1676  0165  0857               	movf	_pan_counter+1,w	;volatile
  1677  0166  00A7               	movwf	PRESET_save@pan+1
  1678  0167  0856               	movf	_pan_counter,w	;volatile
  1679  0168  00A6               	movwf	PRESET_save@pan
  1680  0169  0855               	movf	_tilt_counter+1,w	;volatile
  1681  016A  00A9               	movwf	PRESET_save@tilt+1
  1682  016B  0854               	movf	_tilt_counter,w	;volatile
  1683  016C  00A8               	movwf	PRESET_save@tilt
  1684  016D  0859               	movf	_preset_id,w
  1685  016E  158A  26F6  118A   	fcall	_PRESET_save
  1686                           
  1687                           ;main.c: 480:                             response_type = 0x01;
  1688  0171  1283               	bcf	3,5	;RP0=0, select bank0
  1689  0172  01DF               	clrf	_response_type
  1690  0173  0ADF               	incf	_response_type,f
  1691                           
  1692                           ;main.c: 482:                             print_preset(preset_id, pan_counter, tilt_coun
      +                          ter, "SET PRESET ");
  1693  0174  0857               	movf	_pan_counter+1,w	;volatile
  1694  0175  00BA               	movwf	print_preset@pan+1
  1695  0176  0856               	movf	_pan_counter,w	;volatile
  1696  0177  00B9               	movwf	print_preset@pan
  1697  0178  0855               	movf	_tilt_counter+1,w	;volatile
  1698  0179  00BC               	movwf	print_preset@tilt+1
  1699  017A  0854               	movf	_tilt_counter,w	;volatile
  1700  017B  00BB               	movwf	print_preset@tilt
  1701  017C  307E               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  1702  017D  00C3               	movwf	??_main
  1703  017E  0843               	movf	??_main,w
  1704  017F  00BD               	movwf	print_preset@text
  1705  0180  0859               	movf	_preset_id,w
  1706  0181  158A  276A  118A   	fcall	_print_preset
  1707                           
  1708                           ;main.c: 483:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x05) &&
      +                           (P_dat1 == 0x00)) {
  1709  0184  2B06               	goto	l262
  1710  0185                     l3731:
  1711  0185  085D               	movf	_P_cmd1,w
  1712  0186  1D03               	btfss	3,2
  1713  0187  29CB               	goto	l3755
  1714  0188  3005               	movlw	5
  1715  0189  065C               	xorwf	_P_cmd2,w
  1716  018A  1D03               	btfss	3,2
  1717  018B  29CB               	goto	l3755
  1718  018C  085B               	movf	_P_dat1,w
  1719  018D  1D03               	btfss	3,2
  1720  018E  29CB               	goto	l3755
  1721                           
  1722                           ;main.c: 484:                             preset_id = P_dat2;
  1723  018F  085A               	movf	_P_dat2,w
  1724  0190  00C3               	movwf	??_main
  1725  0191  0843               	movf	??_main,w
  1726  0192  00D9               	movwf	_preset_id
  1727                           
  1728                           ;main.c: 485:                             PRESET_save(preset_id, 0xFFFF, 0xFFFF);
  1729  0193  30FF               	movlw	255
  1730  0194  00A6               	movwf	PRESET_save@pan
  1731  0195  30FF               	movlw	255
  1732  0196  00A7               	movwf	PRESET_save@pan+1
  1733  0197  30FF               	movlw	255
  1734  0198  00A8               	movwf	PRESET_save@tilt
  1735  0199  30FF               	movlw	255
  1736  019A  00A9               	movwf	PRESET_save@tilt+1
  1737  019B  0859               	movf	_preset_id,w
  1738  019C  158A  26F6  118A   	fcall	_PRESET_save
  1739                           
  1740                           ;main.c: 487:                             uint16_t pan_tmp = 0;
  1741  019F  1283               	bcf	3,5	;RP0=0, select bank0
  1742  01A0  01C6               	clrf	main@pan_tmp
  1743  01A1  01C7               	clrf	main@pan_tmp+1
  1744                           
  1745                           ;main.c: 488:                             uint16_t tilt_tmp = 0;
  1746  01A2  01C8               	clrf	main@tilt_tmp
  1747  01A3  01C9               	clrf	main@tilt_tmp+1
  1748                           
  1749                           ;main.c: 489:                             PRESET_load(preset_id, &pan_tmp, &tilt_tmp);
  1750  01A4  3046               	movlw	(low (main@pan_tmp| 0))& (0+255)
  1751  01A5  00C3               	movwf	??_main
  1752  01A6  0843               	movf	??_main,w
  1753  01A7  00A2               	movwf	PRESET_load@pan
  1754  01A8  3048               	movlw	(low (main@tilt_tmp| 0))& (0+255)
  1755  01A9  00C4               	movwf	??_main+1
  1756  01AA  0844               	movf	??_main+1,w
  1757  01AB  00A3               	movwf	PRESET_load@tilt
  1758  01AC  0859               	movf	_preset_id,w
  1759  01AD  158A  27A9  118A   	fcall	_PRESET_load
  1760                           
  1761                           ;main.c: 490:                             pan_goto = pan_tmp;
  1762  01B0  0847               	movf	main@pan_tmp+1,w
  1763  01B1  00D3               	movwf	_pan_goto+1	;volatile
  1764  01B2  0846               	movf	main@pan_tmp,w
  1765  01B3  00D2               	movwf	_pan_goto	;volatile
  1766                           
  1767                           ;main.c: 491:                             tilt_goto = tilt_tmp;
  1768  01B4  0849               	movf	main@tilt_tmp+1,w
  1769  01B5  00D1               	movwf	_tilt_goto+1	;volatile
  1770  01B6  0848               	movf	main@tilt_tmp,w
  1771  01B7  00D0               	movwf	_tilt_goto	;volatile
  1772                           
  1773                           ;main.c: 493:                             response_type = 0x01;
  1774  01B8  01DF               	clrf	_response_type
  1775  01B9  0ADF               	incf	_response_type,f
  1776                           
  1777                           ;main.c: 495:                             print_preset(preset_id, pan_goto, tilt_goto, "
      +                          CLEAR PRESET ");
  1778  01BA  0853               	movf	_pan_goto+1,w	;volatile
  1779  01BB  00BA               	movwf	print_preset@pan+1
  1780  01BC  0852               	movf	_pan_goto,w	;volatile
  1781  01BD  00B9               	movwf	print_preset@pan
  1782  01BE  0851               	movf	_tilt_goto+1,w	;volatile
  1783  01BF  00BC               	movwf	print_preset@tilt+1
  1784  01C0  0850               	movf	_tilt_goto,w	;volatile
  1785  01C1  00BB               	movwf	print_preset@tilt
  1786  01C2  3055               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  1787  01C3  00C3               	movwf	??_main
  1788  01C4  0843               	movf	??_main,w
  1789  01C5  00BD               	movwf	print_preset@text
  1790  01C6  0859               	movf	_preset_id,w
  1791  01C7  158A  276A  118A   	fcall	_print_preset
  1792                           
  1793                           ;main.c: 496:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x07) &&
      +                           (P_dat1 == 0x00)) {
  1794  01CA  2B06               	goto	l262
  1795  01CB                     l3755:
  1796  01CB  085D               	movf	_P_cmd1,w
  1797  01CC  1D03               	btfss	3,2
  1798  01CD  2A70               	goto	l303
  1799  01CE  3007               	movlw	7
  1800  01CF  065C               	xorwf	_P_cmd2,w
  1801  01D0  1D03               	btfss	3,2
  1802  01D1  2A70               	goto	l303
  1803  01D2  085B               	movf	_P_dat1,w
  1804  01D3  1D03               	btfss	3,2
  1805  01D4  2A70               	goto	l303
  1806                           
  1807                           ;main.c: 497:                             preset_id = P_dat2;
  1808  01D5  085A               	movf	_P_dat2,w
  1809  01D6  00C3               	movwf	??_main
  1810  01D7  0843               	movf	??_main,w
  1811  01D8  00D9               	movwf	_preset_id
  1812                           
  1813                           ;main.c: 499:                             uint16_t pan_tmp = 0;
  1814  01D9  01CA               	clrf	main@pan_tmp_511
  1815  01DA  01CB               	clrf	main@pan_tmp_511+1
  1816                           
  1817                           ;main.c: 500:                             uint16_t tilt_tmp = 0;
  1818  01DB  01CC               	clrf	main@tilt_tmp_512
  1819  01DC  01CD               	clrf	main@tilt_tmp_512+1
  1820                           
  1821                           ;main.c: 501:                             PRESET_load(preset_id, &pan_tmp, &tilt_tmp);
  1822  01DD  304A               	movlw	(low (main@pan_tmp_511| 0))& (0+255)
  1823  01DE  00C3               	movwf	??_main
  1824  01DF  0843               	movf	??_main,w
  1825  01E0  00A2               	movwf	PRESET_load@pan
  1826  01E1  304C               	movlw	(low (main@tilt_tmp_512| 0))& (0+255)
  1827  01E2  00C4               	movwf	??_main+1
  1828  01E3  0844               	movf	??_main+1,w
  1829  01E4  00A3               	movwf	PRESET_load@tilt
  1830  01E5  0859               	movf	_preset_id,w
  1831  01E6  158A  27A9  118A   	fcall	_PRESET_load
  1832                           
  1833                           ;main.c: 502:                             pan_goto = pan_tmp;
  1834  01E9  084B               	movf	main@pan_tmp_511+1,w
  1835  01EA  00D3               	movwf	_pan_goto+1	;volatile
  1836  01EB  084A               	movf	main@pan_tmp_511,w
  1837  01EC  00D2               	movwf	_pan_goto	;volatile
  1838                           
  1839                           ;main.c: 503:                             tilt_goto = tilt_tmp;
  1840  01ED  084D               	movf	main@tilt_tmp_512+1,w
  1841  01EE  00D1               	movwf	_tilt_goto+1	;volatile
  1842  01EF  084C               	movf	main@tilt_tmp_512,w
  1843  01F0  00D0               	movwf	_tilt_goto	;volatile
  1844                           
  1845                           ;main.c: 505:                             preset_pan_enabled = 1;
  1846  01F1  3001               	movlw	1
  1847  01F2  00C3               	movwf	??_main
  1848  01F3  0843               	movf	??_main,w
  1849  01F4  00EC               	movwf	_preset_pan_enabled	;volatile
  1850                           
  1851                           ;main.c: 506:                             preset_pan_enabled_old = 0;
  1852  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1853  01F6  01D5               	clrf	_preset_pan_enabled_old^(0+128)	;volatile
  1854                           
  1855                           ;main.c: 508:                             pan_speed = 0x32;
  1856  01F7  3032               	movlw	50
  1857  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1858  01F9  00C3               	movwf	??_main
  1859  01FA  0843               	movf	??_main,w
  1860  01FB  00E8               	movwf	_pan_speed	;volatile
  1861                           
  1862                           ;main.c: 509:                             timer1_pan_ref = SPEED_calc(pan_speed);
  1863  01FC  0868               	movf	_pan_speed,w	;volatile
  1864  01FD  158A  268E  118A   	fcall	_SPEED_calc
  1865  0200  00C3               	movwf	??_main
  1866  0201  0843               	movf	??_main,w
  1867  0202  00E2               	movwf	_timer1_pan_ref	;volatile
  1868                           
  1869                           ;main.c: 510:                             pan_enabled = 1;
  1870  0203  3001               	movlw	1
  1871  0204  00C3               	movwf	??_main
  1872  0205  0843               	movf	??_main,w
  1873  0206  00EA               	movwf	_pan_enabled	;volatile
  1874                           
  1875                           ;main.c: 512:                             if (pan_goto < 11700) {
  1876  0207  302D               	movlw	45
  1877  0208  0253               	subwf	_pan_goto+1,w	;volatile
  1878  0209  30B4               	movlw	180
  1879  020A  1903               	skipnz
  1880  020B  0252               	subwf	_pan_goto,w	;volatile
  1881  020C  1803               	skipnc
  1882  020D  2A25               	goto	l3793
  1883                           
  1884                           ;main.c: 513:                                 if (pan_goto > pan_counter) {
  1885  020E  0853               	movf	_pan_goto+1,w	;volatile
  1886  020F  0257               	subwf	_pan_counter+1,w	;volatile
  1887  0210  1D03               	skipz
  1888  0211  2A14               	goto	u3675
  1889  0212  0852               	movf	_pan_goto,w	;volatile
  1890  0213  0256               	subwf	_pan_counter,w	;volatile
  1891  0214                     u3675:
  1892  0214  1803               	skipnc
  1893  0215  2A18               	goto	l3789
  1894                           
  1895                           ;main.c: 514:                                     pan_direction = 0;
  1896  0216  01E9               	clrf	_pan_direction	;volatile
  1897                           
  1898                           ;main.c: 515:                                 } else if (pan_goto < pan_counter) {
  1899  0217  2A27               	goto	l3797
  1900  0218                     l3789:
  1901  0218  0857               	movf	_pan_counter+1,w	;volatile
  1902  0219  0253               	subwf	_pan_goto+1,w	;volatile
  1903  021A  1D03               	skipz
  1904  021B  2A1E               	goto	u3685
  1905  021C  0856               	movf	_pan_counter,w	;volatile
  1906  021D  0252               	subwf	_pan_goto,w	;volatile
  1907  021E                     u3685:
  1908  021E  1803               	skipnc
  1909  021F  2A25               	goto	l3793
  1910                           
  1911                           ;main.c: 516:                                     pan_direction = 1;
  1912  0220  3001               	movlw	1
  1913  0221  00C3               	movwf	??_main
  1914  0222  0843               	movf	??_main,w
  1915  0223  00E9               	movwf	_pan_direction	;volatile
  1916                           
  1917                           ;main.c: 517:                                 } else {
  1918  0224  2A27               	goto	l3797
  1919  0225                     l3793:
  1920                           
  1921                           ;main.c: 518:                                     preset_pan_enabled = 0;
  1922  0225  01EC               	clrf	_preset_pan_enabled	;volatile
  1923                           
  1924                           ;main.c: 519:                                     pan_enabled = 0;
  1925  0226  01EA               	clrf	_pan_enabled	;volatile
  1926  0227                     l3797:
  1927                           
  1928                           ;main.c: 526:                             preset_tilt_enabled = 1;
  1929  0227  3001               	movlw	1
  1930  0228  00C3               	movwf	??_main
  1931  0229  0843               	movf	??_main,w
  1932  022A  00EB               	movwf	_preset_tilt_enabled	;volatile
  1933                           
  1934                           ;main.c: 527:                             preset_tilt_enabled_old = 0;
  1935  022B  1683               	bsf	3,5	;RP0=1, select bank1
  1936  022C  01D4               	clrf	_preset_tilt_enabled_old^(0+128)	;volatile
  1937                           
  1938                           ;main.c: 529:                             tilt_speed = 0x32;
  1939  022D  3032               	movlw	50
  1940  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1941  022F  00C3               	movwf	??_main
  1942  0230  0843               	movf	??_main,w
  1943  0231  00E5               	movwf	_tilt_speed	;volatile
  1944                           
  1945                           ;main.c: 530:                             timer1_tilt_ref = SPEED_calc(tilt_speed);
  1946  0232  0865               	movf	_tilt_speed,w	;volatile
  1947  0233  158A  268E  118A   	fcall	_SPEED_calc
  1948  0236  00C3               	movwf	??_main
  1949  0237  0843               	movf	??_main,w
  1950  0238  00E1               	movwf	_timer1_tilt_ref	;volatile
  1951                           
  1952                           ;main.c: 531:                             tilt_enabled = 1;
  1953  0239  3001               	movlw	1
  1954  023A  00C3               	movwf	??_main
  1955  023B  0843               	movf	??_main,w
  1956  023C  00E7               	movwf	_tilt_enabled	;volatile
  1957                           
  1958                           ;main.c: 533:                             if (tilt_goto < 2300) {
  1959  023D  3008               	movlw	8
  1960  023E  0251               	subwf	_tilt_goto+1,w	;volatile
  1961  023F  30FC               	movlw	252
  1962  0240  1903               	skipnz
  1963  0241  0250               	subwf	_tilt_goto,w	;volatile
  1964  0242  1803               	skipnc
  1965  0243  2A5B               	goto	l3815
  1966                           
  1967                           ;main.c: 534:                                 if (tilt_goto > tilt_counter) {
  1968  0244  0851               	movf	_tilt_goto+1,w	;volatile
  1969  0245  0255               	subwf	_tilt_counter+1,w	;volatile
  1970  0246  1D03               	skipz
  1971  0247  2A4A               	goto	u3705
  1972  0248  0850               	movf	_tilt_goto,w	;volatile
  1973  0249  0254               	subwf	_tilt_counter,w	;volatile
  1974  024A                     u3705:
  1975  024A  1803               	skipnc
  1976  024B  2A4E               	goto	l3811
  1977                           
  1978                           ;main.c: 535:                                     tilt_direction = 0;
  1979  024C  01E6               	clrf	_tilt_direction	;volatile
  1980                           
  1981                           ;main.c: 536:                                 } else if (tilt_goto < tilt_counter) {
  1982  024D  2A5D               	goto	l3819
  1983  024E                     l3811:
  1984  024E  0855               	movf	_tilt_counter+1,w	;volatile
  1985  024F  0251               	subwf	_tilt_goto+1,w	;volatile
  1986  0250  1D03               	skipz
  1987  0251  2A54               	goto	u3715
  1988  0252  0854               	movf	_tilt_counter,w	;volatile
  1989  0253  0250               	subwf	_tilt_goto,w	;volatile
  1990  0254                     u3715:
  1991  0254  1803               	skipnc
  1992  0255  2A5B               	goto	l3815
  1993                           
  1994                           ;main.c: 537:                                     tilt_direction = 1;
  1995  0256  3001               	movlw	1
  1996  0257  00C3               	movwf	??_main
  1997  0258  0843               	movf	??_main,w
  1998  0259  00E6               	movwf	_tilt_direction	;volatile
  1999                           
  2000                           ;main.c: 538:                                 } else {
  2001  025A  2A5D               	goto	l3819
  2002  025B                     l3815:
  2003                           
  2004                           ;main.c: 539:                                     preset_tilt_enabled = 0;
  2005  025B  01EB               	clrf	_preset_tilt_enabled	;volatile
  2006                           
  2007                           ;main.c: 540:                                     tilt_enabled = 0;
  2008  025C  01E7               	clrf	_tilt_enabled	;volatile
  2009  025D                     l3819:
  2010                           
  2011                           ;main.c: 547:                             response_type = 0x01;
  2012  025D  01DF               	clrf	_response_type
  2013  025E  0ADF               	incf	_response_type,f
  2014                           
  2015                           ;main.c: 549:                             print_preset(preset_id, pan_goto, tilt_goto, "
      +                          GOTO PRESET ");
  2016  025F  0853               	movf	_pan_goto+1,w	;volatile
  2017  0260  00BA               	movwf	print_preset@pan+1
  2018  0261  0852               	movf	_pan_goto,w	;volatile
  2019  0262  00B9               	movwf	print_preset@pan
  2020  0263  0851               	movf	_tilt_goto+1,w	;volatile
  2021  0264  00BC               	movwf	print_preset@tilt+1
  2022  0265  0850               	movf	_tilt_goto,w	;volatile
  2023  0266  00BB               	movwf	print_preset@tilt
  2024  0267  3071               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  2025  0268  00C3               	movwf	??_main
  2026  0269  0843               	movf	??_main,w
  2027  026A  00BD               	movwf	print_preset@text
  2028  026B  0859               	movf	_preset_id,w
  2029  026C  158A  276A  118A   	fcall	_print_preset
  2030                           
  2031                           ;main.c: 550:                         } else {
  2032  026F  2B06               	goto	l262
  2033  0270                     l303:
  2034                           
  2035                           ;main.c: 551:                             if ((P_cmd2 & 0x04) == 0x04) {
  2036  0270  1D5C               	btfss	_P_cmd2,2
  2037  0271  2A91               	goto	l317
  2038                           
  2039                           ;main.c: 552:                                 pan_speed = P_dat1;
  2040  0272  085B               	movf	_P_dat1,w
  2041  0273  00C3               	movwf	??_main
  2042  0274  0843               	movf	??_main,w
  2043  0275  00E8               	movwf	_pan_speed	;volatile
  2044                           
  2045                           ;main.c: 553:                                 timer1_pan_ref = SPEED_calc(pan_speed);
  2046  0276  0868               	movf	_pan_speed,w	;volatile
  2047  0277  158A  268E  118A   	fcall	_SPEED_calc
  2048  027A  00C3               	movwf	??_main
  2049  027B  0843               	movf	??_main,w
  2050  027C  00E2               	movwf	_timer1_pan_ref	;volatile
  2051                           
  2052                           ;main.c: 554:                                 pan_direction = 0;
  2053  027D  01E9               	clrf	_pan_direction	;volatile
  2054                           
  2055                           ;main.c: 555:                                 pan_enabled = 1;
  2056  027E  3001               	movlw	1
  2057  027F  00C3               	movwf	??_main
  2058  0280  0843               	movf	??_main,w
  2059  0281  00EA               	movwf	_pan_enabled	;volatile
  2060                           
  2061                           ;main.c: 557:                                 preset_pan_enabled = 0;
  2062  0282  01EC               	clrf	_preset_pan_enabled	;volatile
  2063                           
  2064                           ;main.c: 558:                                 preset_tilt_enabled = 0;
  2065  0283  01EB               	clrf	_preset_tilt_enabled	;volatile
  2066                           
  2067                           ;main.c: 560:                                 response_type = 0x01;
  2068  0284  01DF               	clrf	_response_type
  2069  0285  0ADF               	incf	_response_type,f
  2070                           
  2071                           ;main.c: 561:                                 is_reboot = 0;
  2072  0286  01D8               	clrf	_is_reboot
  2073                           
  2074                           ;main.c: 563:                                 print_cmd_mov("LEFT", pan_counter, tilt_co
      +                          unter);
  2075  0287  0857               	movf	_pan_counter+1,w	;volatile
  2076  0288  00BA               	movwf	print_cmd_mov@pan+1
  2077  0289  0856               	movf	_pan_counter,w	;volatile
  2078  028A  00B9               	movwf	print_cmd_mov@pan
  2079  028B  0855               	movf	_tilt_counter+1,w	;volatile
  2080  028C  00BC               	movwf	print_cmd_mov@tilt+1
  2081  028D  0854               	movf	_tilt_counter,w	;volatile
  2082  028E  00BB               	movwf	print_cmd_mov@tilt
  2083  028F  30E1               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  2084  0290  2AB4               	goto	L7
  2085  0291                     l317:	
  2086                           ;main.c: 564:                             } else if ((P_cmd2 & 0x02) == 0x02) {
  2087                           
  2088  0291  1CDC               	btfss	_P_cmd2,1
  2089  0292  2AB7               	goto	l3859
  2090                           
  2091                           ;main.c: 565:                                 pan_speed = P_dat1;
  2092  0293  085B               	movf	_P_dat1,w
  2093  0294  00C3               	movwf	??_main
  2094  0295  0843               	movf	??_main,w
  2095  0296  00E8               	movwf	_pan_speed	;volatile
  2096                           
  2097                           ;main.c: 566:                                 timer1_pan_ref = SPEED_calc(pan_speed);
  2098  0297  0868               	movf	_pan_speed,w	;volatile
  2099  0298  158A  268E  118A   	fcall	_SPEED_calc
  2100  029B  00C3               	movwf	??_main
  2101  029C  0843               	movf	??_main,w
  2102  029D  00E2               	movwf	_timer1_pan_ref	;volatile
  2103                           
  2104                           ;main.c: 567:                                 pan_direction = 1;
  2105  029E  3001               	movlw	1
  2106  029F  00C3               	movwf	??_main
  2107  02A0  0843               	movf	??_main,w
  2108  02A1  00E9               	movwf	_pan_direction	;volatile
  2109                           
  2110                           ;main.c: 568:                                 pan_enabled = 1;
  2111  02A2  3001               	movlw	1
  2112  02A3  00C3               	movwf	??_main
  2113  02A4  0843               	movf	??_main,w
  2114  02A5  00EA               	movwf	_pan_enabled	;volatile
  2115                           
  2116                           ;main.c: 570:                                 preset_pan_enabled = 0;
  2117  02A6  01EC               	clrf	_preset_pan_enabled	;volatile
  2118                           
  2119                           ;main.c: 571:                                 preset_tilt_enabled = 0;
  2120  02A7  01EB               	clrf	_preset_tilt_enabled	;volatile
  2121                           
  2122                           ;main.c: 573:                                 response_type = 0x01;
  2123  02A8  01DF               	clrf	_response_type
  2124  02A9  0ADF               	incf	_response_type,f
  2125                           
  2126                           ;main.c: 574:                                 is_reboot = 0;
  2127  02AA  01D8               	clrf	_is_reboot
  2128                           
  2129                           ;main.c: 576:                                 print_cmd_mov("RIGHT", pan_counter, tilt_c
      +                          ounter);
  2130  02AB  0857               	movf	_pan_counter+1,w	;volatile
  2131  02AC  00BA               	movwf	print_cmd_mov@pan+1
  2132  02AD  0856               	movf	_pan_counter,w	;volatile
  2133  02AE  00B9               	movwf	print_cmd_mov@pan
  2134  02AF  0855               	movf	_tilt_counter+1,w	;volatile
  2135  02B0  00BC               	movwf	print_cmd_mov@tilt+1
  2136  02B1  0854               	movf	_tilt_counter,w	;volatile
  2137  02B2  00BB               	movwf	print_cmd_mov@tilt
  2138  02B3  30C7               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  2139  02B4                     L7:
  2140  02B4  158A  25B9  118A   	fcall	_print_cmd_mov
  2141  02B7                     l3859:
  2142                           
  2143                           ;main.c: 579:                             if ((P_cmd2 & 0x10) == 0x10) {
  2144  02B7  1E5C               	btfss	_P_cmd2,4
  2145  02B8  2ADB               	goto	l320
  2146                           
  2147                           ;main.c: 580:                                 tilt_speed = P_dat2;
  2148  02B9  085A               	movf	_P_dat2,w
  2149  02BA  00C3               	movwf	??_main
  2150  02BB  0843               	movf	??_main,w
  2151  02BC  00E5               	movwf	_tilt_speed	;volatile
  2152                           
  2153                           ;main.c: 581:                                 timer1_tilt_ref = SPEED_calc(tilt_speed);
  2154  02BD  0865               	movf	_tilt_speed,w	;volatile
  2155  02BE  158A  268E  118A   	fcall	_SPEED_calc
  2156  02C1  00C3               	movwf	??_main
  2157  02C2  0843               	movf	??_main,w
  2158  02C3  00E1               	movwf	_timer1_tilt_ref	;volatile
  2159                           
  2160                           ;main.c: 582:                                 tilt_direction = 0;
  2161  02C4  01E6               	clrf	_tilt_direction	;volatile
  2162                           
  2163                           ;main.c: 583:                                 tilt_enabled = 1;
  2164  02C5  3001               	movlw	1
  2165  02C6  00C3               	movwf	??_main
  2166  02C7  0843               	movf	??_main,w
  2167  02C8  00E7               	movwf	_tilt_enabled	;volatile
  2168                           
  2169                           ;main.c: 585:                                 preset_pan_enabled = 0;
  2170  02C9  01EC               	clrf	_preset_pan_enabled	;volatile
  2171                           
  2172                           ;main.c: 586:                                 preset_tilt_enabled = 0;
  2173  02CA  01EB               	clrf	_preset_tilt_enabled	;volatile
  2174                           
  2175                           ;main.c: 588:                                 response_type = 0x01;
  2176  02CB  01DF               	clrf	_response_type
  2177  02CC  0ADF               	incf	_response_type,f
  2178                           
  2179                           ;main.c: 589:                                 is_reboot = 0;
  2180  02CD  01D8               	clrf	_is_reboot
  2181                           
  2182                           ;main.c: 591:                                 print_cmd_mov("DOWN", pan_counter, tilt_co
      +                          unter);
  2183  02CE  0857               	movf	_pan_counter+1,w	;volatile
  2184  02CF  00BA               	movwf	print_cmd_mov@pan+1
  2185  02D0  0856               	movf	_pan_counter,w	;volatile
  2186  02D1  00B9               	movwf	print_cmd_mov@pan
  2187  02D2  0855               	movf	_tilt_counter+1,w	;volatile
  2188  02D3  00BC               	movwf	print_cmd_mov@tilt+1
  2189  02D4  0854               	movf	_tilt_counter,w	;volatile
  2190  02D5  00BB               	movwf	print_cmd_mov@tilt
  2191  02D6  30DC               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  2192  02D7  158A  25B9  118A   	fcall	_print_cmd_mov
  2193                           
  2194                           ;main.c: 592:                             } else if ((P_cmd2 & 0x08) == 0x08) {
  2195  02DA  2B06               	goto	l262
  2196  02DB                     l320:
  2197  02DB  1DDC               	btfss	_P_cmd2,3
  2198  02DC  2B06               	goto	l262
  2199                           
  2200                           ;main.c: 593:                                 tilt_speed = P_dat2;
  2201  02DD  085A               	movf	_P_dat2,w
  2202  02DE  00C3               	movwf	??_main
  2203  02DF  0843               	movf	??_main,w
  2204  02E0  00E5               	movwf	_tilt_speed	;volatile
  2205                           
  2206                           ;main.c: 594:                                 timer1_tilt_ref = SPEED_calc(tilt_speed);
  2207  02E1  0865               	movf	_tilt_speed,w	;volatile
  2208  02E2  158A  268E  118A   	fcall	_SPEED_calc
  2209  02E5  00C3               	movwf	??_main
  2210  02E6  0843               	movf	??_main,w
  2211  02E7  00E1               	movwf	_timer1_tilt_ref	;volatile
  2212                           
  2213                           ;main.c: 595:                                 tilt_direction = 1;
  2214  02E8  3001               	movlw	1
  2215  02E9  00C3               	movwf	??_main
  2216  02EA  0843               	movf	??_main,w
  2217  02EB  00E6               	movwf	_tilt_direction	;volatile
  2218                           
  2219                           ;main.c: 596:                                 tilt_enabled = 1;
  2220  02EC  3001               	movlw	1
  2221  02ED  00C3               	movwf	??_main
  2222  02EE  0843               	movf	??_main,w
  2223  02EF  00E7               	movwf	_tilt_enabled	;volatile
  2224                           
  2225                           ;main.c: 598:                                 preset_pan_enabled = 0;
  2226  02F0  01EC               	clrf	_preset_pan_enabled	;volatile
  2227                           
  2228                           ;main.c: 599:                                 preset_tilt_enabled = 0;
  2229  02F1  01EB               	clrf	_preset_tilt_enabled	;volatile
  2230                           
  2231                           ;main.c: 601:                                 response_type = 0x01;
  2232  02F2  01DF               	clrf	_response_type
  2233  02F3  0ADF               	incf	_response_type,f
  2234                           
  2235                           ;main.c: 602:                                 is_reboot = 0;
  2236  02F4  01D8               	clrf	_is_reboot
  2237                           
  2238                           ;main.c: 604:                                 print_cmd_mov("UP", pan_counter, tilt_coun
      +                          ter);
  2239  02F5  0857               	movf	_pan_counter+1,w	;volatile
  2240  02F6  00BA               	movwf	print_cmd_mov@pan+1
  2241  02F7  0856               	movf	_pan_counter,w	;volatile
  2242  02F8  00B9               	movwf	print_cmd_mov@pan
  2243  02F9  0855               	movf	_tilt_counter+1,w	;volatile
  2244  02FA  00BC               	movwf	print_cmd_mov@tilt+1
  2245  02FB  0854               	movf	_tilt_counter,w	;volatile
  2246  02FC  00BB               	movwf	print_cmd_mov@tilt
  2247  02FD  30E9               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  2248  02FE  158A  25B9  118A   	fcall	_print_cmd_mov
  2249  0301  2B06               	goto	l262
  2250  0302                     l3901:
  2251                           
  2252                           ;main.c: 616:                 frame_index++;
  2253  0302  3001               	movlw	1
  2254  0303  00C3               	movwf	??_main
  2255  0304  0843               	movf	??_main,w
  2256  0305  07E0               	addwf	_frame_index,f
  2257  0306                     l262:	
  2258                           ;main.c: 383:     while (1) {
  2259                           
  2260                           ;main.c: 617:             } else {
  2261                           
  2262  0306  0064               	clrwdt	;# 
  2263                           
  2264                           ;main.c: 386:         if (buffer_ready[frame_index] == 1) {
  2265  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2266  0308  1303               	bcf	3,6	;RP1=0, select bank0
  2267  0309  0860               	movf	_frame_index,w
  2268  030A  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  2269  030B  0084               	movwf	4
  2270  030C  1383               	bcf	3,7	;select IRP bank1
  2271  030D  0300               	decf	0,w
  2272  030E  1903               	btfsc	3,2
  2273  030F  2850               	goto	l3601
  2274                           
  2275                           ;main.c: 615:             if (frame_index < 4) {
  2276  0310  3004               	movlw	4
  2277  0311  0260               	subwf	_frame_index,w
  2278  0312  1C03               	btfss	3,0
  2279  0313  2B02               	goto	l3901
  2280                           
  2281                           ;main.c: 619:                 frame_index = 0;
  2282  0314  01E0               	clrf	_frame_index
  2283  0315  2B06               	goto	l262
  2284  0316                     __end_of_main:
  2285                           
  2286                           	psect	text1
  2287  0F6A                     __ptext1:	
  2288 ;; *************** function _print_preset *****************
  2289 ;; Defined at:
  2290 ;;		line 1033 in file "main.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  id              1    wreg     unsigned char 
  2293 ;;  pan             2   25[BANK0 ] unsigned int 
  2294 ;;  tilt            2   27[BANK0 ] unsigned int 
  2295 ;;  text            1   29[BANK0 ] PTR unsigned char 
  2296 ;;		 -> STR_19(13), STR_18(14), STR_17(12), 
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  id              1   33[BANK0 ] unsigned char 
  2299 ;;  preset_id_10    1   34[BANK0 ] unsigned char 
  2300 ;;  preset_id_1     1   32[BANK0 ] unsigned char 
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  1    wreg      void 
  2303 ;; Registers used:
  2304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2305 ;; Tracked objects:
  2306 ;;		On entry : 300/0
  2307 ;;		On exit  : 300/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2310 ;;      Params:         0       5       0       0
  2311 ;;      Locals:         0       3       0       0
  2312 ;;      Temps:          0       2       0       0
  2313 ;;      Totals:         0      10       0       0
  2314 ;;Total ram usage:       10 bytes
  2315 ;; Hardware stack levels used: 1
  2316 ;; Hardware stack levels required when called: 5
  2317 ;; This function calls:
  2318 ;;		_UART_Write
  2319 ;;		_UART_Write_Text
  2320 ;;		_UART_Write_Text_CRLF
  2321 ;;		___bmul
  2322 ;;		___lbdiv
  2323 ;;		_print_cnt
  2324 ;; This function is called by:
  2325 ;;		_main
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329  0F6A                     _print_preset:	
  2330                           ;psect for function _print_preset
  2331                           
  2332                           
  2333                           ;incstack = 0
  2334                           ; Regs used in _print_preset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2335                           ;print_preset@id stored from wreg
  2336  0F6A  00C1               	movwf	print_preset@id
  2337                           
  2338                           ;main.c: 1034:     uint8_t preset_id_10 = id / 10;
  2339  0F6B  300A               	movlw	10
  2340  0F6C  00BE               	movwf	??_print_preset
  2341  0F6D  083E               	movf	??_print_preset,w
  2342  0F6E  00A0               	movwf	___lbdiv@divisor
  2343  0F6F  0841               	movf	print_preset@id,w
  2344  0F70  158A  2649  158A   	fcall	___lbdiv
  2345  0F73  00BF               	movwf	??_print_preset+1
  2346  0F74  083F               	movf	??_print_preset+1,w
  2347  0F75  00C2               	movwf	print_preset@preset_id_10
  2348                           
  2349                           ;main.c: 1035:     uint8_t preset_id_1 = id - (preset_id_10 * 10);
  2350  0F76  30F6               	movlw	246
  2351  0F77  00BE               	movwf	??_print_preset
  2352  0F78  083E               	movf	??_print_preset,w
  2353  0F79  00A0               	movwf	___bmul@multiplicand
  2354  0F7A  0842               	movf	print_preset@preset_id_10,w
  2355  0F7B  158A  257A  158A   	fcall	___bmul
  2356  0F7E  0741               	addwf	print_preset@id,w
  2357  0F7F  00BF               	movwf	??_print_preset+1
  2358  0F80  083F               	movf	??_print_preset+1,w
  2359  0F81  00C0               	movwf	print_preset@preset_id_1
  2360                           
  2361                           ;main.c: 1037:     preset_id_10 += 48;
  2362  0F82  3030               	movlw	48
  2363  0F83  00BE               	movwf	??_print_preset
  2364  0F84  083E               	movf	??_print_preset,w
  2365  0F85  07C2               	addwf	print_preset@preset_id_10,f
  2366                           
  2367                           ;main.c: 1038:     preset_id_1 += 48;
  2368  0F86  3030               	movlw	48
  2369  0F87  00BE               	movwf	??_print_preset
  2370  0F88  083E               	movf	??_print_preset,w
  2371  0F89  07C0               	addwf	print_preset@preset_id_1,f
  2372                           
  2373                           ;main.c: 1040:     UART_Write_Text(text);
  2374  0F8A  083D               	movf	print_preset@text,w
  2375  0F8B  158A  25EA  158A   	fcall	_UART_Write_Text
  2376                           
  2377                           ;main.c: 1041:     UART_Write(preset_id_10);
  2378  0F8E  0842               	movf	print_preset@preset_id_10,w
  2379  0F8F  158A  26C2  158A   	fcall	_UART_Write
  2380                           
  2381                           ;main.c: 1042:     UART_Write(preset_id_1);
  2382  0F92  0840               	movf	print_preset@preset_id_1,w
  2383  0F93  158A  26C2  158A   	fcall	_UART_Write
  2384                           
  2385                           ;main.c: 1043:     UART_Write_Text(" (");
  2386  0F96  30AA               	movlw	(low (((STR_15+4)-__stringbase)| (0+32768)))& (0+255)
  2387  0F97  158A  25EA  158A   	fcall	_UART_Write_Text
  2388                           
  2389                           ;main.c: 1044:     print_cnt(pan, tilt);
  2390  0F9A  083A               	movf	print_preset@pan+1,w
  2391  0F9B  00B6               	movwf	print_cnt@_pan+1
  2392  0F9C  0839               	movf	print_preset@pan,w
  2393  0F9D  00B5               	movwf	print_cnt@_pan
  2394  0F9E  083C               	movf	print_preset@tilt+1,w
  2395  0F9F  00B8               	movwf	print_cnt@_tilt+1
  2396  0FA0  083B               	movf	print_preset@tilt,w
  2397  0FA1  00B7               	movwf	print_cnt@_tilt
  2398  0FA2  118A  24EC  158A   	fcall	_print_cnt
  2399                           
  2400                           ;main.c: 1045:     UART_Write_Text_CRLF(")");
  2401  0FA5  30EC               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2402  0FA6  158A  266A         	fcall	_UART_Write_Text_CRLF
  2403  0FA8  0008               	return
  2404  0FA9                     __end_of_print_preset:
  2405                           
  2406                           	psect	text2
  2407  0E49                     __ptext2:	
  2408 ;; *************** function ___lbdiv *****************
  2409 ;; Defined at:
  2410 ;;		line 4 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/lbdiv.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;  dividend        1    wreg     unsigned char 
  2413 ;;  divisor         1    0[BANK0 ] unsigned char 
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  dividend        1    2[BANK0 ] unsigned char 
  2416 ;;  quotient        1    4[BANK0 ] unsigned char 
  2417 ;;  counter         1    3[BANK0 ] unsigned char 
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      unsigned char 
  2420 ;; Registers used:
  2421 ;;		wreg, status,2, status,0
  2422 ;; Tracked objects:
  2423 ;;		On entry : 300/0
  2424 ;;		On exit  : 300/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2427 ;;      Params:         0       1       0       0
  2428 ;;      Locals:         0       3       0       0
  2429 ;;      Temps:          0       1       0       0
  2430 ;;      Totals:         0       5       0       0
  2431 ;;Total ram usage:        5 bytes
  2432 ;; Hardware stack levels used: 1
  2433 ;; Hardware stack levels required when called: 2
  2434 ;; This function calls:
  2435 ;;		Nothing
  2436 ;; This function is called by:
  2437 ;;		_print_preset
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441  0E49                     ___lbdiv:	
  2442                           ;psect for function ___lbdiv
  2443                           
  2444                           
  2445                           ;incstack = 0
  2446                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2447                           ;___lbdiv@dividend stored from wreg
  2448  0E49  00A2               	movwf	___lbdiv@dividend
  2449  0E4A  01A4               	clrf	___lbdiv@quotient
  2450  0E4B  0820               	movf	___lbdiv@divisor,w
  2451  0E4C  1903               	btfsc	3,2
  2452  0E4D  2E68               	goto	l3405
  2453  0E4E  01A3               	clrf	___lbdiv@counter
  2454  0E4F  0AA3               	incf	___lbdiv@counter,f
  2455  0E50                     l3393:
  2456  0E50  1BA0               	btfsc	___lbdiv@divisor,7
  2457  0E51  2E59               	goto	l3395
  2458  0E52  1003               	clrc
  2459  0E53  0DA0               	rlf	___lbdiv@divisor,f
  2460  0E54  3001               	movlw	1
  2461  0E55  00A1               	movwf	??___lbdiv
  2462  0E56  0821               	movf	??___lbdiv,w
  2463  0E57  07A3               	addwf	___lbdiv@counter,f
  2464  0E58  2E50               	goto	l3393
  2465  0E59                     l3395:
  2466  0E59  1003               	clrc
  2467  0E5A  0DA4               	rlf	___lbdiv@quotient,f
  2468  0E5B  0820               	movf	___lbdiv@divisor,w
  2469  0E5C  0222               	subwf	___lbdiv@dividend,w
  2470  0E5D  1C03               	skipc
  2471  0E5E  2E63               	goto	L8
  2472  0E5F  0820               	movf	___lbdiv@divisor,w
  2473  0E60  02A2               	subwf	___lbdiv@dividend,f
  2474  0E61  1424               	bsf	___lbdiv@quotient,0
  2475  0E62  1003               	clrc
  2476  0E63                     L8:
  2477  0E63  0CA0               	rrf	___lbdiv@divisor,f
  2478  0E64  3001               	movlw	1
  2479  0E65  02A3               	subwf	___lbdiv@counter,f
  2480  0E66  1D03               	btfss	3,2
  2481  0E67  2E59               	goto	l3395
  2482  0E68                     l3405:
  2483  0E68  0824               	movf	___lbdiv@quotient,w
  2484  0E69  0008               	return
  2485  0E6A                     __end_of___lbdiv:
  2486                           
  2487                           	psect	text3
  2488  0D7A                     __ptext3:	
  2489 ;; *************** function ___bmul *****************
  2490 ;; Defined at:
  2491 ;;		line 4 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/Umul8.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;  multiplier      1    wreg     unsigned char 
  2494 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2497 ;;  product         1    2[BANK0 ] unsigned char 
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  1    wreg      unsigned char 
  2500 ;; Registers used:
  2501 ;;		wreg, status,2, status,0
  2502 ;; Tracked objects:
  2503 ;;		On entry : 300/0
  2504 ;;		On exit  : 300/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2507 ;;      Params:         0       1       0       0
  2508 ;;      Locals:         0       2       0       0
  2509 ;;      Temps:          0       1       0       0
  2510 ;;      Totals:         0       4       0       0
  2511 ;;Total ram usage:        4 bytes
  2512 ;; Hardware stack levels used: 1
  2513 ;; Hardware stack levels required when called: 2
  2514 ;; This function calls:
  2515 ;;		Nothing
  2516 ;; This function is called by:
  2517 ;;		_print_preset
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521  0D7A                     ___bmul:	
  2522                           ;psect for function ___bmul
  2523                           
  2524                           
  2525                           ;incstack = 0
  2526                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2527                           ;___bmul@multiplier stored from wreg
  2528  0D7A  00A3               	movwf	___bmul@multiplier
  2529  0D7B  01A2               	clrf	___bmul@product
  2530  0D7C                     l3327:
  2531  0D7C  1C23               	btfss	___bmul@multiplier,0
  2532  0D7D  2D82               	goto	l3331
  2533  0D7E  0820               	movf	___bmul@multiplicand,w
  2534  0D7F  00A1               	movwf	??___bmul
  2535  0D80  0821               	movf	??___bmul,w
  2536  0D81  07A2               	addwf	___bmul@product,f
  2537  0D82                     l3331:
  2538  0D82  1003               	clrc
  2539  0D83  0DA0               	rlf	___bmul@multiplicand,f
  2540  0D84  1003               	clrc
  2541  0D85  0CA3               	rrf	___bmul@multiplier,f
  2542  0D86  0823               	movf	___bmul@multiplier,w
  2543  0D87  1D03               	btfss	3,2
  2544  0D88  2D7C               	goto	l3327
  2545  0D89  0822               	movf	___bmul@product,w
  2546  0D8A  0008               	return
  2547  0D8B                     __end_of___bmul:
  2548                           
  2549                           	psect	text4
  2550  0DB9                     __ptext4:	
  2551 ;; *************** function _print_cmd_mov *****************
  2552 ;; Defined at:
  2553 ;;		line 1048 in file "main.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;  text            1    wreg     PTR unsigned char 
  2556 ;;		 -> STR_23(3), STR_22(5), STR_21(6), STR_20(5), 
  2557 ;;  pan             2   25[BANK0 ] unsigned int 
  2558 ;;  tilt            2   27[BANK0 ] unsigned int 
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;  text            1   29[BANK0 ] PTR unsigned char 
  2561 ;;		 -> STR_23(3), STR_22(5), STR_21(6), STR_20(5), 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  1    wreg      void 
  2564 ;; Registers used:
  2565 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2566 ;; Tracked objects:
  2567 ;;		On entry : 300/0
  2568 ;;		On exit  : 300/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2571 ;;      Params:         0       4       0       0
  2572 ;;      Locals:         0       1       0       0
  2573 ;;      Temps:          0       0       0       0
  2574 ;;      Totals:         0       5       0       0
  2575 ;;Total ram usage:        5 bytes
  2576 ;; Hardware stack levels used: 1
  2577 ;; Hardware stack levels required when called: 5
  2578 ;; This function calls:
  2579 ;;		_UART_Write_Text
  2580 ;;		_UART_Write_Text_CRLF
  2581 ;;		_print_cnt
  2582 ;; This function is called by:
  2583 ;;		_main
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587  0DB9                     _print_cmd_mov:	
  2588                           ;psect for function _print_cmd_mov
  2589                           
  2590                           
  2591                           ;incstack = 0
  2592                           ; Regs used in _print_cmd_mov: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2593                           ;print_cmd_mov@text stored from wreg
  2594  0DB9  00BD               	movwf	print_cmd_mov@text
  2595                           
  2596                           ;main.c: 1049:     UART_Write_Text(text);
  2597  0DBA  083D               	movf	print_cmd_mov@text,w
  2598  0DBB  158A  25EA  158A   	fcall	_UART_Write_Text
  2599                           
  2600                           ;main.c: 1050:     UART_Write_Text(" (");
  2601  0DBE  30AA               	movlw	(low (((STR_15+4)-__stringbase)| (0+32768)))& (0+255)
  2602  0DBF  158A  25EA  158A   	fcall	_UART_Write_Text
  2603                           
  2604                           ;main.c: 1051:     print_cnt(pan, tilt);
  2605  0DC2  083A               	movf	print_cmd_mov@pan+1,w
  2606  0DC3  00B6               	movwf	print_cnt@_pan+1
  2607  0DC4  0839               	movf	print_cmd_mov@pan,w
  2608  0DC5  00B5               	movwf	print_cnt@_pan
  2609  0DC6  083C               	movf	print_cmd_mov@tilt+1,w
  2610  0DC7  00B8               	movwf	print_cnt@_tilt+1
  2611  0DC8  083B               	movf	print_cmd_mov@tilt,w
  2612  0DC9  00B7               	movwf	print_cnt@_tilt
  2613  0DCA  118A  24EC  158A   	fcall	_print_cnt
  2614                           
  2615                           ;main.c: 1052:     UART_Write_Text_CRLF(")");
  2616  0DCD  30EC               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2617  0DCE  158A  266A         	fcall	_UART_Write_Text_CRLF
  2618  0DD0  0008               	return
  2619  0DD1                     __end_of_print_cmd_mov:
  2620                           
  2621                           	psect	text5
  2622  04EC                     __ptext5:	
  2623 ;; *************** function _print_cnt *****************
  2624 ;; Defined at:
  2625 ;;		line 980 in file "main.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;  _pan            2   21[BANK0 ] unsigned int 
  2628 ;;  _tilt           2   23[BANK0 ] unsigned int 
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;		None
  2631 ;; Return value:  Size  Location     Type
  2632 ;;                  1    wreg      void 
  2633 ;; Registers used:
  2634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2635 ;; Tracked objects:
  2636 ;;		On entry : 300/0
  2637 ;;		On exit  : 300/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2640 ;;      Params:         0       4       0       0
  2641 ;;      Locals:         0       0       0       0
  2642 ;;      Temps:          0       0       0       0
  2643 ;;      Totals:         0       4       0       0
  2644 ;;Total ram usage:        4 bytes
  2645 ;; Hardware stack levels used: 1
  2646 ;; Hardware stack levels required when called: 4
  2647 ;; This function calls:
  2648 ;;		_UART_Write_Text
  2649 ;;		_print_val
  2650 ;; This function is called by:
  2651 ;;		_main
  2652 ;;		_print_preset
  2653 ;;		_print_cmd_mov
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657  04EC                     _print_cnt:	
  2658                           ;psect for function _print_cnt
  2659                           
  2660                           
  2661                           ;main.c: 981:     print_val(_pan);
  2662                           
  2663                           ;incstack = 0
  2664                           ; Regs used in _print_cnt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2665  04EC  0836               	movf	print_cnt@_pan+1,w
  2666  04ED  00AA               	movwf	print_val@value+1
  2667  04EE  0835               	movf	print_cnt@_pan,w
  2668  04EF  00A9               	movwf	print_val@value
  2669  04F0  118A  25F3  118A   	fcall	_print_val
  2670                           
  2671                           ;main.c: 983:     UART_Write_Text(", ");
  2672  04F3  30E6               	movlw	(low ((STR_24-__stringbase)| (0+32768)))& (0+255)
  2673  04F4  158A  25EA  118A   	fcall	_UART_Write_Text
  2674                           
  2675                           ;main.c: 985:     print_val(_tilt);
  2676  04F7  0838               	movf	print_cnt@_tilt+1,w
  2677  04F8  00AA               	movwf	print_val@value+1
  2678  04F9  0837               	movf	print_cnt@_tilt,w
  2679  04FA  00A9               	movwf	print_val@value
  2680  04FB  118A  25F3         	fcall	_print_val
  2681  04FD  0008               	return
  2682  04FE                     __end_of_print_cnt:
  2683                           
  2684                           	psect	text6
  2685  05F3                     __ptext6:	
  2686 ;; *************** function _print_val *****************
  2687 ;; Defined at:
  2688 ;;		line 988 in file "main.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  value           2    9[BANK0 ] unsigned int 
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  val10000        2   19[BANK0 ] unsigned int 
  2693 ;;  val1000         2   17[BANK0 ] unsigned int 
  2694 ;;  val100          2   15[BANK0 ] unsigned int 
  2695 ;;  val10           2   13[BANK0 ] unsigned int 
  2696 ;;  val1            2   11[BANK0 ] unsigned int 
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      void 
  2699 ;; Registers used:
  2700 ;;		wreg, status,2, status,0, pclath, cstack
  2701 ;; Tracked objects:
  2702 ;;		On entry : 300/0
  2703 ;;		On exit  : 300/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2706 ;;      Params:         0       2       0       0
  2707 ;;      Locals:         0      10       0       0
  2708 ;;      Temps:          0       0       0       0
  2709 ;;      Totals:         0      12       0       0
  2710 ;;Total ram usage:       12 bytes
  2711 ;; Hardware stack levels used: 1
  2712 ;; Hardware stack levels required when called: 3
  2713 ;; This function calls:
  2714 ;;		_UART_Write
  2715 ;;		___lwdiv
  2716 ;;		___wmul
  2717 ;; This function is called by:
  2718 ;;		_print_cnt
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722  05F3                     _print_val:	
  2723                           ;psect for function _print_val
  2724                           
  2725                           
  2726                           ;main.c: 990:     uint16_t val1000 = 0;
  2727                           
  2728                           ;incstack = 0
  2729                           ; Regs used in _print_val: [wreg+status,2+status,0+pclath+cstack]
  2730  05F3  01B1               	clrf	print_val@val1000
  2731  05F4  01B2               	clrf	print_val@val1000+1
  2732                           
  2733                           ;main.c: 991:     uint16_t val100 = 0;
  2734  05F5  01AF               	clrf	print_val@val100
  2735  05F6  01B0               	clrf	print_val@val100+1
  2736                           
  2737                           ;main.c: 992:     uint16_t val10 = 0;
  2738  05F7  01AD               	clrf	print_val@val10
  2739  05F8  01AE               	clrf	print_val@val10+1
  2740                           
  2741                           ;main.c: 993:     uint16_t val1 = 0;
  2742  05F9  01AB               	clrf	print_val@val1
  2743  05FA  01AC               	clrf	print_val@val1+1
  2744                           
  2745                           ;main.c: 995:     val10000 = value / 10000;
  2746  05FB  3010               	movlw	16
  2747  05FC  00A0               	movwf	___lwdiv@divisor
  2748  05FD  3027               	movlw	39
  2749  05FE  00A1               	movwf	___lwdiv@divisor+1
  2750  05FF  082A               	movf	print_val@value+1,w
  2751  0600  00A3               	movwf	___lwdiv@dividend+1
  2752  0601  0829               	movf	print_val@value,w
  2753  0602  00A2               	movwf	___lwdiv@dividend
  2754  0603  158A  272E  118A   	fcall	___lwdiv
  2755  0606  0821               	movf	?___lwdiv+1,w
  2756  0607  00B4               	movwf	print_val@val10000+1
  2757  0608  0820               	movf	?___lwdiv,w
  2758  0609  00B3               	movwf	print_val@val10000
  2759                           
  2760                           ;main.c: 996:     value -= val10000 * 10000;
  2761  060A  0834               	movf	print_val@val10000+1,w
  2762  060B  00A1               	movwf	___wmul@multiplier+1
  2763  060C  0833               	movf	print_val@val10000,w
  2764  060D  00A0               	movwf	___wmul@multiplier
  2765  060E  3010               	movlw	16
  2766  060F  00A2               	movwf	___wmul@multiplicand
  2767  0610  3027               	movlw	39
  2768  0611  00A3               	movwf	___wmul@multiplicand+1
  2769  0612  158A  2628  118A   	fcall	___wmul
  2770  0615  0820               	movf	?___wmul,w
  2771  0616  02A9               	subwf	print_val@value,f
  2772  0617  0821               	movf	?___wmul+1,w
  2773  0618  1C03               	skipc
  2774  0619  03AA               	decf	print_val@value+1,f
  2775  061A  02AA               	subwf	print_val@value+1,f
  2776                           
  2777                           ;main.c: 998:     val1000 = value / 1000;
  2778  061B  30E8               	movlw	232
  2779  061C  00A0               	movwf	___lwdiv@divisor
  2780  061D  3003               	movlw	3
  2781  061E  00A1               	movwf	___lwdiv@divisor+1
  2782  061F  082A               	movf	print_val@value+1,w
  2783  0620  00A3               	movwf	___lwdiv@dividend+1
  2784  0621  0829               	movf	print_val@value,w
  2785  0622  00A2               	movwf	___lwdiv@dividend
  2786  0623  158A  272E  118A   	fcall	___lwdiv
  2787  0626  0821               	movf	?___lwdiv+1,w
  2788  0627  00B2               	movwf	print_val@val1000+1
  2789  0628  0820               	movf	?___lwdiv,w
  2790  0629  00B1               	movwf	print_val@val1000
  2791                           
  2792                           ;main.c: 999:     value -= val1000 * 1000;
  2793  062A  0832               	movf	print_val@val1000+1,w
  2794  062B  00A1               	movwf	___wmul@multiplier+1
  2795  062C  0831               	movf	print_val@val1000,w
  2796  062D  00A0               	movwf	___wmul@multiplier
  2797  062E  30E8               	movlw	232
  2798  062F  00A2               	movwf	___wmul@multiplicand
  2799  0630  3003               	movlw	3
  2800  0631  00A3               	movwf	___wmul@multiplicand+1
  2801  0632  158A  2628  118A   	fcall	___wmul
  2802  0635  0820               	movf	?___wmul,w
  2803  0636  02A9               	subwf	print_val@value,f
  2804  0637  0821               	movf	?___wmul+1,w
  2805  0638  1C03               	skipc
  2806  0639  03AA               	decf	print_val@value+1,f
  2807  063A  02AA               	subwf	print_val@value+1,f
  2808                           
  2809                           ;main.c: 1001:     val100 = value / 100;
  2810  063B  3064               	movlw	100
  2811  063C  00A0               	movwf	___lwdiv@divisor
  2812  063D  3000               	movlw	0
  2813  063E  00A1               	movwf	___lwdiv@divisor+1
  2814  063F  082A               	movf	print_val@value+1,w
  2815  0640  00A3               	movwf	___lwdiv@dividend+1
  2816  0641  0829               	movf	print_val@value,w
  2817  0642  00A2               	movwf	___lwdiv@dividend
  2818  0643  158A  272E  118A   	fcall	___lwdiv
  2819  0646  0821               	movf	?___lwdiv+1,w
  2820  0647  00B0               	movwf	print_val@val100+1
  2821  0648  0820               	movf	?___lwdiv,w
  2822  0649  00AF               	movwf	print_val@val100
  2823                           
  2824                           ;main.c: 1002:     value -= val100 * 100;
  2825  064A  0830               	movf	print_val@val100+1,w
  2826  064B  00A1               	movwf	___wmul@multiplier+1
  2827  064C  082F               	movf	print_val@val100,w
  2828  064D  00A0               	movwf	___wmul@multiplier
  2829  064E  3064               	movlw	100
  2830  064F  00A2               	movwf	___wmul@multiplicand
  2831  0650  3000               	movlw	0
  2832  0651  00A3               	movwf	___wmul@multiplicand+1
  2833  0652  158A  2628  118A   	fcall	___wmul
  2834  0655  0820               	movf	?___wmul,w
  2835  0656  02A9               	subwf	print_val@value,f
  2836  0657  0821               	movf	?___wmul+1,w
  2837  0658  1C03               	skipc
  2838  0659  03AA               	decf	print_val@value+1,f
  2839  065A  02AA               	subwf	print_val@value+1,f
  2840                           
  2841                           ;main.c: 1004:     val10 = value / 10;
  2842  065B  300A               	movlw	10
  2843  065C  00A0               	movwf	___lwdiv@divisor
  2844  065D  3000               	movlw	0
  2845  065E  00A1               	movwf	___lwdiv@divisor+1
  2846  065F  082A               	movf	print_val@value+1,w
  2847  0660  00A3               	movwf	___lwdiv@dividend+1
  2848  0661  0829               	movf	print_val@value,w
  2849  0662  00A2               	movwf	___lwdiv@dividend
  2850  0663  158A  272E  118A   	fcall	___lwdiv
  2851  0666  0821               	movf	?___lwdiv+1,w
  2852  0667  00AE               	movwf	print_val@val10+1
  2853  0668  0820               	movf	?___lwdiv,w
  2854  0669  00AD               	movwf	print_val@val10
  2855                           
  2856                           ;main.c: 1005:     value -= val10 * 10;
  2857  066A  082E               	movf	print_val@val10+1,w
  2858  066B  00A1               	movwf	___wmul@multiplier+1
  2859  066C  082D               	movf	print_val@val10,w
  2860  066D  00A0               	movwf	___wmul@multiplier
  2861  066E  300A               	movlw	10
  2862  066F  00A2               	movwf	___wmul@multiplicand
  2863  0670  3000               	movlw	0
  2864  0671  00A3               	movwf	___wmul@multiplicand+1
  2865  0672  158A  2628  118A   	fcall	___wmul
  2866  0675  0820               	movf	?___wmul,w
  2867  0676  02A9               	subwf	print_val@value,f
  2868  0677  0821               	movf	?___wmul+1,w
  2869  0678  1C03               	skipc
  2870  0679  03AA               	decf	print_val@value+1,f
  2871  067A  02AA               	subwf	print_val@value+1,f
  2872                           
  2873                           ;main.c: 1007:     val1 = value;
  2874  067B  082A               	movf	print_val@value+1,w
  2875  067C  00AC               	movwf	print_val@val1+1
  2876  067D  0829               	movf	print_val@value,w
  2877  067E  00AB               	movwf	print_val@val1
  2878                           
  2879                           ;main.c: 1009:     val10000 += 48;
  2880  067F  3030               	movlw	48
  2881  0680  07B3               	addwf	print_val@val10000,f
  2882  0681  1803               	skipnc
  2883  0682  0AB4               	incf	print_val@val10000+1,f
  2884  0683  3000               	movlw	0
  2885  0684  07B4               	addwf	print_val@val10000+1,f
  2886                           
  2887                           ;main.c: 1010:     val1000 += 48;
  2888  0685  3030               	movlw	48
  2889  0686  07B1               	addwf	print_val@val1000,f
  2890  0687  1803               	skipnc
  2891  0688  0AB2               	incf	print_val@val1000+1,f
  2892  0689  3000               	movlw	0
  2893  068A  07B2               	addwf	print_val@val1000+1,f
  2894                           
  2895                           ;main.c: 1011:     val100 += 48;
  2896  068B  3030               	movlw	48
  2897  068C  07AF               	addwf	print_val@val100,f
  2898  068D  1803               	skipnc
  2899  068E  0AB0               	incf	print_val@val100+1,f
  2900  068F  3000               	movlw	0
  2901  0690  07B0               	addwf	print_val@val100+1,f
  2902                           
  2903                           ;main.c: 1012:     val10 += 48;
  2904  0691  3030               	movlw	48
  2905  0692  07AD               	addwf	print_val@val10,f
  2906  0693  1803               	skipnc
  2907  0694  0AAE               	incf	print_val@val10+1,f
  2908  0695  3000               	movlw	0
  2909  0696  07AE               	addwf	print_val@val10+1,f
  2910                           
  2911                           ;main.c: 1013:     val1 += 48;
  2912  0697  3030               	movlw	48
  2913  0698  07AB               	addwf	print_val@val1,f
  2914  0699  1803               	skipnc
  2915  069A  0AAC               	incf	print_val@val1+1,f
  2916  069B  3000               	movlw	0
  2917  069C  07AC               	addwf	print_val@val1+1,f
  2918                           
  2919                           ;main.c: 1015:     if (val10000 > 0) {
  2920  069D  0833               	movf	print_val@val10000,w
  2921  069E  0434               	iorwf	print_val@val10000+1,w
  2922  069F  1903               	btfsc	3,2
  2923  06A0  2EA5               	goto	l3271
  2924                           
  2925                           ;main.c: 1016:         UART_Write((uint8_t) val10000);
  2926  06A1  0833               	movf	print_val@val10000,w
  2927  06A2  158A  26C2  118A   	fcall	_UART_Write
  2928  06A5                     l3271:
  2929                           
  2930                           ;main.c: 1019:     if ((val10000 > 0) || (val1000 > 0)) {
  2931  06A5  0833               	movf	print_val@val10000,w
  2932  06A6  0434               	iorwf	print_val@val10000+1,w
  2933  06A7  1D03               	btfss	3,2
  2934  06A8  2EAD               	goto	l3275
  2935  06A9  0831               	movf	print_val@val1000,w
  2936  06AA  0432               	iorwf	print_val@val1000+1,w
  2937  06AB  1903               	btfsc	3,2
  2938  06AC  2EB1               	goto	l3277
  2939  06AD                     l3275:
  2940                           
  2941                           ;main.c: 1020:         UART_Write((uint8_t) val1000);
  2942  06AD  0831               	movf	print_val@val1000,w
  2943  06AE  158A  26C2  118A   	fcall	_UART_Write
  2944  06B1                     l3277:
  2945                           
  2946                           ;main.c: 1023:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0)) {
  2947  06B1  0833               	movf	print_val@val10000,w
  2948  06B2  0434               	iorwf	print_val@val10000+1,w
  2949  06B3  1D03               	btfss	3,2
  2950  06B4  2EBD               	goto	l3283
  2951  06B5  0831               	movf	print_val@val1000,w
  2952  06B6  0432               	iorwf	print_val@val1000+1,w
  2953  06B7  1D03               	btfss	3,2
  2954  06B8  2EBD               	goto	l3283
  2955  06B9  082F               	movf	print_val@val100,w
  2956  06BA  0430               	iorwf	print_val@val100+1,w
  2957  06BB  1903               	btfsc	3,2
  2958  06BC  2EC1               	goto	l3285
  2959  06BD                     l3283:
  2960                           
  2961                           ;main.c: 1024:         UART_Write((uint8_t) val100);
  2962  06BD  082F               	movf	print_val@val100,w
  2963  06BE  158A  26C2  118A   	fcall	_UART_Write
  2964  06C1                     l3285:
  2965                           
  2966                           ;main.c: 1026:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0) || (val10 > 0)) {
  2967  06C1  0833               	movf	print_val@val10000,w
  2968  06C2  0434               	iorwf	print_val@val10000+1,w
  2969  06C3  1D03               	btfss	3,2
  2970  06C4  2ED1               	goto	l3293
  2971  06C5  0831               	movf	print_val@val1000,w
  2972  06C6  0432               	iorwf	print_val@val1000+1,w
  2973  06C7  1D03               	btfss	3,2
  2974  06C8  2ED1               	goto	l3293
  2975  06C9  082F               	movf	print_val@val100,w
  2976  06CA  0430               	iorwf	print_val@val100+1,w
  2977  06CB  1D03               	btfss	3,2
  2978  06CC  2ED1               	goto	l3293
  2979  06CD  082D               	movf	print_val@val10,w
  2980  06CE  042E               	iorwf	print_val@val10+1,w
  2981  06CF  1903               	btfsc	3,2
  2982  06D0  2ED5               	goto	l386
  2983  06D1                     l3293:
  2984                           
  2985                           ;main.c: 1027:         UART_Write((uint8_t) val10);
  2986  06D1  082D               	movf	print_val@val10,w
  2987  06D2  158A  26C2  118A   	fcall	_UART_Write
  2988  06D5                     l386:	
  2989                           ;main.c: 1028:     }
  2990                           
  2991                           
  2992                           ;main.c: 1030:     UART_Write((uint8_t) val1);
  2993  06D5  082B               	movf	print_val@val1,w
  2994  06D6  158A  26C2         	fcall	_UART_Write
  2995  06D8  0008               	return
  2996  06D9                     __end_of_print_val:
  2997                           
  2998                           	psect	text7
  2999  0E28                     __ptext7:	
  3000 ;; *************** function ___wmul *****************
  3001 ;; Defined at:
  3002 ;;		line 15 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/Umul16.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3005 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  product         2    4[BANK0 ] unsigned int 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  2    0[BANK0 ] unsigned int 
  3010 ;; Registers used:
  3011 ;;		wreg, status,2, status,0
  3012 ;; Tracked objects:
  3013 ;;		On entry : 300/0
  3014 ;;		On exit  : 300/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3017 ;;      Params:         0       4       0       0
  3018 ;;      Locals:         0       2       0       0
  3019 ;;      Temps:          0       0       0       0
  3020 ;;      Totals:         0       6       0       0
  3021 ;;Total ram usage:        6 bytes
  3022 ;; Hardware stack levels used: 1
  3023 ;; Hardware stack levels required when called: 2
  3024 ;; This function calls:
  3025 ;;		Nothing
  3026 ;; This function is called by:
  3027 ;;		_print_val
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031  0E28                     ___wmul:	
  3032                           ;psect for function ___wmul
  3033                           
  3034                           
  3035                           ;incstack = 0
  3036                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3037  0E28  01A4               	clrf	___wmul@product
  3038  0E29  01A5               	clrf	___wmul@product+1
  3039  0E2A                     l3167:
  3040  0E2A  1C20               	btfss	___wmul@multiplier,0
  3041  0E2B  2E32               	goto	l571
  3042  0E2C  0822               	movf	___wmul@multiplicand,w
  3043  0E2D  07A4               	addwf	___wmul@product,f
  3044  0E2E  1803               	skipnc
  3045  0E2F  0AA5               	incf	___wmul@product+1,f
  3046  0E30  0823               	movf	___wmul@multiplicand+1,w
  3047  0E31  07A5               	addwf	___wmul@product+1,f
  3048  0E32                     l571:
  3049  0E32  3001               	movlw	1
  3050  0E33                     u2805:
  3051  0E33  1003               	clrc
  3052  0E34  0DA2               	rlf	___wmul@multiplicand,f
  3053  0E35  0DA3               	rlf	___wmul@multiplicand+1,f
  3054  0E36  3EFF               	addlw	-1
  3055  0E37  1D03               	skipz
  3056  0E38  2E33               	goto	u2805
  3057  0E39  3001               	movlw	1
  3058  0E3A                     u2815:
  3059  0E3A  1003               	clrc
  3060  0E3B  0CA1               	rrf	___wmul@multiplier+1,f
  3061  0E3C  0CA0               	rrf	___wmul@multiplier,f
  3062  0E3D  3EFF               	addlw	-1
  3063  0E3E  1D03               	skipz
  3064  0E3F  2E3A               	goto	u2815
  3065  0E40  0820               	movf	___wmul@multiplier,w
  3066  0E41  0421               	iorwf	___wmul@multiplier+1,w
  3067  0E42  1D03               	btfss	3,2
  3068  0E43  2E2A               	goto	l3167
  3069  0E44  0825               	movf	___wmul@product+1,w
  3070  0E45  00A1               	movwf	?___wmul+1
  3071  0E46  0824               	movf	___wmul@product,w
  3072  0E47  00A0               	movwf	?___wmul
  3073  0E48  0008               	return
  3074  0E49                     __end_of___wmul:
  3075                           
  3076                           	psect	text8
  3077  0F2E                     __ptext8:	
  3078 ;; *************** function ___lwdiv *****************
  3079 ;; Defined at:
  3080 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/lwdiv.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  divisor         2    0[BANK0 ] unsigned int 
  3083 ;;  dividend        2    2[BANK0 ] unsigned int 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  quotient        2    6[BANK0 ] unsigned int 
  3086 ;;  counter         1    5[BANK0 ] unsigned char 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  2    0[BANK0 ] unsigned int 
  3089 ;; Registers used:
  3090 ;;		wreg, status,2, status,0
  3091 ;; Tracked objects:
  3092 ;;		On entry : 300/0
  3093 ;;		On exit  : 300/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3096 ;;      Params:         0       4       0       0
  3097 ;;      Locals:         0       3       0       0
  3098 ;;      Temps:          0       1       0       0
  3099 ;;      Totals:         0       8       0       0
  3100 ;;Total ram usage:        8 bytes
  3101 ;; Hardware stack levels used: 1
  3102 ;; Hardware stack levels required when called: 2
  3103 ;; This function calls:
  3104 ;;		Nothing
  3105 ;; This function is called by:
  3106 ;;		_print_val
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110  0F2E                     ___lwdiv:	
  3111                           ;psect for function ___lwdiv
  3112                           
  3113                           
  3114                           ;incstack = 0
  3115                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3116  0F2E  01A6               	clrf	___lwdiv@quotient
  3117  0F2F  01A7               	clrf	___lwdiv@quotient+1
  3118  0F30  0820               	movf	___lwdiv@divisor,w
  3119  0F31  0421               	iorwf	___lwdiv@divisor+1,w
  3120  0F32  1903               	btfsc	3,2
  3121  0F33  2F65               	goto	l3201
  3122  0F34  01A5               	clrf	___lwdiv@counter
  3123  0F35  0AA5               	incf	___lwdiv@counter,f
  3124  0F36                     l3189:
  3125  0F36  1BA1               	btfsc	___lwdiv@divisor+1,7
  3126  0F37  2F44               	goto	l3191
  3127  0F38  3001               	movlw	1
  3128  0F39                     u2845:
  3129  0F39  1003               	clrc
  3130  0F3A  0DA0               	rlf	___lwdiv@divisor,f
  3131  0F3B  0DA1               	rlf	___lwdiv@divisor+1,f
  3132  0F3C  3EFF               	addlw	-1
  3133  0F3D  1D03               	skipz
  3134  0F3E  2F39               	goto	u2845
  3135  0F3F  3001               	movlw	1
  3136  0F40  00A4               	movwf	??___lwdiv
  3137  0F41  0824               	movf	??___lwdiv,w
  3138  0F42  07A5               	addwf	___lwdiv@counter,f
  3139  0F43  2F36               	goto	l3189
  3140  0F44                     l3191:
  3141  0F44  3001               	movlw	1
  3142  0F45                     u2865:
  3143  0F45  1003               	clrc
  3144  0F46  0DA6               	rlf	___lwdiv@quotient,f
  3145  0F47  0DA7               	rlf	___lwdiv@quotient+1,f
  3146  0F48  3EFF               	addlw	-1
  3147  0F49  1D03               	skipz
  3148  0F4A  2F45               	goto	u2865
  3149  0F4B  0821               	movf	___lwdiv@divisor+1,w
  3150  0F4C  0223               	subwf	___lwdiv@dividend+1,w
  3151  0F4D  1D03               	skipz
  3152  0F4E  2F51               	goto	u2875
  3153  0F4F  0820               	movf	___lwdiv@divisor,w
  3154  0F50  0222               	subwf	___lwdiv@dividend,w
  3155  0F51                     u2875:
  3156  0F51  1C03               	skipc
  3157  0F52  2F5A               	goto	l3197
  3158  0F53  0820               	movf	___lwdiv@divisor,w
  3159  0F54  02A2               	subwf	___lwdiv@dividend,f
  3160  0F55  0821               	movf	___lwdiv@divisor+1,w
  3161  0F56  1C03               	skipc
  3162  0F57  03A3               	decf	___lwdiv@dividend+1,f
  3163  0F58  02A3               	subwf	___lwdiv@dividend+1,f
  3164  0F59  1426               	bsf	___lwdiv@quotient,0
  3165  0F5A                     l3197:
  3166  0F5A  3001               	movlw	1
  3167  0F5B                     u2885:
  3168  0F5B  1003               	clrc
  3169  0F5C  0CA1               	rrf	___lwdiv@divisor+1,f
  3170  0F5D  0CA0               	rrf	___lwdiv@divisor,f
  3171  0F5E  3EFF               	addlw	-1
  3172  0F5F  1D03               	skipz
  3173  0F60  2F5B               	goto	u2885
  3174  0F61  3001               	movlw	1
  3175  0F62  02A5               	subwf	___lwdiv@counter,f
  3176  0F63  1D03               	btfss	3,2
  3177  0F64  2F44               	goto	l3191
  3178  0F65                     l3201:
  3179  0F65  0827               	movf	___lwdiv@quotient+1,w
  3180  0F66  00A1               	movwf	?___lwdiv+1
  3181  0F67  0826               	movf	___lwdiv@quotient,w
  3182  0F68  00A0               	movwf	?___lwdiv
  3183  0F69  0008               	return
  3184  0F6A                     __end_of___lwdiv:
  3185                           
  3186                           	psect	text9
  3187  0DEA                     __ptext9:	
  3188 ;; *************** function _UART_Write_Text *****************
  3189 ;; Defined at:
  3190 ;;		line 73 in file "usart.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;  text            1    wreg     PTR unsigned char 
  3193 ;;		 -> STR_27(3), STR_25(3), STR_24(3), STR_23(3), 
  3194 ;;		 -> STR_22(5), STR_21(6), STR_20(5), STR_19(13), 
  3195 ;;		 -> STR_18(14), STR_17(12), STR_15(7), STR_13(8), 
  3196 ;;		 -> STR_12(10), STR_5(14), 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  text            1   11[BANK0 ] PTR unsigned char 
  3199 ;;		 -> STR_27(3), STR_25(3), STR_24(3), STR_23(3), 
  3200 ;;		 -> STR_22(5), STR_21(6), STR_20(5), STR_19(13), 
  3201 ;;		 -> STR_18(14), STR_17(12), STR_15(7), STR_13(8), 
  3202 ;;		 -> STR_12(10), STR_5(14), 
  3203 ;;  i               2    9[BANK0 ] int 
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  1    wreg      void 
  3206 ;; Registers used:
  3207 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 200/0
  3210 ;;		On exit  : 300/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3213 ;;      Params:         0       0       0       0
  3214 ;;      Locals:         0       3       0       0
  3215 ;;      Temps:          0       0       0       0
  3216 ;;      Totals:         0       3       0       0
  3217 ;;Total ram usage:        3 bytes
  3218 ;; Hardware stack levels used: 1
  3219 ;; Hardware stack levels required when called: 3
  3220 ;; This function calls:
  3221 ;;		_UART_Write
  3222 ;; This function is called by:
  3223 ;;		_main
  3224 ;;		_print_cnt
  3225 ;;		_print_preset
  3226 ;;		_print_cmd_mov
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230  0DEA                     _UART_Write_Text:	
  3231                           ;psect for function _UART_Write_Text
  3232                           
  3233                           
  3234                           ;incstack = 0
  3235                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3236                           ;UART_Write_Text@text stored from wreg
  3237  0DEA  1283               	bcf	3,5	;RP0=0, select bank0
  3238  0DEB  00AB               	movwf	UART_Write_Text@text
  3239                           
  3240                           ;usart.c: 74:     int i;;usart.c: 75:     for (i = 0; text[i] != '\0'; i++)
  3241  0DEC  01A9               	clrf	UART_Write_Text@i
  3242  0DED  01AA               	clrf	UART_Write_Text@i+1
  3243  0DEE                     l3211:
  3244  0DEE  0829               	movf	UART_Write_Text@i,w
  3245  0DEF  072B               	addwf	UART_Write_Text@text,w
  3246  0DF0  0084               	movwf	4
  3247  0DF1  118A  2500  158A   	fcall	stringdir
  3248  0DF4  3A00               	xorlw	0
  3249  0DF5  1903               	btfsc	3,2
  3250  0DF6  0008               	return
  3251                           
  3252                           ;usart.c: 76:         UART_Write(text[i]);
  3253  0DF7  0829               	movf	UART_Write_Text@i,w
  3254  0DF8  072B               	addwf	UART_Write_Text@text,w
  3255  0DF9  0084               	movwf	4
  3256  0DFA  118A  2500  158A   	fcall	stringdir
  3257  0DFD  158A  26C2  158A   	fcall	_UART_Write
  3258  0E00  3001               	movlw	1
  3259  0E01  07A9               	addwf	UART_Write_Text@i,f
  3260  0E02  1803               	skipnc
  3261  0E03  0AAA               	incf	UART_Write_Text@i+1,f
  3262  0E04  3000               	movlw	0
  3263  0E05  07AA               	addwf	UART_Write_Text@i+1,f
  3264  0E06  2DEE               	goto	l3211
  3265  0E07                     __end_of_UART_Write_Text:
  3266                           
  3267                           	psect	text10
  3268  0E6A                     __ptext10:	
  3269 ;; *************** function _UART_Write_Text_CRLF *****************
  3270 ;; Defined at:
  3271 ;;		line 79 in file "usart.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;  text            1    wreg     PTR unsigned char 
  3274 ;;		 -> STR_28(2), STR_26(2), STR_16(2), STR_14(7), 
  3275 ;;		 -> STR_11(5), STR_10(7), STR_9(6), STR_8(6), 
  3276 ;;		 -> STR_7(5), STR_6(5), STR_4(7), STR_3(21), 
  3277 ;;		 -> STR_2(23), STR_1(10), 
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;  text            1   11[BANK0 ] PTR unsigned char 
  3280 ;;		 -> STR_28(2), STR_26(2), STR_16(2), STR_14(7), 
  3281 ;;		 -> STR_11(5), STR_10(7), STR_9(6), STR_8(6), 
  3282 ;;		 -> STR_7(5), STR_6(5), STR_4(7), STR_3(21), 
  3283 ;;		 -> STR_2(23), STR_1(10), 
  3284 ;;  i               2    9[BANK0 ] int 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 300/0
  3291 ;;		On exit  : 300/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3294 ;;      Params:         0       0       0       0
  3295 ;;      Locals:         0       3       0       0
  3296 ;;      Temps:          0       0       0       0
  3297 ;;      Totals:         0       3       0       0
  3298 ;;Total ram usage:        3 bytes
  3299 ;; Hardware stack levels used: 1
  3300 ;; Hardware stack levels required when called: 3
  3301 ;; This function calls:
  3302 ;;		_UART_Write
  3303 ;; This function is called by:
  3304 ;;		_main
  3305 ;;		_print_preset
  3306 ;;		_print_cmd_mov
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310  0E6A                     _UART_Write_Text_CRLF:	
  3311                           ;psect for function _UART_Write_Text_CRLF
  3312                           
  3313                           
  3314                           ;incstack = 0
  3315                           ; Regs used in _UART_Write_Text_CRLF: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3316                           ;UART_Write_Text_CRLF@text stored from wreg
  3317  0E6A  00AB               	movwf	UART_Write_Text_CRLF@text
  3318                           
  3319                           ;usart.c: 80:     int i;;usart.c: 81:     for (i = 0; text[i] != '\0'; i++) {
  3320  0E6B  01A9               	clrf	UART_Write_Text_CRLF@i
  3321  0E6C  01AA               	clrf	UART_Write_Text_CRLF@i+1
  3322  0E6D                     l3307:
  3323  0E6D  0829               	movf	UART_Write_Text_CRLF@i,w
  3324  0E6E  072B               	addwf	UART_Write_Text_CRLF@text,w
  3325  0E6F  0084               	movwf	4
  3326  0E70  118A  2500  158A   	fcall	stringdir
  3327  0E73  3A00               	xorlw	0
  3328  0E74  1903               	btfsc	3,2
  3329  0E75  2E86               	goto	l3309
  3330                           
  3331                           ;usart.c: 82:         UART_Write(text[i]);
  3332  0E76  0829               	movf	UART_Write_Text_CRLF@i,w
  3333  0E77  072B               	addwf	UART_Write_Text_CRLF@text,w
  3334  0E78  0084               	movwf	4
  3335  0E79  118A  2500  158A   	fcall	stringdir
  3336  0E7C  158A  26C2  158A   	fcall	_UART_Write
  3337                           
  3338                           ;usart.c: 83:     }
  3339  0E7F  3001               	movlw	1
  3340  0E80  07A9               	addwf	UART_Write_Text_CRLF@i,f
  3341  0E81  1803               	skipnc
  3342  0E82  0AAA               	incf	UART_Write_Text_CRLF@i+1,f
  3343  0E83  3000               	movlw	0
  3344  0E84  07AA               	addwf	UART_Write_Text_CRLF@i+1,f
  3345  0E85  2E6D               	goto	l3307
  3346  0E86                     l3309:
  3347                           
  3348                           ;usart.c: 84:     UART_Write(0x0C);
  3349  0E86  300C               	movlw	12
  3350  0E87  158A  26C2  158A   	fcall	_UART_Write
  3351                           
  3352                           ;usart.c: 85:     UART_Write(0x0A);
  3353  0E8A  300A               	movlw	10
  3354  0E8B  158A  26C2         	fcall	_UART_Write
  3355  0E8D  0008               	return
  3356  0E8E                     __end_of_UART_Write_Text_CRLF:
  3357                           
  3358                           	psect	text11
  3359  0EC2                     __ptext11:	
  3360 ;; *************** function _UART_Write *****************
  3361 ;; Defined at:
  3362 ;;		line 59 in file "usart.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;  data            1    wreg     unsigned char 
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;  data            1    4[BANK0 ] unsigned char 
  3367 ;;  timeout         4    5[BANK0 ] unsigned long 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      void 
  3370 ;; Registers used:
  3371 ;;		wreg
  3372 ;; Tracked objects:
  3373 ;;		On entry : 300/0
  3374 ;;		On exit  : 300/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3377 ;;      Params:         0       0       0       0
  3378 ;;      Locals:         0       5       0       0
  3379 ;;      Temps:          0       4       0       0
  3380 ;;      Totals:         0       9       0       0
  3381 ;;Total ram usage:        9 bytes
  3382 ;; Hardware stack levels used: 1
  3383 ;; Hardware stack levels required when called: 2
  3384 ;; This function calls:
  3385 ;;		Nothing
  3386 ;; This function is called by:
  3387 ;;		_print_val
  3388 ;;		_print_preset
  3389 ;;		_UART_Write_Text
  3390 ;;		_UART_Write_Text_CRLF
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394  0EC2                     _UART_Write:	
  3395                           ;psect for function _UART_Write
  3396                           
  3397                           
  3398                           ;incstack = 0
  3399                           ; Regs used in _UART_Write: [wreg]
  3400                           ;UART_Write@data stored from wreg
  3401  0EC2  00A4               	movwf	UART_Write@data
  3402                           
  3403                           ;usart.c: 60:     unsigned long timeout = 0x1FFFF;
  3404  0EC3  3000               	movlw	0
  3405  0EC4  00A8               	movwf	UART_Write@timeout+3
  3406  0EC5  3001               	movlw	1
  3407  0EC6  00A7               	movwf	UART_Write@timeout+2
  3408  0EC7  30FF               	movlw	255
  3409  0EC8  00A6               	movwf	UART_Write@timeout+1
  3410  0EC9  30FF               	movlw	255
  3411  0ECA  00A5               	movwf	UART_Write@timeout
  3412                           
  3413                           ;usart.c: 62:     while (!TRMT) {
  3414  0ECB  2EE8               	goto	l431
  3415  0ECC                     l2123:
  3416                           
  3417                           ;usart.c: 64:             timeout--;
  3418  0ECC  3001               	movlw	1
  3419  0ECD  00A0               	movwf	??_UART_Write
  3420  0ECE  3000               	movlw	0
  3421  0ECF  00A1               	movwf	??_UART_Write+1
  3422  0ED0  3000               	movlw	0
  3423  0ED1  00A2               	movwf	??_UART_Write+2
  3424  0ED2  3000               	movlw	0
  3425  0ED3  00A3               	movwf	??_UART_Write+3
  3426  0ED4  0820               	movf	??_UART_Write,w
  3427  0ED5  02A5               	subwf	UART_Write@timeout,f
  3428  0ED6  0821               	movf	??_UART_Write+1,w
  3429  0ED7  1C03               	skipc
  3430  0ED8  0F21               	incfsz	??_UART_Write+1,w
  3431  0ED9  2EDB               	goto	u1415
  3432  0EDA  2EDC               	goto	u1416
  3433  0EDB                     u1415:
  3434  0EDB  02A6               	subwf	UART_Write@timeout+1,f
  3435  0EDC                     u1416:
  3436  0EDC  0822               	movf	??_UART_Write+2,w
  3437  0EDD  1C03               	skipc
  3438  0EDE  0F22               	incfsz	??_UART_Write+2,w
  3439  0EDF  2EE1               	goto	u1417
  3440  0EE0  2EE2               	goto	u1418
  3441  0EE1                     u1417:
  3442  0EE1  02A7               	subwf	UART_Write@timeout+2,f
  3443  0EE2                     u1418:
  3444  0EE2  0823               	movf	??_UART_Write+3,w
  3445  0EE3  1C03               	skipc
  3446  0EE4  0F23               	incfsz	??_UART_Write+3,w
  3447  0EE5  2EE7               	goto	u1419
  3448  0EE6  2EE8               	goto	l431
  3449  0EE7                     u1419:
  3450  0EE7  02A8               	subwf	UART_Write@timeout+3,f
  3451  0EE8                     l431:	
  3452                           ;usart.c: 68:     }
  3453                           
  3454                           
  3455                           ;usart.c: 62:     while (!TRMT) {
  3456  0EE8  1683               	bsf	3,5	;RP0=1, select bank1
  3457  0EE9  1898               	btfsc	24,1	;volatile
  3458  0EEA  2EF2               	goto	l2125
  3459                           
  3460                           ;usart.c: 63:         if (timeout > 0) {
  3461  0EEB  1283               	bcf	3,5	;RP0=0, select bank0
  3462  0EEC  0828               	movf	UART_Write@timeout+3,w
  3463  0EED  0427               	iorwf	UART_Write@timeout+2,w
  3464  0EEE  0426               	iorwf	UART_Write@timeout+1,w
  3465  0EEF  0425               	iorwf	UART_Write@timeout,w
  3466  0EF0  1D03               	btfss	3,2
  3467  0EF1  2ECC               	goto	l2123
  3468  0EF2                     l2125:
  3469                           
  3470                           ;usart.c: 70:     TXREG = data;
  3471  0EF2  1283               	bcf	3,5	;RP0=0, select bank0
  3472  0EF3  0824               	movf	UART_Write@data,w
  3473  0EF4  0099               	movwf	25	;volatile
  3474  0EF5  0008               	return
  3475  0EF6                     __end_of_UART_Write:
  3476                           
  3477                           	psect	text12
  3478  0DA1                     __ptext12:	
  3479 ;; *************** function _UC_Init *****************
  3480 ;; Defined at:
  3481 ;;		line 629 in file "main.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;		None
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;		None
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg, status,2, status,0
  3490 ;; Tracked objects:
  3491 ;;		On entry : B00/0
  3492 ;;		On exit  : B00/100
  3493 ;;		Unchanged: 800/0
  3494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3495 ;;      Params:         0       0       0       0
  3496 ;;      Locals:         0       0       0       0
  3497 ;;      Temps:          0       0       0       0
  3498 ;;      Totals:         0       0       0       0
  3499 ;;Total ram usage:        0 bytes
  3500 ;; Hardware stack levels used: 1
  3501 ;; Hardware stack levels required when called: 2
  3502 ;; This function calls:
  3503 ;;		Nothing
  3504 ;; This function is called by:
  3505 ;;		_main
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509  0DA1                     _UC_Init:	
  3510                           ;psect for function _UC_Init
  3511                           
  3512                           
  3513                           ;main.c: 630:     PCONbits.OSCF = 1;
  3514                           
  3515                           ;incstack = 0
  3516                           ; Regs used in _UC_Init: [wreg+status,2+status,0]
  3517  0DA1  1683               	bsf	3,5	;RP0=1, select bank1
  3518  0DA2  158E               	bsf	14,3	;volatile
  3519                           
  3520                           ;main.c: 633:     if ((PCONbits.nPOR == 1) && (PCONbits.nBOR == 1)) {
  3521  0DA3  188E               	btfsc	14,1	;volatile
  3522  0DA4  1C0E               	btfss	14,0	;volatile
  3523  0DA5  2DA9               	goto	l3415
  3524                           
  3525                           ;main.c: 635:         is_reboot = 1;
  3526  0DA6  1283               	bcf	3,5	;RP0=0, select bank0
  3527  0DA7  01D8               	clrf	_is_reboot
  3528  0DA8  0AD8               	incf	_is_reboot,f
  3529  0DA9                     l3415:
  3530                           
  3531                           ;main.c: 638:     PORTA = 0;
  3532  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  3533  0DAA  0185               	clrf	5	;volatile
  3534                           
  3535                           ;main.c: 639:     PORTB = 0;
  3536  0DAB  0186               	clrf	6	;volatile
  3537                           
  3538                           ;main.c: 641:     CMCON = 7;
  3539  0DAC  3007               	movlw	7
  3540  0DAD  009F               	movwf	31	;volatile
  3541                           
  3542                           ;main.c: 643:     OPTION_REGbits.nRBPU = 1;
  3543  0DAE  1683               	bsf	3,5	;RP0=1, select bank1
  3544  0DAF  1781               	bsf	1,7	;volatile
  3545                           
  3546                           ;main.c: 644:     OPTION_REGbits.PSA = 1;
  3547  0DB0  1581               	bsf	1,3	;volatile
  3548                           
  3549                           ;main.c: 645:     OPTION_REGbits.PS = 0b111;
  3550  0DB1  3007               	movlw	7
  3551  0DB2  0481               	iorwf	1,f	;volatile
  3552                           
  3553                           ;main.c: 650:     INTCONbits.GIE = 1;
  3554  0DB3  178B               	bsf	11,7	;volatile
  3555                           
  3556                           ;main.c: 651:     INTCONbits.PEIE = 1;
  3557  0DB4  170B               	bsf	11,6	;volatile
  3558                           
  3559                           ;main.c: 660:     TRISA = 0b00000000;
  3560  0DB5  0185               	clrf	5	;volatile
  3561                           
  3562                           ;main.c: 670:     TRISB = 0b00000010;
  3563  0DB6  3002               	movlw	2
  3564  0DB7  0086               	movwf	6	;volatile
  3565  0DB8  0008               	return
  3566  0DB9                     __end_of_UC_Init:
  3567                           
  3568                           	psect	text13
  3569  07B7                     __ptext13:	
  3570 ;; *************** function _UART_Init *****************
  3571 ;; Defined at:
  3572 ;;		line 12 in file "usart.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;		None
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;  bauds_index     1    4[BANK0 ] unsigned char 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  1    wreg      void 
  3579 ;; Registers used:
  3580 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : B00/100
  3583 ;;		On exit  : 300/100
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3586 ;;      Params:         0       0       0       0
  3587 ;;      Locals:         0       1       0       0
  3588 ;;      Temps:          0       2       0       0
  3589 ;;      Totals:         0       3       0       0
  3590 ;;Total ram usage:        3 bytes
  3591 ;; Hardware stack levels used: 1
  3592 ;; Hardware stack levels required when called: 4
  3593 ;; This function calls:
  3594 ;;		_BAUDS_get
  3595 ;; This function is called by:
  3596 ;;		_main
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600  07B7                     _UART_Init:	
  3601                           ;psect for function _UART_Init
  3602                           
  3603                           
  3604                           ;usart.c: 16:     uint8_t bauds_index = BAUDS_get();
  3605                           
  3606                           ;incstack = 0
  3607                           ; Regs used in _UART_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3608  07B7  118A  27FB  118A   	fcall	_BAUDS_get
  3609  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  3610  07BB  00A2               	movwf	??_UART_Init
  3611  07BC  0822               	movf	??_UART_Init,w
  3612  07BD  00A4               	movwf	UART_Init@bauds_index
  3613                           
  3614                           ;usart.c: 18:     switch (bauds_index) {
  3615  07BE  2FD7               	goto	l3449
  3616  07BF                     l421:	
  3617                           ;usart.c: 19:         case 0:
  3618                           
  3619                           
  3620                           ;usart.c: 20:             BRGH = 0;
  3621  07BF  1683               	bsf	3,5	;RP0=1, select bank1
  3622  07C0  1118               	bcf	24,2	;volatile
  3623  07C1                     l3435:
  3624                           
  3625                           ;usart.c: 21:             SPBRG = 25;
  3626  07C1  3019               	movlw	25
  3627  07C2  2FD2               	goto	L12
  3628  07C3                     l423:	
  3629                           ;usart.c: 23:         case 1:
  3630                           
  3631                           ;usart.c: 22:             break;
  3632                           
  3633                           
  3634                           ;usart.c: 24:             BRGH = 1;
  3635  07C3  1683               	bsf	3,5	;RP0=1, select bank1
  3636  07C4  1518               	bsf	24,2	;volatile
  3637                           
  3638                           ;usart.c: 25:             SPBRG = 51;
  3639  07C5  3033               	movlw	51
  3640  07C6  2FD2               	goto	L12
  3641  07C7                     l424:	
  3642                           ;usart.c: 30:         case 3:
  3643                           
  3644                           ;usart.c: 26:             break;
  3645                           
  3646                           
  3647                           ;usart.c: 31:             BRGH = 1;
  3648  07C7  1683               	bsf	3,5	;RP0=1, select bank1
  3649  07C8  1518               	bsf	24,2	;volatile
  3650                           
  3651                           ;usart.c: 32:             SPBRG = 12;
  3652  07C9  300C               	movlw	12
  3653  07CA  2FD2               	goto	L12
  3654  07CB                     l425:	
  3655                           ;usart.c: 34:         case 4:
  3656                           
  3657                           ;usart.c: 33:             break;
  3658                           
  3659                           
  3660                           ;usart.c: 35:             BRGH = 1;
  3661  07CB  1683               	bsf	3,5	;RP0=1, select bank1
  3662  07CC  1518               	bsf	24,2	;volatile
  3663                           
  3664                           ;usart.c: 36:             SPBRG = 6;
  3665  07CD  3006               	movlw	6
  3666  07CE  2FD2               	goto	L12
  3667  07CF                     l426:	
  3668                           ;usart.c: 38:         case 5:
  3669                           
  3670                           ;usart.c: 37:             break;
  3671                           
  3672                           
  3673                           ;usart.c: 39:             BRGH = 1;
  3674  07CF  1683               	bsf	3,5	;RP0=1, select bank1
  3675  07D0  1518               	bsf	24,2	;volatile
  3676                           
  3677                           ;usart.c: 40:             SPBRG = 1;
  3678  07D1  3001               	movlw	1
  3679  07D2                     L12:
  3680  07D2  0099               	movwf	25	;volatile
  3681                           
  3682                           ;usart.c: 41:             break;
  3683  07D3  2FF0               	goto	l422
  3684  07D4                     l427:	
  3685                           ;usart.c: 42:         default:
  3686                           
  3687                           
  3688                           ;usart.c: 43:             BRGH = 1;
  3689  07D4  1683               	bsf	3,5	;RP0=1, select bank1
  3690  07D5  1518               	bsf	24,2	;volatile
  3691  07D6  2FC1               	goto	l3435
  3692  07D7                     l3449:
  3693  07D7  0824               	movf	UART_Init@bauds_index,w
  3694  07D8  00A2               	movwf	??_UART_Init
  3695  07D9  01A3               	clrf	??_UART_Init+1
  3696                           
  3697                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3698                           ; Switch size 1, requested type "simple"
  3699                           ; Number of cases is 1, Range of values is 0 to 0
  3700                           ; switch strategies available:
  3701                           ; Name         Instructions Cycles
  3702                           ; simple_byte            4     3 (average)
  3703                           ; direct_byte            9     7 (fixed)
  3704                           ; jumptable            260     6 (fixed)
  3705                           ;	Chosen strategy is simple_byte
  3706  07DA  0823               	movf	??_UART_Init+1,w
  3707  07DB  3A00               	xorlw	0	; case 0
  3708  07DC  1903               	skipnz
  3709  07DD  2FDF               	goto	l4001
  3710  07DE  2FD4               	goto	l427
  3711  07DF                     l4001:
  3712                           
  3713                           ; Switch size 1, requested type "simple"
  3714                           ; Number of cases is 5, Range of values is 0 to 5
  3715                           ; switch strategies available:
  3716                           ; Name         Instructions Cycles
  3717                           ; simple_byte           16     9 (average)
  3718                           ; direct_byte           19     7 (fixed)
  3719                           ; jumptable            260     6 (fixed)
  3720                           ;	Chosen strategy is simple_byte
  3721  07DF  0822               	movf	??_UART_Init,w
  3722  07E0  3A00               	xorlw	0	; case 0
  3723  07E1  1903               	skipnz
  3724  07E2  2FBF               	goto	l421
  3725  07E3  3A01               	xorlw	1	; case 1
  3726  07E4  1903               	skipnz
  3727  07E5  2FC3               	goto	l423
  3728  07E6  3A02               	xorlw	2	; case 3
  3729  07E7  1903               	skipnz
  3730  07E8  2FC7               	goto	l424
  3731  07E9  3A07               	xorlw	7	; case 4
  3732  07EA  1903               	skipnz
  3733  07EB  2FCB               	goto	l425
  3734  07EC  3A01               	xorlw	1	; case 5
  3735  07ED  1903               	skipnz
  3736  07EE  2FCF               	goto	l426
  3737  07EF  2FD4               	goto	l427
  3738  07F0                     l422:
  3739                           
  3740                           ;usart.c: 50:     SYNC = 0;
  3741  07F0  1218               	bcf	24,4	;volatile
  3742                           
  3743                           ;usart.c: 51:     SPEN = 1;
  3744  07F1  1283               	bcf	3,5	;RP0=0, select bank0
  3745  07F2  1798               	bsf	24,7	;volatile
  3746                           
  3747                           ;usart.c: 52:     CREN = 1;
  3748  07F3  1618               	bsf	24,4	;volatile
  3749                           
  3750                           ;usart.c: 53:     TXEN = 1;
  3751  07F4  1683               	bsf	3,5	;RP0=1, select bank1
  3752  07F5  1698               	bsf	24,5	;volatile
  3753                           
  3754                           ;usart.c: 55:     PIR1bits.RCIF = 0;
  3755  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  3756  07F7  128C               	bcf	12,5	;volatile
  3757                           
  3758                           ;usart.c: 56:     PIE1bits.RCIE = 1;
  3759  07F8  1683               	bsf	3,5	;RP0=1, select bank1
  3760  07F9  168C               	bsf	12,5	;volatile
  3761  07FA  0008               	return
  3762  07FB                     __end_of_UART_Init:
  3763                           
  3764                           	psect	text14
  3765  07FB                     __ptext14:	
  3766 ;; *************** function _BAUDS_get *****************
  3767 ;; Defined at:
  3768 ;;		line 975 in file "main.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;		None
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;		None
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      unsigned char 
  3775 ;; Registers used:
  3776 ;;		wreg, status,2, status,0, pclath, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : B00/100
  3779 ;;		On exit  : 300/100
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3782 ;;      Params:         0       0       0       0
  3783 ;;      Locals:         0       0       0       0
  3784 ;;      Temps:          0       0       0       0
  3785 ;;      Totals:         0       0       0       0
  3786 ;;Total ram usage:        0 bytes
  3787 ;; Hardware stack levels used: 1
  3788 ;; Hardware stack levels required when called: 3
  3789 ;; This function calls:
  3790 ;;		_eeprom_read
  3791 ;; This function is called by:
  3792 ;;		_UART_Init
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796  07FB                     _BAUDS_get:	
  3797                           ;psect for function _BAUDS_get
  3798                           
  3799                           
  3800                           ;main.c: 977:     return eeprom_read(0xFF);
  3801                           
  3802                           ;incstack = 0
  3803                           ; Regs used in _BAUDS_get: [wreg+status,2+status,0+pclath+cstack]
  3804  07FB  30FF               	movlw	255
  3805  07FC  158A  258B         	fcall	_eeprom_read
  3806  07FE  0008               	return
  3807  07FF                     __end_of_BAUDS_get:
  3808                           
  3809                           	psect	text15
  3810  0D69                     __ptext15:	
  3811 ;; *************** function _TIMER2_Init *****************
  3812 ;; Defined at:
  3813 ;;		line 700 in file "main.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;		None
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0
  3822 ;; Tracked objects:
  3823 ;;		On entry : 300/100
  3824 ;;		On exit  : 300/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3827 ;;      Params:         0       0       0       0
  3828 ;;      Locals:         0       0       0       0
  3829 ;;      Temps:          0       0       0       0
  3830 ;;      Totals:         0       0       0       0
  3831 ;;Total ram usage:        0 bytes
  3832 ;; Hardware stack levels used: 1
  3833 ;; Hardware stack levels required when called: 2
  3834 ;; This function calls:
  3835 ;;		Nothing
  3836 ;; This function is called by:
  3837 ;;		_main
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841  0D69                     _TIMER2_Init:	
  3842                           ;psect for function _TIMER2_Init
  3843                           
  3844                           
  3845                           ;main.c: 704:     T2CONbits.TOUTPS = 0;
  3846                           
  3847                           ;incstack = 0
  3848                           ; Regs used in _TIMER2_Init: [wreg+status,2+status,0]
  3849  0D69  3087               	movlw	-121
  3850  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
  3851  0D6B  0592               	andwf	18,f	;volatile
  3852                           
  3853                           ;main.c: 705:     T2CONbits.T2CKPS = 1;
  3854  0D6C  0812               	movf	18,w	;volatile
  3855  0D6D  39FC               	andlw	-4
  3856  0D6E  3801               	iorlw	1
  3857  0D6F  0092               	movwf	18	;volatile
  3858                           
  3859                           ;main.c: 706:     PR2 = 250;
  3860  0D70  30FA               	movlw	250
  3861  0D71  1683               	bsf	3,5	;RP0=1, select bank1
  3862  0D72  0092               	movwf	18	;volatile
  3863                           
  3864                           ;main.c: 708:     PIR1bits.TMR2IF = 0;
  3865  0D73  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0D74  108C               	bcf	12,1	;volatile
  3867                           
  3868                           ;main.c: 709:     PIE1bits.TMR2IE = 1;
  3869  0D75  1683               	bsf	3,5	;RP0=1, select bank1
  3870  0D76  148C               	bsf	12,1	;volatile
  3871                           
  3872                           ;main.c: 711:     T2CONbits.TMR2ON = 1;
  3873  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  3874  0D78  1512               	bsf	18,2	;volatile
  3875  0D79  0008               	return
  3876  0D7A                     __end_of_TIMER2_Init:
  3877                           
  3878                           	psect	text16
  3879  0D49                     __ptext16:	
  3880 ;; *************** function _TIMER1_Init *****************
  3881 ;; Defined at:
  3882 ;;		line 681 in file "main.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;		None
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;		None
  3887 ;; Return value:  Size  Location     Type
  3888 ;;                  1    wreg      void 
  3889 ;; Registers used:
  3890 ;;		wreg
  3891 ;; Tracked objects:
  3892 ;;		On entry : 300/100
  3893 ;;		On exit  : 300/100
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3896 ;;      Params:         0       0       0       0
  3897 ;;      Locals:         0       0       0       0
  3898 ;;      Temps:          0       0       0       0
  3899 ;;      Totals:         0       0       0       0
  3900 ;;Total ram usage:        0 bytes
  3901 ;; Hardware stack levels used: 1
  3902 ;; Hardware stack levels required when called: 2
  3903 ;; This function calls:
  3904 ;;		Nothing
  3905 ;; This function is called by:
  3906 ;;		_main
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910  0D49                     _TIMER1_Init:	
  3911                           ;psect for function _TIMER1_Init
  3912                           
  3913                           
  3914                           ;main.c: 685:     T1CONbits.T1CKPS1 = 1;
  3915                           
  3916                           ;incstack = 0
  3917                           ; Regs used in _TIMER1_Init: [wreg]
  3918  0D49  1283               	bcf	3,5	;RP0=0, select bank0
  3919  0D4A  1690               	bsf	16,5	;volatile
  3920                           
  3921                           ;main.c: 686:     T1CONbits.T1CKPS0 = 1;
  3922  0D4B  1610               	bsf	16,4	;volatile
  3923                           
  3924                           ;main.c: 687:     T1CONbits.T1OSCEN = 0;
  3925  0D4C  1190               	bcf	16,3	;volatile
  3926                           
  3927                           ;main.c: 688:     T1CONbits.nT1SYNC = 1;
  3928  0D4D  1510               	bsf	16,2	;volatile
  3929                           
  3930                           ;main.c: 689:     T1CONbits.TMR1CS = 0;
  3931  0D4E  1090               	bcf	16,1	;volatile
  3932                           
  3933                           ;main.c: 690:     T1CONbits.TMR1ON = 1;
  3934  0D4F  1410               	bsf	16,0	;volatile
  3935                           
  3936                           ;main.c: 693:     TMR1H = 12;
  3937  0D50  300C               	movlw	12
  3938  0D51  008F               	movwf	15	;volatile
  3939                           
  3940                           ;main.c: 694:     TMR1L = 38;
  3941  0D52  3026               	movlw	38
  3942  0D53  008E               	movwf	14	;volatile
  3943                           
  3944                           ;main.c: 696:     PIR1bits.TMR1IF = 0;
  3945  0D54  100C               	bcf	12,0	;volatile
  3946                           
  3947                           ;main.c: 697:     PIE1bits.TMR1IE = 1;
  3948  0D55  1683               	bsf	3,5	;RP0=1, select bank1
  3949  0D56  140C               	bsf	12,0	;volatile
  3950  0D57  0008               	return
  3951  0D58                     __end_of_TIMER1_Init:
  3952                           
  3953                           	psect	text17
  3954  0E8E                     __ptext17:	
  3955 ;; *************** function _SPEED_calc *****************
  3956 ;; Defined at:
  3957 ;;		line 913 in file "main.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  speed           1    wreg     unsigned char 
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;  speed           1   11[BANK0 ] unsigned char 
  3962 ;;  sp_calc         1   12[BANK0 ] unsigned char 
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  1    wreg      unsigned char 
  3965 ;; Registers used:
  3966 ;;		wreg, status,2, status,0, pclath, cstack
  3967 ;; Tracked objects:
  3968 ;;		On entry : 300/0
  3969 ;;		On exit  : 300/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3972 ;;      Params:         0       0       0       0
  3973 ;;      Locals:         0       2       0       0
  3974 ;;      Temps:          0       2       0       0
  3975 ;;      Totals:         0       4       0       0
  3976 ;;Total ram usage:        4 bytes
  3977 ;; Hardware stack levels used: 1
  3978 ;; Hardware stack levels required when called: 3
  3979 ;; This function calls:
  3980 ;;		___awdiv
  3981 ;; This function is called by:
  3982 ;;		_main
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986  0E8E                     _SPEED_calc:	
  3987                           ;psect for function _SPEED_calc
  3988                           
  3989                           
  3990                           ;incstack = 0
  3991                           ; Regs used in _SPEED_calc: [wreg+status,2+status,0+pclath+cstack]
  3992                           ;SPEED_calc@speed stored from wreg
  3993  0E8E  00AB               	movwf	SPEED_calc@speed
  3994                           
  3995                           ;main.c: 916:     if (speed > 0x32) {
  3996  0E8F  3033               	movlw	51
  3997  0E90  022B               	subwf	SPEED_calc@speed,w
  3998  0E91  1C03               	skipc
  3999  0E92  2E97               	goto	l351
  4000                           
  4001                           ;main.c: 917:         speed = 0x32;
  4002  0E93  3032               	movlw	50
  4003  0E94  00A9               	movwf	??_SPEED_calc
  4004  0E95  0829               	movf	??_SPEED_calc,w
  4005  0E96  00AB               	movwf	SPEED_calc@speed
  4006  0E97                     l351:	
  4007                           ;main.c: 918:     }
  4008                           
  4009                           
  4010                           ;main.c: 920:     if (speed < 0x06) {
  4011  0E97  3006               	movlw	6
  4012  0E98  022B               	subwf	SPEED_calc@speed,w
  4013  0E99  1803               	skipnc
  4014  0E9A  2E9F               	goto	l3571
  4015                           
  4016                           ;main.c: 921:         speed = 0x06;
  4017  0E9B  3006               	movlw	6
  4018  0E9C  00A9               	movwf	??_SPEED_calc
  4019  0E9D  0829               	movf	??_SPEED_calc,w
  4020  0E9E  00AB               	movwf	SPEED_calc@speed
  4021  0E9F                     l3571:
  4022                           
  4023                           ;main.c: 924:     sp_calc = 1 + ((0x32 - speed) / 2);
  4024  0E9F  3002               	movlw	2
  4025  0EA0  00A0               	movwf	___awdiv@divisor
  4026  0EA1  3000               	movlw	0
  4027  0EA2  00A1               	movwf	___awdiv@divisor+1
  4028  0EA3  3032               	movlw	50
  4029  0EA4  00A9               	movwf	??_SPEED_calc
  4030  0EA5  082B               	movf	SPEED_calc@speed,w
  4031  0EA6  0229               	subwf	??_SPEED_calc,w
  4032  0EA7  00A2               	movwf	___awdiv@dividend
  4033  0EA8  01A3               	clrf	___awdiv@dividend+1
  4034  0EA9  1C03               	skipc
  4035  0EAA  03A3               	decf	___awdiv@dividend+1,f
  4036  0EAB  118A  275E  158A   	fcall	___awdiv
  4037  0EAE  0820               	movf	?___awdiv,w
  4038  0EAF  3E01               	addlw	1
  4039  0EB0  00AA               	movwf	??_SPEED_calc+1
  4040  0EB1  082A               	movf	??_SPEED_calc+1,w
  4041  0EB2  00AC               	movwf	SPEED_calc@sp_calc
  4042                           
  4043                           ;main.c: 926:     if (sp_calc < 1) {
  4044  0EB3  082C               	movf	SPEED_calc@sp_calc,w
  4045  0EB4  1D03               	btfss	3,2
  4046  0EB5  2EB8               	goto	l3577
  4047                           
  4048                           ;main.c: 927:         sp_calc = 1;
  4049  0EB6  01AC               	clrf	SPEED_calc@sp_calc
  4050  0EB7  0AAC               	incf	SPEED_calc@sp_calc,f
  4051  0EB8                     l3577:
  4052                           
  4053                           ;main.c: 930:     if (sp_calc > 19) {
  4054  0EB8  3014               	movlw	20
  4055  0EB9  022C               	subwf	SPEED_calc@sp_calc,w
  4056  0EBA  1C03               	skipc
  4057  0EBB  2EC0               	goto	l354
  4058                           
  4059                           ;main.c: 932:         sp_calc = 19;
  4060  0EBC  3013               	movlw	19
  4061  0EBD  00A9               	movwf	??_SPEED_calc
  4062  0EBE  0829               	movf	??_SPEED_calc,w
  4063  0EBF  00AC               	movwf	SPEED_calc@sp_calc
  4064  0EC0                     l354:	
  4065                           ;main.c: 933:     }
  4066                           
  4067                           
  4068                           ;main.c: 935:     return sp_calc;
  4069  0EC0  082C               	movf	SPEED_calc@sp_calc,w
  4070  0EC1  0008               	return
  4071  0EC2                     __end_of_SPEED_calc:
  4072                           
  4073                           	psect	text18
  4074  075E                     __ptext18:	
  4075 ;; *************** function ___awdiv *****************
  4076 ;; Defined at:
  4077 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/awdiv.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  divisor         2    0[BANK0 ] int 
  4080 ;;  dividend        2    2[BANK0 ] int 
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  quotient        2    7[BANK0 ] int 
  4083 ;;  sign            1    6[BANK0 ] unsigned char 
  4084 ;;  counter         1    5[BANK0 ] unsigned char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  2    0[BANK0 ] int 
  4087 ;; Registers used:
  4088 ;;		wreg, status,2, status,0
  4089 ;; Tracked objects:
  4090 ;;		On entry : 300/0
  4091 ;;		On exit  : 300/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4094 ;;      Params:         0       4       0       0
  4095 ;;      Locals:         0       4       0       0
  4096 ;;      Temps:          0       1       0       0
  4097 ;;      Totals:         0       9       0       0
  4098 ;;Total ram usage:        9 bytes
  4099 ;; Hardware stack levels used: 1
  4100 ;; Hardware stack levels required when called: 2
  4101 ;; This function calls:
  4102 ;;		Nothing
  4103 ;; This function is called by:
  4104 ;;		_SPEED_calc
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108  075E                     ___awdiv:	
  4109                           ;psect for function ___awdiv
  4110                           
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4114  075E  01A6               	clrf	___awdiv@sign
  4115  075F  1FA1               	btfss	___awdiv@divisor+1,7
  4116  0760  2F68               	goto	l3347
  4117  0761  09A0               	comf	___awdiv@divisor,f
  4118  0762  09A1               	comf	___awdiv@divisor+1,f
  4119  0763  0AA0               	incf	___awdiv@divisor,f
  4120  0764  1903               	skipnz
  4121  0765  0AA1               	incf	___awdiv@divisor+1,f
  4122  0766  01A6               	clrf	___awdiv@sign
  4123  0767  0AA6               	incf	___awdiv@sign,f
  4124  0768                     l3347:
  4125  0768  1FA3               	btfss	___awdiv@dividend+1,7
  4126  0769  2F73               	goto	l3353
  4127  076A  09A2               	comf	___awdiv@dividend,f
  4128  076B  09A3               	comf	___awdiv@dividend+1,f
  4129  076C  0AA2               	incf	___awdiv@dividend,f
  4130  076D  1903               	skipnz
  4131  076E  0AA3               	incf	___awdiv@dividend+1,f
  4132  076F  3001               	movlw	1
  4133  0770  00A4               	movwf	??___awdiv
  4134  0771  0824               	movf	??___awdiv,w
  4135  0772  06A6               	xorwf	___awdiv@sign,f
  4136  0773                     l3353:
  4137  0773  01A7               	clrf	___awdiv@quotient
  4138  0774  01A8               	clrf	___awdiv@quotient+1
  4139  0775  0820               	movf	___awdiv@divisor,w
  4140  0776  0421               	iorwf	___awdiv@divisor+1,w
  4141  0777  1903               	btfsc	3,2
  4142  0778  2FAA               	goto	l3375
  4143  0779  01A5               	clrf	___awdiv@counter
  4144  077A  0AA5               	incf	___awdiv@counter,f
  4145  077B                     l3363:
  4146  077B  1BA1               	btfsc	___awdiv@divisor+1,7
  4147  077C  2F89               	goto	l3365
  4148  077D  3001               	movlw	1
  4149  077E                     u3135:
  4150  077E  1003               	clrc
  4151  077F  0DA0               	rlf	___awdiv@divisor,f
  4152  0780  0DA1               	rlf	___awdiv@divisor+1,f
  4153  0781  3EFF               	addlw	-1
  4154  0782  1D03               	skipz
  4155  0783  2F7E               	goto	u3135
  4156  0784  3001               	movlw	1
  4157  0785  00A4               	movwf	??___awdiv
  4158  0786  0824               	movf	??___awdiv,w
  4159  0787  07A5               	addwf	___awdiv@counter,f
  4160  0788  2F7B               	goto	l3363
  4161  0789                     l3365:
  4162  0789  3001               	movlw	1
  4163  078A                     u3155:
  4164  078A  1003               	clrc
  4165  078B  0DA7               	rlf	___awdiv@quotient,f
  4166  078C  0DA8               	rlf	___awdiv@quotient+1,f
  4167  078D  3EFF               	addlw	-1
  4168  078E  1D03               	skipz
  4169  078F  2F8A               	goto	u3155
  4170  0790  0821               	movf	___awdiv@divisor+1,w
  4171  0791  0223               	subwf	___awdiv@dividend+1,w
  4172  0792  1D03               	skipz
  4173  0793  2F96               	goto	u3165
  4174  0794  0820               	movf	___awdiv@divisor,w
  4175  0795  0222               	subwf	___awdiv@dividend,w
  4176  0796                     u3165:
  4177  0796  1C03               	skipc
  4178  0797  2F9F               	goto	l3371
  4179  0798  0820               	movf	___awdiv@divisor,w
  4180  0799  02A2               	subwf	___awdiv@dividend,f
  4181  079A  0821               	movf	___awdiv@divisor+1,w
  4182  079B  1C03               	skipc
  4183  079C  03A3               	decf	___awdiv@dividend+1,f
  4184  079D  02A3               	subwf	___awdiv@dividend+1,f
  4185  079E  1427               	bsf	___awdiv@quotient,0
  4186  079F                     l3371:
  4187  079F  3001               	movlw	1
  4188  07A0                     u3175:
  4189  07A0  1003               	clrc
  4190  07A1  0CA1               	rrf	___awdiv@divisor+1,f
  4191  07A2  0CA0               	rrf	___awdiv@divisor,f
  4192  07A3  3EFF               	addlw	-1
  4193  07A4  1D03               	skipz
  4194  07A5  2FA0               	goto	u3175
  4195  07A6  3001               	movlw	1
  4196  07A7  02A5               	subwf	___awdiv@counter,f
  4197  07A8  1D03               	btfss	3,2
  4198  07A9  2F89               	goto	l3365
  4199  07AA                     l3375:
  4200  07AA  0826               	movf	___awdiv@sign,w
  4201  07AB  1903               	btfsc	3,2
  4202  07AC  2FB2               	goto	l3379
  4203  07AD  09A7               	comf	___awdiv@quotient,f
  4204  07AE  09A8               	comf	___awdiv@quotient+1,f
  4205  07AF  0AA7               	incf	___awdiv@quotient,f
  4206  07B0  1903               	skipnz
  4207  07B1  0AA8               	incf	___awdiv@quotient+1,f
  4208  07B2                     l3379:
  4209  07B2  0828               	movf	___awdiv@quotient+1,w
  4210  07B3  00A1               	movwf	?___awdiv+1
  4211  07B4  0827               	movf	___awdiv@quotient,w
  4212  07B5  00A0               	movwf	?___awdiv
  4213  07B6  0008               	return
  4214  07B7                     __end_of___awdiv:
  4215                           
  4216                           	psect	text19
  4217  0EF6                     __ptext19:	
  4218 ;; *************** function _PRESET_save *****************
  4219 ;; Defined at:
  4220 ;;		line 944 in file "main.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  id              1    wreg     unsigned char 
  4223 ;;  pan             2    6[BANK0 ] unsigned int 
  4224 ;;  tilt            2    8[BANK0 ] unsigned int 
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;  id              1   12[BANK0 ] unsigned char 
  4227 ;;  _addr           1   13[BANK0 ] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      void 
  4230 ;; Registers used:
  4231 ;;		wreg, status,2, status,0, pclath, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : B00/0
  4234 ;;		On exit  : 200/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4237 ;;      Params:         0       4       0       0
  4238 ;;      Locals:         0       2       0       0
  4239 ;;      Temps:          0       2       0       0
  4240 ;;      Totals:         0       8       0       0
  4241 ;;Total ram usage:        8 bytes
  4242 ;; Hardware stack levels used: 1
  4243 ;; Hardware stack levels required when called: 4
  4244 ;; This function calls:
  4245 ;;		_eeprom_update
  4246 ;; This function is called by:
  4247 ;;		_main
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251  0EF6                     _PRESET_save:	
  4252                           ;psect for function _PRESET_save
  4253                           
  4254                           
  4255                           ;incstack = 0
  4256                           ; Regs used in _PRESET_save: [wreg+status,2+status,0+pclath+cstack]
  4257                           ;PRESET_save@id stored from wreg
  4258  0EF6  00AC               	movwf	PRESET_save@id
  4259                           
  4260                           ;main.c: 945:     uint8_t _addr = id * 4;
  4261  0EF7  082C               	movf	PRESET_save@id,w
  4262  0EF8  00AA               	movwf	??_PRESET_save
  4263  0EF9  3001               	movlw	1
  4264  0EFA                     u3265:
  4265  0EFA  1003               	clrc
  4266  0EFB  0DAA               	rlf	??_PRESET_save,f
  4267  0EFC  3EFF               	addlw	-1
  4268  0EFD  1D03               	skipz
  4269  0EFE  2EFA               	goto	u3265
  4270  0EFF  1003               	clrc
  4271  0F00  0D2A               	rlf	??_PRESET_save,w
  4272  0F01  00AB               	movwf	??_PRESET_save+1
  4273  0F02  082B               	movf	??_PRESET_save+1,w
  4274  0F03  00AD               	movwf	PRESET_save@_addr
  4275                           
  4276                           ;main.c: 947:     if (id < 50) {
  4277  0F04  3032               	movlw	50
  4278  0F05  022C               	subwf	PRESET_save@id,w
  4279  0F06  1803               	skipnc
  4280  0F07  0008               	return
  4281                           
  4282                           ;main.c: 949:         eeprom_update(_addr, pan & 0xFF);
  4283  0F08  0826               	movf	PRESET_save@pan,w
  4284  0F09  00AA               	movwf	??_PRESET_save
  4285  0F0A  082A               	movf	??_PRESET_save,w
  4286  0F0B  00A3               	movwf	eeprom_update@value
  4287  0F0C  082D               	movf	PRESET_save@_addr,w
  4288  0F0D  158A  2558  158A   	fcall	_eeprom_update
  4289                           
  4290                           ;main.c: 950:         eeprom_update(_addr + 1, (pan >> 8) & 0xFF);
  4291  0F10  1283               	bcf	3,5	;RP0=0, select bank0
  4292  0F11  0827               	movf	PRESET_save@pan+1,w
  4293  0F12  00AA               	movwf	??_PRESET_save
  4294  0F13  082A               	movf	??_PRESET_save,w
  4295  0F14  00A3               	movwf	eeprom_update@value
  4296  0F15  082D               	movf	PRESET_save@_addr,w
  4297  0F16  3E01               	addlw	1
  4298  0F17  158A  2558  158A   	fcall	_eeprom_update
  4299                           
  4300                           ;main.c: 952:         eeprom_update(_addr + 2, tilt & 0xFF);
  4301  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  4302  0F1B  0828               	movf	PRESET_save@tilt,w
  4303  0F1C  00AA               	movwf	??_PRESET_save
  4304  0F1D  082A               	movf	??_PRESET_save,w
  4305  0F1E  00A3               	movwf	eeprom_update@value
  4306  0F1F  082D               	movf	PRESET_save@_addr,w
  4307  0F20  3E02               	addlw	2
  4308  0F21  158A  2558  158A   	fcall	_eeprom_update
  4309                           
  4310                           ;main.c: 953:         eeprom_update(_addr + 3, (tilt >> 8) & 0xFF);
  4311  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  4312  0F25  0829               	movf	PRESET_save@tilt+1,w
  4313  0F26  00AA               	movwf	??_PRESET_save
  4314  0F27  082A               	movf	??_PRESET_save,w
  4315  0F28  00A3               	movwf	eeprom_update@value
  4316  0F29  082D               	movf	PRESET_save@_addr,w
  4317  0F2A  3E03               	addlw	3
  4318  0F2B  158A  2558         	fcall	_eeprom_update
  4319  0F2D  0008               	return
  4320  0F2E                     __end_of_PRESET_save:
  4321                           
  4322                           	psect	text20
  4323  0FA9                     __ptext20:	
  4324 ;; *************** function _PRESET_load *****************
  4325 ;; Defined at:
  4326 ;;		line 957 in file "main.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  id              1    wreg     unsigned char 
  4329 ;;  pan             1    2[BANK0 ] PTR unsigned int 
  4330 ;;		 -> main@pan_tmp_511(2), main@pan_tmp(2), 
  4331 ;;  tilt            1    3[BANK0 ] PTR unsigned int 
  4332 ;;		 -> main@tilt_tmp_512(2), main@tilt_tmp(2), 
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  id              1    6[BANK0 ] unsigned char 
  4335 ;;  _addr           1    7[BANK0 ] unsigned char 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  1    wreg      void 
  4338 ;; Registers used:
  4339 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 300/0
  4342 ;;		On exit  : 300/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4345 ;;      Params:         0       2       0       0
  4346 ;;      Locals:         0       2       0       0
  4347 ;;      Temps:          0       2       0       0
  4348 ;;      Totals:         0       6       0       0
  4349 ;;Total ram usage:        6 bytes
  4350 ;; Hardware stack levels used: 1
  4351 ;; Hardware stack levels required when called: 3
  4352 ;; This function calls:
  4353 ;;		_eeprom_read
  4354 ;; This function is called by:
  4355 ;;		_main
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359  0FA9                     _PRESET_load:	
  4360                           ;psect for function _PRESET_load
  4361                           
  4362                           
  4363                           ;incstack = 0
  4364                           ; Regs used in _PRESET_load: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4365                           ;PRESET_load@id stored from wreg
  4366  0FA9  00A6               	movwf	PRESET_load@id
  4367                           
  4368                           ;main.c: 958:     uint8_t _addr = id * 4;
  4369  0FAA  0826               	movf	PRESET_load@id,w
  4370  0FAB  00A4               	movwf	??_PRESET_load
  4371  0FAC  3001               	movlw	1
  4372  0FAD                     u3285:
  4373  0FAD  1003               	clrc
  4374  0FAE  0DA4               	rlf	??_PRESET_load,f
  4375  0FAF  3EFF               	addlw	-1
  4376  0FB0  1D03               	skipz
  4377  0FB1  2FAD               	goto	u3285
  4378  0FB2  1003               	clrc
  4379  0FB3  0D24               	rlf	??_PRESET_load,w
  4380  0FB4  00A5               	movwf	??_PRESET_load+1
  4381  0FB5  0825               	movf	??_PRESET_load+1,w
  4382  0FB6  00A7               	movwf	PRESET_load@_addr
  4383                           
  4384                           ;main.c: 960:     if (id < 50) {
  4385  0FB7  3032               	movlw	50
  4386  0FB8  0226               	subwf	PRESET_load@id,w
  4387  0FB9  1803               	skipnc
  4388  0FBA  0008               	return
  4389                           
  4390                           ;main.c: 962:         *pan = (uint16_t) (eeprom_read(_addr));
  4391  0FBB  0827               	movf	PRESET_load@_addr,w
  4392  0FBC  158A  258B  158A   	fcall	_eeprom_read
  4393  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  4394  0FC0  00A4               	movwf	??_PRESET_load
  4395  0FC1  01A5               	clrf	??_PRESET_load+1
  4396  0FC2  0822               	movf	PRESET_load@pan,w
  4397  0FC3  0084               	movwf	4
  4398  0FC4  0824               	movf	??_PRESET_load,w
  4399  0FC5  1383               	bcf	3,7	;select IRP bank0
  4400  0FC6  0080               	movwf	0
  4401  0FC7  0A84               	incf	4,f
  4402  0FC8  0825               	movf	??_PRESET_load+1,w
  4403  0FC9  0080               	movwf	0
  4404                           
  4405                           ;main.c: 963:         *pan |= (uint16_t) (eeprom_read(_addr + 1) << 8);
  4406  0FCA  0827               	movf	PRESET_load@_addr,w
  4407  0FCB  3E01               	addlw	1
  4408  0FCC  158A  258B  158A   	fcall	_eeprom_read
  4409  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  4410  0FD0  00A4               	movwf	??_PRESET_load
  4411  0FD1  01A5               	clrf	??_PRESET_load+1
  4412  0FD2  0824               	movf	??_PRESET_load,w
  4413  0FD3  00A5               	movwf	??_PRESET_load+1
  4414  0FD4  01A4               	clrf	??_PRESET_load
  4415  0FD5  0822               	movf	PRESET_load@pan,w
  4416  0FD6  0084               	movwf	4
  4417  0FD7  0824               	movf	??_PRESET_load,w
  4418  0FD8  1383               	bcf	3,7	;select IRP bank0
  4419  0FD9  0480               	iorwf	0,f
  4420  0FDA  0A84               	incf	4,f
  4421  0FDB  0825               	movf	??_PRESET_load+1,w
  4422  0FDC  0480               	iorwf	0,f
  4423                           
  4424                           ;main.c: 965:         *tilt = (uint16_t) (eeprom_read(_addr + 2));
  4425  0FDD  0827               	movf	PRESET_load@_addr,w
  4426  0FDE  3E02               	addlw	2
  4427  0FDF  158A  258B  158A   	fcall	_eeprom_read
  4428  0FE2  1283               	bcf	3,5	;RP0=0, select bank0
  4429  0FE3  00A4               	movwf	??_PRESET_load
  4430  0FE4  01A5               	clrf	??_PRESET_load+1
  4431  0FE5  0823               	movf	PRESET_load@tilt,w
  4432  0FE6  0084               	movwf	4
  4433  0FE7  0824               	movf	??_PRESET_load,w
  4434  0FE8  1383               	bcf	3,7	;select IRP bank0
  4435  0FE9  0080               	movwf	0
  4436  0FEA  0A84               	incf	4,f
  4437  0FEB  0825               	movf	??_PRESET_load+1,w
  4438  0FEC  0080               	movwf	0
  4439                           
  4440                           ;main.c: 966:         *tilt |= (uint16_t) (eeprom_read(_addr + 3) << 8);
  4441  0FED  0827               	movf	PRESET_load@_addr,w
  4442  0FEE  3E03               	addlw	3
  4443  0FEF  158A  258B         	fcall	_eeprom_read
  4444  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  4445  0FF2  00A4               	movwf	??_PRESET_load
  4446  0FF3  01A5               	clrf	??_PRESET_load+1
  4447  0FF4  0824               	movf	??_PRESET_load,w
  4448  0FF5  00A5               	movwf	??_PRESET_load+1
  4449  0FF6  01A4               	clrf	??_PRESET_load
  4450  0FF7  0823               	movf	PRESET_load@tilt,w
  4451  0FF8  0084               	movwf	4
  4452  0FF9  0824               	movf	??_PRESET_load,w
  4453  0FFA  1383               	bcf	3,7	;select IRP bank0
  4454  0FFB  0480               	iorwf	0,f
  4455  0FFC  0A84               	incf	4,f
  4456  0FFD  0825               	movf	??_PRESET_load+1,w
  4457  0FFE  0480               	iorwf	0,f
  4458  0FFF  0008               	return
  4459  1000                     __end_of_PRESET_load:
  4460                           
  4461                           	psect	text21
  4462  06D9                     __ptext21:	
  4463 ;; *************** function _MOTOR_Init *****************
  4464 ;; Defined at:
  4465 ;;		line 767 in file "main.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;		None
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;		None
  4470 ;; Return value:  Size  Location     Type
  4471 ;;                  1    wreg      void 
  4472 ;; Registers used:
  4473 ;;		wreg, status,2, status,0, pclath, cstack
  4474 ;; Tracked objects:
  4475 ;;		On entry : 300/0
  4476 ;;		On exit  : 300/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4479 ;;      Params:         0       0       0       0
  4480 ;;      Locals:         0       0       0       0
  4481 ;;      Temps:          0       1       0       0
  4482 ;;      Totals:         0       1       0       0
  4483 ;;Total ram usage:        1 bytes
  4484 ;; Hardware stack levels used: 1
  4485 ;; Hardware stack levels required when called: 3
  4486 ;; This function calls:
  4487 ;;		_delay_wdt
  4488 ;; This function is called by:
  4489 ;;		_main
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493  06D9                     _MOTOR_Init:	
  4494                           ;psect for function _MOTOR_Init
  4495                           
  4496                           
  4497                           ;main.c: 768:     is_init = 1;
  4498                           
  4499                           ;incstack = 0
  4500                           ; Regs used in _MOTOR_Init: [wreg+status,2+status,0+pclath+cstack]
  4501  06D9  01F0               	clrf	_is_init
  4502  06DA  0AF0               	incf	_is_init,f
  4503                           
  4504                           ;main.c: 821:     pan_speed = 0x32;
  4505  06DB  3032               	movlw	50
  4506  06DC  00A3               	movwf	??_MOTOR_Init
  4507  06DD  0823               	movf	??_MOTOR_Init,w
  4508  06DE  00E8               	movwf	_pan_speed	;volatile
  4509                           
  4510                           ;main.c: 822:     pan_direction = 1;
  4511  06DF  3001               	movlw	1
  4512  06E0  00A3               	movwf	??_MOTOR_Init
  4513  06E1  0823               	movf	??_MOTOR_Init,w
  4514  06E2  00E9               	movwf	_pan_direction	;volatile
  4515                           
  4516                           ;main.c: 823:     pan_enabled = 1;
  4517  06E3  3001               	movlw	1
  4518  06E4  00A3               	movwf	??_MOTOR_Init
  4519  06E5  0823               	movf	??_MOTOR_Init,w
  4520  06E6  00EA               	movwf	_pan_enabled	;volatile
  4521                           
  4522                           ;main.c: 826:     tilt_speed = 0x32;
  4523  06E7  3032               	movlw	50
  4524  06E8  00A3               	movwf	??_MOTOR_Init
  4525  06E9  0823               	movf	??_MOTOR_Init,w
  4526  06EA  00E5               	movwf	_tilt_speed	;volatile
  4527                           
  4528                           ;main.c: 827:     tilt_direction = 1;
  4529  06EB  3001               	movlw	1
  4530  06EC  00A3               	movwf	??_MOTOR_Init
  4531  06ED  0823               	movf	??_MOTOR_Init,w
  4532  06EE  00E6               	movwf	_tilt_direction	;volatile
  4533                           
  4534                           ;main.c: 828:     tilt_enabled = 1;
  4535  06EF  3001               	movlw	1
  4536  06F0  00A3               	movwf	??_MOTOR_Init
  4537  06F1  0823               	movf	??_MOTOR_Init,w
  4538  06F2  00E7               	movwf	_tilt_enabled	;volatile
  4539                           
  4540                           ;main.c: 831:     delay_wdt(6000);
  4541  06F3  3070               	movlw	112
  4542  06F4  00A0               	movwf	delay_wdt@_ms
  4543  06F5  3017               	movlw	23
  4544  06F6  00A1               	movwf	delay_wdt@_ms+1
  4545  06F7  158A  25D1  118A   	fcall	_delay_wdt
  4546                           
  4547                           ;main.c: 833:     tilt_enabled = 0;
  4548  06FA  01E7               	clrf	_tilt_enabled	;volatile
  4549                           
  4550                           ;main.c: 835:     tilt_counter = 0;
  4551  06FB  01D4               	clrf	_tilt_counter	;volatile
  4552  06FC  01D5               	clrf	_tilt_counter+1	;volatile
  4553                           
  4554                           ;main.c: 837:     delay_wdt(100);
  4555  06FD  3064               	movlw	100
  4556  06FE  00A0               	movwf	delay_wdt@_ms
  4557  06FF  3000               	movlw	0
  4558  0700  00A1               	movwf	delay_wdt@_ms+1
  4559  0701  158A  25D1  118A   	fcall	_delay_wdt
  4560                           
  4561                           ;main.c: 840:     tilt_speed = 0x32;
  4562  0704  3032               	movlw	50
  4563  0705  00A3               	movwf	??_MOTOR_Init
  4564  0706  0823               	movf	??_MOTOR_Init,w
  4565  0707  00E5               	movwf	_tilt_speed	;volatile
  4566                           
  4567                           ;main.c: 841:     tilt_direction = 0;
  4568  0708  01E6               	clrf	_tilt_direction	;volatile
  4569                           
  4570                           ;main.c: 842:     tilt_enabled = 1;
  4571  0709  3001               	movlw	1
  4572  070A  00A3               	movwf	??_MOTOR_Init
  4573  070B  0823               	movf	??_MOTOR_Init,w
  4574  070C  00E7               	movwf	_tilt_enabled	;volatile
  4575                           
  4576                           ;main.c: 844:     delay_wdt(750);
  4577  070D  30EE               	movlw	238
  4578  070E  00A0               	movwf	delay_wdt@_ms
  4579  070F  3002               	movlw	2
  4580  0710  00A1               	movwf	delay_wdt@_ms+1
  4581  0711  158A  25D1  118A   	fcall	_delay_wdt
  4582                           
  4583                           ;main.c: 846:     tilt_enabled = 0;
  4584  0714  01E7               	clrf	_tilt_enabled	;volatile
  4585                           
  4586                           ;main.c: 848:     tilt_counter = 0;
  4587  0715  01D4               	clrf	_tilt_counter	;volatile
  4588  0716  01D5               	clrf	_tilt_counter+1	;volatile
  4589                           
  4590                           ;main.c: 852:     delay_wdt(15650);
  4591  0717  3022               	movlw	34
  4592  0718  00A0               	movwf	delay_wdt@_ms
  4593  0719  303D               	movlw	61
  4594  071A  00A1               	movwf	delay_wdt@_ms+1
  4595  071B  158A  25D1  118A   	fcall	_delay_wdt
  4596                           
  4597                           ;main.c: 854:     pan_enabled = 0;
  4598  071E  01EA               	clrf	_pan_enabled	;volatile
  4599                           
  4600                           ;main.c: 856:     pan_counter = 0;
  4601  071F  01D6               	clrf	_pan_counter	;volatile
  4602  0720  01D7               	clrf	_pan_counter+1	;volatile
  4603                           
  4604                           ;main.c: 858:     delay_wdt(100);
  4605  0721  3064               	movlw	100
  4606  0722  00A0               	movwf	delay_wdt@_ms
  4607  0723  3000               	movlw	0
  4608  0724  00A1               	movwf	delay_wdt@_ms+1
  4609  0725  158A  25D1  118A   	fcall	_delay_wdt
  4610                           
  4611                           ;main.c: 861:     pan_speed = 0x32;
  4612  0728  3032               	movlw	50
  4613  0729  00A3               	movwf	??_MOTOR_Init
  4614  072A  0823               	movf	??_MOTOR_Init,w
  4615  072B  00E8               	movwf	_pan_speed	;volatile
  4616                           
  4617                           ;main.c: 862:     pan_direction = 0;
  4618  072C  01E9               	clrf	_pan_direction	;volatile
  4619                           
  4620                           ;main.c: 863:     pan_enabled = 1;
  4621  072D  3001               	movlw	1
  4622  072E  00A3               	movwf	??_MOTOR_Init
  4623  072F  0823               	movf	??_MOTOR_Init,w
  4624  0730  00EA               	movwf	_pan_enabled	;volatile
  4625                           
  4626                           ;main.c: 865:     delay_wdt(500);
  4627  0731  30F4               	movlw	244
  4628  0732  00A0               	movwf	delay_wdt@_ms
  4629  0733  3001               	movlw	1
  4630  0734  00A1               	movwf	delay_wdt@_ms+1
  4631  0735  158A  25D1  118A   	fcall	_delay_wdt
  4632                           
  4633                           ;main.c: 867:     pan_enabled = 0;
  4634  0738  01EA               	clrf	_pan_enabled	;volatile
  4635                           
  4636                           ;main.c: 869:     pan_counter = 0;
  4637  0739  01D6               	clrf	_pan_counter	;volatile
  4638  073A  01D7               	clrf	_pan_counter+1	;volatile
  4639                           
  4640                           ;main.c: 890:     pan_speed = 0x32;
  4641  073B  3032               	movlw	50
  4642  073C  00A3               	movwf	??_MOTOR_Init
  4643  073D  0823               	movf	??_MOTOR_Init,w
  4644  073E  00E8               	movwf	_pan_speed	;volatile
  4645                           
  4646                           ;main.c: 891:     pan_direction = 0;
  4647  073F  01E9               	clrf	_pan_direction	;volatile
  4648                           
  4649                           ;main.c: 892:     pan_enabled = 1;
  4650  0740  3001               	movlw	1
  4651  0741  00A3               	movwf	??_MOTOR_Init
  4652  0742  0823               	movf	??_MOTOR_Init,w
  4653  0743  00EA               	movwf	_pan_enabled	;volatile
  4654                           
  4655                           ;main.c: 895:     tilt_speed = 0x32;
  4656  0744  3032               	movlw	50
  4657  0745  00A3               	movwf	??_MOTOR_Init
  4658  0746  0823               	movf	??_MOTOR_Init,w
  4659  0747  00E5               	movwf	_tilt_speed	;volatile
  4660                           
  4661                           ;main.c: 896:     tilt_direction = 0;
  4662  0748  01E6               	clrf	_tilt_direction	;volatile
  4663                           
  4664                           ;main.c: 897:     tilt_enabled = 1;
  4665  0749  3001               	movlw	1
  4666  074A  00A3               	movwf	??_MOTOR_Init
  4667  074B  0823               	movf	??_MOTOR_Init,w
  4668  074C  00E7               	movwf	_tilt_enabled	;volatile
  4669                           
  4670                           ;main.c: 900:     delay_wdt(1000);
  4671  074D  30E8               	movlw	232
  4672  074E  00A0               	movwf	delay_wdt@_ms
  4673  074F  3003               	movlw	3
  4674  0750  00A1               	movwf	delay_wdt@_ms+1
  4675  0751  158A  25D1  118A   	fcall	_delay_wdt
  4676                           
  4677                           ;main.c: 902:     tilt_enabled = 0;
  4678  0754  01E7               	clrf	_tilt_enabled	;volatile
  4679                           
  4680                           ;main.c: 906:     delay_wdt(3450);
  4681  0755  307A               	movlw	122
  4682  0756  00A0               	movwf	delay_wdt@_ms
  4683  0757  300D               	movlw	13
  4684  0758  00A1               	movwf	delay_wdt@_ms+1
  4685  0759  158A  25D1         	fcall	_delay_wdt
  4686                           
  4687                           ;main.c: 908:     pan_enabled = 0;
  4688  075B  01EA               	clrf	_pan_enabled	;volatile
  4689                           
  4690                           ;main.c: 910:     is_init = 0;
  4691  075C  01F0               	clrf	_is_init
  4692  075D  0008               	return
  4693  075E                     __end_of_MOTOR_Init:
  4694                           
  4695                           	psect	text22
  4696  0DD1                     __ptext22:	
  4697 ;; *************** function _delay_wdt *****************
  4698 ;; Defined at:
  4699 ;;		line 757 in file "main.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;  _ms             2    0[BANK0 ] unsigned int 
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;		None
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  1    wreg      void 
  4706 ;; Registers used:
  4707 ;;		wreg, status,2, status,0
  4708 ;; Tracked objects:
  4709 ;;		On entry : 300/0
  4710 ;;		On exit  : 300/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4713 ;;      Params:         0       2       0       0
  4714 ;;      Locals:         0       0       0       0
  4715 ;;      Temps:          0       1       0       0
  4716 ;;      Totals:         0       3       0       0
  4717 ;;Total ram usage:        3 bytes
  4718 ;; Hardware stack levels used: 1
  4719 ;; Hardware stack levels required when called: 2
  4720 ;; This function calls:
  4721 ;;		Nothing
  4722 ;; This function is called by:
  4723 ;;		_main
  4724 ;;		_MOTOR_Init
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728  0DD1                     _delay_wdt:	
  4729                           ;psect for function _delay_wdt
  4730                           
  4731                           
  4732                           ;incstack = 0
  4733                           ; Regs used in _delay_wdt: [wreg+status,2+status,0]
  4734  0DD1  0064               	clrwdt	;# 
  4735  0DD2                     l3299:	
  4736                           ;main.c: 760:     while (_ms--) {
  4737                           
  4738                           
  4739                           ;main.c: 760:     while (_ms--) {
  4740  0DD2  3001               	movlw	1
  4741  0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  4742  0DD4  1303               	bcf	3,6	;RP1=0, select bank0
  4743  0DD5  02A0               	subwf	delay_wdt@_ms,f
  4744  0DD6  3000               	movlw	0
  4745  0DD7  1C03               	skipc
  4746  0DD8  03A1               	decf	delay_wdt@_ms+1,f
  4747  0DD9  02A1               	subwf	delay_wdt@_ms+1,f
  4748  0DDA  0A20               	incf	delay_wdt@_ms,w
  4749  0DDB  1903               	btfsc	3,2
  4750  0DDC  0A21               	incf	delay_wdt@_ms+1,w
  4751  0DDD  1903               	btfsc	3,2
  4752  0DDE  0008               	return
  4753  0DDF  0064               	clrwdt	;# 
  4754                           
  4755                           ;main.c: 763:         _delay((unsigned long)((1)*(4000000/4000.0)));
  4756  0DE0  30C7               	movlw	199
  4757  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  4758  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  4759  0DE3  00A2               	movwf	??_delay_wdt
  4760  0DE4                     u3777:
  4761  0DE4  2DE5               	nop2
  4762  0DE5  0BA2               	decfsz	??_delay_wdt,f
  4763  0DE6  2DE4               	goto	u3777
  4764  0DE7  2DE8               	nop2
  4765  0DE8  0000               	nop
  4766  0DE9  2DD2               	goto	l3299
  4767  0DEA                     __end_of_delay_wdt:
  4768                           
  4769                           	psect	text23
  4770  0D40                     __ptext23:	
  4771 ;; *************** function _BAUDS_set *****************
  4772 ;; Defined at:
  4773 ;;		line 970 in file "main.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;  index           1    wreg     unsigned char 
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;  index           1    7[BANK0 ] unsigned char 
  4778 ;; Return value:  Size  Location     Type
  4779 ;;                  1    wreg      void 
  4780 ;; Registers used:
  4781 ;;		wreg, status,2, status,0, pclath, cstack
  4782 ;; Tracked objects:
  4783 ;;		On entry : B00/0
  4784 ;;		On exit  : 200/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4787 ;;      Params:         0       0       0       0
  4788 ;;      Locals:         0       1       0       0
  4789 ;;      Temps:          0       1       0       0
  4790 ;;      Totals:         0       2       0       0
  4791 ;;Total ram usage:        2 bytes
  4792 ;; Hardware stack levels used: 1
  4793 ;; Hardware stack levels required when called: 4
  4794 ;; This function calls:
  4795 ;;		_eeprom_update
  4796 ;; This function is called by:
  4797 ;;		_main
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801  0D40                     _BAUDS_set:	
  4802                           ;psect for function _BAUDS_set
  4803                           
  4804                           
  4805                           ;incstack = 0
  4806                           ; Regs used in _BAUDS_set: [wreg+status,2+status,0+pclath+cstack]
  4807                           ;BAUDS_set@index stored from wreg
  4808  0D40  00A7               	movwf	BAUDS_set@index
  4809                           
  4810                           ;main.c: 972:     eeprom_update(0xFF, index);
  4811  0D41  0827               	movf	BAUDS_set@index,w
  4812  0D42  00A6               	movwf	??_BAUDS_set
  4813  0D43  0826               	movf	??_BAUDS_set,w
  4814  0D44  00A3               	movwf	eeprom_update@value
  4815  0D45  30FF               	movlw	255
  4816  0D46  158A  2558         	fcall	_eeprom_update
  4817  0D48  0008               	return
  4818  0D49                     __end_of_BAUDS_set:
  4819                           
  4820                           	psect	text24
  4821  0D58                     __ptext24:	
  4822 ;; *************** function _eeprom_update *****************
  4823 ;; Defined at:
  4824 ;;		line 938 in file "main.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  addr            1    wreg     unsigned char 
  4827 ;;  value           1    3[BANK0 ] unsigned char 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  addr            1    5[BANK0 ] unsigned char 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  1    wreg      void 
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0, pclath, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 300/0
  4836 ;;		On exit  : 200/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4839 ;;      Params:         0       1       0       0
  4840 ;;      Locals:         0       1       0       0
  4841 ;;      Temps:          0       1       0       0
  4842 ;;      Totals:         0       3       0       0
  4843 ;;Total ram usage:        3 bytes
  4844 ;; Hardware stack levels used: 1
  4845 ;; Hardware stack levels required when called: 3
  4846 ;; This function calls:
  4847 ;;		_eeprom_read
  4848 ;;		_eeprom_write
  4849 ;; This function is called by:
  4850 ;;		_PRESET_save
  4851 ;;		_BAUDS_set
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855  0D58                     _eeprom_update:	
  4856                           ;psect for function _eeprom_update
  4857                           
  4858                           
  4859                           ;incstack = 0
  4860                           ; Regs used in _eeprom_update: [wreg+status,2+status,0+pclath+cstack]
  4861                           ;eeprom_update@addr stored from wreg
  4862  0D58  00A5               	movwf	eeprom_update@addr
  4863                           
  4864                           ;main.c: 939:     if (value != eeprom_read(addr)) {
  4865  0D59  0825               	movf	eeprom_update@addr,w
  4866  0D5A  158A  258B  158A   	fcall	_eeprom_read
  4867  0D5D  1283               	bcf	3,5	;RP0=0, select bank0
  4868  0D5E  0623               	xorwf	eeprom_update@value,w
  4869  0D5F  1903               	skipnz
  4870  0D60  0008               	return
  4871                           
  4872                           ;main.c: 940:         eeprom_write(addr, value);
  4873  0D61  0823               	movf	eeprom_update@value,w
  4874  0D62  00A4               	movwf	??_eeprom_update
  4875  0D63  0824               	movf	??_eeprom_update,w
  4876  0D64  00A0               	movwf	eeprom_write@value
  4877  0D65  0825               	movf	eeprom_update@addr,w
  4878  0D66  158A  2607         	fcall	_eeprom_write
  4879  0D68  0008               	return
  4880  0D69                     __end_of_eeprom_update:
  4881                           
  4882                           	psect	text25
  4883  0E07                     __ptext25:	
  4884 ;; *************** function _eeprom_write *****************
  4885 ;; Defined at:
  4886 ;;		line 6 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;  addr            1    wreg     unsigned char 
  4889 ;;  value           1    0[BANK0 ] unsigned char 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;  addr            1    2[BANK0 ] unsigned char 
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  1    wreg      void 
  4894 ;; Registers used:
  4895 ;;		wreg, status,2, status,0
  4896 ;; Tracked objects:
  4897 ;;		On entry : 300/0
  4898 ;;		On exit  : 300/100
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4901 ;;      Params:         0       1       0       0
  4902 ;;      Locals:         0       1       0       0
  4903 ;;      Temps:          0       1       0       0
  4904 ;;      Totals:         0       3       0       0
  4905 ;;Total ram usage:        3 bytes
  4906 ;; Hardware stack levels used: 1
  4907 ;; Hardware stack levels required when called: 2
  4908 ;; This function calls:
  4909 ;;		Nothing
  4910 ;; This function is called by:
  4911 ;;		_eeprom_update
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915  0E07                     _eeprom_write:	
  4916                           ;psect for function _eeprom_write
  4917                           
  4918                           
  4919                           ;incstack = 0
  4920                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  4921                           ;eeprom_write@addr stored from wreg
  4922  0E07  00A2               	movwf	eeprom_write@addr
  4923  0E08                     l561:	
  4924                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 6: eeprom_write(unsigned char
      +                           addr, unsigned char value);/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 7:
      +                           {;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 8:  do{ while (EECON1bits.W
      +                          R) { continue; } EEADR = (addr); EEDATA = (value); EECON1 &= 0x3F; STATUSbits.CARRY = 0;
      +                           if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCONbits.GIE = 0; EECON1bits.WREN = 1; 
      +                          EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EECON1bits.WREN = 0; if (STATUSbits.CAR
      +                          RY) { INTCONbits.GIE = 1; } } while (0);
  4925                           
  4926  0E08  1683               	bsf	3,5	;RP0=1, select bank1
  4927  0E09  189C               	btfsc	28,1	;volsfr
  4928  0E0A  2E08               	goto	l561
  4929  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  4930  0E0C  0822               	movf	eeprom_write@addr,w
  4931  0E0D  1683               	bsf	3,5	;RP0=1, select bank1
  4932  0E0E  009B               	movwf	27	;volatile
  4933  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  4934  0E10  0820               	movf	eeprom_write@value,w
  4935  0E11  1683               	bsf	3,5	;RP0=1, select bank1
  4936  0E12  009A               	movwf	26	;volatile
  4937  0E13  303F               	movlw	63
  4938  0E14  1283               	bcf	3,5	;RP0=0, select bank0
  4939  0E15  00A1               	movwf	??_eeprom_write
  4940  0E16  0821               	movf	??_eeprom_write,w
  4941  0E17  1683               	bsf	3,5	;RP0=1, select bank1
  4942  0E18  059C               	andwf	28,f	;volsfr
  4943  0E19  1003               	bcf	3,0	;volatile
  4944  0E1A  1B8B               	btfsc	11,7	;volatile
  4945  0E1B  1403               	bsf	3,0	;volatile
  4946  0E1C  138B               	bcf	11,7	;volatile
  4947  0E1D  151C               	bsf	28,2	;volsfr
  4948  0E1E  3055               	movlw	85
  4949  0E1F  009D               	movwf	29	;volsfr
  4950  0E20  30AA               	movlw	170
  4951  0E21  009D               	movwf	29	;volsfr
  4952  0E22  149C               	bsf	28,1	;volsfr
  4953  0E23  111C               	bcf	28,2	;volsfr
  4954  0E24  1C03               	btfss	3,0	;volatile
  4955  0E25  0008               	return
  4956  0E26  178B               	bsf	11,7	;volatile
  4957  0E27  0008               	return
  4958  0E28                     __end_of_eeprom_write:
  4959                           
  4960                           	psect	text26
  4961  0D8B                     __ptext26:	
  4962 ;; *************** function _eeprom_read *****************
  4963 ;; Defined at:
  4964 ;;		line 6 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;  addr            1    wreg     unsigned char 
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;  addr            1    1[BANK0 ] unsigned char 
  4969 ;; Return value:  Size  Location     Type
  4970 ;;                  1    wreg      unsigned char 
  4971 ;; Registers used:
  4972 ;;		wreg, status,2, status,0
  4973 ;; Tracked objects:
  4974 ;;		On entry : 200/100
  4975 ;;		On exit  : 300/100
  4976 ;;		Unchanged: 0/0
  4977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4978 ;;      Params:         0       0       0       0
  4979 ;;      Locals:         0       1       0       0
  4980 ;;      Temps:          0       1       0       0
  4981 ;;      Totals:         0       2       0       0
  4982 ;;Total ram usage:        2 bytes
  4983 ;; Hardware stack levels used: 1
  4984 ;; Hardware stack levels required when called: 2
  4985 ;; This function calls:
  4986 ;;		Nothing
  4987 ;; This function is called by:
  4988 ;;		_eeprom_update
  4989 ;;		_PRESET_load
  4990 ;;		_BAUDS_get
  4991 ;; This function uses a non-reentrant model
  4992 ;;
  4993                           
  4994  0D8B                     _eeprom_read:	
  4995                           ;psect for function _eeprom_read
  4996                           
  4997                           
  4998                           ;incstack = 0
  4999                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  5000                           ;eeprom_read@addr stored from wreg
  5001  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  5002  0D8C  00A1               	movwf	eeprom_read@addr
  5003  0D8D  2D8F               	goto	l541
  5004  0D8E                     u2911:
  5005  0D8E  1283               	bcf	3,5	;RP0=0, select bank0
  5006  0D8F                     l541:	
  5007                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 6: eeprom_read(unsigned char a
      +                          ddr);/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 7: {;/opt/microchip/xc8/v2
      +                          .36/pic/sources/c90/pic/__eeread.c: 8:  do
  5008                           
  5009  0D8F  0064               	clrwdt	;# 
  5010  0D90  1683               	bsf	3,5	;RP0=1, select bank1
  5011  0D91  1303               	bcf	3,6	;RP1=0, select bank1
  5012  0D92  189C               	btfsc	28,1	;volsfr
  5013  0D93  2D8E               	goto	u2911
  5014                           
  5015                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 18:  return ( EEADR = addr, EE
      +                          CON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  5016  0D94  1283               	bcf	3,5	;RP0=0, select bank0
  5017  0D95  0821               	movf	eeprom_read@addr,w
  5018  0D96  1683               	bsf	3,5	;RP0=1, select bank1
  5019  0D97  009B               	movwf	27	;volatile
  5020  0D98  303F               	movlw	63
  5021  0D99  1283               	bcf	3,5	;RP0=0, select bank0
  5022  0D9A  00A0               	movwf	??_eeprom_read
  5023  0D9B  0820               	movf	??_eeprom_read,w
  5024  0D9C  1683               	bsf	3,5	;RP0=1, select bank1
  5025  0D9D  059C               	andwf	28,f	;volsfr
  5026  0D9E  141C               	bsf	28,0	;volsfr
  5027  0D9F  081A               	movf	26,w	;volatile
  5028  0DA0  0008               	return
  5029  0DA1                     __end_of_eeprom_read:
  5030                           
  5031                           	psect	text27
  5032  0316                     __ptext27:	
  5033 ;; *************** function _myISR *****************
  5034 ;; Defined at:
  5035 ;;		line 162 in file "main.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 300/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5049 ;;      Params:         0       0       0       0
  5050 ;;      Locals:         0       0       0       0
  5051 ;;      Temps:          6       0       0       0
  5052 ;;      Totals:         6       0       0       0
  5053 ;;Total ram usage:        6 bytes
  5054 ;; Hardware stack levels used: 2
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		Interrupt level 1
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062  0316                     _myISR:	
  5063                           ;psect for function _myISR
  5064                           
  5065                           
  5066                           ;main.c: 163:     if (PIR1bits.RCIF == 1) {
  5067  0316  1283               	bcf	3,5	;RP0=0, select bank0
  5068  0317  1303               	bcf	3,6	;RP1=0, select bank0
  5069  0318  1E8C               	btfss	12,5	;volatile
  5070  0319  2B91               	goto	i1l193
  5071                           
  5072                           ;main.c: 164:         data_receiv = RCREG;
  5073  031A  081A               	movf	26,w	;volatile
  5074  031B  00F6               	movwf	??_myISR
  5075  031C  0876               	movf	??_myISR,w
  5076  031D  00F5               	movwf	_data_receiv	;volatile
  5077                           
  5078                           ;main.c: 166:         timeout_uart1 = 0;
  5079  031E  01EE               	clrf	_timeout_uart1	;volatile
  5080                           
  5081                           ;main.c: 167:         timeout_uart2 = 0;
  5082  031F  01ED               	clrf	_timeout_uart2	;volatile
  5083                           
  5084                           ;main.c: 169:         PORTBbits.RB3 = !PORTBbits.RB3;
  5085  0320  1003               	clrc
  5086  0321  1D86               	btfss	6,3	;volatile
  5087  0322  1403               	setc
  5088  0323  1C03               	btfss	3,0
  5089  0324  2B29               	goto	u199_20
  5090  0325  1283               	bcf	3,5	;RP0=0, select bank0
  5091  0326  1303               	bcf	3,6	;RP1=0, select bank0
  5092  0327  1586               	bsf	6,3	;volatile
  5093  0328  2B2C               	goto	i1l2557
  5094  0329                     u199_20:
  5095  0329  1283               	bcf	3,5	;RP0=0, select bank0
  5096  032A  1303               	bcf	3,6	;RP1=0, select bank0
  5097  032B  1186               	bcf	6,3	;volatile
  5098  032C                     i1l2557:
  5099                           
  5100                           ;main.c: 171:         if (is_init == 1) {
  5101  032C  0370               	decf	_is_init,w
  5102  032D  1903               	btfsc	3,2
  5103  032E  2CE1               	goto	i1l195
  5104                           
  5105                           ;main.c: 175:         if (data_receiv == 0xFF) {
  5106  032F  0A75               	incf	_data_receiv,w	;volatile
  5107  0330  1D03               	btfss	3,2
  5108  0331  2B33               	goto	i1l2565
  5109                           
  5110                           ;main.c: 176:             timeout_receiv = 0;
  5111  0332  01EF               	clrf	_timeout_receiv	;volatile
  5112  0333                     i1l2565:
  5113                           
  5114                           ;main.c: 179:         if ((buffer_index2 <= 6) || ((buffer_index2 == 0) && (data_receiv 
      +                          == 0xFF))) {
  5115  0333  3007               	movlw	7
  5116  0334  0273               	subwf	_buffer_index2,w	;volatile
  5117  0335  1C03               	skipc
  5118  0336  2B5F               	goto	i1l2593
  5119  0337  0873               	movf	_buffer_index2,w	;volatile
  5120  0338  1D03               	btfss	3,2
  5121  0339  2B78               	goto	i1l2595
  5122  033A  0A75               	incf	_data_receiv,w	;volatile
  5123  033B  1903               	btfsc	3,2
  5124  033C  2B5F               	goto	i1l2593
  5125  033D  2B78               	goto	i1l2595
  5126  033E                     i1l2571:
  5127                           
  5128                           ;main.c: 182:                     buffer_data0[buffer_index2++] = data_receiv;
  5129  033E  0875               	movf	_data_receiv,w	;volatile
  5130  033F  00F6               	movwf	??_myISR
  5131  0340  0873               	movf	_buffer_index2,w
  5132  0341  3EC3               	addlw	(low (_buffer_data0| 0))& (0+255)
  5133  0342                     L13:
  5134  0342  0084               	movwf	4
  5135  0343  0876               	movf	??_myISR,w
  5136  0344  1383               	bcf	3,7	;select IRP bank1
  5137  0345  0080               	movwf	0
  5138  0346  3001               	movlw	1
  5139  0347  00F6               	movwf	??_myISR
  5140  0348  0876               	movf	??_myISR,w
  5141  0349  07F3               	addwf	_buffer_index2,f	;volatile
  5142                           
  5143                           ;main.c: 183:                     break;
  5144  034A  2B78               	goto	i1l2595
  5145  034B                     i1l2575:
  5146                           
  5147                           ;main.c: 185:                     buffer_data1[buffer_index2++] = data_receiv;
  5148  034B  0875               	movf	_data_receiv,w	;volatile
  5149  034C  00F6               	movwf	??_myISR
  5150  034D  0873               	movf	_buffer_index2,w
  5151  034E  3EBC               	addlw	(low (_buffer_data1| 0))& (0+255)
  5152  034F  2B42               	goto	L13
  5153  0350                     i1l2579:
  5154                           
  5155                           ;main.c: 188:                     buffer_data2[buffer_index2++] = data_receiv;
  5156  0350  0875               	movf	_data_receiv,w	;volatile
  5157  0351  00F6               	movwf	??_myISR
  5158  0352  0873               	movf	_buffer_index2,w
  5159  0353  3EB5               	addlw	(low (_buffer_data2| 0))& (0+255)
  5160  0354  2B42               	goto	L13
  5161  0355                     i1l2583:
  5162                           
  5163                           ;main.c: 191:                     buffer_data3[buffer_index2++] = data_receiv;
  5164  0355  0875               	movf	_data_receiv,w	;volatile
  5165  0356  00F6               	movwf	??_myISR
  5166  0357  0873               	movf	_buffer_index2,w
  5167  0358  3EAE               	addlw	(low (_buffer_data3| 0))& (0+255)
  5168  0359  2B42               	goto	L13
  5169  035A                     i1l2587:
  5170                           
  5171                           ;main.c: 194:                     buffer_data4[buffer_index2++] = data_receiv;
  5172  035A  0875               	movf	_data_receiv,w	;volatile
  5173  035B  00F6               	movwf	??_myISR
  5174  035C  0873               	movf	_buffer_index2,w
  5175  035D  3EA7               	addlw	(low (_buffer_data4| 0))& (0+255)
  5176  035E  2B42               	goto	L13
  5177  035F                     i1l2593:
  5178  035F  0874               	movf	_buffer_index1,w	;volatile
  5179  0360  00F6               	movwf	??_myISR
  5180  0361  01F7               	clrf	??_myISR+1
  5181                           
  5182                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5183                           ; Switch size 1, requested type "simple"
  5184                           ; Number of cases is 1, Range of values is 0 to 0
  5185                           ; switch strategies available:
  5186                           ; Name         Instructions Cycles
  5187                           ; simple_byte            4     3 (average)
  5188                           ; direct_byte            9     7 (fixed)
  5189                           ; jumptable            260     6 (fixed)
  5190                           ;	Chosen strategy is simple_byte
  5191  0362  0877               	movf	??_myISR+1,w
  5192  0363  3A00               	xorlw	0	; case 0
  5193  0364  1903               	skipnz
  5194  0365  2B67               	goto	i1l4003
  5195  0366  2B78               	goto	i1l2595
  5196  0367                     i1l4003:
  5197                           
  5198                           ; Switch size 1, requested type "simple"
  5199                           ; Number of cases is 5, Range of values is 0 to 4
  5200                           ; switch strategies available:
  5201                           ; Name         Instructions Cycles
  5202                           ; simple_byte           16     9 (average)
  5203                           ; direct_byte           17     7 (fixed)
  5204                           ; jumptable            260     6 (fixed)
  5205                           ;	Chosen strategy is simple_byte
  5206  0367  0876               	movf	??_myISR,w
  5207  0368  3A00               	xorlw	0	; case 0
  5208  0369  1903               	skipnz
  5209  036A  2B3E               	goto	i1l2571
  5210  036B  3A01               	xorlw	1	; case 1
  5211  036C  1903               	skipnz
  5212  036D  2B4B               	goto	i1l2575
  5213  036E  3A03               	xorlw	3	; case 2
  5214  036F  1903               	skipnz
  5215  0370  2B50               	goto	i1l2579
  5216  0371  3A01               	xorlw	1	; case 3
  5217  0372  1903               	skipnz
  5218  0373  2B55               	goto	i1l2583
  5219  0374  3A07               	xorlw	7	; case 4
  5220  0375  1903               	skipnz
  5221  0376  2B5A               	goto	i1l2587
  5222  0377  2B78               	goto	i1l2595
  5223  0378                     i1l2595:
  5224                           
  5225                           ;main.c: 202:         if (buffer_index2 == 7) {
  5226  0378  3007               	movlw	7
  5227  0379  0673               	xorwf	_buffer_index2,w	;volatile
  5228  037A  1D03               	btfss	3,2
  5229  037B  2B8F               	goto	i1l2607
  5230                           
  5231                           ;main.c: 203:             buffer_index2 = 0;
  5232  037C  01F3               	clrf	_buffer_index2	;volatile
  5233                           
  5234                           ;main.c: 205:             buffer_ready[buffer_index1] = 1;
  5235  037D  3001               	movlw	1
  5236  037E  00F6               	movwf	??_myISR
  5237  037F  0874               	movf	_buffer_index1,w
  5238  0380  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  5239  0381  0084               	movwf	4
  5240  0382  0876               	movf	??_myISR,w
  5241  0383  1383               	bcf	3,7	;select IRP bank1
  5242  0384  0080               	movwf	0
  5243                           
  5244                           ;main.c: 207:             if (buffer_index1 < 4) {
  5245  0385  3004               	movlw	4
  5246  0386  0274               	subwf	_buffer_index1,w	;volatile
  5247  0387  1803               	skipnc
  5248  0388  2B8E               	goto	i1l2605
  5249                           
  5250                           ;main.c: 208:                 buffer_index1++;
  5251  0389  3001               	movlw	1
  5252  038A  00F6               	movwf	??_myISR
  5253  038B  0876               	movf	??_myISR,w
  5254  038C  07F4               	addwf	_buffer_index1,f	;volatile
  5255                           
  5256                           ;main.c: 209:             } else {
  5257  038D  2B8F               	goto	i1l2607
  5258  038E                     i1l2605:
  5259                           
  5260                           ;main.c: 210:                 buffer_index1 = 0;
  5261  038E  01F4               	clrf	_buffer_index1	;volatile
  5262  038F                     i1l2607:
  5263                           
  5264                           ;main.c: 214:         PIR1bits.RCIF = 0;
  5265  038F  128C               	bcf	12,5	;volatile
  5266                           
  5267                           ;main.c: 215:     } else if (PIR1bits.TMR1IF == 1) {
  5268  0390  2CE1               	goto	i1l195
  5269  0391                     i1l193:
  5270  0391  1C0C               	btfss	12,0	;volatile
  5271  0392  2BB9               	goto	i1l212
  5272                           
  5273                           ;main.c: 217:         PIR1bits.TMR1IF = 0;
  5274  0393  100C               	bcf	12,0	;volatile
  5275                           
  5276                           ;main.c: 218:         PIE1bits.TMR1IE = 1;
  5277  0394  1683               	bsf	3,5	;RP0=1, select bank1
  5278  0395  140C               	bsf	12,0	;volatile
  5279                           
  5280                           ;main.c: 219:         TMR1H = 12;
  5281  0396  300C               	movlw	12
  5282  0397  1283               	bcf	3,5	;RP0=0, select bank0
  5283  0398  008F               	movwf	15	;volatile
  5284                           
  5285                           ;main.c: 220:         TMR1L = 38;
  5286  0399  3026               	movlw	38
  5287  039A  008E               	movwf	14	;volatile
  5288                           
  5289                           ;main.c: 223:         PIR1bits.TMR1IF = 0;
  5290  039B  100C               	bcf	12,0	;volatile
  5291                           
  5292                           ;main.c: 227:         if (timeout_uart1 < 120) {
  5293  039C  3078               	movlw	120
  5294  039D  026E               	subwf	_timeout_uart1,w	;volatile
  5295  039E  1803               	skipnc
  5296  039F  2BA5               	goto	i1l2617
  5297                           
  5298                           ;main.c: 228:             timeout_uart1++;
  5299  03A0  3001               	movlw	1
  5300  03A1  00F6               	movwf	??_myISR
  5301  03A2  0876               	movf	??_myISR,w
  5302  03A3  07EE               	addwf	_timeout_uart1,f	;volatile
  5303                           
  5304                           ;main.c: 229:         } else {
  5305  03A4  2CE1               	goto	i1l195
  5306  03A5                     i1l2617:
  5307                           
  5308                           ;main.c: 230:             timeout_uart1 = 0;
  5309  03A5  01EE               	clrf	_timeout_uart1	;volatile
  5310                           
  5311                           ;main.c: 232:             if (timeout_uart2 < 2) {
  5312  03A6  3002               	movlw	2
  5313  03A7  026D               	subwf	_timeout_uart2,w	;volatile
  5314  03A8  1803               	skipnc
  5315  03A9  2BAF               	goto	i1l2623
  5316                           
  5317                           ;main.c: 233:                 timeout_uart2++;
  5318  03AA  3001               	movlw	1
  5319  03AB  00F6               	movwf	??_myISR
  5320  03AC  0876               	movf	??_myISR,w
  5321  03AD  07ED               	addwf	_timeout_uart2,f	;volatile
  5322                           
  5323                           ;main.c: 234:             } else {
  5324  03AE  2CE1               	goto	i1l195
  5325  03AF                     i1l2623:
  5326                           
  5327                           ;main.c: 235:                 timeout_uart2 = 0;
  5328  03AF  01ED               	clrf	_timeout_uart2	;volatile
  5329                           
  5330                           ;main.c: 240:                 RCSTAbits.FERR = 0;
  5331  03B0  1118               	bcf	24,2	;volatile
  5332                           
  5333                           ;main.c: 241:                 RCSTAbits.OERR = 0;
  5334  03B1  1098               	bcf	24,1	;volatile
  5335                           
  5336                           ;main.c: 243:                 (void) RCREG;
  5337  03B2  081A               	movf	26,w	;volatile
  5338                           
  5339                           ;main.c: 244:                 (void) RCREG;
  5340  03B3  081A               	movf	26,w	;volatile
  5341                           
  5342                           ;main.c: 246:                 RCSTAbits.CREN = 0;
  5343  03B4  1218               	bcf	24,4	;volatile
  5344                           
  5345                           ;main.c: 247:                 RCSTAbits.SPEN = 0;
  5346  03B5  1398               	bcf	24,7	;volatile
  5347                           
  5348                           ;main.c: 249:                 RCSTAbits.CREN = 1;
  5349  03B6  1618               	bsf	24,4	;volatile
  5350                           
  5351                           ;main.c: 250:                 RCSTAbits.SPEN = 1;
  5352  03B7  1798               	bsf	24,7	;volatile
  5353  03B8  2CE1               	goto	i1l195
  5354  03B9                     i1l212:
  5355  03B9  1C8C               	btfss	12,1	;volatile
  5356  03BA  2CE1               	goto	i1l195
  5357                           
  5358                           ;main.c: 254:         PIR1bits.TMR2IF = 0;
  5359  03BB  108C               	bcf	12,1	;volatile
  5360                           
  5361                           ;main.c: 256:         if (timeout_receiv < 15) {
  5362  03BC  300F               	movlw	15
  5363  03BD  026F               	subwf	_timeout_receiv,w	;volatile
  5364  03BE  1803               	skipnc
  5365  03BF  2BC5               	goto	i1l2647
  5366                           
  5367                           ;main.c: 257:             timeout_receiv++;
  5368  03C0  3001               	movlw	1
  5369  03C1  00F6               	movwf	??_myISR
  5370  03C2  0876               	movf	??_myISR,w
  5371  03C3  07EF               	addwf	_timeout_receiv,f	;volatile
  5372                           
  5373                           ;main.c: 258:         } else if (buffer_index2 > 0) {
  5374  03C4  2BC9               	goto	i1l2651
  5375  03C5                     i1l2647:
  5376  03C5  0873               	movf	_buffer_index2,w	;volatile
  5377  03C6  1903               	btfsc	3,2
  5378  03C7  2BC9               	goto	i1l2651
  5379                           
  5380                           ;main.c: 259:             buffer_index2 = 0;
  5381  03C8  01F3               	clrf	_buffer_index2	;volatile
  5382  03C9                     i1l2651:
  5383                           
  5384                           ;main.c: 262:         if (timer1_pan < timer1_pan_ref) {
  5385  03C9  0862               	movf	_timer1_pan_ref,w	;volatile
  5386  03CA  0264               	subwf	_timer1_pan,w	;volatile
  5387  03CB  1803               	skipnc
  5388  03CC  2BD2               	goto	i1l2655
  5389                           
  5390                           ;main.c: 263:             timer1_pan++;
  5391  03CD  3001               	movlw	1
  5392  03CE  00F6               	movwf	??_myISR
  5393  03CF  0876               	movf	??_myISR,w
  5394  03D0  07E4               	addwf	_timer1_pan,f	;volatile
  5395                           
  5396                           ;main.c: 264:         } else {
  5397  03D1  2C54               	goto	i1l2697
  5398  03D2                     i1l2655:
  5399                           
  5400                           ;main.c: 265:             timer1_pan = 0;
  5401  03D2  01E4               	clrf	_timer1_pan	;volatile
  5402                           
  5403                           ;main.c: 267:             if (pan_enabled == 1) {
  5404  03D3  036A               	decf	_pan_enabled,w	;volatile
  5405  03D4  1D03               	btfss	3,2
  5406  03D5  2C50               	goto	i1l224
  5407                           
  5408                           ;main.c: 268:                 if (pan_direction == 0) {
  5409  03D6  0869               	movf	_pan_direction,w	;volatile
  5410  03D7  1D03               	btfss	3,2
  5411  03D8  2BF5               	goto	i1l2673
  5412                           
  5413                           ;main.c: 269:                     if (pan_counter < (11700 - 1)) {
  5414  03D9  302D               	movlw	45
  5415  03DA  0257               	subwf	_pan_counter+1,w	;volatile
  5416  03DB  30B3               	movlw	179
  5417  03DC  1903               	skipnz
  5418  03DD  0256               	subwf	_pan_counter,w	;volatile
  5419  03DE  1803               	skipnc
  5420  03DF  2C0C               	goto	i1l2683
  5421                           
  5422                           ;main.c: 270:                         pan_counter++;
  5423  03E0  3001               	movlw	1
  5424  03E1  07D6               	addwf	_pan_counter,f	;volatile
  5425  03E2  1803               	skipnc
  5426  03E3  0AD7               	incf	_pan_counter+1,f	;volatile
  5427  03E4  3000               	movlw	0
  5428  03E5  07D7               	addwf	_pan_counter+1,f	;volatile
  5429                           
  5430                           ;main.c: 272:                         if ((pan_step_phase == 0) || (pan_step_phase > 7))
      +                           {
  5431  03E6  0872               	movf	_pan_step_phase,w	;volatile
  5432  03E7  1903               	btfsc	3,2
  5433  03E8  2BED               	goto	i1l2669
  5434  03E9  3008               	movlw	8
  5435  03EA  0272               	subwf	_pan_step_phase,w	;volatile
  5436  03EB  1C03               	skipc
  5437  03EC  2BF2               	goto	i1l2671
  5438  03ED                     i1l2669:
  5439                           
  5440                           ;main.c: 273:                             pan_step_phase = 7;
  5441  03ED  3007               	movlw	7
  5442  03EE  00F6               	movwf	??_myISR
  5443  03EF  0876               	movf	??_myISR,w
  5444  03F0  00F2               	movwf	_pan_step_phase	;volatile
  5445                           
  5446                           ;main.c: 274:                         } else {
  5447  03F1  2C0C               	goto	i1l2683
  5448  03F2                     i1l2671:
  5449                           
  5450                           ;main.c: 275:                             pan_step_phase--;
  5451  03F2  3001               	movlw	1
  5452  03F3  02F2               	subwf	_pan_step_phase,f	;volatile
  5453  03F4  2C0C               	goto	i1l2683
  5454  03F5                     i1l2673:
  5455                           
  5456                           ;main.c: 279:                     if ((pan_counter > 0) || (is_init == 1)) {
  5457  03F5  0856               	movf	_pan_counter,w	;volatile
  5458  03F6  0457               	iorwf	_pan_counter+1,w	;volatile
  5459  03F7  1D03               	btfss	3,2
  5460  03F8  2BFC               	goto	i1l2677
  5461  03F9  0370               	decf	_is_init,w
  5462  03FA  1D03               	btfss	3,2
  5463  03FB  2C0C               	goto	i1l2683
  5464  03FC                     i1l2677:
  5465                           
  5466                           ;main.c: 280:                         pan_counter--;
  5467  03FC  3001               	movlw	1
  5468  03FD  02D6               	subwf	_pan_counter,f	;volatile
  5469  03FE  3000               	movlw	0
  5470  03FF  1C03               	skipc
  5471  0400  03D7               	decf	_pan_counter+1,f	;volatile
  5472  0401  02D7               	subwf	_pan_counter+1,f	;volatile
  5473                           
  5474                           ;main.c: 282:                         if (pan_step_phase >= 7) {
  5475  0402  3007               	movlw	7
  5476  0403  0272               	subwf	_pan_step_phase,w	;volatile
  5477  0404  1C03               	skipc
  5478  0405  2C08               	goto	i1l2681
  5479                           
  5480                           ;main.c: 283:                             pan_step_phase = 0;
  5481  0406  01F2               	clrf	_pan_step_phase	;volatile
  5482                           
  5483                           ;main.c: 284:                         } else {
  5484  0407  2C0C               	goto	i1l2683
  5485  0408                     i1l2681:
  5486                           
  5487                           ;main.c: 285:                             pan_step_phase++;
  5488  0408  3001               	movlw	1
  5489  0409  00F6               	movwf	??_myISR
  5490  040A  0876               	movf	??_myISR,w
  5491  040B  07F2               	addwf	_pan_step_phase,f	;volatile
  5492  040C                     i1l2683:
  5493                           
  5494                           ;main.c: 290:                 if (pan_goto == pan_counter) {
  5495  040C  0857               	movf	_pan_counter+1,w	;volatile
  5496  040D  0653               	xorwf	_pan_goto+1,w	;volatile
  5497  040E  1D03               	skipz
  5498  040F  2C12               	goto	u223_25
  5499  0410  0856               	movf	_pan_counter,w	;volatile
  5500  0411  0652               	xorwf	_pan_goto,w	;volatile
  5501  0412                     u223_25:
  5502  0412  1D03               	skipz
  5503  0413  2C19               	goto	i1l2689
  5504                           
  5505                           ;main.c: 291:                     if (preset_pan_enabled == 1) {
  5506  0414  036C               	decf	_preset_pan_enabled,w	;volatile
  5507  0415  1D03               	btfss	3,2
  5508  0416  2C19               	goto	i1l2689
  5509                           
  5510                           ;main.c: 292:                         preset_pan_enabled = 0;
  5511  0417  01EC               	clrf	_preset_pan_enabled	;volatile
  5512                           
  5513                           ;main.c: 294:                         pan_enabled = 0;
  5514  0418  01EA               	clrf	_pan_enabled	;volatile
  5515  0419                     i1l2689:
  5516                           
  5517                           ;main.c: 298:                 PORTAbits.RA0 = steps_1A[pan_step_phase];
  5518  0419  0872               	movf	_pan_step_phase,w
  5519  041A  3E21               	addlw	low ((_steps_1A-__stringbase)| (0+32768))
  5520  041B  0084               	movwf	4
  5521  041C  118A  2500  118A   	fcall	stringdir
  5522  041F  00F6               	movwf	??_myISR
  5523  0420  0805               	movf	5,w	;volatile
  5524  0421  0676               	xorwf	??_myISR,w
  5525  0422  39FE               	andlw	-2
  5526  0423  0676               	xorwf	??_myISR,w
  5527  0424  0085               	movwf	5	;volatile
  5528                           
  5529                           ;main.c: 299:                 PORTAbits.RA7 = steps_1B[pan_step_phase];
  5530  0425  0872               	movf	_pan_step_phase,w
  5531  0426  3E19               	addlw	low ((_steps_1B-__stringbase)| (0+32768))
  5532  0427  0084               	movwf	4
  5533  0428  118A  2500  118A   	fcall	stringdir
  5534  042B  00F6               	movwf	??_myISR
  5535  042C  0CF6               	rrf	??_myISR,f
  5536  042D  0CF6               	rrf	??_myISR,f
  5537  042E  0805               	movf	5,w	;volatile
  5538  042F  0676               	xorwf	??_myISR,w
  5539  0430  397F               	andlw	-129
  5540  0431  0676               	xorwf	??_myISR,w
  5541  0432  0085               	movwf	5	;volatile
  5542                           
  5543                           ;main.c: 300:                 PORTAbits.RA6 = steps_2A[pan_step_phase];
  5544  0433  0872               	movf	_pan_step_phase,w
  5545  0434  3E11               	addlw	low ((_steps_2A-__stringbase)| (0+32768))
  5546  0435  0084               	movwf	4
  5547  0436  118A  2500  118A   	fcall	stringdir
  5548  0439  00F6               	movwf	??_myISR
  5549  043A  0EF6               	swapf	??_myISR,f
  5550  043B  0DF6               	rlf	??_myISR,f
  5551  043C  0DF6               	rlf	??_myISR,f
  5552  043D  0805               	movf	5,w	;volatile
  5553  043E  0676               	xorwf	??_myISR,w
  5554  043F  39BF               	andlw	-65
  5555  0440  0676               	xorwf	??_myISR,w
  5556  0441  0085               	movwf	5	;volatile
  5557                           
  5558                           ;main.c: 301:                 PORTAbits.RA1 = steps_2B[pan_step_phase];
  5559  0442  0872               	movf	_pan_step_phase,w
  5560  0443  3E09               	addlw	low ((_steps_2B-__stringbase)| (0+32768))
  5561  0444  0084               	movwf	4
  5562  0445  118A  2500  118A   	fcall	stringdir
  5563  0448  00F6               	movwf	??_myISR
  5564  0449  0DF6               	rlf	??_myISR,f
  5565  044A  0805               	movf	5,w	;volatile
  5566  044B  0676               	xorwf	??_myISR,w
  5567  044C  39FD               	andlw	-3
  5568  044D  0676               	xorwf	??_myISR,w
  5569  044E  0085               	movwf	5	;volatile
  5570                           
  5571                           ;main.c: 302:             } else {
  5572  044F  2C54               	goto	i1l2697
  5573  0450                     i1l224:
  5574                           
  5575                           ;main.c: 303:                 PORTAbits.RA0 = 0;
  5576  0450  1005               	bcf	5,0	;volatile
  5577                           
  5578                           ;main.c: 304:                 PORTAbits.RA7 = 0;
  5579  0451  1385               	bcf	5,7	;volatile
  5580                           
  5581                           ;main.c: 305:                 PORTAbits.RA6 = 0;
  5582  0452  1305               	bcf	5,6	;volatile
  5583                           
  5584                           ;main.c: 306:                 PORTAbits.RA1 = 0;
  5585  0453  1085               	bcf	5,1	;volatile
  5586  0454                     i1l2697:
  5587                           
  5588                           ;main.c: 312:         if (timer1_tilt < timer1_tilt_ref) {
  5589  0454  0861               	movf	_timer1_tilt_ref,w	;volatile
  5590  0455  0263               	subwf	_timer1_tilt,w	;volatile
  5591  0456  1803               	skipnc
  5592  0457  2C5D               	goto	i1l2701
  5593                           
  5594                           ;main.c: 313:             timer1_tilt++;
  5595  0458  3001               	movlw	1
  5596  0459  00F6               	movwf	??_myISR
  5597  045A  0876               	movf	??_myISR,w
  5598  045B  07E3               	addwf	_timer1_tilt,f	;volatile
  5599                           
  5600                           ;main.c: 314:         } else {
  5601  045C  2CE1               	goto	i1l195
  5602  045D                     i1l2701:
  5603                           
  5604                           ;main.c: 315:             timer1_tilt = 0;
  5605  045D  01E3               	clrf	_timer1_tilt	;volatile
  5606                           
  5607                           ;main.c: 317:             if (tilt_enabled == 1) {
  5608  045E  0367               	decf	_tilt_enabled,w	;volatile
  5609  045F  1D03               	btfss	3,2
  5610  0460  2CDD               	goto	i1l242
  5611                           
  5612                           ;main.c: 318:                 if (tilt_direction == 0) {
  5613  0461  0866               	movf	_tilt_direction,w	;volatile
  5614  0462  1D03               	btfss	3,2
  5615  0463  2C80               	goto	i1l2719
  5616                           
  5617                           ;main.c: 319:                     if (tilt_counter < (2300 - 1)) {
  5618  0464  3008               	movlw	8
  5619  0465  0255               	subwf	_tilt_counter+1,w	;volatile
  5620  0466  30FB               	movlw	251
  5621  0467  1903               	skipnz
  5622  0468  0254               	subwf	_tilt_counter,w	;volatile
  5623  0469  1803               	skipnc
  5624  046A  2C97               	goto	i1l2729
  5625                           
  5626                           ;main.c: 320:                         tilt_counter++;
  5627  046B  3001               	movlw	1
  5628  046C  07D4               	addwf	_tilt_counter,f	;volatile
  5629  046D  1803               	skipnc
  5630  046E  0AD5               	incf	_tilt_counter+1,f	;volatile
  5631  046F  3000               	movlw	0
  5632  0470  07D5               	addwf	_tilt_counter+1,f	;volatile
  5633                           
  5634                           ;main.c: 322:                         if ((tilt_step_phase == 0) || (tilt_step_phase > 7
      +                          )) {
  5635  0471  0871               	movf	_tilt_step_phase,w	;volatile
  5636  0472  1903               	btfsc	3,2
  5637  0473  2C78               	goto	i1l2715
  5638  0474  3008               	movlw	8
  5639  0475  0271               	subwf	_tilt_step_phase,w	;volatile
  5640  0476  1C03               	skipc
  5641  0477  2C7D               	goto	i1l2717
  5642  0478                     i1l2715:
  5643                           
  5644                           ;main.c: 323:                             tilt_step_phase = 7;
  5645  0478  3007               	movlw	7
  5646  0479  00F6               	movwf	??_myISR
  5647  047A  0876               	movf	??_myISR,w
  5648  047B  00F1               	movwf	_tilt_step_phase	;volatile
  5649                           
  5650                           ;main.c: 324:                         } else {
  5651  047C  2C97               	goto	i1l2729
  5652  047D                     i1l2717:
  5653                           
  5654                           ;main.c: 325:                             tilt_step_phase--;
  5655  047D  3001               	movlw	1
  5656  047E  02F1               	subwf	_tilt_step_phase,f	;volatile
  5657  047F  2C97               	goto	i1l2729
  5658  0480                     i1l2719:
  5659                           
  5660                           ;main.c: 329:                     if ((tilt_counter > 0) || (is_init == 1)) {
  5661  0480  0854               	movf	_tilt_counter,w	;volatile
  5662  0481  0455               	iorwf	_tilt_counter+1,w	;volatile
  5663  0482  1D03               	btfss	3,2
  5664  0483  2C87               	goto	i1l2723
  5665  0484  0370               	decf	_is_init,w
  5666  0485  1D03               	btfss	3,2
  5667  0486  2C97               	goto	i1l2729
  5668  0487                     i1l2723:
  5669                           
  5670                           ;main.c: 330:                         tilt_counter--;
  5671  0487  3001               	movlw	1
  5672  0488  02D4               	subwf	_tilt_counter,f	;volatile
  5673  0489  3000               	movlw	0
  5674  048A  1C03               	skipc
  5675  048B  03D5               	decf	_tilt_counter+1,f	;volatile
  5676  048C  02D5               	subwf	_tilt_counter+1,f	;volatile
  5677                           
  5678                           ;main.c: 332:                         if (tilt_step_phase >= 7) {
  5679  048D  3007               	movlw	7
  5680  048E  0271               	subwf	_tilt_step_phase,w	;volatile
  5681  048F  1C03               	skipc
  5682  0490  2C93               	goto	i1l2727
  5683                           
  5684                           ;main.c: 333:                             tilt_step_phase = 0;
  5685  0491  01F1               	clrf	_tilt_step_phase	;volatile
  5686                           
  5687                           ;main.c: 334:                         } else {
  5688  0492  2C97               	goto	i1l2729
  5689  0493                     i1l2727:
  5690                           
  5691                           ;main.c: 335:                             tilt_step_phase++;
  5692  0493  3001               	movlw	1
  5693  0494  00F6               	movwf	??_myISR
  5694  0495  0876               	movf	??_myISR,w
  5695  0496  07F1               	addwf	_tilt_step_phase,f	;volatile
  5696  0497                     i1l2729:
  5697                           
  5698                           ;main.c: 340:                 if (tilt_goto == tilt_counter) {
  5699  0497  0855               	movf	_tilt_counter+1,w	;volatile
  5700  0498  0651               	xorwf	_tilt_goto+1,w	;volatile
  5701  0499  1D03               	skipz
  5702  049A  2C9D               	goto	u234_25
  5703  049B  0854               	movf	_tilt_counter,w	;volatile
  5704  049C  0650               	xorwf	_tilt_goto,w	;volatile
  5705  049D                     u234_25:
  5706  049D  1D03               	skipz
  5707  049E  2CA4               	goto	i1l2735
  5708                           
  5709                           ;main.c: 341:                     if (preset_tilt_enabled == 1) {
  5710  049F  036B               	decf	_preset_tilt_enabled,w	;volatile
  5711  04A0  1D03               	btfss	3,2
  5712  04A1  2CA4               	goto	i1l2735
  5713                           
  5714                           ;main.c: 342:                         preset_tilt_enabled = 0;
  5715  04A2  01EB               	clrf	_preset_tilt_enabled	;volatile
  5716                           
  5717                           ;main.c: 344:                         tilt_enabled = 0;
  5718  04A3  01E7               	clrf	_tilt_enabled	;volatile
  5719  04A4                     i1l2735:
  5720                           
  5721                           ;main.c: 348:                 PORTBbits.RB4 = steps_1A[tilt_step_phase];
  5722  04A4  0871               	movf	_tilt_step_phase,w
  5723  04A5  3E21               	addlw	low ((_steps_1A-__stringbase)| (0+32768))
  5724  04A6  0084               	movwf	4
  5725  04A7  118A  2500  118A   	fcall	stringdir
  5726  04AA  00F6               	movwf	??_myISR
  5727  04AB  0EF6               	swapf	??_myISR,f
  5728  04AC  0806               	movf	6,w	;volatile
  5729  04AD  0676               	xorwf	??_myISR,w
  5730  04AE  39EF               	andlw	-17
  5731  04AF  0676               	xorwf	??_myISR,w
  5732  04B0  0086               	movwf	6	;volatile
  5733                           
  5734                           ;main.c: 349:                 PORTBbits.RB5 = steps_1B[tilt_step_phase];
  5735  04B1  0871               	movf	_tilt_step_phase,w
  5736  04B2  3E19               	addlw	low ((_steps_1B-__stringbase)| (0+32768))
  5737  04B3  0084               	movwf	4
  5738  04B4  118A  2500  118A   	fcall	stringdir
  5739  04B7  00F6               	movwf	??_myISR
  5740  04B8  0EF6               	swapf	??_myISR,f
  5741  04B9  0DF6               	rlf	??_myISR,f
  5742  04BA  0806               	movf	6,w	;volatile
  5743  04BB  0676               	xorwf	??_myISR,w
  5744  04BC  39DF               	andlw	-33
  5745  04BD  0676               	xorwf	??_myISR,w
  5746  04BE  0086               	movwf	6	;volatile
  5747                           
  5748                           ;main.c: 350:                 PORTBbits.RB6 = steps_2A[tilt_step_phase];
  5749  04BF  0871               	movf	_tilt_step_phase,w
  5750  04C0  3E11               	addlw	low ((_steps_2A-__stringbase)| (0+32768))
  5751  04C1  0084               	movwf	4
  5752  04C2  118A  2500  118A   	fcall	stringdir
  5753  04C5  00F6               	movwf	??_myISR
  5754  04C6  0EF6               	swapf	??_myISR,f
  5755  04C7  0DF6               	rlf	??_myISR,f
  5756  04C8  0DF6               	rlf	??_myISR,f
  5757  04C9  0806               	movf	6,w	;volatile
  5758  04CA  0676               	xorwf	??_myISR,w
  5759  04CB  39BF               	andlw	-65
  5760  04CC  0676               	xorwf	??_myISR,w
  5761  04CD  0086               	movwf	6	;volatile
  5762                           
  5763                           ;main.c: 351:                 PORTBbits.RB7 = steps_2B[tilt_step_phase];
  5764  04CE  0871               	movf	_tilt_step_phase,w
  5765  04CF  3E09               	addlw	low ((_steps_2B-__stringbase)| (0+32768))
  5766  04D0  0084               	movwf	4
  5767  04D1  118A  2500  118A   	fcall	stringdir
  5768  04D4  00F6               	movwf	??_myISR
  5769  04D5  0CF6               	rrf	??_myISR,f
  5770  04D6  0CF6               	rrf	??_myISR,f
  5771  04D7  0806               	movf	6,w	;volatile
  5772  04D8  0676               	xorwf	??_myISR,w
  5773  04D9  397F               	andlw	-129
  5774  04DA  0676               	xorwf	??_myISR,w
  5775  04DB  0086               	movwf	6	;volatile
  5776                           
  5777                           ;main.c: 352:             } else {
  5778  04DC  2CE1               	goto	i1l195
  5779  04DD                     i1l242:
  5780                           
  5781                           ;main.c: 353:                 PORTBbits.RB4 = 0;
  5782  04DD  1206               	bcf	6,4	;volatile
  5783                           
  5784                           ;main.c: 354:                 PORTBbits.RB5 = 0;
  5785  04DE  1286               	bcf	6,5	;volatile
  5786                           
  5787                           ;main.c: 355:                 PORTBbits.RB6 = 0;
  5788  04DF  1306               	bcf	6,6	;volatile
  5789                           
  5790                           ;main.c: 356:                 PORTBbits.RB7 = 0;
  5791  04E0  1386               	bcf	6,7	;volatile
  5792  04E1                     i1l195:
  5793  04E1  087B               	movf	??_myISR+5,w
  5794  04E2  00FF               	movwf	127
  5795  04E3  087A               	movf	??_myISR+4,w
  5796  04E4  008A               	movwf	10
  5797  04E5  0879               	movf	??_myISR+3,w
  5798  04E6  0084               	movwf	4
  5799  04E7  0E78               	swapf	??_myISR+2,w
  5800  04E8  0083               	movwf	3
  5801  04E9  0EFE               	swapf	126,f
  5802  04EA  0E7E               	swapf	126,w
  5803  04EB  0009               	retfie
  5804  04EC                     __end_of_myISR:
  5805  007E                     btemp	set	126	;btemp
  5806  007E                     wtemp0	set	126
  5807                           
  5808                           	psect	intentry
  5809  0004                     __pintentry:	
  5810                           ;incstack = 0
  5811                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+pclath]
  5812                           
  5813  0004                     interrupt_function:
  5814  007E                     saved_w	set	btemp
  5815  0004  00FE               	movwf	btemp
  5816  0005  0E03               	swapf	3,w
  5817  0006  00F8               	movwf	??_myISR+2
  5818  0007  0804               	movf	4,w
  5819  0008  00F9               	movwf	??_myISR+3
  5820  0009  080A               	movf	10,w
  5821  000A  00FA               	movwf	??_myISR+4
  5822  000B  087F               	movf	btemp+1,w
  5823  000C  00FB               	movwf	??_myISR+5
  5824  000D  118A  2B16         	ljmp	_myISR
  5825                           
  5826                           	psect	config
  5827                           
  5828                           ;Config register CONFIG @ 0x2007
  5829                           ;	Oscillator Selection bits
  5830                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  5831                           ;	Watchdog Timer Enable bit
  5832                           ;	WDTE = ON, WDT enabled
  5833                           ;	Power-up Timer Enable bit
  5834                           ;	PWRTE = ON, PWRT enabled
  5835                           ;	RA5/MCLR/VPP Pin Function Select bit
  5836                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  5837                           ;	Brown-out Detect Enable bit
  5838                           ;	BOREN = ON, BOD enabled
  5839                           ;	Low-Voltage Programming Enable bit
  5840                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  5841                           ;	Data EE Memory Code Protection bit
  5842                           ;	CPD = OFF, Data memory code protection off
  5843                           ;	Flash Program Memory Code Protection bit
  5844                           ;	CP = OFF, Code protection off
  5845  2007                     	org	8199
  5846  2007  3F54               	dw	16212

Data Sizes:
    Strings     197
    Constant    40
    Data        0
    BSS         94
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     48      80
    BANK1            80      0      56
    BANK2            80      0       0

Pointer List with Targets:

    UART_Write_Text_CRLF@text	PTR unsigned char  size(1) Largest target is 23
		 -> STR_28(CODE[2]), STR_26(CODE[2]), STR_16(CODE[2]), STR_14(CODE[7]), 
		 -> STR_11(CODE[5]), STR_10(CODE[7]), STR_9(CODE[6]), STR_8(CODE[6]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_4(CODE[7]), STR_3(CODE[21]), 
		 -> STR_2(CODE[23]), STR_1(CODE[10]), 

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 14
		 -> STR_27(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[3]), 
		 -> STR_22(CODE[5]), STR_21(CODE[6]), STR_20(CODE[5]), STR_19(CODE[13]), 
		 -> STR_18(CODE[14]), STR_17(CODE[12]), STR_15(CODE[7]), STR_13(CODE[8]), 
		 -> STR_12(CODE[10]), STR_5(CODE[14]), 

    print_cmd_mov@text	PTR unsigned char  size(1) Largest target is 6
		 -> STR_23(CODE[3]), STR_22(CODE[5]), STR_21(CODE[6]), STR_20(CODE[5]), 

    print_preset@text	PTR unsigned char  size(1) Largest target is 14
		 -> STR_19(CODE[13]), STR_18(CODE[14]), STR_17(CODE[12]), 

    PRESET_load@tilt	PTR unsigned int  size(1) Largest target is 2
		 -> main@tilt_tmp_512(BANK0[2]), main@tilt_tmp(BANK0[2]), 

    PRESET_load@pan	PTR unsigned int  size(1) Largest target is 2
		 -> main@pan_tmp_511(BANK0[2]), main@pan_tmp(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_print_preset
    _print_preset->_print_cnt
    _print_cmd_mov->_print_cnt
    _print_cnt->_print_val
    _print_val->_UART_Write
    _UART_Write_Text->_UART_Write
    _UART_Write_Text_CRLF->_UART_Write
    _BAUDS_get->_eeprom_read
    _SPEED_calc->___awdiv
    _PRESET_save->_eeprom_update
    _PRESET_load->_eeprom_read
    _MOTOR_Init->_delay_wdt
    _BAUDS_set->_eeprom_update
    _eeprom_update->_eeprom_write

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0   24514
                                             35 BANK0     13    13      0
                          _BAUDS_set
                         _MOTOR_Init
                        _PRESET_load
                        _PRESET_save
                         _SPEED_calc
                        _TIMER1_Init
                        _TIMER2_Init
                          _UART_Init
                    _UART_Write_Text
               _UART_Write_Text_CRLF
                            _UC_Init
                          _delay_wdt
                      _print_cmd_mov
                          _print_cnt
                       _print_preset
 ---------------------------------------------------------------------------------
 (1) _print_preset                                        10     5      5    6799
                                             25 BANK0     10     5      5
                         _UART_Write
                    _UART_Write_Text
               _UART_Write_Text_CRLF
                             ___bmul
                            ___lbdiv
                          _print_cnt
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     331
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _print_cmd_mov                                        5     1      4    6083
                                             25 BANK0      5     1      4
                    _UART_Write_Text
               _UART_Write_Text_CRLF
                          _print_cnt
 ---------------------------------------------------------------------------------
 (2) _print_cnt                                            4     0      4    3946
                                             21 BANK0      4     0      4
                    _UART_Write_Text
                          _print_val
 ---------------------------------------------------------------------------------
 (3) _print_val                                           12    10      2    2844
                                              9 BANK0     12    10      2
                         _UART_Write
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     856
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     961
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _UART_Write_Text                                      3     3      0     500
                                              9 BANK0      3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text_CRLF                                 3     3      0     680
                                              9 BANK0      3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (4) _UART_Write                                           9     9      0      46
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) _UC_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            3     3      0      65
                                              2 BANK0      3     3      0
                          _BAUDS_get
 ---------------------------------------------------------------------------------
 (2) _BAUDS_get                                            0     0      0      31
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _TIMER2_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIMER1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPEED_calc                                           4     4      0     829
                                              9 BANK0      4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     625
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _PRESET_save                                          8     4      4    1436
                                              6 BANK0      8     4      4
                      _eeprom_update
 ---------------------------------------------------------------------------------
 (1) _PRESET_load                                          6     4      2     704
                                              2 BANK0      6     4      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _MOTOR_Init                                           1     1      0     931
                                              3 BANK0      1     1      0
                          _delay_wdt
 ---------------------------------------------------------------------------------
 (1) _delay_wdt                                            3     1      2     931
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _BAUDS_set                                            2     2      0     788
                                              6 BANK0      2     2      0
                      _eeprom_update
 ---------------------------------------------------------------------------------
 (2) _eeprom_update                                        3     2      1     757
                                              3 BANK0      3     2      1
                        _eeprom_read
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     152
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myISR                                                6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BAUDS_set
     _eeprom_update
       _eeprom_read
       _eeprom_write
   _MOTOR_Init
     _delay_wdt
   _PRESET_load
     _eeprom_read
   _PRESET_save
     _eeprom_update
   _SPEED_calc
     ___awdiv
   _TIMER1_Init
   _TIMER2_Init
   _UART_Init
     _BAUDS_get
       _eeprom_read
   _UART_Write_Text
     _UART_Write
   _UART_Write_Text_CRLF
     _UART_Write
   _UC_Init
   _delay_wdt
   _print_cmd_mov
     _UART_Write_Text
     _UART_Write_Text_CRLF
     _print_cnt
       _UART_Write_Text
       _print_val
         _UART_Write
         ___lwdiv
         ___wmul
   _print_cnt
   _print_preset
     _UART_Write
     _UART_Write_Text
     _UART_Write_Text_CRLF
     ___bmul
     ___lbdiv
     _print_cnt

 _myISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     30      50       3      100.0%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0      38       5       70.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      94       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      94      10        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed Feb 12 14:32:24 2025

                           pc 0002                ___bmul@product 0022                  ___awdiv@sign 0026  
                          fsr 0004           ___wmul@multiplicand 0022                           l303 0270  
                         l320 02DB                           l421 07BF                           l317 0291  
                         l422 07F0                           l262 0306                           l351 0E97  
                         l423 07C3                           l431 0EE8                           l424 07C7  
                         l425 07CB                           l281 00DE                           l354 0EC0  
                         l426 07CF                           l427 07D4                           l541 0D8F  
                         l561 0E08                           l386 06D5                           l571 0E32  
                         _PR2 0092                           fsr0 0004                           indf 0000  
                        l2123 0ECC                          l2125 0EF2                          l4001 07DF  
                        l3201 0F65                          l3211 0DEE                          l3307 0E6D  
                        l3331 0D82                          l3309 0E86                          l3405 0E68  
                        l3415 0DA9                          l3191 0F44                          l3167 0E2A  
                        l3271 06A5                          l3327 0D7C                          l3353 0773  
                        l3601 0050                          l3371 079F                          l3363 077B  
                        l3347 0768                          l3435 07C1                          l3283 06BD  
                        l3275 06AD                          l3365 0789                          l3197 0F5A  
                        l3189 0F36                          l3293 06D1                          l3285 06C1  
                        l3277 06B1                          l3621 0068                          l3613 005B  
                        l3375 07AA                          l3449 07D7                          l3393 0E50  
                        l3625 006F                          l3617 0061                          l3609 0055  
                        l3299 0DD2                          l3379 07B2                          l3571 0E9F  
                        l3395 0E59                          l3811 024E                          l3731 0185  
                        l3643 008D                          l3901 0302                          l3717 0157  
                        l3629 007D                          l3815 025B                          l3577 0EB8  
                        l3681 00FA                          l3819 025D                          l3755 01CB  
                        l3683 00FF                          l3667 00DF                          l3685 0104  
                        l3693 0113                          l3687 0109                          l3695 012C  
                        l3679 00F5                          l3793 0225                          l3689 010E  
                        l3697 012E                          l3859 02B7                          l3699 0134  
                        l3797 0227                          l3789 0218                          l3999 011B  
                        STR_1 0599                          STR_2 052E                          STR_3 0545  
                        STR_4 05B9                          STR_5 0568                          STR_6 05D2  
                        STR_7 05DC                          STR_8 05C0                          STR_9 05C6  
                        _BRGH 04C2                          _CREN 00C4                          u1415 0EDB  
                        u1416 0EDC                          u1417 0EE1                          u1418 0EE2  
                        u1419 0EE7                          u3135 077E                          u3155 078A  
                        u3165 0796                          u3175 07A0                          u3265 0EFA  
                        u3285 0FAD                          u2805 0E33                          u2911 0D8E  
                        u2815 0E3A                          u3705 024A                          u3715 0254  
                        u2845 0F39                          u2865 0F45                          u2875 0F51  
                        u3675 0214                          u2885 0F5B                          u3685 021E  
                        u3777 0DE4                          _SPEN 00C7                          _TRMT 04C1  
                        _TXEN 04C5                          _SYNC 04C4                ??_eeprom_write 0021  
                 main@pan_tmp 0046                          _main 0026                          btemp 007E  
             __end_of_UC_Init 0DB9                          start 000F            _preset_pan_enabled 006C  
           ___bmul@multiplier 0023       __end_of_UART_Write_Text 0E07                   ?_MOTOR_Init 0076  
                       ?_main 0076               __end_of___awdiv 07B7               __end_of___lbdiv 0E6A  
                       _EEADR 009B                         STR_10 05B2                         STR_11 05D7  
                       STR_20 05E6                         STR_12 058F                         STR_21 05CC  
                       STR_13 05A3                         STR_14 05B9                         STR_22 05E1  
                       STR_23 05EE                         STR_15 05AB                         STR_16 05F1  
                       STR_24 05EB                         STR_25 05AF                         STR_17 0583  
                       STR_26 05F1                         STR_18 055A                         STR_27 05AF  
                       STR_19 0576                         STR_28 05F1                         _CMCON 001F  
                 ?_SPEED_calc 0076               ___awdiv@divisor 0020               __end_of___lwdiv 0F6A  
                       i1l212 03B9                         i1l224 0450                         i1l242 04DD  
                       i1l193 0391                         i1l195 04E1               ___awdiv@counter 0025  
                       _RCREG 001A               ??_eeprom_update 0024                         _TMR1H 000F  
                       _TMR1L 000E                         _SPBRG 0099                         _PORTA 0005  
                       _PORTB 0006                         _TRISA 0085                         _TRISB 0086  
                       _TXREG 0019                   ?_UART_Write 0076                         _myISR 0316  
                       main@i 004F                         main@m 004E               ??_print_cmd_mov 003D  
                       pclath 000A               _timer1_tilt_ref 0061                  main@tilt_tmp 0048  
           __end_of_BAUDS_get 07FF             __end_of_BAUDS_set 0D49                 print_cnt@_pan 0035  
                       status 0003                         wtemp0 007E               ___lbdiv@divisor 0020  
            print_val@val1000 0031               ___lbdiv@counter 0023               __initialization 0011  
                __end_of_main 0316                 print_val@val1 002B                        ??_main 0043  
                ?_TIMER1_Init 0076                  ?_TIMER2_Init 0076                  ?_PRESET_load 0022  
                ?_PRESET_save 0026                        ?_myISR 0076                        _EEDATA 009A  
                      _EECON1 009C                        _EECON2 009D              ___awdiv@dividend 0022  
                   ??_UC_Init 0020                        i1l4003 0367                        i1l2701 045D  
                      i1l2605 038E                        i1l2623 03AF                        i1l2607 038F  
                      i1l2617 03A5                        i1l2723 0487                        i1l2715 0478  
                      i1l2651 03C9                        i1l2571 033E                        i1l2717 047D  
                      i1l2565 0333                        i1l2557 032C                        i1l2735 04A4  
                      i1l2727 0493                        i1l2719 0480                        i1l2671 03F2  
                      i1l2655 03D2                        i1l2647 03C5                        i1l2583 0355  
                      i1l2575 034B                        i1l2729 0497                        i1l2681 0408  
                      i1l2673 03F5                        i1l2593 035F                        i1l2683 040C  
                      i1l2587 035A                        i1l2579 0350                        i1l2595 0378  
                      i1l2677 03FC                        i1l2669 03ED                        i1l2689 0419  
                      i1l2697 0454                        u223_25 0412                        u234_25 049D  
                      u199_20 0329                        _P_dat1 005B                        _P_dat2 005A  
                      _P_cmd1 005D                        _P_cmd2 005C                        _P_addr 005E  
     _preset_tilt_enabled_old 00D4             __end_of_UART_Init 07FB                        ___bmul 0D7A  
                      ___wmul 0E28                     ??___awdiv 0024                     ??___lbdiv 0021  
            ?_UART_Write_Text 0076             eeprom_update@addr 0025                     ??___lwdiv 0024  
            ___awdiv@quotient 0027          __end_of_eeprom_write 0E28               SPEED_calc@speed 002B  
                      saved_w 007E                print_cnt@_tilt 0037              __end_of_steps_1A 052E  
            __end_of_steps_1B 0526              __end_of_steps_2A 051E              __end_of_steps_2B 0516  
    UART_Write_Text_CRLF@text 002B              print_preset@tilt 003B              print_preset@text 003D  
            ___lbdiv@dividend 0022             print_val@val10000 0033       __end_of__initialization 0023  
             eeprom_read@addr 0021           ___bmul@multiplicand 0020                __pcstackCOMMON 0076  
               _pan_direction 0069                 __end_of_myISR 04EC                print_val@val10 002D  
            ___lbdiv@quotient 0024                print_val@value 0029                _OPTION_REGbits 0081  
           eeprom_write@value 0020                       ??_myISR 0076                print_preset@id 0041  
                  __pbssBANK0 0050                    __pbssBANK1 00A0                    __pmaintext 0026  
               _pan_speed_old 00D3                       ?___bmul 0020                    _header_cnt 00D7  
                  _header_pos 00D1                       ?___wmul 0020                    __pintentry 0004  
                ??_MOTOR_Init 0023                  ??_SPEED_calc 0029                  ??_UART_Write 0020  
                     _UC_Init 0DA1                    __stringtab 0500                    _frame_data 00A0  
           __end_of_delay_wdt 0DEA            __end_of_MOTOR_Init 075E                     _BAUDS_get 07FB  
__end_of_UART_Write_Text_CRLF 0E8E                     _BAUDS_set 0D40            __end_of_SPEED_calc 0EC2  
       UART_Write_Text_CRLF@i 0029                       ___awdiv 075E                       ___lbdiv 0E49  
          __end_of_UART_Write 0EF6                       ___lwdiv 0F2E      print_preset@preset_id_10 0042  
                     __ptext1 0F6A                       __ptext2 0E49                       __ptext3 0D7A  
                     __ptext4 0DB9                       __ptext5 04EC                       __ptext6 05F3  
                     __ptext7 0E28                       __ptext8 0F2E                       __ptext9 0DEA  
          eeprom_update@value 0023                     _T1CONbits 0010                     _T2CONbits 0012  
                     _is_init 0070         __end_of_eeprom_update 0D69                       clrloop0 0D39  
        end_of_initialization 0023           _preset_tilt_enabled 006B                  _eeprom_write 0E07  
       __end_of_print_cmd_mov 0DD1                    ?_BAUDS_get 0076             __end_of_speed_ref 050E  
                  ?_BAUDS_set 0076                  _buffer_data0 00C3                  _buffer_data1 00BC  
                _buffer_data2 00B5                  _buffer_data3 00AE                  _buffer_data4 00A7  
           __end_of_print_cnt 04FE             __end_of_print_val 06D9                  _buffer_ready 00CA  
                   _RCSTAbits 0018                    _timer1_pan 0064                     _UART_Init 07B7  
                   _PORTAbits 0005                     _PORTBbits 0006                UART_Write@data 0024  
               PRESET_load@id 0026                    _tilt_speed 0065                 PRESET_save@id 002C  
               ?_print_preset 0039                 ??_eeprom_read 0020                __end_of___bmul 0D8B  
              __end_of___wmul 0E49                _timer1_pan_ref 0062                    ?_UART_Init 0076  
             print_val@val100 002F           start_initialization 0011                ??_print_preset 003E  
        _UART_Write_Text_CRLF 0E6A                   ??_BAUDS_get 0022                   ??_BAUDS_set 0026  
                    ??___bmul 0021                      ??___wmul 0024           __end_of_eeprom_read 0DA1  
             print_preset@pan 0039                   __pbssCOMMON 0070         ?_UART_Write_Text_CRLF 0076  
                   ___latbits 0001                 __pcstackBANK0 0020               main@chksum_calc 0045  
                 _data_receiv 0075                      ?_UC_Init 0076              eeprom_write@addr 0022  
                 _alarms_data 00CF              ___lwdiv@dividend 0022                     _delay_wdt 0DD1  
                    ?___awdiv 0020                      ?___lbdiv 0020                      ?___lwdiv 0020  
                 ??_UART_Init 0022                     __pstrings 0500                 ??_TIMER1_Init 0020  
               ??_TIMER2_Init 0020                 ??_PRESET_load 0024                _pan_step_phase 0072  
               ??_PRESET_save 002A              ___lwdiv@quotient 0026       print_preset@preset_id_1 0040  
                   _is_reboot 0058                     _pan_speed 0068             ??_UART_Write_Text 0029  
           interrupt_function 0004                ___wmul@product 0024                     clear_ram0 0D38  
                 _eeprom_read 0D8B                      _PIE1bits 008C                      _PCONbits 008E  
                    _PIR1bits 000C                    ?_delay_wdt 0020          __end_of_print_preset 0FA9  
                   _speed_ref 0506                     _preset_id 0059                     _print_cnt 04EC  
                   _tilt_goto 0050                     _print_val 05F3                   __stringbase 0505  
           ___wmul@multiplier 0020        ??_UART_Write_Text_CRLF 0029                   _frame_index 0060  
             main@pan_tmp_511 004A           __end_of_TIMER1_Init 0D58           __end_of_TIMER2_Init 0D7A  
                    _P_chksum 00D0                  delay_wdt@_ms 0020           __end_of_PRESET_load 1000  
         __end_of_PRESET_save 0F2E                    _EECON1bits 009C                    ?_print_cnt 0035  
                  ?_print_val 0029                   _pan_enabled 006A            __end_of__stringtab 0506  
                 _pan_counter 0056                 _response_type 005F               ___lwdiv@divisor 0020  
             ___lwdiv@counter 0025                      __ptext10 0E6A                      __ptext11 0EC2  
                    __ptext20 0FA9                      __ptext12 0DA1                      __ptext21 06D9  
                    __ptext13 07B7                      __ptext22 0DD1                      __ptext14 07FB  
                    __ptext23 0D40                      __ptext15 0D69                      __ptext24 0D58  
                    __ptext16 0D49                      __ptext25 0E07                      __ptext17 0E8E  
                    __ptext26 0D8B                      __ptext18 075E                      __ptext27 0316  
                    __ptext19 0EF6              main@tilt_tmp_512 004C                _timeout_receiv 006F  
              _tilt_direction 0066               _tilt_step_phase 0071           UART_Write_Text@text 002B  
                    _pan_goto 0052                BAUDS_set@index 0027                   ??_delay_wdt 0022  
                    _steps_1A 0526                      _steps_1B 051E                      _steps_2A 0516  
                    _steps_2B 050E                   _TIMER1_Init 0D49             print_cmd_mov@tilt 003B  
           print_cmd_mov@text 003D                   _TIMER2_Init 0D69                    _INTCONbits 000B  
                 _PRESET_load 0FA9                 _eeprom_update 0D58                   _PRESET_save 0EF6  
           SPEED_calc@sp_calc 002C                _tilt_speed_old 00D2                      intlevel1 0000  
            PRESET_load@_addr 0027                 _timeout_uart1 006E                 _timeout_uart2 006D  
               _timeout_uart3 00D6                 _print_cmd_mov 0DB9                     stringcode 0500  
               _buffer_index1 0074                 _buffer_index2 0073             UART_Write@timeout 0025  
            print_cmd_mov@pan 0039                   _timer1_tilt 0063                   ??_print_cnt 0039  
                 ??_print_val 002B                    _MOTOR_Init 06D9               _UART_Write_Text 0DEA  
                  _SPEED_calc 0E8E                  _tilt_enabled 0067               PRESET_load@tilt 0023  
                    stringdir 0500              PRESET_save@_addr 002D                      stringtab 0500  
              ?_eeprom_update 0023                  _tilt_counter 0054                    _UART_Write 0EC2  
                _print_preset 0F6A                PRESET_load@pan 0022              UART_Write_Text@i 0029  
               ?_eeprom_write 0020          UART_Init@bauds_index 0024               PRESET_save@tilt 0028  
                  _STATUSbits 0003                ?_print_cmd_mov 0039        _preset_pan_enabled_old 00D5  
                ?_eeprom_read 0076                PRESET_save@pan 0026  
