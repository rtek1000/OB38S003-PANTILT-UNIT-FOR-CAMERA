

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed Feb 12 09:50:36 2025

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	16F648A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Generated 12/10/2023 GMT
    41                           ; 
    42                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F648A Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  008C                     	;# 
   102  008E                     	;# 
   103  0092                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009F                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000E                     	;# 
   122  000E                     	;# 
   123  000F                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0015                     	;# 
   128  0015                     	;# 
   129  0016                     	;# 
   130  0017                     	;# 
   131  0018                     	;# 
   132  0019                     	;# 
   133  001A                     	;# 
   134  001F                     	;# 
   135  0081                     	;# 
   136  0085                     	;# 
   137  0086                     	;# 
   138  008C                     	;# 
   139  008E                     	;# 
   140  0092                     	;# 
   141  0098                     	;# 
   142  0099                     	;# 
   143  009A                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009F                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  000A                     	;# 
   156  000B                     	;# 
   157  000C                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0015                     	;# 
   165  0015                     	;# 
   166  0016                     	;# 
   167  0017                     	;# 
   168  0018                     	;# 
   169  0019                     	;# 
   170  001A                     	;# 
   171  001F                     	;# 
   172  0081                     	;# 
   173  0085                     	;# 
   174  0086                     	;# 
   175  008C                     	;# 
   176  008E                     	;# 
   177  0092                     	;# 
   178  0098                     	;# 
   179  0099                     	;# 
   180  009A                     	;# 
   181  009B                     	;# 
   182  009C                     	;# 
   183  009D                     	;# 
   184  009F                     	;# 
   185  0000                     	;# 
   186  0001                     	;# 
   187  0002                     	;# 
   188  0003                     	;# 
   189  0004                     	;# 
   190  0005                     	;# 
   191  0006                     	;# 
   192  000A                     	;# 
   193  000B                     	;# 
   194  000C                     	;# 
   195  000E                     	;# 
   196  000E                     	;# 
   197  000F                     	;# 
   198  0010                     	;# 
   199  0011                     	;# 
   200  0012                     	;# 
   201  0015                     	;# 
   202  0015                     	;# 
   203  0016                     	;# 
   204  0017                     	;# 
   205  0018                     	;# 
   206  0019                     	;# 
   207  001A                     	;# 
   208  001F                     	;# 
   209  0081                     	;# 
   210  0085                     	;# 
   211  0086                     	;# 
   212  008C                     	;# 
   213  008E                     	;# 
   214  0092                     	;# 
   215  0098                     	;# 
   216  0099                     	;# 
   217  009A                     	;# 
   218  009B                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009F                     	;# 
   222  0000                     	;# 
   223  0001                     	;# 
   224  0002                     	;# 
   225  0003                     	;# 
   226  0004                     	;# 
   227  0005                     	;# 
   228  0006                     	;# 
   229  000A                     	;# 
   230  000B                     	;# 
   231  000C                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0015                     	;# 
   239  0015                     	;# 
   240  0016                     	;# 
   241  0017                     	;# 
   242  0018                     	;# 
   243  0019                     	;# 
   244  001A                     	;# 
   245  001F                     	;# 
   246  0081                     	;# 
   247  0085                     	;# 
   248  0086                     	;# 
   249  008C                     	;# 
   250  008E                     	;# 
   251  0092                     	;# 
   252  0098                     	;# 
   253  0099                     	;# 
   254  009A                     	;# 
   255  009B                     	;# 
   256  009C                     	;# 
   257  009D                     	;# 
   258  009F                     	;# 
   259                           
   260                           	psect	stringtext
   261  0800                     __pstringtext:
   262  0800                     stringtab:
   263  0800                     __stringtab:
   264                           
   265                           ;	String table - string pointers are 2 bytes each
   266  0800  1BFF               	btfsc	btemp+1,7
   267  0801  280A               	ljmp	stringcode
   268  0802  1383               	bcf	3,7
   269  0803  187F               	btfsc	btemp+1,0
   270  0804  1783               	bsf	3,7
   271  0805  0800               	movf	0,w
   272  0806  0A84               	incf	4,f
   273  0807  1903               	skipnz
   274  0808  0AFF               	incf	btemp+1,f
   275  0809  0008               	return
   276  080A                     stringcode:
   277  080A  087F               	movf	btemp+1,w
   278  080B  397F               	andlw	127
   279  080C  008A               	movwf	10
   280  080D  0804               	movf	4,w
   281  080E  0A84               	incf	4,f
   282  080F  1903               	skipnz
   283  0810  0AFF               	incf	btemp+1,f
   284  0811  0082               	movwf	2
   285  0812                     __stringbase:
   286  0812                     __end_of__stringtab:
   287  0812                     _speed_ref:
   288  0812  3406               	retlw	6
   289  0813  340C               	retlw	12
   290  0814  3412               	retlw	18
   291  0815  3419               	retlw	25
   292  0816  341F               	retlw	31
   293  0817  3425               	retlw	37
   294  0818  342C               	retlw	44
   295  0819  3432               	retlw	50
   296  081A                     __end_of_speed_ref:
   297  081A                     _steps_2B:
   298  081A  3400               	retlw	0
   299  081B  3400               	retlw	0
   300  081C  3400               	retlw	0
   301  081D  3400               	retlw	0
   302  081E  3400               	retlw	0
   303  081F  3401               	retlw	1
   304  0820  3401               	retlw	1
   305  0821  3401               	retlw	1
   306  0822                     __end_of_steps_2B:
   307  0822                     _steps_2A:
   308  0822  3400               	retlw	0
   309  0823  3400               	retlw	0
   310  0824  3400               	retlw	0
   311  0825  3401               	retlw	1
   312  0826  3401               	retlw	1
   313  0827  3401               	retlw	1
   314  0828  3400               	retlw	0
   315  0829  3400               	retlw	0
   316  082A                     __end_of_steps_2A:
   317  082A                     _steps_1B:
   318  082A  3400               	retlw	0
   319  082B  3401               	retlw	1
   320  082C  3401               	retlw	1
   321  082D  3401               	retlw	1
   322  082E  3400               	retlw	0
   323  082F  3400               	retlw	0
   324  0830  3400               	retlw	0
   325  0831  3400               	retlw	0
   326  0832                     __end_of_steps_1B:
   327  0832                     _steps_1A:
   328  0832  3401               	retlw	1
   329  0833  3401               	retlw	1
   330  0834  3400               	retlw	0
   331  0835  3400               	retlw	0
   332  0836  3400               	retlw	0
   333  0837  3400               	retlw	0
   334  0838  3400               	retlw	0
   335  0839  3401               	retlw	1
   336  083A                     __end_of_steps_1A:
   337  0003                     _STATUSbits	set	3
   338  0019                     _TXREG	set	25
   339  0010                     _T1CONbits	set	16
   340  000B                     _INTCONbits	set	11
   341  001F                     _CMCON	set	31
   342  0006                     _PORTB	set	6
   343  0005                     _PORTA	set	5
   344  0005                     _PORTAbits	set	5
   345  000E                     _TMR1L	set	14
   346  000F                     _TMR1H	set	15
   347  0006                     _PORTBbits	set	6
   348  001A                     _RCREG	set	26
   349  000C                     _PIR1bits	set	12
   350  00C4                     _CREN	set	196
   351  00C7                     _SPEN	set	199
   352  009D                     _EECON2	set	157
   353  009A                     _EEDATA	set	154
   354  009C                     _EECON1	set	156
   355  009B                     _EEADR	set	155
   356  009C                     _EECON1bits	set	156
   357  0099                     _SPBRG	set	153
   358  0086                     _TRISB	set	134
   359  0085                     _TRISA	set	133
   360  0081                     _OPTION_REGbits	set	129
   361  008E                     _PCONbits	set	142
   362  008C                     _PIE1bits	set	140
   363  04C1                     _TRMT	set	1217
   364  04C5                     _TXEN	set	1221
   365  04C4                     _SYNC	set	1220
   366  04C2                     _BRGH	set	1218
   367  083A                     STR_2:
   368  083A  3447               	retlw	71	;'G'
   369  083B  346F               	retlw	111	;'o'
   370  083C  3474               	retlw	116	;'t'
   371  083D  346F               	retlw	111	;'o'
   372  083E  3420               	retlw	32	;' '
   373  083F  3450               	retlw	80	;'P'
   374  0840  3441               	retlw	65	;'A'
   375  0841  344E               	retlw	78	;'N'
   376  0842  3420               	retlw	32	;' '
   377  0843  3461               	retlw	97	;'a'
   378  0844  346E               	retlw	110	;'n'
   379  0845  3464               	retlw	100	;'d'
   380  0846  3420               	retlw	32	;' '
   381  0847  3454               	retlw	84	;'T'
   382  0848  3449               	retlw	73	;'I'
   383  0849  344C               	retlw	76	;'L'
   384  084A  3454               	retlw	84	;'T'
   385  084B  3420               	retlw	32	;' '
   386  084C  3448               	retlw	72	;'H'
   387  084D  346F               	retlw	111	;'o'
   388  084E  346D               	retlw	109	;'m'
   389  084F  3465               	retlw	101	;'e'
   390  0850  340D               	retlw	13
   391  0851  340A               	retlw	10
   392  0852  3400               	retlw	0
   393  0853                     STR_3:
   394  0853  3457               	retlw	87	;'W'
   395  0854  3461               	retlw	97	;'a'
   396  0855  3469               	retlw	105	;'i'
   397  0856  3474               	retlw	116	;'t'
   398  0857  3469               	retlw	105	;'i'
   399  0858  346E               	retlw	110	;'n'
   400  0859  3467               	retlw	103	;'g'
   401  085A  3420               	retlw	32	;' '
   402  085B  3466               	retlw	102	;'f'
   403  085C  346F               	retlw	111	;'o'
   404  085D  3472               	retlw	114	;'r'
   405  085E  3420               	retlw	32	;' '
   406  085F  3463               	retlw	99	;'c'
   407  0860  346F               	retlw	111	;'o'
   408  0861  346D               	retlw	109	;'m'
   409  0862  346D               	retlw	109	;'m'
   410  0863  3461               	retlw	97	;'a'
   411  0864  346E               	retlw	110	;'n'
   412  0865  3464               	retlw	100	;'d'
   413  0866  3473               	retlw	115	;'s'
   414  0867  340D               	retlw	13
   415  0868  340A               	retlw	10
   416  0869  3400               	retlw	0
   417  086A                     STR_12:
   418  086A  340D               	retlw	13
   419  086B  340A               	retlw	10
   420  086C  3450               	retlw	80	;'P'
   421  086D  344C               	retlw	76	;'L'
   422  086E  3445               	retlw	69	;'E'
   423  086F  3441               	retlw	65	;'A'
   424  0870  3453               	retlw	83	;'S'
   425  0871  3445               	retlw	69	;'E'
   426  0872  3420               	retlw	32	;' '
   427  0873  3452               	retlw	82	;'R'
   428  0874  3445               	retlw	69	;'E'
   429  0875  3442               	retlw	66	;'B'
   430  0876  344F               	retlw	79	;'O'
   431  0877  344F               	retlw	79	;'O'
   432  0878  3454               	retlw	84	;'T'
   433  0879  340D               	retlw	13
   434  087A  340A               	retlw	10
   435  087B  3400               	retlw	0
   436  087C                     STR_13:
   437  087C  340D               	retlw	13
   438  087D  340A               	retlw	10
   439  087E  344E               	retlw	78	;'N'
   440  087F  3445               	retlw	69	;'E'
   441  0880  3445               	retlw	69	;'E'
   442  0881  3444               	retlw	68	;'D'
   443  0882  3420               	retlw	32	;' '
   444  0883  3452               	retlw	82	;'R'
   445  0884  3445               	retlw	69	;'E'
   446  0885  3442               	retlw	66	;'B'
   447  0886  344F               	retlw	79	;'O'
   448  0887  344F               	retlw	79	;'O'
   449  0888  3454               	retlw	84	;'T'
   450  0889  340D               	retlw	13
   451  088A  340A               	retlw	10
   452  088B  3400               	retlw	0
   453  088C                     STR_19:
   454  088C  3443               	retlw	67	;'C'
   455  088D  344C               	retlw	76	;'L'
   456  088E  3445               	retlw	69	;'E'
   457  088F  3441               	retlw	65	;'A'
   458  0890  3452               	retlw	82	;'R'
   459  0891  3420               	retlw	32	;' '
   460  0892  3450               	retlw	80	;'P'
   461  0893  3452               	retlw	82	;'R'
   462  0894  3445               	retlw	69	;'E'
   463  0895  3453               	retlw	83	;'S'
   464  0896  3445               	retlw	69	;'E'
   465  0897  3454               	retlw	84	;'T'
   466  0898  3420               	retlw	32	;' '
   467  0899  3400               	retlw	0
   468  089A                     STR_5:
   469  089A  3453               	retlw	83	;'S'
   470  089B  3445               	retlw	69	;'E'
   471  089C  3454               	retlw	84	;'T'
   472  089D  3420               	retlw	32	;' '
   473  089E  3442               	retlw	66	;'B'
   474  089F  3441               	retlw	65	;'A'
   475  08A0  3455               	retlw	85	;'U'
   476  08A1  3444               	retlw	68	;'D'
   477  08A2  3420               	retlw	32	;' '
   478  08A3  3452               	retlw	82	;'R'
   479  08A4  3441               	retlw	65	;'A'
   480  08A5  3454               	retlw	84	;'T'
   481  08A6  3445               	retlw	69	;'E'
   482  08A7  3400               	retlw	0
   483  08A8                     STR_22:
   484  08A8  3447               	retlw	71	;'G'
   485  08A9  344F               	retlw	79	;'O'
   486  08AA  3454               	retlw	84	;'T'
   487  08AB  344F               	retlw	79	;'O'
   488  08AC  3420               	retlw	32	;' '
   489  08AD  3450               	retlw	80	;'P'
   490  08AE  3452               	retlw	82	;'R'
   491  08AF  3445               	retlw	69	;'E'
   492  08B0  3453               	retlw	83	;'S'
   493  08B1  3445               	retlw	69	;'E'
   494  08B2  3454               	retlw	84	;'T'
   495  08B3  3420               	retlw	32	;' '
   496  08B4  3400               	retlw	0
   497  08B5                     STR_1:
   498  08B5  340D               	retlw	13
   499  08B6  340A               	retlw	10
   500  08B7  340D               	retlw	13
   501  08B8  340A               	retlw	10
   502  08B9  3453               	retlw	83	;'S'
   503  08BA  3474               	retlw	116	;'t'
   504  08BB  3461               	retlw	97	;'a'
   505  08BC  3472               	retlw	114	;'r'
   506  08BD  3474               	retlw	116	;'t'
   507  08BE  340D               	retlw	13
   508  08BF  340A               	retlw	10
   509  08C0  3400               	retlw	0
   510  08C1                     STR_16:
   511  08C1  3453               	retlw	83	;'S'
   512  08C2  3445               	retlw	69	;'E'
   513  08C3  3454               	retlw	84	;'T'
   514  08C4  3420               	retlw	32	;' '
   515  08C5  3450               	retlw	80	;'P'
   516  08C6  3452               	retlw	82	;'R'
   517  08C7  3445               	retlw	69	;'E'
   518  08C8  3453               	retlw	83	;'S'
   519  08C9  3445               	retlw	69	;'E'
   520  08CA  3454               	retlw	84	;'T'
   521  08CB  3420               	retlw	32	;' '
   522  08CC  3400               	retlw	0
   523  08CD                     STR_10:
   524  08CD  3431               	retlw	49	;'1'
   525  08CE  3431               	retlw	49	;'1'
   526  08CF  3435               	retlw	53	;'5'
   527  08D0  3432               	retlw	50	;'2'
   528  08D1  3430               	retlw	48	;'0'
   529  08D2  3430               	retlw	48	;'0'
   530  08D3  340D               	retlw	13
   531  08D4  340A               	retlw	10
   532  08D5  3400               	retlw	0
   533  08D6                     STR_8:
   534  08D6  3431               	retlw	49	;'1'
   535  08D7  3439               	retlw	57	;'9'
   536  08D8  3432               	retlw	50	;'2'
   537  08D9  3430               	retlw	48	;'0'
   538  08DA  3430               	retlw	48	;'0'
   539  08DB  340D               	retlw	13
   540  08DC  340A               	retlw	10
   541  08DD  3400               	retlw	0
   542  08DE                     STR_9:
   543  08DE  3433               	retlw	51	;'3'
   544  08DF  3438               	retlw	56	;'8'
   545  08E0  3434               	retlw	52	;'4'
   546  08E1  3430               	retlw	48	;'0'
   547  08E2  3430               	retlw	48	;'0'
   548  08E3  340D               	retlw	13
   549  08E4  340A               	retlw	10
   550  08E5  3400               	retlw	0
   551  08E6                     STR_27:
   552  08E6  3452               	retlw	82	;'R'
   553  08E7  3449               	retlw	73	;'I'
   554  08E8  3447               	retlw	71	;'G'
   555  08E9  3448               	retlw	72	;'H'
   556  08EA  3454               	retlw	84	;'T'
   557  08EB  3420               	retlw	32	;' '
   558  08EC  3428               	retlw	40	;'('
   559  08ED  3400               	retlw	0
   560  08EE                     STR_6:
   561  08EE  3432               	retlw	50	;'2'
   562  08EF  3434               	retlw	52	;'4'
   563  08F0  3430               	retlw	48	;'0'
   564  08F1  3430               	retlw	48	;'0'
   565  08F2  340D               	retlw	13
   566  08F3  340A               	retlw	10
   567  08F4  3400               	retlw	0
   568  08F5                     STR_11:
   569  08F5  3439               	retlw	57	;'9'
   570  08F6  3436               	retlw	54	;'6'
   571  08F7  3430               	retlw	48	;'0'
   572  08F8  3430               	retlw	48	;'0'
   573  08F9  340D               	retlw	13
   574  08FA  340A               	retlw	10
   575  08FB  3400               	retlw	0
   576  08FC                     STR_7:
   577  08FC  3434               	retlw	52	;'4'
   578  08FD  3438               	retlw	56	;'8'
   579  08FE  3430               	retlw	48	;'0'
   580  08FF  3430               	retlw	48	;'0'
   581  0900  340D               	retlw	13
   582  0901  340A               	retlw	10
   583  0902  3400               	retlw	0
   584  0903                     STR_29:
   585  0903  3444               	retlw	68	;'D'
   586  0904  344F               	retlw	79	;'O'
   587  0905  3457               	retlw	87	;'W'
   588  0906  344E               	retlw	78	;'N'
   589  0907  3420               	retlw	32	;' '
   590  0908  3428               	retlw	40	;'('
   591  0909  3400               	retlw	0
   592  090A                     STR_14:
   593  090A  3453               	retlw	83	;'S'
   594  090B  3454               	retlw	84	;'T'
   595  090C  344F               	retlw	79	;'O'
   596  090D  3450               	retlw	80	;'P'
   597  090E  3420               	retlw	32	;' '
   598  090F  3428               	retlw	40	;'('
   599  0910  3400               	retlw	0
   600  0911                     STR_25:
   601  0911  344C               	retlw	76	;'L'
   602  0912  3445               	retlw	69	;'E'
   603  0913  3446               	retlw	70	;'F'
   604  0914  3454               	retlw	84	;'T'
   605  0915  3420               	retlw	32	;' '
   606  0916  3428               	retlw	40	;'('
   607  0917  3400               	retlw	0
   608  0918                     STR_31:
   609  0918  3455               	retlw	85	;'U'
   610  0919  3450               	retlw	80	;'P'
   611  091A  3420               	retlw	32	;' '
   612  091B  3428               	retlw	40	;'('
   613  091C  3400               	retlw	0
   614  091D                     STR_15:
   615  091D  3429               	retlw	41	;')'
   616  091E  340D               	retlw	13
   617  091F  340A               	retlw	10
   618  0920  3400               	retlw	0
   619  0921                     STR_33:
   620  0921  342C               	retlw	44	;','
   621  0922  3420               	retlw	32	;' '
   622  0923  3400               	retlw	0
   623  091D                     
   624                           	psect	cinit
   625  0011                     start_initialization:	
   626                           ; #config settings
   627                           
   628  0011                     __initialization:
   629                           
   630                           ; Clear objects allocated to COMMON
   631  0011  01F0               	clrf	__pbssCOMMON& (0+127)
   632  0012  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   633  0013  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   634  0014  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   635  0015  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   636                           
   637                           ; Clear objects allocated to BANK0
   638  0016  1383               	bcf	3,7	;select IRP bank0
   639  0017  3020               	movlw	low __pbssBANK0
   640  0018  0084               	movwf	4
   641  0019  3043               	movlw	low (__pbssBANK0+35)
   642  001A  158A  2514  118A   	fcall	clear_ram0
   643                           
   644                           ; Clear objects allocated to BANK1
   645  001D  30A0               	movlw	low __pbssBANK1
   646  001E  0084               	movwf	4
   647  001F  30D3               	movlw	low (__pbssBANK1+51)
   648  0020  158A  2514         	fcall	clear_ram0
   649  0022                     end_of_initialization:	
   650                           ;End of C runtime variable initialization code
   651                           
   652  0022                     __end_of__initialization:
   653  0022  0183               	clrf	3
   654  0023  118A  2825         	ljmp	_main	;jump to C main() function
   655                           
   656                           	psect	bssCOMMON
   657  0070                     __pbssCOMMON:
   658  0070                     _tilt_step_phase:
   659  0070                     	ds	1
   660  0071                     _pan_step_phase:
   661  0071                     	ds	1
   662  0072                     _buffer_index2:
   663  0072                     	ds	1
   664  0073                     _buffer_index1:
   665  0073                     	ds	1
   666  0074                     _data_receiv:
   667  0074                     	ds	1
   668                           
   669                           	psect	bssBANK0
   670  0020                     __pbssBANK0:
   671  0020                     _tilt_goto:
   672  0020                     	ds	2
   673  0022                     _pan_goto:
   674  0022                     	ds	2
   675  0024                     _tilt_counter:
   676  0024                     	ds	2
   677  0026                     _pan_counter:
   678  0026                     	ds	2
   679  0028                     _is_init:
   680  0028                     	ds	1
   681  0029                     _is_reboot:
   682  0029                     	ds	1
   683  002A                     _preset_id:
   684  002A                     	ds	1
   685  002B                     _P_dat2:
   686  002B                     	ds	1
   687  002C                     _P_dat1:
   688  002C                     	ds	1
   689  002D                     _P_cmd2:
   690  002D                     	ds	1
   691  002E                     _P_cmd1:
   692  002E                     	ds	1
   693  002F                     _P_addr:
   694  002F                     	ds	1
   695  0030                     _response_type:
   696  0030                     	ds	1
   697  0031                     _frame_index:
   698  0031                     	ds	1
   699  0032                     _timer1_tilt_ref:
   700  0032                     	ds	1
   701  0033                     _timer1_pan_ref:
   702  0033                     	ds	1
   703  0034                     _timer1_tilt:
   704  0034                     	ds	1
   705  0035                     _timer1_pan:
   706  0035                     	ds	1
   707  0036                     _tilt_speed:
   708  0036                     	ds	1
   709  0037                     _tilt_direction:
   710  0037                     	ds	1
   711  0038                     _tilt_enabled:
   712  0038                     	ds	1
   713  0039                     _pan_speed_old:
   714  0039                     	ds	1
   715  003A                     _pan_speed:
   716  003A                     	ds	1
   717  003B                     _pan_direction:
   718  003B                     	ds	1
   719  003C                     _pan_enabled:
   720  003C                     	ds	1
   721  003D                     _preset_tilt_enabled_old:
   722  003D                     	ds	1
   723  003E                     _preset_tilt_enabled:
   724  003E                     	ds	1
   725  003F                     _preset_pan_enabled_old:
   726  003F                     	ds	1
   727  0040                     _preset_pan_enabled:
   728  0040                     	ds	1
   729  0041                     _timeout_receiv:
   730  0041                     	ds	1
   731  0042                     _header_cnt:
   732  0042                     	ds	1
   733                           
   734                           	psect	bssBANK1
   735  00A0                     __pbssBANK1:
   736  00A0                     _frame_data:
   737  00A0                     	ds	7
   738  00A7                     _buffer_data4:
   739  00A7                     	ds	7
   740  00AE                     _buffer_data3:
   741  00AE                     	ds	7
   742  00B5                     _buffer_data2:
   743  00B5                     	ds	7
   744  00BC                     _buffer_data1:
   745  00BC                     	ds	7
   746  00C3                     _buffer_data0:
   747  00C3                     	ds	7
   748  00CA                     _buffer_ready:
   749  00CA                     	ds	5
   750  00CF                     _alarms_data:
   751  00CF                     	ds	1
   752  00D0                     _P_chksum:
   753  00D0                     	ds	1
   754  00D1                     _header_pos:
   755  00D1                     	ds	1
   756  00D2                     _tilt_speed_old:
   757  00D2                     	ds	1
   758                           
   759                           	psect	clrtext
   760  0D14                     clear_ram0:	
   761                           ;	Called with FSR containing the base address, and
   762                           ;	W with the last address+1
   763                           
   764  0D14  0064               	clrwdt	;clear the watchdog before getting into this loop
   765  0D15                     clrloop0:
   766  0D15  0180               	clrf	0	;clear RAM location pointed to by FSR
   767  0D16  0A84               	incf	4,f	;increment pointer
   768  0D17  0604               	xorwf	4,w	;XOR with final address
   769  0D18  1903               	btfsc	3,2	;have we reached the end yet?
   770  0D19  3400               	retlw	0	;all done for this memory range, return
   771  0D1A  0604               	xorwf	4,w	;XOR again to restore value
   772  0D1B  2D15               	goto	clrloop0	;do the next byte
   773                           
   774                           	psect	cstackBANK1
   775  00D3                     __pcstackBANK1:
   776  00D3                     main@chksum_calc:
   777                           
   778                           ; 1 bytes @ 0x0
   779  00D3                     	ds	1
   780  00D4                     main@preset_id_1:
   781                           
   782                           ; 1 bytes @ 0x1
   783  00D4                     	ds	1
   784  00D5                     main@preset_id_1_417:
   785                           
   786                           ; 1 bytes @ 0x2
   787  00D5                     	ds	1
   788  00D6                     main@preset_id_1_424:
   789                           
   790                           ; 1 bytes @ 0x3
   791  00D6                     	ds	1
   792  00D7                     main@preset_id_10:
   793                           
   794                           ; 1 bytes @ 0x4
   795  00D7                     	ds	1
   796  00D8                     main@preset_id_10_416:
   797                           
   798                           ; 1 bytes @ 0x5
   799  00D8                     	ds	1
   800  00D9                     main@preset_id_10_423:
   801                           
   802                           ; 1 bytes @ 0x6
   803  00D9                     	ds	1
   804  00DA                     main@pan_tmp:
   805                           
   806                           ; 2 bytes @ 0x7
   807  00DA                     	ds	2
   808  00DC                     main@tilt_tmp:
   809                           
   810                           ; 2 bytes @ 0x9
   811  00DC                     	ds	2
   812  00DE                     main@pan_tmp_421:
   813                           
   814                           ; 2 bytes @ 0xB
   815  00DE                     	ds	2
   816  00E0                     main@tilt_tmp_422:
   817                           
   818                           ; 2 bytes @ 0xD
   819  00E0                     	ds	2
   820  00E2                     main@m:
   821                           
   822                           ; 1 bytes @ 0xF
   823  00E2                     	ds	1
   824  00E3                     main@i:
   825                           
   826                           ; 1 bytes @ 0x10
   827  00E3                     	ds	1
   828                           
   829                           	psect	cstackCOMMON
   830  0075                     __pcstackCOMMON:
   831  0075                     ?_UC_Init:
   832  0075                     ?_UART_Init:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0075                     ?_TIMER1_Init:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0075                     ?_MOTOR_Init:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0075                     ?_BAUDS_set:	
   842                           ; 1 bytes @ 0x0
   843                           
   844  0075                     ?_UART_Write:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0075                     ?_SPEED_calc:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0075                     ?_eeprom_read:	
   851                           ; 1 bytes @ 0x0
   852                           
   853  0075                     ?_myISR:	
   854                           ; 1 bytes @ 0x0
   855                           
   856  0075                     ??_myISR:	
   857                           ; 1 bytes @ 0x0
   858                           
   859  0075                     ?_main:	
   860                           ; 1 bytes @ 0x0
   861                           
   862  0075                     ?_BAUDS_get:	
   863                           ; 1 bytes @ 0x0
   864                           
   865                           
   866                           ; 1 bytes @ 0x0
   867  0075                     	ds	5
   868                           
   869                           	psect	cstackBANK0
   870  0043                     __pcstackBANK0:
   871  0043                     ??_UC_Init:
   872  0043                     ??_TIMER1_Init:	
   873                           ; 1 bytes @ 0x0
   874                           
   875  0043                     ?_delay_wdt:	
   876                           ; 1 bytes @ 0x0
   877                           
   878  0043                     ??_UART_Write:	
   879                           ; 1 bytes @ 0x0
   880                           
   881  0043                     ??_eeprom_read:	
   882                           ; 1 bytes @ 0x0
   883                           
   884  0043                     ?_eeprom_write:	
   885                           ; 1 bytes @ 0x0
   886                           
   887  0043                     ?___bmul:	
   888                           ; 1 bytes @ 0x0
   889                           
   890  0043                     ?___lbdiv:	
   891                           ; 1 bytes @ 0x0
   892                           
   893  0043                     ?___wmul:	
   894                           ; 1 bytes @ 0x0
   895                           
   896  0043                     ?___awdiv:	
   897                           ; 2 bytes @ 0x0
   898                           
   899  0043                     ?___lwdiv:	
   900                           ; 2 bytes @ 0x0
   901                           
   902  0043                     eeprom_write@value:	
   903                           ; 2 bytes @ 0x0
   904                           
   905  0043                     ___bmul@multiplicand:	
   906                           ; 1 bytes @ 0x0
   907                           
   908  0043                     ___lbdiv@divisor:	
   909                           ; 1 bytes @ 0x0
   910                           
   911  0043                     delay_wdt@_ms:	
   912                           ; 1 bytes @ 0x0
   913                           
   914  0043                     ___wmul@multiplier:	
   915                           ; 2 bytes @ 0x0
   916                           
   917  0043                     ___awdiv@divisor:	
   918                           ; 2 bytes @ 0x0
   919                           
   920  0043                     ___lwdiv@divisor:	
   921                           ; 2 bytes @ 0x0
   922                           
   923                           
   924                           ; 2 bytes @ 0x0
   925  0043                     	ds	1
   926  0044                     ??_eeprom_write:
   927  0044                     ??___bmul:	
   928                           ; 1 bytes @ 0x1
   929                           
   930  0044                     ??___lbdiv:	
   931                           ; 1 bytes @ 0x1
   932                           
   933  0044                     eeprom_read@addr:	
   934                           ; 1 bytes @ 0x1
   935                           
   936                           
   937                           ; 1 bytes @ 0x1
   938  0044                     	ds	1
   939  0045                     ??_UART_Init:
   940  0045                     ??_delay_wdt:	
   941                           ; 1 bytes @ 0x2
   942                           
   943  0045                     ?_PRESET_load:	
   944                           ; 1 bytes @ 0x2
   945                           
   946  0045                     ??_BAUDS_get:	
   947                           ; 1 bytes @ 0x2
   948                           
   949  0045                     PRESET_load@pan:	
   950                           ; 1 bytes @ 0x2
   951                           
   952  0045                     eeprom_write@addr:	
   953                           ; 1 bytes @ 0x2
   954                           
   955  0045                     ___bmul@product:	
   956                           ; 1 bytes @ 0x2
   957                           
   958  0045                     ___lbdiv@dividend:	
   959                           ; 1 bytes @ 0x2
   960                           
   961  0045                     ___wmul@multiplicand:	
   962                           ; 1 bytes @ 0x2
   963                           
   964  0045                     ___awdiv@dividend:	
   965                           ; 2 bytes @ 0x2
   966                           
   967  0045                     ___lwdiv@dividend:	
   968                           ; 2 bytes @ 0x2
   969                           
   970                           
   971                           ; 2 bytes @ 0x2
   972  0045                     	ds	1
   973  0046                     ??_MOTOR_Init:
   974  0046                     ?_eeprom_update:	
   975                           ; 1 bytes @ 0x3
   976                           
   977  0046                     eeprom_update@value:	
   978                           ; 1 bytes @ 0x3
   979                           
   980  0046                     PRESET_load@tilt:	
   981                           ; 1 bytes @ 0x3
   982                           
   983  0046                     ___bmul@multiplier:	
   984                           ; 1 bytes @ 0x3
   985                           
   986  0046                     ___lbdiv@counter:	
   987                           ; 1 bytes @ 0x3
   988                           
   989                           
   990                           ; 1 bytes @ 0x3
   991  0046                     	ds	1
   992  0047                     ??_PRESET_load:
   993  0047                     ??_eeprom_update:	
   994                           ; 1 bytes @ 0x4
   995                           
   996  0047                     ??___wmul:	
   997                           ; 1 bytes @ 0x4
   998                           
   999  0047                     ??___awdiv:	
  1000                           ; 1 bytes @ 0x4
  1001                           
  1002  0047                     ??___lwdiv:	
  1003                           ; 1 bytes @ 0x4
  1004                           
  1005  0047                     UART_Init@bauds_index:	
  1006                           ; 1 bytes @ 0x4
  1007                           
  1008  0047                     UART_Write@data:	
  1009                           ; 1 bytes @ 0x4
  1010                           
  1011  0047                     ___lbdiv@quotient:	
  1012                           ; 1 bytes @ 0x4
  1013                           
  1014  0047                     ___wmul@product:	
  1015                           ; 1 bytes @ 0x4
  1016                           
  1017                           
  1018                           ; 2 bytes @ 0x4
  1019  0047                     	ds	1
  1020  0048                     eeprom_update@addr:
  1021  0048                     ___awdiv@counter:	
  1022                           ; 1 bytes @ 0x5
  1023                           
  1024  0048                     ___lwdiv@counter:	
  1025                           ; 1 bytes @ 0x5
  1026                           
  1027  0048                     UART_Write@timeout:	
  1028                           ; 1 bytes @ 0x5
  1029                           
  1030                           
  1031                           ; 4 bytes @ 0x5
  1032  0048                     	ds	1
  1033  0049                     ??_BAUDS_set:
  1034  0049                     ?_PRESET_save:	
  1035                           ; 1 bytes @ 0x6
  1036                           
  1037  0049                     PRESET_load@id:	
  1038                           ; 1 bytes @ 0x6
  1039                           
  1040  0049                     ___awdiv@sign:	
  1041                           ; 1 bytes @ 0x6
  1042                           
  1043  0049                     PRESET_save@pan:	
  1044                           ; 1 bytes @ 0x6
  1045                           
  1046  0049                     ___lwdiv@quotient:	
  1047                           ; 2 bytes @ 0x6
  1048                           
  1049                           
  1050                           ; 2 bytes @ 0x6
  1051  0049                     	ds	1
  1052  004A                     PRESET_load@_addr:
  1053  004A                     BAUDS_set@index:	
  1054                           ; 1 bytes @ 0x7
  1055                           
  1056  004A                     ___awdiv@quotient:	
  1057                           ; 1 bytes @ 0x7
  1058                           
  1059                           
  1060                           ; 2 bytes @ 0x7
  1061  004A                     	ds	1
  1062  004B                     PRESET_save@tilt:
  1063                           
  1064                           ; 2 bytes @ 0x8
  1065  004B                     	ds	1
  1066  004C                     ?_UART_Write_Text:
  1067  004C                     ??_SPEED_calc:	
  1068                           ; 1 bytes @ 0x9
  1069                           
  1070  004C                     UART_Write_Text@text:	
  1071                           ; 1 bytes @ 0x9
  1072                           
  1073                           
  1074                           ; 2 bytes @ 0x9
  1075  004C                     	ds	1
  1076  004D                     ??_PRESET_save:
  1077                           
  1078                           ; 1 bytes @ 0xA
  1079  004D                     	ds	1
  1080  004E                     ??_UART_Write_Text:
  1081  004E                     SPEED_calc@speed:	
  1082                           ; 1 bytes @ 0xB
  1083                           
  1084                           
  1085                           ; 1 bytes @ 0xB
  1086  004E                     	ds	1
  1087  004F                     SPEED_calc@sp_calc:
  1088  004F                     PRESET_save@id:	
  1089                           ; 1 bytes @ 0xC
  1090                           
  1091                           
  1092                           ; 1 bytes @ 0xC
  1093  004F                     	ds	1
  1094  0050                     PRESET_save@_addr:
  1095                           
  1096                           ; 1 bytes @ 0xD
  1097  0050                     	ds	1
  1098  0051                     UART_Write_Text@i:
  1099                           
  1100                           ; 2 bytes @ 0xE
  1101  0051                     	ds	2
  1102  0053                     ?_print_cnt:
  1103  0053                     print_cnt@_pan:	
  1104                           ; 1 bytes @ 0x10
  1105                           
  1106                           
  1107                           ; 2 bytes @ 0x10
  1108  0053                     	ds	2
  1109  0055                     print_cnt@_tilt:
  1110                           
  1111                           ; 2 bytes @ 0x12
  1112  0055                     	ds	2
  1113  0057                     ??_print_cnt:
  1114  0057                     print_cnt@val1:	
  1115                           ; 1 bytes @ 0x14
  1116                           
  1117                           
  1118                           ; 2 bytes @ 0x14
  1119  0057                     	ds	2
  1120  0059                     print_cnt@val10:
  1121                           
  1122                           ; 2 bytes @ 0x16
  1123  0059                     	ds	2
  1124  005B                     print_cnt@val100:
  1125                           
  1126                           ; 2 bytes @ 0x18
  1127  005B                     	ds	2
  1128  005D                     print_cnt@val1000:
  1129                           
  1130                           ; 2 bytes @ 0x1A
  1131  005D                     	ds	2
  1132  005F                     print_cnt@val10000:
  1133                           
  1134                           ; 2 bytes @ 0x1C
  1135  005F                     	ds	2
  1136  0061                     ??_main:
  1137                           
  1138                           ; 1 bytes @ 0x1E
  1139  0061                     	ds	2
  1140                           
  1141                           	psect	maintext
  1142  0025                     __pmaintext:	
  1143 ;;
  1144 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1145 ;;
  1146 ;; *************** function _main *****************
  1147 ;; Defined at:
  1148 ;;		line 311 in file "main.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;		None
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;  tilt_tmp        2   13[BANK1 ] unsigned int 
  1153 ;;  pan_tmp         2   11[BANK1 ] unsigned int 
  1154 ;;  preset_id_10    1    6[BANK1 ] unsigned char 
  1155 ;;  preset_id_1     1    3[BANK1 ] unsigned char 
  1156 ;;  tilt_tmp        2    9[BANK1 ] unsigned int 
  1157 ;;  pan_tmp         2    7[BANK1 ] unsigned int 
  1158 ;;  preset_id_10    1    5[BANK1 ] unsigned char 
  1159 ;;  preset_id_1     1    2[BANK1 ] unsigned char 
  1160 ;;  preset_id_10    1    4[BANK1 ] unsigned char 
  1161 ;;  preset_id_1     1    1[BANK1 ] unsigned char 
  1162 ;;  m               1   15[BANK1 ] unsigned char 
  1163 ;;  chksum_calc     1    0[BANK1 ] unsigned char 
  1164 ;;  i               1   16[BANK1 ] unsigned char 
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  1    wreg      void 
  1167 ;; Registers used:
  1168 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1169 ;; Tracked objects:
  1170 ;;		On entry : B00/0
  1171 ;;		On exit  : B00/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1174 ;;      Params:         0       0       0       0
  1175 ;;      Locals:         0       0      17       0
  1176 ;;      Temps:          0       2       0       0
  1177 ;;      Totals:         0       2      17       0
  1178 ;;Total ram usage:       19 bytes
  1179 ;; Hardware stack levels required when called: 5
  1180 ;; This function calls:
  1181 ;;		_BAUDS_set
  1182 ;;		_MOTOR_Init
  1183 ;;		_PRESET_load
  1184 ;;		_PRESET_save
  1185 ;;		_SPEED_calc
  1186 ;;		_TIMER1_Init
  1187 ;;		_UART_Init
  1188 ;;		_UART_Write
  1189 ;;		_UART_Write_Text
  1190 ;;		_UC_Init
  1191 ;;		___bmul
  1192 ;;		___lbdiv
  1193 ;;		_delay_wdt
  1194 ;;		_print_cnt
  1195 ;; This function is called by:
  1196 ;;		Startup code after reset
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200  0025                     _main:	
  1201                           ;psect for function _main
  1202                           
  1203                           
  1204                           ;main.c: 312:     UC_Init();
  1205                           
  1206                           ;incstack = 0
  1207                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1208  0025  158A  2564  118A   	fcall	_UC_Init
  1209                           
  1210                           ;main.c: 314:     UART_Init();
  1211  0028  158A  270C  118A   	fcall	_UART_Init
  1212                           
  1213                           ;main.c: 316:     TIMER1_Init();
  1214  002B  158A  251C  118A   	fcall	_TIMER1_Init
  1215                           
  1216                           ;main.c: 318:     delay_wdt(500);
  1217  002E  30F4               	movlw	244
  1218  002F  1283               	bcf	3,5	;RP0=0, select bank0
  1219  0030  00C3               	movwf	delay_wdt@_ms
  1220  0031  3001               	movlw	1
  1221  0032  00C4               	movwf	delay_wdt@_ms+1
  1222  0033  158A  257C  118A   	fcall	_delay_wdt
  1223                           
  1224                           ;main.c: 320:     UART_Write_Text("\r\n\r\nStart\r\n");
  1225  0036  30B5               	movlw	low (STR_1| (0+32768))
  1226  0037  00CC               	movwf	UART_Write_Text@text
  1227  0038  3088               	movlw	high (STR_1| (0+32768))
  1228  0039  00CD               	movwf	UART_Write_Text@text+1
  1229  003A  158A  2661  118A   	fcall	_UART_Write_Text
  1230                           
  1231                           ;main.c: 322:     UART_Write_Text("Goto PAN and TILT Home\r\n");
  1232  003D  303A               	movlw	low (STR_2| (0+32768))
  1233  003E  00CC               	movwf	UART_Write_Text@text
  1234  003F  3088               	movlw	high (STR_2| (0+32768))
  1235  0040  00CD               	movwf	UART_Write_Text@text+1
  1236  0041  158A  2661  118A   	fcall	_UART_Write_Text
  1237                           
  1238                           ;main.c: 324:     delay_wdt(50);
  1239  0044  3032               	movlw	50
  1240  0045  00C3               	movwf	delay_wdt@_ms
  1241  0046  3000               	movlw	0
  1242  0047  00C4               	movwf	delay_wdt@_ms+1
  1243  0048  158A  257C  118A   	fcall	_delay_wdt
  1244                           
  1245                           ;main.c: 326:     MOTOR_Init();
  1246  004B  118A  275F  118A   	fcall	_MOTOR_Init
  1247                           
  1248                           ;main.c: 328:     UART_Write_Text("Waiting for commands\r\n");
  1249  004E  3053               	movlw	low (STR_3| (0+32768))
  1250  004F  00CC               	movwf	UART_Write_Text@text
  1251  0050  3088               	movlw	high (STR_3| (0+32768))
  1252  0051                     L6:
  1253  0051  00CD               	movwf	UART_Write_Text@text+1
  1254  0052  158A  2661  118A   	fcall	_UART_Write_Text
  1255  0055  2BBA               	goto	l235
  1256  0056                     l3620:
  1257                           
  1258                           ;main.c: 334:             buffer_ready[frame_index] = 0;
  1259  0056  0831               	movf	_frame_index,w
  1260  0057  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  1261  0058  0084               	movwf	4
  1262  0059  0180               	clrf	0
  1263                           
  1264                           ;main.c: 336:             for (uint8_t i = 0; i < 7; i++) {
  1265  005A  1683               	bsf	3,5	;RP0=1, select bank1
  1266  005B  01E3               	clrf	main@i^(0+128)
  1267  005C                     l3628:
  1268                           
  1269                           ;main.c: 337:                 if (frame_index == 0) {
  1270  005C  1283               	bcf	3,5	;RP0=0, select bank0
  1271  005D  0831               	movf	_frame_index,w
  1272  005E  1D03               	btfss	3,2
  1273  005F  2864               	goto	l3632
  1274                           
  1275                           ;main.c: 338:                     frame_data[i] = buffer_data0[i];
  1276  0060  1683               	bsf	3,5	;RP0=1, select bank1
  1277  0061  0863               	movf	main@i^(0+128),w
  1278  0062  3EC3               	addlw	(low (_buffer_data0| 0))& (0+255)
  1279  0063  2882               	goto	L4
  1280  0064                     l3632:	
  1281                           ;main.c: 339:                 } else if (frame_index == 1) {
  1282                           
  1283  0064  0331               	decf	_frame_index,w
  1284  0065  1D03               	btfss	3,2
  1285  0066  286B               	goto	l3636
  1286                           
  1287                           ;main.c: 340:                     frame_data[i] = buffer_data1[i];
  1288  0067  1683               	bsf	3,5	;RP0=1, select bank1
  1289  0068  0863               	movf	main@i^(0+128),w
  1290  0069  3EBC               	addlw	(low (_buffer_data1| 0))& (0+255)
  1291  006A  2882               	goto	L4
  1292  006B                     l3636:	
  1293                           ;main.c: 341:                 } else if (frame_index == 2) {
  1294                           
  1295  006B  3002               	movlw	2
  1296  006C  0631               	xorwf	_frame_index,w
  1297  006D  1D03               	btfss	3,2
  1298  006E  2873               	goto	l3640
  1299                           
  1300                           ;main.c: 342:                     frame_data[i] = buffer_data2[i];
  1301  006F  1683               	bsf	3,5	;RP0=1, select bank1
  1302  0070  0863               	movf	main@i^(0+128),w
  1303  0071  3EB5               	addlw	(low (_buffer_data2| 0))& (0+255)
  1304  0072  2882               	goto	L4
  1305  0073                     l3640:	
  1306                           ;main.c: 343:                 } else if (frame_index == 3) {
  1307                           
  1308  0073  3003               	movlw	3
  1309  0074  0631               	xorwf	_frame_index,w
  1310  0075  1D03               	btfss	3,2
  1311  0076  287B               	goto	l3644
  1312                           
  1313                           ;main.c: 344:                     frame_data[i] = buffer_data3[i];
  1314  0077  1683               	bsf	3,5	;RP0=1, select bank1
  1315  0078  0863               	movf	main@i^(0+128),w
  1316  0079  3EAE               	addlw	(low (_buffer_data3| 0))& (0+255)
  1317  007A  2882               	goto	L4
  1318  007B                     l3644:	
  1319                           ;main.c: 345:                 } else if (frame_index == 4) {
  1320                           
  1321  007B  3004               	movlw	4
  1322  007C  0631               	xorwf	_frame_index,w
  1323  007D  1D03               	btfss	3,2
  1324  007E  288D               	goto	l3648
  1325                           
  1326                           ;main.c: 346:                     frame_data[i] = buffer_data4[i];
  1327  007F  1683               	bsf	3,5	;RP0=1, select bank1
  1328  0080  0863               	movf	main@i^(0+128),w
  1329  0081  3EA7               	addlw	(low (_buffer_data4| 0))& (0+255)
  1330  0082                     L4:
  1331  0082  0084               	movwf	4
  1332  0083  0800               	movf	0,w
  1333  0084  1283               	bcf	3,5	;RP0=0, select bank0
  1334  0085  00E1               	movwf	??_main
  1335  0086  1683               	bsf	3,5	;RP0=1, select bank1
  1336  0087  0863               	movf	main@i^(0+128),w
  1337  0088  3EA0               	addlw	(low (_frame_data| 0))& (0+255)
  1338  0089  0084               	movwf	4
  1339  008A  1283               	bcf	3,5	;RP0=0, select bank0
  1340  008B  0861               	movf	??_main,w
  1341  008C  0080               	movwf	0
  1342  008D                     l3648:
  1343                           
  1344                           ;main.c: 350:             }
  1345  008D  3001               	movlw	1
  1346  008E  00E1               	movwf	??_main
  1347  008F  0861               	movf	??_main,w
  1348  0090  1683               	bsf	3,5	;RP0=1, select bank1
  1349  0091  07E3               	addwf	main@i^(0+128),f
  1350  0092  3007               	movlw	7
  1351  0093  0263               	subwf	main@i^(0+128),w
  1352  0094  1C03               	skipc
  1353  0095  285C               	goto	l3628
  1354                           
  1355                           ;main.c: 352:             if (frame_data[0] == 0xFF) {
  1356  0096  0A20               	incf	_frame_data^(0+128),w
  1357  0097  1D03               	btfss	3,2
  1358  0098  2BBA               	goto	l235
  1359                           
  1360                           ;main.c: 353:                 uint8_t chksum_calc = 0;
  1361  0099  01D3               	clrf	main@chksum_calc^(0+128)
  1362                           
  1363                           ;main.c: 355:                 for (uint8_t m = 1; m <= 5; m++) {
  1364  009A  01E2               	clrf	main@m^(0+128)
  1365  009B  0AE2               	incf	main@m^(0+128),f
  1366  009C                     l3662:
  1367                           
  1368                           ;main.c: 356:                     chksum_calc += frame_data[m];
  1369  009C  0862               	movf	main@m^(0+128),w
  1370  009D  3EA0               	addlw	(low (_frame_data| 0))& (0+255)
  1371  009E  0084               	movwf	4
  1372  009F  0800               	movf	0,w
  1373  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  1374  00A1  00E1               	movwf	??_main
  1375  00A2  0861               	movf	??_main,w
  1376  00A3  1683               	bsf	3,5	;RP0=1, select bank1
  1377  00A4  07D3               	addwf	main@chksum_calc^(0+128),f
  1378                           
  1379                           ;main.c: 357:                 }
  1380  00A5  3001               	movlw	1
  1381  00A6  1283               	bcf	3,5	;RP0=0, select bank0
  1382  00A7  00E1               	movwf	??_main
  1383  00A8  0861               	movf	??_main,w
  1384  00A9  1683               	bsf	3,5	;RP0=1, select bank1
  1385  00AA  07E2               	addwf	main@m^(0+128),f
  1386  00AB  3006               	movlw	6
  1387  00AC  0262               	subwf	main@m^(0+128),w
  1388  00AD  1C03               	skipc
  1389  00AE  289C               	goto	l3662
  1390                           
  1391                           ;main.c: 359:                 if (chksum_calc == frame_data[6]) {
  1392  00AF  0826               	movf	(_frame_data^(0+128)+6),w
  1393  00B0  0653               	xorwf	main@chksum_calc^(0+128),w
  1394  00B1  1D03               	skipz
  1395  00B2  2BBA               	goto	l235
  1396                           
  1397                           ;main.c: 361:                     P_addr = frame_data[1];
  1398  00B3  0821               	movf	(_frame_data^(0+128)+1),w
  1399  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1400  00B5  00E1               	movwf	??_main
  1401  00B6  0861               	movf	??_main,w
  1402  00B7  00AF               	movwf	_P_addr
  1403                           
  1404                           ;main.c: 362:                     P_cmd1 = frame_data[2];
  1405  00B8  1683               	bsf	3,5	;RP0=1, select bank1
  1406  00B9  0822               	movf	(_frame_data^(0+128)+2),w
  1407  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1408  00BB  00E1               	movwf	??_main
  1409  00BC  0861               	movf	??_main,w
  1410  00BD  00AE               	movwf	_P_cmd1
  1411                           
  1412                           ;main.c: 363:                     P_cmd2 = frame_data[3];
  1413  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  1414  00BF  0823               	movf	(_frame_data^(0+128)+3),w
  1415  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1416  00C1  00E1               	movwf	??_main
  1417  00C2  0861               	movf	??_main,w
  1418  00C3  00AD               	movwf	_P_cmd2
  1419                           
  1420                           ;main.c: 364:                     P_dat1 = frame_data[4];
  1421  00C4  1683               	bsf	3,5	;RP0=1, select bank1
  1422  00C5  0824               	movf	(_frame_data^(0+128)+4),w
  1423  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  1424  00C7  00E1               	movwf	??_main
  1425  00C8  0861               	movf	??_main,w
  1426  00C9  00AC               	movwf	_P_dat1
  1427                           
  1428                           ;main.c: 365:                     P_dat2 = frame_data[5];
  1429  00CA  1683               	bsf	3,5	;RP0=1, select bank1
  1430  00CB  0825               	movf	(_frame_data^(0+128)+5),w
  1431  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1432  00CD  00E1               	movwf	??_main
  1433  00CE  0861               	movf	??_main,w
  1434  00CF  00AB               	movwf	_P_dat2
  1435                           
  1436                           ;main.c: 366:                     P_chksum = frame_data[6];
  1437  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  1438  00D1  0826               	movf	(_frame_data^(0+128)+6),w
  1439  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  1440  00D3  00E1               	movwf	??_main
  1441  00D4  0861               	movf	??_main,w
  1442  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  1443  00D6  00D0               	movwf	_P_chksum^(0+128)
  1444                           
  1445                           ;main.c: 368:                     response_type = 0x00;
  1446  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  1447  00D8  01B0               	clrf	_response_type
  1448                           
  1449                           ;main.c: 371:                     if (P_addr == 0x01) {
  1450  00D9  032F               	decf	_P_addr,w
  1451  00DA  1D03               	btfss	3,2
  1452  00DB  2BBA               	goto	l235
  1453                           
  1454                           ;main.c: 372:                         if ((P_cmd1 == 0xF0) && (P_cmd2 == 0x83) && (P_dat
      +                          1 == 0x00) && (P_dat2 == 0x01)) {
  1455  00DC  30F0               	movlw	240
  1456  00DD  062E               	xorwf	_P_cmd1,w
  1457  00DE  1D03               	btfss	3,2
  1458  00DF  28F2               	goto	l3686
  1459  00E0  3083               	movlw	131
  1460  00E1  062D               	xorwf	_P_cmd2,w
  1461  00E2  1D03               	btfss	3,2
  1462  00E3  28F2               	goto	l3686
  1463  00E4  082C               	movf	_P_dat1,w
  1464  00E5  1D03               	btfss	3,2
  1465  00E6  28F2               	goto	l3686
  1466  00E7  032B               	decf	_P_dat2,w
  1467  00E8  1D03               	btfss	3,2
  1468  00E9  28F2               	goto	l3686
  1469                           
  1470                           ;main.c: 373:                             UART_Write_Text("REBOOT\r\n");
  1471  00EA  3083               	movlw	low ((STR_13+7)| (0+32768))
  1472  00EB  00CC               	movwf	UART_Write_Text@text
  1473  00EC  3088               	movlw	high ((STR_13+7)| (0+32768))
  1474  00ED  00CD               	movwf	UART_Write_Text@text+1
  1475  00EE  158A  2661  118A   	fcall	_UART_Write_Text
  1476  00F1                     l254:	
  1477                           ;main.c: 375:                             while (1) {
  1478                           
  1479                           
  1480                           ;main.c: 377:                             }
  1481  00F1  28F1               	goto	l254
  1482  00F2                     l3686:
  1483  00F2  082E               	movf	_P_cmd1,w
  1484  00F3  1D03               	btfss	3,2
  1485  00F4  2940               	goto	l3722
  1486  00F5  3067               	movlw	103
  1487  00F6  062D               	xorwf	_P_cmd2,w
  1488  00F7  1D03               	btfss	3,2
  1489  00F8  2940               	goto	l3722
  1490  00F9  082C               	movf	_P_dat1,w
  1491  00FA  1D03               	btfss	3,2
  1492  00FB  2940               	goto	l3722
  1493                           
  1494                           ;main.c: 380:                             if (is_reboot == 1) {
  1495  00FC  0329               	decf	_is_reboot,w
  1496  00FD  1D03               	btfss	3,2
  1497  00FE  293C               	goto	l3720
  1498                           
  1499                           ;main.c: 381:                                 BAUDS_set(P_dat2);
  1500  00FF  082B               	movf	_P_dat2,w
  1501  0100  118A  27F2  118A   	fcall	_BAUDS_set
  1502                           
  1503                           ;main.c: 383:                                 UART_Write_Text("SET BAUD RATE");
  1504  0103  309A               	movlw	low (STR_5| (0+32768))
  1505  0104  1283               	bcf	3,5	;RP0=0, select bank0
  1506  0105  00CC               	movwf	UART_Write_Text@text
  1507  0106  3088               	movlw	high (STR_5| (0+32768))
  1508  0107  00CD               	movwf	UART_Write_Text@text+1
  1509  0108  158A  2661  118A   	fcall	_UART_Write_Text
  1510                           
  1511                           ;main.c: 385:                                 if (P_dat2 == 0x00) {
  1512  010B  082B               	movf	_P_dat2,w
  1513  010C  1D03               	btfss	3,2
  1514  010D  2912               	goto	l3702
  1515                           
  1516                           ;main.c: 387:                                     UART_Write_Text("2400\r\n");
  1517  010E  30EE               	movlw	low (STR_6| (0+32768))
  1518  010F  00CC               	movwf	UART_Write_Text@text
  1519  0110  3088               	movlw	high (STR_6| (0+32768))
  1520  0111  2934               	goto	L5
  1521  0112                     l3702:	
  1522                           ;main.c: 388:                                 } else if (P_dat2 == 0x01) {
  1523                           
  1524  0112  032B               	decf	_P_dat2,w
  1525  0113  1D03               	btfss	3,2
  1526  0114  2919               	goto	l3706
  1527                           
  1528                           ;main.c: 390:                                     UART_Write_Text("4800\r\n");
  1529  0115  30FC               	movlw	low (STR_7| (0+32768))
  1530  0116  00CC               	movwf	UART_Write_Text@text
  1531  0117  3088               	movlw	high (STR_7| (0+32768))
  1532  0118  2934               	goto	L5
  1533  0119                     l3706:	
  1534                           ;main.c: 394:                                 } else if (P_dat2 == 0x03) {
  1535                           
  1536  0119  3003               	movlw	3
  1537  011A  062B               	xorwf	_P_dat2,w
  1538  011B  1D03               	btfss	3,2
  1539  011C  2921               	goto	l3710
  1540                           
  1541                           ;main.c: 396:                                     UART_Write_Text("19200\r\n");
  1542  011D  30D6               	movlw	low (STR_8| (0+32768))
  1543  011E  00CC               	movwf	UART_Write_Text@text
  1544  011F  3088               	movlw	high (STR_8| (0+32768))
  1545  0120  2934               	goto	L5
  1546  0121                     l3710:	
  1547                           ;main.c: 397:                                 } else if (P_dat2 == 0x04) {
  1548                           
  1549  0121  3004               	movlw	4
  1550  0122  062B               	xorwf	_P_dat2,w
  1551  0123  1D03               	btfss	3,2
  1552  0124  2929               	goto	l3714
  1553                           
  1554                           ;main.c: 399:                                     UART_Write_Text("38400\r\n");
  1555  0125  30DE               	movlw	low (STR_9| (0+32768))
  1556  0126  00CC               	movwf	UART_Write_Text@text
  1557  0127  3088               	movlw	high (STR_9| (0+32768))
  1558  0128  2934               	goto	L5
  1559  0129                     l3714:	
  1560                           ;main.c: 400:                                 } else if (P_dat2 == 0x05) {
  1561                           
  1562  0129  3005               	movlw	5
  1563  012A  062B               	xorwf	_P_dat2,w
  1564  012B  1D03               	btfss	3,2
  1565  012C  2931               	goto	l3718
  1566                           
  1567                           ;main.c: 402:                                     UART_Write_Text("115200\r\n");
  1568  012D  30CD               	movlw	low (STR_10| (0+32768))
  1569  012E  00CC               	movwf	UART_Write_Text@text
  1570  012F  3088               	movlw	high (STR_10| (0+32768))
  1571  0130  2934               	goto	L5
  1572  0131                     l3718:	
  1573                           ;main.c: 403:                                 } else {
  1574                           
  1575                           
  1576                           ;main.c: 405:                                     UART_Write_Text("9600\r\n");
  1577  0131  30F5               	movlw	low (STR_11| (0+32768))
  1578  0132  00CC               	movwf	UART_Write_Text@text
  1579  0133  3088               	movlw	high (STR_11| (0+32768))
  1580  0134                     L5:
  1581  0134  00CD               	movwf	UART_Write_Text@text+1
  1582  0135  158A  2661  118A   	fcall	_UART_Write_Text
  1583                           
  1584                           ;main.c: 408:                                 UART_Write_Text("\r\nPLEASE REBOOT\r\n");
  1585  0138  306A               	movlw	low (STR_12| (0+32768))
  1586  0139  00CC               	movwf	UART_Write_Text@text
  1587  013A  3088               	movlw	high (STR_12| (0+32768))
  1588  013B  2851               	goto	L6
  1589  013C                     l3720:	
  1590                           ;main.c: 409:                             } else {
  1591                           
  1592                           
  1593                           ;main.c: 410:                                 UART_Write_Text("\r\nNEED REBOOT\r\n");
  1594  013C  307C               	movlw	low (STR_13| (0+32768))
  1595  013D  00CC               	movwf	UART_Write_Text@text
  1596  013E  3088               	movlw	high (STR_13| (0+32768))
  1597  013F  2851               	goto	L6
  1598  0140                     l3722:
  1599  0140  082E               	movf	_P_cmd1,w
  1600  0141  1D03               	btfss	3,2
  1601  0142  2956               	goto	l3740
  1602  0143  082D               	movf	_P_cmd2,w
  1603  0144  1D03               	btfss	3,2
  1604  0145  2956               	goto	l3740
  1605  0146  082C               	movf	_P_dat1,w
  1606  0147  1D03               	btfss	3,2
  1607  0148  2956               	goto	l3740
  1608  0149  082B               	movf	_P_dat2,w
  1609  014A  1D03               	btfss	3,2
  1610  014B  2956               	goto	l3740
  1611                           
  1612                           ;main.c: 413:                             pan_enabled = 0;
  1613  014C  01BC               	clrf	_pan_enabled	;volatile
  1614                           
  1615                           ;main.c: 414:                             tilt_enabled = 0;
  1616  014D  01B8               	clrf	_tilt_enabled	;volatile
  1617                           
  1618                           ;main.c: 415:                             preset_pan_enabled = 0;
  1619  014E  01C0               	clrf	_preset_pan_enabled	;volatile
  1620                           
  1621                           ;main.c: 416:                             preset_tilt_enabled = 0;
  1622  014F  01BE               	clrf	_preset_tilt_enabled	;volatile
  1623                           
  1624                           ;main.c: 417:                             response_type = 0x01;
  1625  0150  01B0               	clrf	_response_type
  1626  0151  0AB0               	incf	_response_type,f
  1627                           
  1628                           ;main.c: 418:                             UART_Write_Text("STOP (");
  1629  0152  300A               	movlw	low (STR_14| (0+32768))
  1630  0153  00CC               	movwf	UART_Write_Text@text
  1631  0154  3089               	movlw	high (STR_14| (0+32768))
  1632  0155  2B6F               	goto	L14
  1633  0156                     l3740:	
  1634                           ;main.c: 422:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x03) &&
      +                           (P_dat1 == 0x00)) {
  1635                           
  1636                           ;main.c: 420:                             UART_Write_Text(")\r\n");
  1637                           
  1638                           ;main.c: 419:                             print_cnt(pan_counter, tilt_counter);
  1639                           
  1640  0156  082E               	movf	_P_cmd1,w
  1641  0157  1D03               	btfss	3,2
  1642  0158  29B0               	goto	l3772
  1643  0159  3003               	movlw	3
  1644  015A  062D               	xorwf	_P_cmd2,w
  1645  015B  1D03               	btfss	3,2
  1646  015C  29B0               	goto	l3772
  1647  015D  082C               	movf	_P_dat1,w
  1648  015E  1D03               	btfss	3,2
  1649  015F  29B0               	goto	l3772
  1650                           
  1651                           ;main.c: 423:                             preset_id = P_dat2;
  1652  0160  082B               	movf	_P_dat2,w
  1653  0161  00E1               	movwf	??_main
  1654  0162  0861               	movf	??_main,w
  1655  0163  00AA               	movwf	_preset_id
  1656                           
  1657                           ;main.c: 424:                             PRESET_save(preset_id, pan_counter, tilt_count
      +                          er);
  1658  0164  0827               	movf	_pan_counter+1,w	;volatile
  1659  0165  00CA               	movwf	PRESET_save@pan+1
  1660  0166  0826               	movf	_pan_counter,w	;volatile
  1661  0167  00C9               	movwf	PRESET_save@pan
  1662  0168  0825               	movf	_tilt_counter+1,w	;volatile
  1663  0169  00CC               	movwf	PRESET_save@tilt+1
  1664  016A  0824               	movf	_tilt_counter,w	;volatile
  1665  016B  00CB               	movwf	PRESET_save@tilt
  1666  016C  082A               	movf	_preset_id,w
  1667  016D  158A  2698  118A   	fcall	_PRESET_save
  1668                           
  1669                           ;main.c: 425:                             response_type = 0x01;
  1670  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1671  0171  01B0               	clrf	_response_type
  1672  0172  0AB0               	incf	_response_type,f
  1673                           
  1674                           ;main.c: 427:                             uint8_t preset_id_10 = preset_id / 10;
  1675  0173  300A               	movlw	10
  1676  0174  00E1               	movwf	??_main
  1677  0175  0861               	movf	??_main,w
  1678  0176  00C3               	movwf	___lbdiv@divisor
  1679  0177  082A               	movf	_preset_id,w
  1680  0178  158A  25B6  118A   	fcall	___lbdiv
  1681  017B  00E2               	movwf	??_main+1
  1682  017C  0862               	movf	??_main+1,w
  1683  017D  1683               	bsf	3,5	;RP0=1, select bank1
  1684  017E  00D7               	movwf	main@preset_id_10^(0+128)
  1685                           
  1686                           ;main.c: 428:                             uint8_t preset_id_1 = preset_id - (preset_id_1
      +                          0 * 10);
  1687  017F  30F6               	movlw	246
  1688  0180  1283               	bcf	3,5	;RP0=0, select bank0
  1689  0181  00E1               	movwf	??_main
  1690  0182  0861               	movf	??_main,w
  1691  0183  00C3               	movwf	___bmul@multiplicand
  1692  0184  1683               	bsf	3,5	;RP0=1, select bank1
  1693  0185  0857               	movf	main@preset_id_10^(0+128),w
  1694  0186  158A  253C  118A   	fcall	___bmul
  1695  0189  072A               	addwf	_preset_id,w
  1696  018A  00E2               	movwf	??_main+1
  1697  018B  0862               	movf	??_main+1,w
  1698  018C  1683               	bsf	3,5	;RP0=1, select bank1
  1699  018D  00D4               	movwf	main@preset_id_1^(0+128)
  1700                           
  1701                           ;main.c: 430:                             preset_id_10 += 48;
  1702  018E  3030               	movlw	48
  1703  018F  1283               	bcf	3,5	;RP0=0, select bank0
  1704  0190  00E1               	movwf	??_main
  1705  0191  0861               	movf	??_main,w
  1706  0192  1683               	bsf	3,5	;RP0=1, select bank1
  1707  0193  07D7               	addwf	main@preset_id_10^(0+128),f
  1708                           
  1709                           ;main.c: 431:                             preset_id_1 += 48;
  1710  0194  3030               	movlw	48
  1711  0195  1283               	bcf	3,5	;RP0=0, select bank0
  1712  0196  00E1               	movwf	??_main
  1713  0197  0861               	movf	??_main,w
  1714  0198  1683               	bsf	3,5	;RP0=1, select bank1
  1715  0199  07D4               	addwf	main@preset_id_1^(0+128),f
  1716                           
  1717                           ;main.c: 433:                             UART_Write_Text("SET PRESET ");
  1718  019A  30C1               	movlw	low (STR_16| (0+32768))
  1719  019B  1283               	bcf	3,5	;RP0=0, select bank0
  1720  019C  00CC               	movwf	UART_Write_Text@text
  1721  019D  3088               	movlw	high (STR_16| (0+32768))
  1722  019E  00CD               	movwf	UART_Write_Text@text+1
  1723  019F  158A  2661  118A   	fcall	_UART_Write_Text
  1724                           
  1725                           ;main.c: 434:                             UART_Write(preset_id_10);
  1726  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  1727  01A3  0857               	movf	main@preset_id_10^(0+128),w
  1728  01A4  158A  262C  118A   	fcall	_UART_Write
  1729                           
  1730                           ;main.c: 435:                             UART_Write(preset_id_1);
  1731  01A7  1683               	bsf	3,5	;RP0=1, select bank1
  1732  01A8  0854               	movf	main@preset_id_1^(0+128),w
  1733  01A9  158A  262C  118A   	fcall	_UART_Write
  1734                           
  1735                           ;main.c: 436:                             UART_Write_Text(" (");
  1736  01AC  3007               	movlw	low ((STR_29+4)| (0+32768))
  1737  01AD  00CC               	movwf	UART_Write_Text@text
  1738  01AE  3089               	movlw	high ((STR_29+4)| (0+32768))
  1739  01AF  2B6F               	goto	L14
  1740  01B0                     l3772:	
  1741                           ;main.c: 439:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x05) &&
      +                           (P_dat1 == 0x00)) {
  1742                           
  1743                           ;main.c: 438:                             UART_Write_Text(")\r\n");
  1744                           
  1745                           ;main.c: 437:                             print_cnt(pan_counter, tilt_counter);
  1746                           
  1747  01B0  082E               	movf	_P_cmd1,w
  1748  01B1  1D03               	btfss	3,2
  1749  01B2  2A25               	goto	l3814
  1750  01B3  3005               	movlw	5
  1751  01B4  062D               	xorwf	_P_cmd2,w
  1752  01B5  1D03               	btfss	3,2
  1753  01B6  2A25               	goto	l3814
  1754  01B7  082C               	movf	_P_dat1,w
  1755  01B8  1D03               	btfss	3,2
  1756  01B9  2A25               	goto	l3814
  1757                           
  1758                           ;main.c: 440:                             preset_id = P_dat2;
  1759  01BA  082B               	movf	_P_dat2,w
  1760  01BB  00E1               	movwf	??_main
  1761  01BC  0861               	movf	??_main,w
  1762  01BD  00AA               	movwf	_preset_id
  1763                           
  1764                           ;main.c: 441:                             PRESET_save(preset_id, 0xFFFF, 0xFFFF);
  1765  01BE  30FF               	movlw	255
  1766  01BF  00C9               	movwf	PRESET_save@pan
  1767  01C0  30FF               	movlw	255
  1768  01C1  00CA               	movwf	PRESET_save@pan+1
  1769  01C2  30FF               	movlw	255
  1770  01C3  00CB               	movwf	PRESET_save@tilt
  1771  01C4  30FF               	movlw	255
  1772  01C5  00CC               	movwf	PRESET_save@tilt+1
  1773  01C6  082A               	movf	_preset_id,w
  1774  01C7  158A  2698  118A   	fcall	_PRESET_save
  1775                           
  1776                           ;main.c: 443:                             uint16_t pan_tmp = 0;
  1777  01CA  1683               	bsf	3,5	;RP0=1, select bank1
  1778  01CB  01DA               	clrf	main@pan_tmp^(0+128)
  1779  01CC  01DB               	clrf	(main@pan_tmp+1)^(0+128)
  1780                           
  1781                           ;main.c: 444:                             uint16_t tilt_tmp = 0;
  1782  01CD  01DC               	clrf	main@tilt_tmp^(0+128)
  1783  01CE  01DD               	clrf	(main@tilt_tmp+1)^(0+128)
  1784                           
  1785                           ;main.c: 445:                             PRESET_load(preset_id, &pan_tmp, &tilt_tmp);
  1786  01CF  30DA               	movlw	(low (main@pan_tmp| 0))& (0+255)
  1787  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1788  01D1  00E1               	movwf	??_main
  1789  01D2  0861               	movf	??_main,w
  1790  01D3  00C5               	movwf	PRESET_load@pan
  1791  01D4  30DC               	movlw	(low (main@tilt_tmp| 0))& (0+255)
  1792  01D5  00E2               	movwf	??_main+1
  1793  01D6  0862               	movf	??_main+1,w
  1794  01D7  00C6               	movwf	PRESET_load@tilt
  1795  01D8  082A               	movf	_preset_id,w
  1796  01D9  158A  2750  118A   	fcall	_PRESET_load
  1797                           
  1798                           ;main.c: 446:                             pan_goto = pan_tmp;
  1799  01DC  1683               	bsf	3,5	;RP0=1, select bank1
  1800  01DD  085B               	movf	(main@pan_tmp+1)^(0+128),w
  1801  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  1802  01DF  00A3               	movwf	_pan_goto+1	;volatile
  1803  01E0  1683               	bsf	3,5	;RP0=1, select bank1
  1804  01E1  085A               	movf	main@pan_tmp^(0+128),w
  1805  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  1806  01E3  00A2               	movwf	_pan_goto	;volatile
  1807                           
  1808                           ;main.c: 447:                             tilt_goto = tilt_tmp;
  1809  01E4  1683               	bsf	3,5	;RP0=1, select bank1
  1810  01E5  085D               	movf	(main@tilt_tmp+1)^(0+128),w
  1811  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  1812  01E7  00A1               	movwf	_tilt_goto+1	;volatile
  1813  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  1814  01E9  085C               	movf	main@tilt_tmp^(0+128),w
  1815  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1816  01EB  00A0               	movwf	_tilt_goto	;volatile
  1817                           
  1818                           ;main.c: 449:                             response_type = 0x01;
  1819  01EC  01B0               	clrf	_response_type
  1820  01ED  0AB0               	incf	_response_type,f
  1821                           
  1822                           ;main.c: 451:                             uint8_t preset_id_10 = preset_id / 10;
  1823  01EE  300A               	movlw	10
  1824  01EF  00E1               	movwf	??_main
  1825  01F0  0861               	movf	??_main,w
  1826  01F1  00C3               	movwf	___lbdiv@divisor
  1827  01F2  082A               	movf	_preset_id,w
  1828  01F3  158A  25B6  118A   	fcall	___lbdiv
  1829  01F6  00E2               	movwf	??_main+1
  1830  01F7  0862               	movf	??_main+1,w
  1831  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  1832  01F9  00D8               	movwf	main@preset_id_10_416^(0+128)
  1833                           
  1834                           ;main.c: 452:                             uint8_t preset_id_1 = preset_id - (preset_id_1
      +                          0 * 10);
  1835  01FA  30F6               	movlw	246
  1836  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  1837  01FC  00E1               	movwf	??_main
  1838  01FD  0861               	movf	??_main,w
  1839  01FE  00C3               	movwf	___bmul@multiplicand
  1840  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  1841  0200  0858               	movf	main@preset_id_10_416^(0+128),w
  1842  0201  158A  253C  118A   	fcall	___bmul
  1843  0204  072A               	addwf	_preset_id,w
  1844  0205  00E2               	movwf	??_main+1
  1845  0206  0862               	movf	??_main+1,w
  1846  0207  1683               	bsf	3,5	;RP0=1, select bank1
  1847  0208  00D5               	movwf	main@preset_id_1_417^(0+128)
  1848                           
  1849                           ;main.c: 454:                             preset_id_10 += 48;
  1850  0209  3030               	movlw	48
  1851  020A  1283               	bcf	3,5	;RP0=0, select bank0
  1852  020B  00E1               	movwf	??_main
  1853  020C  0861               	movf	??_main,w
  1854  020D  1683               	bsf	3,5	;RP0=1, select bank1
  1855  020E  07D8               	addwf	main@preset_id_10_416^(0+128),f
  1856                           
  1857                           ;main.c: 455:                             preset_id_1 += 48;
  1858  020F  3030               	movlw	48
  1859  0210  1283               	bcf	3,5	;RP0=0, select bank0
  1860  0211  00E1               	movwf	??_main
  1861  0212  0861               	movf	??_main,w
  1862  0213  1683               	bsf	3,5	;RP0=1, select bank1
  1863  0214  07D5               	addwf	main@preset_id_1_417^(0+128),f
  1864                           
  1865                           ;main.c: 457:                             UART_Write_Text("CLEAR PRESET ");
  1866  0215  308C               	movlw	low (STR_19| (0+32768))
  1867  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1868  0217  00CC               	movwf	UART_Write_Text@text
  1869  0218  3088               	movlw	high (STR_19| (0+32768))
  1870  0219  00CD               	movwf	UART_Write_Text@text+1
  1871  021A  158A  2661  118A   	fcall	_UART_Write_Text
  1872                           
  1873                           ;main.c: 458:                             UART_Write(preset_id_10);
  1874  021D  1683               	bsf	3,5	;RP0=1, select bank1
  1875  021E  0858               	movf	main@preset_id_10_416^(0+128),w
  1876  021F  158A  262C  118A   	fcall	_UART_Write
  1877                           
  1878                           ;main.c: 459:                             UART_Write(preset_id_1);
  1879  0222  1683               	bsf	3,5	;RP0=1, select bank1
  1880  0223  0855               	movf	main@preset_id_1_417^(0+128),w
  1881  0224  2AF5               	goto	L15
  1882  0225                     l3814:	
  1883                           ;main.c: 463:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x07) &&
      +                           (P_dat1 == 0x00)) {
  1884                           
  1885                           ;main.c: 462:                             UART_Write_Text(")\r\n");
  1886                           
  1887                           ;main.c: 461:                             print_cnt(pan_goto, tilt_goto);
  1888                           
  1889                           ;main.c: 460:                             UART_Write_Text(" (");
  1890                           
  1891  0225  082E               	movf	_P_cmd1,w
  1892  0226  1D03               	btfss	3,2
  1893  0227  2B07               	goto	l278
  1894  0228  3007               	movlw	7
  1895  0229  062D               	xorwf	_P_cmd2,w
  1896  022A  1D03               	btfss	3,2
  1897  022B  2B07               	goto	l278
  1898  022C  082C               	movf	_P_dat1,w
  1899  022D  1D03               	btfss	3,2
  1900  022E  2B07               	goto	l278
  1901                           
  1902                           ;main.c: 464:                             preset_id = P_dat2;
  1903  022F  082B               	movf	_P_dat2,w
  1904  0230  00E1               	movwf	??_main
  1905  0231  0861               	movf	??_main,w
  1906  0232  00AA               	movwf	_preset_id
  1907                           
  1908                           ;main.c: 466:                             uint16_t pan_tmp = 0;
  1909  0233  1683               	bsf	3,5	;RP0=1, select bank1
  1910  0234  01DE               	clrf	main@pan_tmp_421^(0+128)
  1911  0235  01DF               	clrf	(main@pan_tmp_421+1)^(0+128)
  1912                           
  1913                           ;main.c: 467:                             uint16_t tilt_tmp = 0;
  1914  0236  01E0               	clrf	main@tilt_tmp_422^(0+128)
  1915  0237  01E1               	clrf	(main@tilt_tmp_422+1)^(0+128)
  1916                           
  1917                           ;main.c: 468:                             PRESET_load(preset_id, &pan_tmp, &tilt_tmp);
  1918  0238  30DE               	movlw	(low (main@pan_tmp_421| 0))& (0+255)
  1919  0239  1283               	bcf	3,5	;RP0=0, select bank0
  1920  023A  00E1               	movwf	??_main
  1921  023B  0861               	movf	??_main,w
  1922  023C  00C5               	movwf	PRESET_load@pan
  1923  023D  30E0               	movlw	(low (main@tilt_tmp_422| 0))& (0+255)
  1924  023E  00E2               	movwf	??_main+1
  1925  023F  0862               	movf	??_main+1,w
  1926  0240  00C6               	movwf	PRESET_load@tilt
  1927  0241  082A               	movf	_preset_id,w
  1928  0242  158A  2750  118A   	fcall	_PRESET_load
  1929                           
  1930                           ;main.c: 469:                             pan_goto = pan_tmp;
  1931  0245  1683               	bsf	3,5	;RP0=1, select bank1
  1932  0246  085F               	movf	(main@pan_tmp_421+1)^(0+128),w
  1933  0247  1283               	bcf	3,5	;RP0=0, select bank0
  1934  0248  00A3               	movwf	_pan_goto+1	;volatile
  1935  0249  1683               	bsf	3,5	;RP0=1, select bank1
  1936  024A  085E               	movf	main@pan_tmp_421^(0+128),w
  1937  024B  1283               	bcf	3,5	;RP0=0, select bank0
  1938  024C  00A2               	movwf	_pan_goto	;volatile
  1939                           
  1940                           ;main.c: 470:                             tilt_goto = tilt_tmp;
  1941  024D  1683               	bsf	3,5	;RP0=1, select bank1
  1942  024E  0861               	movf	(main@tilt_tmp_422+1)^(0+128),w
  1943  024F  1283               	bcf	3,5	;RP0=0, select bank0
  1944  0250  00A1               	movwf	_tilt_goto+1	;volatile
  1945  0251  1683               	bsf	3,5	;RP0=1, select bank1
  1946  0252  0860               	movf	main@tilt_tmp_422^(0+128),w
  1947  0253  1283               	bcf	3,5	;RP0=0, select bank0
  1948  0254  00A0               	movwf	_tilt_goto	;volatile
  1949                           
  1950                           ;main.c: 472:                             preset_pan_enabled = 1;
  1951  0255  3001               	movlw	1
  1952  0256  00E1               	movwf	??_main
  1953  0257  0861               	movf	??_main,w
  1954  0258  00C0               	movwf	_preset_pan_enabled	;volatile
  1955                           
  1956                           ;main.c: 473:                             preset_pan_enabled_old = 0;
  1957  0259  01BF               	clrf	_preset_pan_enabled_old	;volatile
  1958                           
  1959                           ;main.c: 475:                             pan_speed = 0x32;
  1960  025A  3032               	movlw	50
  1961  025B  00E1               	movwf	??_main
  1962  025C  0861               	movf	??_main,w
  1963  025D  00BA               	movwf	_pan_speed	;volatile
  1964                           
  1965                           ;main.c: 476:                             timer1_pan_ref = SPEED_calc(pan_speed);
  1966  025E  083A               	movf	_pan_speed,w	;volatile
  1967  025F  158A  25F8  118A   	fcall	_SPEED_calc
  1968  0262  00E1               	movwf	??_main
  1969  0263  0861               	movf	??_main,w
  1970  0264  00B3               	movwf	_timer1_pan_ref	;volatile
  1971                           
  1972                           ;main.c: 477:                             pan_enabled = 1;
  1973  0265  3001               	movlw	1
  1974  0266  00E1               	movwf	??_main
  1975  0267  0861               	movf	??_main,w
  1976  0268  00BC               	movwf	_pan_enabled	;volatile
  1977                           
  1978                           ;main.c: 479:                             if (pan_goto < 12000) {
  1979  0269  302E               	movlw	46
  1980  026A  0223               	subwf	_pan_goto+1,w	;volatile
  1981  026B  30E0               	movlw	224
  1982  026C  1903               	skipnz
  1983  026D  0222               	subwf	_pan_goto,w	;volatile
  1984  026E  1803               	skipnc
  1985  026F  2A87               	goto	l3852
  1986                           
  1987                           ;main.c: 480:                                 if (pan_goto > pan_counter) {
  1988  0270  0823               	movf	_pan_goto+1,w	;volatile
  1989  0271  0227               	subwf	_pan_counter+1,w	;volatile
  1990  0272  1D03               	skipz
  1991  0273  2A76               	goto	u4225
  1992  0274  0822               	movf	_pan_goto,w	;volatile
  1993  0275  0226               	subwf	_pan_counter,w	;volatile
  1994  0276                     u4225:
  1995  0276  1803               	skipnc
  1996  0277  2A7A               	goto	l3848
  1997                           
  1998                           ;main.c: 481:                                     pan_direction = 0;
  1999  0278  01BB               	clrf	_pan_direction	;volatile
  2000                           
  2001                           ;main.c: 482:                                 } else if (pan_goto < pan_counter) {
  2002  0279  2A89               	goto	l3856
  2003  027A                     l3848:
  2004  027A  0827               	movf	_pan_counter+1,w	;volatile
  2005  027B  0223               	subwf	_pan_goto+1,w	;volatile
  2006  027C  1D03               	skipz
  2007  027D  2A80               	goto	u4235
  2008  027E  0826               	movf	_pan_counter,w	;volatile
  2009  027F  0222               	subwf	_pan_goto,w	;volatile
  2010  0280                     u4235:
  2011  0280  1803               	skipnc
  2012  0281  2A87               	goto	l3852
  2013                           
  2014                           ;main.c: 483:                                     pan_direction = 1;
  2015  0282  3001               	movlw	1
  2016  0283  00E1               	movwf	??_main
  2017  0284  0861               	movf	??_main,w
  2018  0285  00BB               	movwf	_pan_direction	;volatile
  2019                           
  2020                           ;main.c: 484:                                 } else {
  2021  0286  2A89               	goto	l3856
  2022  0287                     l3852:
  2023                           
  2024                           ;main.c: 485:                                     preset_pan_enabled = 0;
  2025  0287  01C0               	clrf	_preset_pan_enabled	;volatile
  2026                           
  2027                           ;main.c: 486:                                     pan_enabled = 0;
  2028  0288  01BC               	clrf	_pan_enabled	;volatile
  2029  0289                     l3856:
  2030                           
  2031                           ;main.c: 493:                             preset_tilt_enabled = 1;
  2032  0289  3001               	movlw	1
  2033  028A  00E1               	movwf	??_main
  2034  028B  0861               	movf	??_main,w
  2035  028C  00BE               	movwf	_preset_tilt_enabled	;volatile
  2036                           
  2037                           ;main.c: 494:                             preset_tilt_enabled_old = 0;
  2038  028D  01BD               	clrf	_preset_tilt_enabled_old	;volatile
  2039                           
  2040                           ;main.c: 496:                             tilt_speed = 0x32;
  2041  028E  3032               	movlw	50
  2042  028F  00E1               	movwf	??_main
  2043  0290  0861               	movf	??_main,w
  2044  0291  00B6               	movwf	_tilt_speed	;volatile
  2045                           
  2046                           ;main.c: 497:                             timer1_tilt_ref = SPEED_calc(tilt_speed);
  2047  0292  0836               	movf	_tilt_speed,w	;volatile
  2048  0293  158A  25F8  118A   	fcall	_SPEED_calc
  2049  0296  00E1               	movwf	??_main
  2050  0297  0861               	movf	??_main,w
  2051  0298  00B2               	movwf	_timer1_tilt_ref	;volatile
  2052                           
  2053                           ;main.c: 498:                             tilt_enabled = 1;
  2054  0299  3001               	movlw	1
  2055  029A  00E1               	movwf	??_main
  2056  029B  0861               	movf	??_main,w
  2057  029C  00B8               	movwf	_tilt_enabled	;volatile
  2058                           
  2059                           ;main.c: 500:                             if (tilt_goto < 2800) {
  2060  029D  300A               	movlw	10
  2061  029E  0221               	subwf	_tilt_goto+1,w	;volatile
  2062  029F  30F0               	movlw	240
  2063  02A0  1903               	skipnz
  2064  02A1  0220               	subwf	_tilt_goto,w	;volatile
  2065  02A2  1803               	skipnc
  2066  02A3  2ABB               	goto	l3874
  2067                           
  2068                           ;main.c: 501:                                 if (tilt_goto > tilt_counter) {
  2069  02A4  0821               	movf	_tilt_goto+1,w	;volatile
  2070  02A5  0225               	subwf	_tilt_counter+1,w	;volatile
  2071  02A6  1D03               	skipz
  2072  02A7  2AAA               	goto	u4255
  2073  02A8  0820               	movf	_tilt_goto,w	;volatile
  2074  02A9  0224               	subwf	_tilt_counter,w	;volatile
  2075  02AA                     u4255:
  2076  02AA  1803               	skipnc
  2077  02AB  2AAE               	goto	l3870
  2078                           
  2079                           ;main.c: 502:                                     tilt_direction = 0;
  2080  02AC  01B7               	clrf	_tilt_direction	;volatile
  2081                           
  2082                           ;main.c: 503:                                 } else if (tilt_goto < tilt_counter) {
  2083  02AD  2ABD               	goto	l3878
  2084  02AE                     l3870:
  2085  02AE  0825               	movf	_tilt_counter+1,w	;volatile
  2086  02AF  0221               	subwf	_tilt_goto+1,w	;volatile
  2087  02B0  1D03               	skipz
  2088  02B1  2AB4               	goto	u4265
  2089  02B2  0824               	movf	_tilt_counter,w	;volatile
  2090  02B3  0220               	subwf	_tilt_goto,w	;volatile
  2091  02B4                     u4265:
  2092  02B4  1803               	skipnc
  2093  02B5  2ABB               	goto	l3874
  2094                           
  2095                           ;main.c: 504:                                     tilt_direction = 1;
  2096  02B6  3001               	movlw	1
  2097  02B7  00E1               	movwf	??_main
  2098  02B8  0861               	movf	??_main,w
  2099  02B9  00B7               	movwf	_tilt_direction	;volatile
  2100                           
  2101                           ;main.c: 505:                                 } else {
  2102  02BA  2ABD               	goto	l3878
  2103  02BB                     l3874:
  2104                           
  2105                           ;main.c: 506:                                     preset_tilt_enabled = 0;
  2106  02BB  01BE               	clrf	_preset_tilt_enabled	;volatile
  2107                           
  2108                           ;main.c: 507:                                     tilt_enabled = 0;
  2109  02BC  01B8               	clrf	_tilt_enabled	;volatile
  2110  02BD                     l3878:
  2111                           
  2112                           ;main.c: 514:                             response_type = 0x01;
  2113  02BD  01B0               	clrf	_response_type
  2114  02BE  0AB0               	incf	_response_type,f
  2115                           
  2116                           ;main.c: 516:                             uint8_t preset_id_10 = preset_id / 10;
  2117  02BF  300A               	movlw	10
  2118  02C0  00E1               	movwf	??_main
  2119  02C1  0861               	movf	??_main,w
  2120  02C2  00C3               	movwf	___lbdiv@divisor
  2121  02C3  082A               	movf	_preset_id,w
  2122  02C4  158A  25B6  118A   	fcall	___lbdiv
  2123  02C7  00E2               	movwf	??_main+1
  2124  02C8  0862               	movf	??_main+1,w
  2125  02C9  1683               	bsf	3,5	;RP0=1, select bank1
  2126  02CA  00D9               	movwf	main@preset_id_10_423^(0+128)
  2127                           
  2128                           ;main.c: 517:                             uint8_t preset_id_1 = preset_id - (preset_id_1
      +                          0 * 10);
  2129  02CB  30F6               	movlw	246
  2130  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  2131  02CD  00E1               	movwf	??_main
  2132  02CE  0861               	movf	??_main,w
  2133  02CF  00C3               	movwf	___bmul@multiplicand
  2134  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  2135  02D1  0859               	movf	main@preset_id_10_423^(0+128),w
  2136  02D2  158A  253C  118A   	fcall	___bmul
  2137  02D5  072A               	addwf	_preset_id,w
  2138  02D6  00E2               	movwf	??_main+1
  2139  02D7  0862               	movf	??_main+1,w
  2140  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  2141  02D9  00D6               	movwf	main@preset_id_1_424^(0+128)
  2142                           
  2143                           ;main.c: 519:                             preset_id_10 += 48;
  2144  02DA  3030               	movlw	48
  2145  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  2146  02DC  00E1               	movwf	??_main
  2147  02DD  0861               	movf	??_main,w
  2148  02DE  1683               	bsf	3,5	;RP0=1, select bank1
  2149  02DF  07D9               	addwf	main@preset_id_10_423^(0+128),f
  2150                           
  2151                           ;main.c: 520:                             preset_id_1 += 48;
  2152  02E0  3030               	movlw	48
  2153  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  2154  02E2  00E1               	movwf	??_main
  2155  02E3  0861               	movf	??_main,w
  2156  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  2157  02E5  07D6               	addwf	main@preset_id_1_424^(0+128),f
  2158                           
  2159                           ;main.c: 522:                             UART_Write_Text("GOTO PRESET ");
  2160  02E6  30A8               	movlw	low (STR_22| (0+32768))
  2161  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  2162  02E8  00CC               	movwf	UART_Write_Text@text
  2163  02E9  3088               	movlw	high (STR_22| (0+32768))
  2164  02EA  00CD               	movwf	UART_Write_Text@text+1
  2165  02EB  158A  2661  118A   	fcall	_UART_Write_Text
  2166                           
  2167                           ;main.c: 523:                             UART_Write(preset_id_10);
  2168  02EE  1683               	bsf	3,5	;RP0=1, select bank1
  2169  02EF  0859               	movf	main@preset_id_10_423^(0+128),w
  2170  02F0  158A  262C  118A   	fcall	_UART_Write
  2171                           
  2172                           ;main.c: 524:                             UART_Write(preset_id_1);
  2173  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  2174  02F4  0856               	movf	main@preset_id_1_424^(0+128),w
  2175  02F5                     L15:
  2176  02F5  158A  262C  118A   	fcall	_UART_Write
  2177                           
  2178                           ;main.c: 525:                             UART_Write_Text(" (");
  2179  02F8  3007               	movlw	low ((STR_29+4)| (0+32768))
  2180  02F9  00CC               	movwf	UART_Write_Text@text
  2181  02FA  3089               	movlw	high ((STR_29+4)| (0+32768))
  2182  02FB  00CD               	movwf	UART_Write_Text@text+1
  2183  02FC  158A  2661  118A   	fcall	_UART_Write_Text
  2184                           
  2185                           ;main.c: 526:                             print_cnt(pan_goto, tilt_goto);
  2186  02FF  0823               	movf	_pan_goto+1,w	;volatile
  2187  0300  00D4               	movwf	print_cnt@_pan+1
  2188  0301  0822               	movf	_pan_goto,w	;volatile
  2189  0302  00D3               	movwf	print_cnt@_pan
  2190  0303  0821               	movf	_tilt_goto+1,w	;volatile
  2191  0304  00D6               	movwf	print_cnt@_tilt+1
  2192  0305  0820               	movf	_tilt_goto,w	;volatile
  2193  0306  2B7A               	goto	L12
  2194  0307                     l278:	
  2195                           ;main.c: 528:                         } else {
  2196                           
  2197                           ;main.c: 527:                             UART_Write_Text(")\r\n");
  2198                           
  2199                           
  2200                           ;main.c: 529:                             if ((P_cmd2 & 0x04) == 0x04) {
  2201  0307  1D2D               	btfss	_P_cmd2,2
  2202  0308  2B22               	goto	l292
  2203                           
  2204                           ;main.c: 530:                                 pan_speed = P_dat1;
  2205  0309  082C               	movf	_P_dat1,w
  2206  030A  00E1               	movwf	??_main
  2207  030B  0861               	movf	??_main,w
  2208  030C  00BA               	movwf	_pan_speed	;volatile
  2209                           
  2210                           ;main.c: 531:                                 timer1_pan_ref = SPEED_calc(pan_speed);
  2211  030D  083A               	movf	_pan_speed,w	;volatile
  2212  030E  158A  25F8  118A   	fcall	_SPEED_calc
  2213  0311  00E1               	movwf	??_main
  2214  0312  0861               	movf	??_main,w
  2215  0313  00B3               	movwf	_timer1_pan_ref	;volatile
  2216                           
  2217                           ;main.c: 532:                                 pan_direction = 0;
  2218  0314  01BB               	clrf	_pan_direction	;volatile
  2219                           
  2220                           ;main.c: 533:                                 pan_enabled = 1;
  2221  0315  3001               	movlw	1
  2222  0316  00E1               	movwf	??_main
  2223  0317  0861               	movf	??_main,w
  2224  0318  00BC               	movwf	_pan_enabled	;volatile
  2225                           
  2226                           ;main.c: 534:                                 preset_pan_enabled = 0;
  2227  0319  01C0               	clrf	_preset_pan_enabled	;volatile
  2228                           
  2229                           ;main.c: 535:                                 preset_tilt_enabled = 0;
  2230  031A  01BE               	clrf	_preset_tilt_enabled	;volatile
  2231                           
  2232                           ;main.c: 536:                                 response_type = 0x01;
  2233  031B  01B0               	clrf	_response_type
  2234  031C  0AB0               	incf	_response_type,f
  2235                           
  2236                           ;main.c: 537:                                 is_reboot = 0;
  2237  031D  01A9               	clrf	_is_reboot
  2238                           
  2239                           ;main.c: 538:                                 UART_Write_Text("LEFT (");
  2240  031E  3011               	movlw	low (STR_25| (0+32768))
  2241  031F  00CC               	movwf	UART_Write_Text@text
  2242  0320  3089               	movlw	high (STR_25| (0+32768))
  2243  0321  2B3F               	goto	L11
  2244  0322                     l292:	
  2245                           ;main.c: 541:                             } else if ((P_cmd2 & 0x02) == 0x02) {
  2246                           
  2247                           ;main.c: 540:                                 UART_Write_Text(")\r\n");
  2248                           
  2249                           ;main.c: 539:                                 print_cnt(pan_counter, tilt_counter);
  2250                           
  2251  0322  1CAD               	btfss	_P_cmd2,1
  2252  0323  2B55               	goto	l3944
  2253                           
  2254                           ;main.c: 542:                                 pan_speed = P_dat1;
  2255  0324  082C               	movf	_P_dat1,w
  2256  0325  00E1               	movwf	??_main
  2257  0326  0861               	movf	??_main,w
  2258  0327  00BA               	movwf	_pan_speed	;volatile
  2259                           
  2260                           ;main.c: 543:                                 timer1_pan_ref = SPEED_calc(pan_speed);
  2261  0328  083A               	movf	_pan_speed,w	;volatile
  2262  0329  158A  25F8  118A   	fcall	_SPEED_calc
  2263  032C  00E1               	movwf	??_main
  2264  032D  0861               	movf	??_main,w
  2265  032E  00B3               	movwf	_timer1_pan_ref	;volatile
  2266                           
  2267                           ;main.c: 544:                                 pan_direction = 1;
  2268  032F  3001               	movlw	1
  2269  0330  00E1               	movwf	??_main
  2270  0331  0861               	movf	??_main,w
  2271  0332  00BB               	movwf	_pan_direction	;volatile
  2272                           
  2273                           ;main.c: 545:                                 pan_enabled = 1;
  2274  0333  3001               	movlw	1
  2275  0334  00E1               	movwf	??_main
  2276  0335  0861               	movf	??_main,w
  2277  0336  00BC               	movwf	_pan_enabled	;volatile
  2278                           
  2279                           ;main.c: 546:                                 preset_pan_enabled = 0;
  2280  0337  01C0               	clrf	_preset_pan_enabled	;volatile
  2281                           
  2282                           ;main.c: 547:                                 preset_tilt_enabled = 0;
  2283  0338  01BE               	clrf	_preset_tilt_enabled	;volatile
  2284                           
  2285                           ;main.c: 548:                                 response_type = 0x01;
  2286  0339  01B0               	clrf	_response_type
  2287  033A  0AB0               	incf	_response_type,f
  2288                           
  2289                           ;main.c: 549:                                 is_reboot = 0;
  2290  033B  01A9               	clrf	_is_reboot
  2291                           
  2292                           ;main.c: 550:                                 UART_Write_Text("RIGHT (");
  2293  033C  30E6               	movlw	low (STR_27| (0+32768))
  2294  033D  00CC               	movwf	UART_Write_Text@text
  2295  033E  3088               	movlw	high (STR_27| (0+32768))
  2296  033F                     L11:
  2297  033F  00CD               	movwf	UART_Write_Text@text+1
  2298  0340  158A  2661  118A   	fcall	_UART_Write_Text
  2299                           
  2300                           ;main.c: 551:                                 print_cnt(pan_counter, tilt_counter);
  2301  0343  0827               	movf	_pan_counter+1,w	;volatile
  2302  0344  00D4               	movwf	print_cnt@_pan+1
  2303  0345  0826               	movf	_pan_counter,w	;volatile
  2304  0346  00D3               	movwf	print_cnt@_pan
  2305  0347  0825               	movf	_tilt_counter+1,w	;volatile
  2306  0348  00D6               	movwf	print_cnt@_tilt+1
  2307  0349  0824               	movf	_tilt_counter,w	;volatile
  2308  034A  00D5               	movwf	print_cnt@_tilt
  2309  034B  118A  23CA  118A   	fcall	_print_cnt
  2310                           
  2311                           ;main.c: 552:                                 UART_Write_Text(")\r\n");
  2312  034E  301D               	movlw	low (STR_15| (0+32768))
  2313  034F  00CC               	movwf	UART_Write_Text@text
  2314  0350  3089               	movlw	high (STR_15| (0+32768))
  2315  0351  00CD               	movwf	UART_Write_Text@text+1
  2316  0352  158A  2661  118A   	fcall	_UART_Write_Text
  2317  0355                     l3944:
  2318                           
  2319                           ;main.c: 555:                             if ((P_cmd2 & 0x10) == 0x10) {
  2320  0355  1E2D               	btfss	_P_cmd2,4
  2321  0356  2B82               	goto	l295
  2322                           
  2323                           ;main.c: 556:                                 tilt_speed = P_dat2;
  2324  0357  082B               	movf	_P_dat2,w
  2325  0358  00E1               	movwf	??_main
  2326  0359  0861               	movf	??_main,w
  2327  035A  00B6               	movwf	_tilt_speed	;volatile
  2328                           
  2329                           ;main.c: 557:                                 timer1_tilt_ref = SPEED_calc(tilt_speed);
  2330  035B  0836               	movf	_tilt_speed,w	;volatile
  2331  035C  158A  25F8  118A   	fcall	_SPEED_calc
  2332  035F  00E1               	movwf	??_main
  2333  0360  0861               	movf	??_main,w
  2334  0361  00B2               	movwf	_timer1_tilt_ref	;volatile
  2335                           
  2336                           ;main.c: 558:                                 tilt_direction = 0;
  2337  0362  01B7               	clrf	_tilt_direction	;volatile
  2338                           
  2339                           ;main.c: 559:                                 tilt_enabled = 1;
  2340  0363  3001               	movlw	1
  2341  0364  00E1               	movwf	??_main
  2342  0365  0861               	movf	??_main,w
  2343  0366  00B8               	movwf	_tilt_enabled	;volatile
  2344                           
  2345                           ;main.c: 560:                                 preset_pan_enabled = 0;
  2346  0367  01C0               	clrf	_preset_pan_enabled	;volatile
  2347                           
  2348                           ;main.c: 561:                                 preset_tilt_enabled = 0;
  2349  0368  01BE               	clrf	_preset_tilt_enabled	;volatile
  2350                           
  2351                           ;main.c: 562:                                 response_type = 0x01;
  2352  0369  01B0               	clrf	_response_type
  2353  036A  0AB0               	incf	_response_type,f
  2354                           
  2355                           ;main.c: 563:                                 is_reboot = 0;
  2356  036B  01A9               	clrf	_is_reboot
  2357                           
  2358                           ;main.c: 564:                                 UART_Write_Text("DOWN (");
  2359  036C  3003               	movlw	low (STR_29| (0+32768))
  2360  036D  00CC               	movwf	UART_Write_Text@text
  2361  036E  3089               	movlw	high (STR_29| (0+32768))
  2362  036F                     L14:
  2363  036F  00CD               	movwf	UART_Write_Text@text+1
  2364  0370  158A  2661  118A   	fcall	_UART_Write_Text
  2365                           
  2366                           ;main.c: 565:                                 print_cnt(pan_counter, tilt_counter);
  2367  0373  0827               	movf	_pan_counter+1,w	;volatile
  2368  0374  00D4               	movwf	print_cnt@_pan+1
  2369  0375  0826               	movf	_pan_counter,w	;volatile
  2370  0376  00D3               	movwf	print_cnt@_pan
  2371  0377  0825               	movf	_tilt_counter+1,w	;volatile
  2372  0378  00D6               	movwf	print_cnt@_tilt+1
  2373  0379  0824               	movf	_tilt_counter,w	;volatile
  2374  037A                     L12:
  2375  037A  00D5               	movwf	print_cnt@_tilt
  2376  037B  118A  23CA  118A   	fcall	_print_cnt
  2377                           
  2378                           ;main.c: 566:                                 UART_Write_Text(")\r\n");
  2379  037E  301D               	movlw	low (STR_15| (0+32768))
  2380  037F  00CC               	movwf	UART_Write_Text@text
  2381  0380  3089               	movlw	high (STR_15| (0+32768))
  2382  0381  2851               	goto	L6
  2383  0382                     l295:	
  2384                           ;main.c: 567:                             } else if ((P_cmd2 & 0x08) == 0x08) {
  2385                           
  2386  0382  1DAD               	btfss	_P_cmd2,3
  2387  0383  2BBA               	goto	l235
  2388                           
  2389                           ;main.c: 568:                                 tilt_speed = P_dat2;
  2390  0384  082B               	movf	_P_dat2,w
  2391  0385  00E1               	movwf	??_main
  2392  0386  0861               	movf	??_main,w
  2393  0387  00B6               	movwf	_tilt_speed	;volatile
  2394                           
  2395                           ;main.c: 569:                                 timer1_tilt_ref = SPEED_calc(tilt_speed);
  2396  0388  0836               	movf	_tilt_speed,w	;volatile
  2397  0389  158A  25F8  118A   	fcall	_SPEED_calc
  2398  038C  00E1               	movwf	??_main
  2399  038D  0861               	movf	??_main,w
  2400  038E  00B2               	movwf	_timer1_tilt_ref	;volatile
  2401                           
  2402                           ;main.c: 570:                                 tilt_direction = 1;
  2403  038F  3001               	movlw	1
  2404  0390  00E1               	movwf	??_main
  2405  0391  0861               	movf	??_main,w
  2406  0392  00B7               	movwf	_tilt_direction	;volatile
  2407                           
  2408                           ;main.c: 571:                                 tilt_enabled = 1;
  2409  0393  3001               	movlw	1
  2410  0394  00E1               	movwf	??_main
  2411  0395  0861               	movf	??_main,w
  2412  0396  00B8               	movwf	_tilt_enabled	;volatile
  2413                           
  2414                           ;main.c: 572:                                 preset_pan_enabled = 0;
  2415  0397  01C0               	clrf	_preset_pan_enabled	;volatile
  2416                           
  2417                           ;main.c: 573:                                 preset_tilt_enabled = 0;
  2418  0398  01BE               	clrf	_preset_tilt_enabled	;volatile
  2419                           
  2420                           ;main.c: 574:                                 response_type = 0x01;
  2421  0399  01B0               	clrf	_response_type
  2422  039A  0AB0               	incf	_response_type,f
  2423                           
  2424                           ;main.c: 575:                                 is_reboot = 0;
  2425  039B  01A9               	clrf	_is_reboot
  2426                           
  2427                           ;main.c: 576:                                 UART_Write_Text("UP (");
  2428  039C  3018               	movlw	low (STR_31| (0+32768))
  2429  039D  00CC               	movwf	UART_Write_Text@text
  2430  039E  3089               	movlw	high (STR_31| (0+32768))
  2431  039F  00CD               	movwf	UART_Write_Text@text+1
  2432  03A0  158A  2661  118A   	fcall	_UART_Write_Text
  2433                           
  2434                           ;main.c: 577:                                 print_cnt(pan_counter, tilt_counter);
  2435  03A3  0827               	movf	_pan_counter+1,w	;volatile
  2436  03A4  00D4               	movwf	print_cnt@_pan+1
  2437  03A5  0826               	movf	_pan_counter,w	;volatile
  2438  03A6  00D3               	movwf	print_cnt@_pan
  2439  03A7  0825               	movf	_tilt_counter+1,w	;volatile
  2440  03A8  00D6               	movwf	print_cnt@_tilt+1
  2441  03A9  0824               	movf	_tilt_counter,w	;volatile
  2442  03AA  00D5               	movwf	print_cnt@_tilt
  2443  03AB  118A  23CA  118A   	fcall	_print_cnt
  2444                           
  2445                           ;main.c: 578:                                 UART_Write_Text(")\r\n");
  2446  03AE  301D               	movlw	low (STR_15| (0+32768))
  2447  03AF  00CC               	movwf	UART_Write_Text@text
  2448  03B0  3089               	movlw	high (STR_15| (0+32768))
  2449  03B1  00CD               	movwf	UART_Write_Text@text+1
  2450  03B2  158A  2661  118A   	fcall	_UART_Write_Text
  2451  03B5  2BBA               	goto	l235
  2452  03B6                     l3994:
  2453                           
  2454                           ;main.c: 590:                 frame_index++;
  2455  03B6  3001               	movlw	1
  2456  03B7  00E1               	movwf	??_main
  2457  03B8  0861               	movf	??_main,w
  2458  03B9  07B1               	addwf	_frame_index,f
  2459  03BA                     l235:	
  2460                           ;main.c: 330:     while (1) {
  2461                           
  2462                           ;main.c: 591:             } else {
  2463                           
  2464  03BA  0064               	clrwdt	;# 
  2465                           
  2466                           ;main.c: 333:         if (buffer_ready[frame_index] == 1) {
  2467  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  2468  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  2469  03BD  0831               	movf	_frame_index,w
  2470  03BE  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  2471  03BF  0084               	movwf	4
  2472  03C0  1383               	bcf	3,7	;select IRP bank1
  2473  03C1  0300               	decf	0,w
  2474  03C2  1903               	btfsc	3,2
  2475  03C3  2856               	goto	l3620
  2476                           
  2477                           ;main.c: 589:             if (frame_index < 4) {
  2478  03C4  3004               	movlw	4
  2479  03C5  0231               	subwf	_frame_index,w
  2480  03C6  1C03               	btfss	3,0
  2481  03C7  2BB6               	goto	l3994
  2482                           
  2483                           ;main.c: 593:                 frame_index = 0;
  2484  03C8  01B1               	clrf	_frame_index
  2485  03C9  2BBA               	goto	l235
  2486  03CA                     __end_of_main:
  2487                           
  2488                           	psect	text1
  2489  03CA                     __ptext1:	
  2490 ;; *************** function _print_cnt *****************
  2491 ;; Defined at:
  2492 ;;		line 867 in file "main.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;  _pan            2   16[BANK0 ] unsigned int 
  2495 ;;  _tilt           2   18[BANK0 ] unsigned int 
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;  val10000        2   28[BANK0 ] unsigned int 
  2498 ;;  val1000         2   26[BANK0 ] unsigned int 
  2499 ;;  val100          2   24[BANK0 ] unsigned int 
  2500 ;;  val10           2   22[BANK0 ] unsigned int 
  2501 ;;  val1            2   20[BANK0 ] unsigned int 
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  1    wreg      void 
  2504 ;; Registers used:
  2505 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2506 ;; Tracked objects:
  2507 ;;		On entry : 300/0
  2508 ;;		On exit  : 300/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2511 ;;      Params:         0       4       0       0
  2512 ;;      Locals:         0      10       0       0
  2513 ;;      Temps:          0       0       0       0
  2514 ;;      Totals:         0      14       0       0
  2515 ;;Total ram usage:       14 bytes
  2516 ;; Hardware stack levels used: 1
  2517 ;; Hardware stack levels required when called: 4
  2518 ;; This function calls:
  2519 ;;		_UART_Write
  2520 ;;		_UART_Write_Text
  2521 ;;		___lwdiv
  2522 ;;		___wmul
  2523 ;; This function is called by:
  2524 ;;		_main
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528  03CA                     _print_cnt:	
  2529                           ;psect for function _print_cnt
  2530                           
  2531                           
  2532                           ;main.c: 869:     uint16_t val1000 = 0;
  2533                           
  2534                           ;incstack = 0
  2535                           ; Regs used in _print_cnt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2536  03CA  01DD               	clrf	print_cnt@val1000
  2537  03CB  01DE               	clrf	print_cnt@val1000+1
  2538                           
  2539                           ;main.c: 870:     uint16_t val100 = 0;
  2540  03CC  01DB               	clrf	print_cnt@val100
  2541  03CD  01DC               	clrf	print_cnt@val100+1
  2542                           
  2543                           ;main.c: 871:     uint16_t val10 = 0;
  2544  03CE  01D9               	clrf	print_cnt@val10
  2545  03CF  01DA               	clrf	print_cnt@val10+1
  2546                           
  2547                           ;main.c: 872:     uint16_t val1 = 0;
  2548  03D0  01D7               	clrf	print_cnt@val1
  2549  03D1  01D8               	clrf	print_cnt@val1+1
  2550                           
  2551                           ;main.c: 874:     val10000 = _pan / 10000;
  2552  03D2  3010               	movlw	16
  2553  03D3  00C3               	movwf	___lwdiv@divisor
  2554  03D4  3027               	movlw	39
  2555  03D5  00C4               	movwf	___lwdiv@divisor+1
  2556  03D6  0854               	movf	print_cnt@_pan+1,w
  2557  03D7  00C6               	movwf	___lwdiv@dividend+1
  2558  03D8  0853               	movf	print_cnt@_pan,w
  2559  03D9  00C5               	movwf	___lwdiv@dividend
  2560  03DA  158A  26D0  118A   	fcall	___lwdiv
  2561  03DD  0844               	movf	?___lwdiv+1,w
  2562  03DE  00E0               	movwf	print_cnt@val10000+1
  2563  03DF  0843               	movf	?___lwdiv,w
  2564  03E0  00DF               	movwf	print_cnt@val10000
  2565                           
  2566                           ;main.c: 875:     _pan -= val10000 * 10000;
  2567  03E1  0860               	movf	print_cnt@val10000+1,w
  2568  03E2  00C4               	movwf	___wmul@multiplier+1
  2569  03E3  085F               	movf	print_cnt@val10000,w
  2570  03E4  00C3               	movwf	___wmul@multiplier
  2571  03E5  3010               	movlw	16
  2572  03E6  00C5               	movwf	___wmul@multiplicand
  2573  03E7  3027               	movlw	39
  2574  03E8  00C6               	movwf	___wmul@multiplicand+1
  2575  03E9  158A  25D7  118A   	fcall	___wmul
  2576  03EC  0843               	movf	?___wmul,w
  2577  03ED  02D3               	subwf	print_cnt@_pan,f
  2578  03EE  0844               	movf	?___wmul+1,w
  2579  03EF  1C03               	skipc
  2580  03F0  03D4               	decf	print_cnt@_pan+1,f
  2581  03F1  02D4               	subwf	print_cnt@_pan+1,f
  2582                           
  2583                           ;main.c: 877:     val1000 = _pan / 1000;
  2584  03F2  30E8               	movlw	232
  2585  03F3  00C3               	movwf	___lwdiv@divisor
  2586  03F4  3003               	movlw	3
  2587  03F5  00C4               	movwf	___lwdiv@divisor+1
  2588  03F6  0854               	movf	print_cnt@_pan+1,w
  2589  03F7  00C6               	movwf	___lwdiv@dividend+1
  2590  03F8  0853               	movf	print_cnt@_pan,w
  2591  03F9  00C5               	movwf	___lwdiv@dividend
  2592  03FA  158A  26D0  118A   	fcall	___lwdiv
  2593  03FD  0844               	movf	?___lwdiv+1,w
  2594  03FE  00DE               	movwf	print_cnt@val1000+1
  2595  03FF  0843               	movf	?___lwdiv,w
  2596  0400  00DD               	movwf	print_cnt@val1000
  2597                           
  2598                           ;main.c: 878:     _pan -= val1000 * 1000;
  2599  0401  085E               	movf	print_cnt@val1000+1,w
  2600  0402  00C4               	movwf	___wmul@multiplier+1
  2601  0403  085D               	movf	print_cnt@val1000,w
  2602  0404  00C3               	movwf	___wmul@multiplier
  2603  0405  30E8               	movlw	232
  2604  0406  00C5               	movwf	___wmul@multiplicand
  2605  0407  3003               	movlw	3
  2606  0408  00C6               	movwf	___wmul@multiplicand+1
  2607  0409  158A  25D7  118A   	fcall	___wmul
  2608  040C  0843               	movf	?___wmul,w
  2609  040D  02D3               	subwf	print_cnt@_pan,f
  2610  040E  0844               	movf	?___wmul+1,w
  2611  040F  1C03               	skipc
  2612  0410  03D4               	decf	print_cnt@_pan+1,f
  2613  0411  02D4               	subwf	print_cnt@_pan+1,f
  2614                           
  2615                           ;main.c: 880:     val100 = _pan / 100;
  2616  0412  3064               	movlw	100
  2617  0413  00C3               	movwf	___lwdiv@divisor
  2618  0414  3000               	movlw	0
  2619  0415  00C4               	movwf	___lwdiv@divisor+1
  2620  0416  0854               	movf	print_cnt@_pan+1,w
  2621  0417  00C6               	movwf	___lwdiv@dividend+1
  2622  0418  0853               	movf	print_cnt@_pan,w
  2623  0419  00C5               	movwf	___lwdiv@dividend
  2624  041A  158A  26D0  118A   	fcall	___lwdiv
  2625  041D  0844               	movf	?___lwdiv+1,w
  2626  041E  00DC               	movwf	print_cnt@val100+1
  2627  041F  0843               	movf	?___lwdiv,w
  2628  0420  00DB               	movwf	print_cnt@val100
  2629                           
  2630                           ;main.c: 881:     _pan -= val100 * 100;
  2631  0421  085C               	movf	print_cnt@val100+1,w
  2632  0422  00C4               	movwf	___wmul@multiplier+1
  2633  0423  085B               	movf	print_cnt@val100,w
  2634  0424  00C3               	movwf	___wmul@multiplier
  2635  0425  3064               	movlw	100
  2636  0426  00C5               	movwf	___wmul@multiplicand
  2637  0427  3000               	movlw	0
  2638  0428  00C6               	movwf	___wmul@multiplicand+1
  2639  0429  158A  25D7  118A   	fcall	___wmul
  2640  042C  0843               	movf	?___wmul,w
  2641  042D  02D3               	subwf	print_cnt@_pan,f
  2642  042E  0844               	movf	?___wmul+1,w
  2643  042F  1C03               	skipc
  2644  0430  03D4               	decf	print_cnt@_pan+1,f
  2645  0431  02D4               	subwf	print_cnt@_pan+1,f
  2646                           
  2647                           ;main.c: 883:     val10 = _pan / 10;
  2648  0432  300A               	movlw	10
  2649  0433  00C3               	movwf	___lwdiv@divisor
  2650  0434  3000               	movlw	0
  2651  0435  00C4               	movwf	___lwdiv@divisor+1
  2652  0436  0854               	movf	print_cnt@_pan+1,w
  2653  0437  00C6               	movwf	___lwdiv@dividend+1
  2654  0438  0853               	movf	print_cnt@_pan,w
  2655  0439  00C5               	movwf	___lwdiv@dividend
  2656  043A  158A  26D0  118A   	fcall	___lwdiv
  2657  043D  0844               	movf	?___lwdiv+1,w
  2658  043E  00DA               	movwf	print_cnt@val10+1
  2659  043F  0843               	movf	?___lwdiv,w
  2660  0440  00D9               	movwf	print_cnt@val10
  2661                           
  2662                           ;main.c: 884:     _pan -= val10 * 10;
  2663  0441  085A               	movf	print_cnt@val10+1,w
  2664  0442  00C4               	movwf	___wmul@multiplier+1
  2665  0443  0859               	movf	print_cnt@val10,w
  2666  0444  00C3               	movwf	___wmul@multiplier
  2667  0445  300A               	movlw	10
  2668  0446  00C5               	movwf	___wmul@multiplicand
  2669  0447  3000               	movlw	0
  2670  0448  00C6               	movwf	___wmul@multiplicand+1
  2671  0449  158A  25D7  118A   	fcall	___wmul
  2672  044C  0843               	movf	?___wmul,w
  2673  044D  02D3               	subwf	print_cnt@_pan,f
  2674  044E  0844               	movf	?___wmul+1,w
  2675  044F  1C03               	skipc
  2676  0450  03D4               	decf	print_cnt@_pan+1,f
  2677  0451  02D4               	subwf	print_cnt@_pan+1,f
  2678                           
  2679                           ;main.c: 886:     val1 = _pan;
  2680  0452  0854               	movf	print_cnt@_pan+1,w
  2681  0453  00D8               	movwf	print_cnt@val1+1
  2682  0454  0853               	movf	print_cnt@_pan,w
  2683  0455  00D7               	movwf	print_cnt@val1
  2684                           
  2685                           ;main.c: 888:     val10000 += 48;
  2686  0456  3030               	movlw	48
  2687  0457  07DF               	addwf	print_cnt@val10000,f
  2688  0458  1803               	skipnc
  2689  0459  0AE0               	incf	print_cnt@val10000+1,f
  2690  045A  3000               	movlw	0
  2691  045B  07E0               	addwf	print_cnt@val10000+1,f
  2692                           
  2693                           ;main.c: 889:     val1000 += 48;
  2694  045C  3030               	movlw	48
  2695  045D  07DD               	addwf	print_cnt@val1000,f
  2696  045E  1803               	skipnc
  2697  045F  0ADE               	incf	print_cnt@val1000+1,f
  2698  0460  3000               	movlw	0
  2699  0461  07DE               	addwf	print_cnt@val1000+1,f
  2700                           
  2701                           ;main.c: 890:     val100 += 48;
  2702  0462  3030               	movlw	48
  2703  0463  07DB               	addwf	print_cnt@val100,f
  2704  0464  1803               	skipnc
  2705  0465  0ADC               	incf	print_cnt@val100+1,f
  2706  0466  3000               	movlw	0
  2707  0467  07DC               	addwf	print_cnt@val100+1,f
  2708                           
  2709                           ;main.c: 891:     val10 += 48;
  2710  0468  3030               	movlw	48
  2711  0469  07D9               	addwf	print_cnt@val10,f
  2712  046A  1803               	skipnc
  2713  046B  0ADA               	incf	print_cnt@val10+1,f
  2714  046C  3000               	movlw	0
  2715  046D  07DA               	addwf	print_cnt@val10+1,f
  2716                           
  2717                           ;main.c: 892:     val1 += 48;
  2718  046E  3030               	movlw	48
  2719  046F  07D7               	addwf	print_cnt@val1,f
  2720  0470  1803               	skipnc
  2721  0471  0AD8               	incf	print_cnt@val1+1,f
  2722  0472  3000               	movlw	0
  2723  0473  07D8               	addwf	print_cnt@val1+1,f
  2724                           
  2725                           ;main.c: 894:     if (val10000 > 0) {
  2726  0474  085F               	movf	print_cnt@val10000,w
  2727  0475  0460               	iorwf	print_cnt@val10000+1,w
  2728  0476  1903               	btfsc	3,2
  2729  0477  2C7C               	goto	l3442
  2730                           
  2731                           ;main.c: 895:         UART_Write((uint8_t) val10000);
  2732  0478  085F               	movf	print_cnt@val10000,w
  2733  0479  158A  262C  118A   	fcall	_UART_Write
  2734  047C                     l3442:
  2735                           
  2736                           ;main.c: 898:     if ((val10000 > 0) || (val1000 > 0)) {
  2737  047C  085F               	movf	print_cnt@val10000,w
  2738  047D  0460               	iorwf	print_cnt@val10000+1,w
  2739  047E  1D03               	btfss	3,2
  2740  047F  2C84               	goto	l3446
  2741  0480  085D               	movf	print_cnt@val1000,w
  2742  0481  045E               	iorwf	print_cnt@val1000+1,w
  2743  0482  1903               	btfsc	3,2
  2744  0483  2C88               	goto	l3448
  2745  0484                     l3446:
  2746                           
  2747                           ;main.c: 899:         UART_Write((uint8_t) val1000);
  2748  0484  085D               	movf	print_cnt@val1000,w
  2749  0485  158A  262C  118A   	fcall	_UART_Write
  2750  0488                     l3448:
  2751                           
  2752                           ;main.c: 902:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0)) {
  2753  0488  085F               	movf	print_cnt@val10000,w
  2754  0489  0460               	iorwf	print_cnt@val10000+1,w
  2755  048A  1D03               	btfss	3,2
  2756  048B  2C94               	goto	l3454
  2757  048C  085D               	movf	print_cnt@val1000,w
  2758  048D  045E               	iorwf	print_cnt@val1000+1,w
  2759  048E  1D03               	btfss	3,2
  2760  048F  2C94               	goto	l3454
  2761  0490  085B               	movf	print_cnt@val100,w
  2762  0491  045C               	iorwf	print_cnt@val100+1,w
  2763  0492  1903               	btfsc	3,2
  2764  0493  2C98               	goto	l3456
  2765  0494                     l3454:
  2766                           
  2767                           ;main.c: 903:         UART_Write((uint8_t) val100);
  2768  0494  085B               	movf	print_cnt@val100,w
  2769  0495  158A  262C  118A   	fcall	_UART_Write
  2770  0498                     l3456:
  2771                           
  2772                           ;main.c: 905:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0) || (val10 > 0)) {
  2773  0498  085F               	movf	print_cnt@val10000,w
  2774  0499  0460               	iorwf	print_cnt@val10000+1,w
  2775  049A  1D03               	btfss	3,2
  2776  049B  2CA8               	goto	l3464
  2777  049C  085D               	movf	print_cnt@val1000,w
  2778  049D  045E               	iorwf	print_cnt@val1000+1,w
  2779  049E  1D03               	btfss	3,2
  2780  049F  2CA8               	goto	l3464
  2781  04A0  085B               	movf	print_cnt@val100,w
  2782  04A1  045C               	iorwf	print_cnt@val100+1,w
  2783  04A2  1D03               	btfss	3,2
  2784  04A3  2CA8               	goto	l3464
  2785  04A4  0859               	movf	print_cnt@val10,w
  2786  04A5  045A               	iorwf	print_cnt@val10+1,w
  2787  04A6  1903               	btfsc	3,2
  2788  04A7  2CAC               	goto	l355
  2789  04A8                     l3464:
  2790                           
  2791                           ;main.c: 906:         UART_Write((uint8_t) val10);
  2792  04A8  0859               	movf	print_cnt@val10,w
  2793  04A9  158A  262C  118A   	fcall	_UART_Write
  2794  04AC                     l355:	
  2795                           ;main.c: 907:     }
  2796                           
  2797                           
  2798                           ;main.c: 909:     UART_Write((uint8_t) val1);
  2799  04AC  0857               	movf	print_cnt@val1,w
  2800  04AD  158A  262C  118A   	fcall	_UART_Write
  2801                           
  2802                           ;main.c: 911:     UART_Write_Text(", ");
  2803  04B0  3021               	movlw	low (STR_33| (0+32768))
  2804  04B1  00CC               	movwf	UART_Write_Text@text
  2805  04B2  3089               	movlw	high (STR_33| (0+32768))
  2806  04B3  00CD               	movwf	UART_Write_Text@text+1
  2807  04B4  158A  2661  118A   	fcall	_UART_Write_Text
  2808                           
  2809                           ;main.c: 913:     val10000 = _tilt / 10000;
  2810  04B7  3010               	movlw	16
  2811  04B8  00C3               	movwf	___lwdiv@divisor
  2812  04B9  3027               	movlw	39
  2813  04BA  00C4               	movwf	___lwdiv@divisor+1
  2814  04BB  0856               	movf	print_cnt@_tilt+1,w
  2815  04BC  00C6               	movwf	___lwdiv@dividend+1
  2816  04BD  0855               	movf	print_cnt@_tilt,w
  2817  04BE  00C5               	movwf	___lwdiv@dividend
  2818  04BF  158A  26D0  118A   	fcall	___lwdiv
  2819  04C2  0844               	movf	?___lwdiv+1,w
  2820  04C3  00E0               	movwf	print_cnt@val10000+1
  2821  04C4  0843               	movf	?___lwdiv,w
  2822  04C5  00DF               	movwf	print_cnt@val10000
  2823                           
  2824                           ;main.c: 914:     _tilt -= val10000 * 10000;
  2825  04C6  0860               	movf	print_cnt@val10000+1,w
  2826  04C7  00C4               	movwf	___wmul@multiplier+1
  2827  04C8  085F               	movf	print_cnt@val10000,w
  2828  04C9  00C3               	movwf	___wmul@multiplier
  2829  04CA  3010               	movlw	16
  2830  04CB  00C5               	movwf	___wmul@multiplicand
  2831  04CC  3027               	movlw	39
  2832  04CD  00C6               	movwf	___wmul@multiplicand+1
  2833  04CE  158A  25D7  118A   	fcall	___wmul
  2834  04D1  0843               	movf	?___wmul,w
  2835  04D2  02D5               	subwf	print_cnt@_tilt,f
  2836  04D3  0844               	movf	?___wmul+1,w
  2837  04D4  1C03               	skipc
  2838  04D5  03D6               	decf	print_cnt@_tilt+1,f
  2839  04D6  02D6               	subwf	print_cnt@_tilt+1,f
  2840                           
  2841                           ;main.c: 916:     val1000 = _tilt / 1000;
  2842  04D7  30E8               	movlw	232
  2843  04D8  00C3               	movwf	___lwdiv@divisor
  2844  04D9  3003               	movlw	3
  2845  04DA  00C4               	movwf	___lwdiv@divisor+1
  2846  04DB  0856               	movf	print_cnt@_tilt+1,w
  2847  04DC  00C6               	movwf	___lwdiv@dividend+1
  2848  04DD  0855               	movf	print_cnt@_tilt,w
  2849  04DE  00C5               	movwf	___lwdiv@dividend
  2850  04DF  158A  26D0  118A   	fcall	___lwdiv
  2851  04E2  0844               	movf	?___lwdiv+1,w
  2852  04E3  00DE               	movwf	print_cnt@val1000+1
  2853  04E4  0843               	movf	?___lwdiv,w
  2854  04E5  00DD               	movwf	print_cnt@val1000
  2855                           
  2856                           ;main.c: 917:     _tilt -= val1000 * 1000;
  2857  04E6  085E               	movf	print_cnt@val1000+1,w
  2858  04E7  00C4               	movwf	___wmul@multiplier+1
  2859  04E8  085D               	movf	print_cnt@val1000,w
  2860  04E9  00C3               	movwf	___wmul@multiplier
  2861  04EA  30E8               	movlw	232
  2862  04EB  00C5               	movwf	___wmul@multiplicand
  2863  04EC  3003               	movlw	3
  2864  04ED  00C6               	movwf	___wmul@multiplicand+1
  2865  04EE  158A  25D7  118A   	fcall	___wmul
  2866  04F1  0843               	movf	?___wmul,w
  2867  04F2  02D5               	subwf	print_cnt@_tilt,f
  2868  04F3  0844               	movf	?___wmul+1,w
  2869  04F4  1C03               	skipc
  2870  04F5  03D6               	decf	print_cnt@_tilt+1,f
  2871  04F6  02D6               	subwf	print_cnt@_tilt+1,f
  2872                           
  2873                           ;main.c: 919:     val100 = _tilt / 100;
  2874  04F7  3064               	movlw	100
  2875  04F8  00C3               	movwf	___lwdiv@divisor
  2876  04F9  3000               	movlw	0
  2877  04FA  00C4               	movwf	___lwdiv@divisor+1
  2878  04FB  0856               	movf	print_cnt@_tilt+1,w
  2879  04FC  00C6               	movwf	___lwdiv@dividend+1
  2880  04FD  0855               	movf	print_cnt@_tilt,w
  2881  04FE  00C5               	movwf	___lwdiv@dividend
  2882  04FF  158A  26D0  118A   	fcall	___lwdiv
  2883  0502  0844               	movf	?___lwdiv+1,w
  2884  0503  00DC               	movwf	print_cnt@val100+1
  2885  0504  0843               	movf	?___lwdiv,w
  2886  0505  00DB               	movwf	print_cnt@val100
  2887                           
  2888                           ;main.c: 920:     _tilt -= val100 * 100;
  2889  0506  085C               	movf	print_cnt@val100+1,w
  2890  0507  00C4               	movwf	___wmul@multiplier+1
  2891  0508  085B               	movf	print_cnt@val100,w
  2892  0509  00C3               	movwf	___wmul@multiplier
  2893  050A  3064               	movlw	100
  2894  050B  00C5               	movwf	___wmul@multiplicand
  2895  050C  3000               	movlw	0
  2896  050D  00C6               	movwf	___wmul@multiplicand+1
  2897  050E  158A  25D7  118A   	fcall	___wmul
  2898  0511  0843               	movf	?___wmul,w
  2899  0512  02D5               	subwf	print_cnt@_tilt,f
  2900  0513  0844               	movf	?___wmul+1,w
  2901  0514  1C03               	skipc
  2902  0515  03D6               	decf	print_cnt@_tilt+1,f
  2903  0516  02D6               	subwf	print_cnt@_tilt+1,f
  2904                           
  2905                           ;main.c: 922:     val10 = _tilt / 10;
  2906  0517  300A               	movlw	10
  2907  0518  00C3               	movwf	___lwdiv@divisor
  2908  0519  3000               	movlw	0
  2909  051A  00C4               	movwf	___lwdiv@divisor+1
  2910  051B  0856               	movf	print_cnt@_tilt+1,w
  2911  051C  00C6               	movwf	___lwdiv@dividend+1
  2912  051D  0855               	movf	print_cnt@_tilt,w
  2913  051E  00C5               	movwf	___lwdiv@dividend
  2914  051F  158A  26D0  118A   	fcall	___lwdiv
  2915  0522  0844               	movf	?___lwdiv+1,w
  2916  0523  00DA               	movwf	print_cnt@val10+1
  2917  0524  0843               	movf	?___lwdiv,w
  2918  0525  00D9               	movwf	print_cnt@val10
  2919                           
  2920                           ;main.c: 923:     _tilt -= val10 * 10;
  2921  0526  085A               	movf	print_cnt@val10+1,w
  2922  0527  00C4               	movwf	___wmul@multiplier+1
  2923  0528  0859               	movf	print_cnt@val10,w
  2924  0529  00C3               	movwf	___wmul@multiplier
  2925  052A  300A               	movlw	10
  2926  052B  00C5               	movwf	___wmul@multiplicand
  2927  052C  3000               	movlw	0
  2928  052D  00C6               	movwf	___wmul@multiplicand+1
  2929  052E  158A  25D7  118A   	fcall	___wmul
  2930  0531  0843               	movf	?___wmul,w
  2931  0532  02D5               	subwf	print_cnt@_tilt,f
  2932  0533  0844               	movf	?___wmul+1,w
  2933  0534  1C03               	skipc
  2934  0535  03D6               	decf	print_cnt@_tilt+1,f
  2935  0536  02D6               	subwf	print_cnt@_tilt+1,f
  2936                           
  2937                           ;main.c: 925:     val1 = _tilt;
  2938  0537  0856               	movf	print_cnt@_tilt+1,w
  2939  0538  00D8               	movwf	print_cnt@val1+1
  2940  0539  0855               	movf	print_cnt@_tilt,w
  2941  053A  00D7               	movwf	print_cnt@val1
  2942                           
  2943                           ;main.c: 927:     val10000 += 48;
  2944  053B  3030               	movlw	48
  2945  053C  07DF               	addwf	print_cnt@val10000,f
  2946  053D  1803               	skipnc
  2947  053E  0AE0               	incf	print_cnt@val10000+1,f
  2948  053F  3000               	movlw	0
  2949  0540  07E0               	addwf	print_cnt@val10000+1,f
  2950                           
  2951                           ;main.c: 928:     val1000 += 48;
  2952  0541  3030               	movlw	48
  2953  0542  07DD               	addwf	print_cnt@val1000,f
  2954  0543  1803               	skipnc
  2955  0544  0ADE               	incf	print_cnt@val1000+1,f
  2956  0545  3000               	movlw	0
  2957  0546  07DE               	addwf	print_cnt@val1000+1,f
  2958                           
  2959                           ;main.c: 929:     val100 += 48;
  2960  0547  3030               	movlw	48
  2961  0548  07DB               	addwf	print_cnt@val100,f
  2962  0549  1803               	skipnc
  2963  054A  0ADC               	incf	print_cnt@val100+1,f
  2964  054B  3000               	movlw	0
  2965  054C  07DC               	addwf	print_cnt@val100+1,f
  2966                           
  2967                           ;main.c: 930:     val10 += 48;
  2968  054D  3030               	movlw	48
  2969  054E  07D9               	addwf	print_cnt@val10,f
  2970  054F  1803               	skipnc
  2971  0550  0ADA               	incf	print_cnt@val10+1,f
  2972  0551  3000               	movlw	0
  2973  0552  07DA               	addwf	print_cnt@val10+1,f
  2974                           
  2975                           ;main.c: 931:     val1 += 48;
  2976  0553  3030               	movlw	48
  2977  0554  07D7               	addwf	print_cnt@val1,f
  2978  0555  1803               	skipnc
  2979  0556  0AD8               	incf	print_cnt@val1+1,f
  2980  0557  3000               	movlw	0
  2981  0558  07D8               	addwf	print_cnt@val1+1,f
  2982                           
  2983                           ;main.c: 933:     if (val10000 > 0) {
  2984  0559  085F               	movf	print_cnt@val10000,w
  2985  055A  0460               	iorwf	print_cnt@val10000+1,w
  2986  055B  1903               	btfsc	3,2
  2987  055C  2D61               	goto	l3500
  2988                           
  2989                           ;main.c: 934:         UART_Write((uint8_t) val10000);
  2990  055D  085F               	movf	print_cnt@val10000,w
  2991  055E  158A  262C  118A   	fcall	_UART_Write
  2992  0561                     l3500:
  2993                           
  2994                           ;main.c: 937:     if ((val10000 > 0) || (val1000 > 0)) {
  2995  0561  085F               	movf	print_cnt@val10000,w
  2996  0562  0460               	iorwf	print_cnt@val10000+1,w
  2997  0563  1D03               	btfss	3,2
  2998  0564  2D69               	goto	l3504
  2999  0565  085D               	movf	print_cnt@val1000,w
  3000  0566  045E               	iorwf	print_cnt@val1000+1,w
  3001  0567  1903               	btfsc	3,2
  3002  0568  2D6D               	goto	l3506
  3003  0569                     l3504:
  3004                           
  3005                           ;main.c: 938:         UART_Write((uint8_t) val1000);
  3006  0569  085D               	movf	print_cnt@val1000,w
  3007  056A  158A  262C  118A   	fcall	_UART_Write
  3008  056D                     l3506:
  3009                           
  3010                           ;main.c: 941:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0)) {
  3011  056D  085F               	movf	print_cnt@val10000,w
  3012  056E  0460               	iorwf	print_cnt@val10000+1,w
  3013  056F  1D03               	btfss	3,2
  3014  0570  2D79               	goto	l3512
  3015  0571  085D               	movf	print_cnt@val1000,w
  3016  0572  045E               	iorwf	print_cnt@val1000+1,w
  3017  0573  1D03               	btfss	3,2
  3018  0574  2D79               	goto	l3512
  3019  0575  085B               	movf	print_cnt@val100,w
  3020  0576  045C               	iorwf	print_cnt@val100+1,w
  3021  0577  1903               	btfsc	3,2
  3022  0578  2D7D               	goto	l3514
  3023  0579                     l3512:
  3024                           
  3025                           ;main.c: 942:         UART_Write((uint8_t) val100);
  3026  0579  085B               	movf	print_cnt@val100,w
  3027  057A  158A  262C  118A   	fcall	_UART_Write
  3028  057D                     l3514:
  3029                           
  3030                           ;main.c: 944:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0) || (val10 > 0)) {
  3031  057D  085F               	movf	print_cnt@val10000,w
  3032  057E  0460               	iorwf	print_cnt@val10000+1,w
  3033  057F  1D03               	btfss	3,2
  3034  0580  2D8D               	goto	l3522
  3035  0581  085D               	movf	print_cnt@val1000,w
  3036  0582  045E               	iorwf	print_cnt@val1000+1,w
  3037  0583  1D03               	btfss	3,2
  3038  0584  2D8D               	goto	l3522
  3039  0585  085B               	movf	print_cnt@val100,w
  3040  0586  045C               	iorwf	print_cnt@val100+1,w
  3041  0587  1D03               	btfss	3,2
  3042  0588  2D8D               	goto	l3522
  3043  0589  0859               	movf	print_cnt@val10,w
  3044  058A  045A               	iorwf	print_cnt@val10+1,w
  3045  058B  1903               	btfsc	3,2
  3046  058C  2D91               	goto	l365
  3047  058D                     l3522:
  3048                           
  3049                           ;main.c: 945:         UART_Write((uint8_t) val10);
  3050  058D  0859               	movf	print_cnt@val10,w
  3051  058E  158A  262C  118A   	fcall	_UART_Write
  3052  0591                     l365:	
  3053                           ;main.c: 946:     }
  3054                           
  3055                           
  3056                           ;main.c: 948:     UART_Write((uint8_t) val1);
  3057  0591  0857               	movf	print_cnt@val1,w
  3058  0592  158A  262C         	fcall	_UART_Write
  3059  0594  0008               	return
  3060  0595                     __end_of_print_cnt:
  3061                           
  3062                           	psect	text2
  3063  0DD7                     __ptext2:	
  3064 ;; *************** function ___wmul *****************
  3065 ;; Defined at:
  3066 ;;		line 15 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/Umul16.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3069 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  product         2    4[BANK0 ] unsigned int 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  2    0[BANK0 ] unsigned int 
  3074 ;; Registers used:
  3075 ;;		wreg, status,2, status,0
  3076 ;; Tracked objects:
  3077 ;;		On entry : 300/0
  3078 ;;		On exit  : 300/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3081 ;;      Params:         0       4       0       0
  3082 ;;      Locals:         0       2       0       0
  3083 ;;      Temps:          0       0       0       0
  3084 ;;      Totals:         0       6       0       0
  3085 ;;Total ram usage:        6 bytes
  3086 ;; Hardware stack levels used: 1
  3087 ;; Hardware stack levels required when called: 2
  3088 ;; This function calls:
  3089 ;;		Nothing
  3090 ;; This function is called by:
  3091 ;;		_print_cnt
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095  0DD7                     ___wmul:	
  3096                           ;psect for function ___wmul
  3097                           
  3098                           
  3099                           ;incstack = 0
  3100                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3101  0DD7  01C7               	clrf	___wmul@product
  3102  0DD8  01C8               	clrf	___wmul@product+1
  3103  0DD9                     l3198:
  3104  0DD9  1C43               	btfss	___wmul@multiplier,0
  3105  0DDA  2DE1               	goto	l538
  3106  0DDB  0845               	movf	___wmul@multiplicand,w
  3107  0DDC  07C7               	addwf	___wmul@product,f
  3108  0DDD  1803               	skipnc
  3109  0DDE  0AC8               	incf	___wmul@product+1,f
  3110  0DDF  0846               	movf	___wmul@multiplicand+1,w
  3111  0DE0  07C8               	addwf	___wmul@product+1,f
  3112  0DE1                     l538:
  3113  0DE1  3001               	movlw	1
  3114  0DE2                     u3285:
  3115  0DE2  1003               	clrc
  3116  0DE3  0DC5               	rlf	___wmul@multiplicand,f
  3117  0DE4  0DC6               	rlf	___wmul@multiplicand+1,f
  3118  0DE5  3EFF               	addlw	-1
  3119  0DE6  1D03               	skipz
  3120  0DE7  2DE2               	goto	u3285
  3121  0DE8  3001               	movlw	1
  3122  0DE9                     u3295:
  3123  0DE9  1003               	clrc
  3124  0DEA  0CC4               	rrf	___wmul@multiplier+1,f
  3125  0DEB  0CC3               	rrf	___wmul@multiplier,f
  3126  0DEC  3EFF               	addlw	-1
  3127  0DED  1D03               	skipz
  3128  0DEE  2DE9               	goto	u3295
  3129  0DEF  0843               	movf	___wmul@multiplier,w
  3130  0DF0  0444               	iorwf	___wmul@multiplier+1,w
  3131  0DF1  1D03               	btfss	3,2
  3132  0DF2  2DD9               	goto	l3198
  3133  0DF3  0848               	movf	___wmul@product+1,w
  3134  0DF4  00C4               	movwf	?___wmul+1
  3135  0DF5  0847               	movf	___wmul@product,w
  3136  0DF6  00C3               	movwf	?___wmul
  3137  0DF7  0008               	return
  3138  0DF8                     __end_of___wmul:
  3139                           
  3140                           	psect	text3
  3141  0ED0                     __ptext3:	
  3142 ;; *************** function ___lwdiv *****************
  3143 ;; Defined at:
  3144 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/lwdiv.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;  divisor         2    0[BANK0 ] unsigned int 
  3147 ;;  dividend        2    2[BANK0 ] unsigned int 
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;  quotient        2    6[BANK0 ] unsigned int 
  3150 ;;  counter         1    5[BANK0 ] unsigned char 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  2    0[BANK0 ] unsigned int 
  3153 ;; Registers used:
  3154 ;;		wreg, status,2, status,0
  3155 ;; Tracked objects:
  3156 ;;		On entry : 300/0
  3157 ;;		On exit  : 300/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3160 ;;      Params:         0       4       0       0
  3161 ;;      Locals:         0       3       0       0
  3162 ;;      Temps:          0       1       0       0
  3163 ;;      Totals:         0       8       0       0
  3164 ;;Total ram usage:        8 bytes
  3165 ;; Hardware stack levels used: 1
  3166 ;; Hardware stack levels required when called: 2
  3167 ;; This function calls:
  3168 ;;		Nothing
  3169 ;; This function is called by:
  3170 ;;		_print_cnt
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174  0ED0                     ___lwdiv:	
  3175                           ;psect for function ___lwdiv
  3176                           
  3177                           
  3178                           ;incstack = 0
  3179                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3180  0ED0  01C9               	clrf	___lwdiv@quotient
  3181  0ED1  01CA               	clrf	___lwdiv@quotient+1
  3182  0ED2  0843               	movf	___lwdiv@divisor,w
  3183  0ED3  0444               	iorwf	___lwdiv@divisor+1,w
  3184  0ED4  1903               	btfsc	3,2
  3185  0ED5  2F07               	goto	l3276
  3186  0ED6  01C8               	clrf	___lwdiv@counter
  3187  0ED7  0AC8               	incf	___lwdiv@counter,f
  3188  0ED8                     l3264:
  3189  0ED8  1BC4               	btfsc	___lwdiv@divisor+1,7
  3190  0ED9  2EE6               	goto	l3266
  3191  0EDA  3001               	movlw	1
  3192  0EDB                     u3425:
  3193  0EDB  1003               	clrc
  3194  0EDC  0DC3               	rlf	___lwdiv@divisor,f
  3195  0EDD  0DC4               	rlf	___lwdiv@divisor+1,f
  3196  0EDE  3EFF               	addlw	-1
  3197  0EDF  1D03               	skipz
  3198  0EE0  2EDB               	goto	u3425
  3199  0EE1  3001               	movlw	1
  3200  0EE2  00C7               	movwf	??___lwdiv
  3201  0EE3  0847               	movf	??___lwdiv,w
  3202  0EE4  07C8               	addwf	___lwdiv@counter,f
  3203  0EE5  2ED8               	goto	l3264
  3204  0EE6                     l3266:
  3205  0EE6  3001               	movlw	1
  3206  0EE7                     u3445:
  3207  0EE7  1003               	clrc
  3208  0EE8  0DC9               	rlf	___lwdiv@quotient,f
  3209  0EE9  0DCA               	rlf	___lwdiv@quotient+1,f
  3210  0EEA  3EFF               	addlw	-1
  3211  0EEB  1D03               	skipz
  3212  0EEC  2EE7               	goto	u3445
  3213  0EED  0844               	movf	___lwdiv@divisor+1,w
  3214  0EEE  0246               	subwf	___lwdiv@dividend+1,w
  3215  0EEF  1D03               	skipz
  3216  0EF0  2EF3               	goto	u3455
  3217  0EF1  0843               	movf	___lwdiv@divisor,w
  3218  0EF2  0245               	subwf	___lwdiv@dividend,w
  3219  0EF3                     u3455:
  3220  0EF3  1C03               	skipc
  3221  0EF4  2EFC               	goto	l3272
  3222  0EF5  0843               	movf	___lwdiv@divisor,w
  3223  0EF6  02C5               	subwf	___lwdiv@dividend,f
  3224  0EF7  0844               	movf	___lwdiv@divisor+1,w
  3225  0EF8  1C03               	skipc
  3226  0EF9  03C6               	decf	___lwdiv@dividend+1,f
  3227  0EFA  02C6               	subwf	___lwdiv@dividend+1,f
  3228  0EFB  1449               	bsf	___lwdiv@quotient,0
  3229  0EFC                     l3272:
  3230  0EFC  3001               	movlw	1
  3231  0EFD                     u3465:
  3232  0EFD  1003               	clrc
  3233  0EFE  0CC4               	rrf	___lwdiv@divisor+1,f
  3234  0EFF  0CC3               	rrf	___lwdiv@divisor,f
  3235  0F00  3EFF               	addlw	-1
  3236  0F01  1D03               	skipz
  3237  0F02  2EFD               	goto	u3465
  3238  0F03  3001               	movlw	1
  3239  0F04  02C8               	subwf	___lwdiv@counter,f
  3240  0F05  1D03               	btfss	3,2
  3241  0F06  2EE6               	goto	l3266
  3242  0F07                     l3276:
  3243  0F07  084A               	movf	___lwdiv@quotient+1,w
  3244  0F08  00C4               	movwf	?___lwdiv+1
  3245  0F09  0849               	movf	___lwdiv@quotient,w
  3246  0F0A  00C3               	movwf	?___lwdiv
  3247  0F0B  0008               	return
  3248  0F0C                     __end_of___lwdiv:
  3249                           
  3250                           	psect	text4
  3251  0E61                     __ptext4:	
  3252 ;; *************** function _UART_Write_Text *****************
  3253 ;; Defined at:
  3254 ;;		line 73 in file "usart.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;  text            2    9[BANK0 ] PTR unsigned char 
  3257 ;;		 -> STR_33(3), STR_32(4), STR_31(5), STR_30(4), 
  3258 ;;		 -> STR_29(7), STR_28(4), STR_27(8), STR_26(4), 
  3259 ;;		 -> STR_25(7), STR_24(4), STR_23(3), STR_22(13), 
  3260 ;;		 -> STR_21(4), STR_20(3), STR_19(14), STR_18(4), 
  3261 ;;		 -> STR_17(3), STR_16(12), STR_15(4), STR_14(7), 
  3262 ;;		 -> STR_13(16), STR_12(18), STR_11(7), STR_10(9), 
  3263 ;;		 -> STR_9(8), STR_8(8), STR_7(7), STR_6(7), 
  3264 ;;		 -> STR_5(14), STR_4(9), STR_3(23), STR_2(25), 
  3265 ;;		 -> STR_1(12), 
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;  i               2   14[BANK0 ] int 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  1    wreg      void 
  3270 ;; Registers used:
  3271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3272 ;; Tracked objects:
  3273 ;;		On entry : 300/0
  3274 ;;		On exit  : 300/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3277 ;;      Params:         0       2       0       0
  3278 ;;      Locals:         0       2       0       0
  3279 ;;      Temps:          0       3       0       0
  3280 ;;      Totals:         0       7       0       0
  3281 ;;Total ram usage:        7 bytes
  3282 ;; Hardware stack levels used: 1
  3283 ;; Hardware stack levels required when called: 3
  3284 ;; This function calls:
  3285 ;;		_UART_Write
  3286 ;; This function is called by:
  3287 ;;		_main
  3288 ;;		_print_cnt
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292  0E61                     _UART_Write_Text:	
  3293                           ;psect for function _UART_Write_Text
  3294                           
  3295                           
  3296                           ;usart.c: 74:     int i;;usart.c: 75:     for (i = 0; text[i] != '\0'; i++)
  3297                           
  3298                           ;incstack = 0
  3299                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3300  0E61  01D1               	clrf	UART_Write_Text@i
  3301  0E62  01D2               	clrf	UART_Write_Text@i+1
  3302  0E63                     l3186:
  3303  0E63  0851               	movf	UART_Write_Text@i,w
  3304  0E64  074C               	addwf	UART_Write_Text@text,w
  3305  0E65  00CF               	movwf	??_UART_Write_Text+1
  3306  0E66  084D               	movf	UART_Write_Text@text+1,w
  3307  0E67  00CE               	movwf	??_UART_Write_Text
  3308  0E68  1803               	skipnc
  3309  0E69  0ACE               	incf	??_UART_Write_Text,f
  3310  0E6A  1BD1               	btfsc	UART_Write_Text@i,7
  3311  0E6B  03CE               	decf	??_UART_Write_Text,f
  3312  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  3313  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  3314  0E6E  084E               	movf	??_UART_Write_Text,w
  3315  0E6F  00D0               	movwf	??_UART_Write_Text+2
  3316  0E70  0850               	movf	??_UART_Write_Text+2,w
  3317  0E71  00FF               	movwf	127
  3318  0E72  084F               	movf	??_UART_Write_Text+1,w
  3319  0E73  0084               	movwf	4
  3320  0E74  158A  2000  158A   	fcall	stringtab
  3321  0E77  3A00               	xorlw	0
  3322  0E78  1903               	btfsc	3,2
  3323  0E79  0008               	return
  3324                           
  3325                           ;usart.c: 76:         UART_Write(text[i]);
  3326  0E7A  0851               	movf	UART_Write_Text@i,w
  3327  0E7B  074C               	addwf	UART_Write_Text@text,w
  3328  0E7C  00CF               	movwf	??_UART_Write_Text+1
  3329  0E7D  084D               	movf	UART_Write_Text@text+1,w
  3330  0E7E  00CE               	movwf	??_UART_Write_Text
  3331  0E7F  1803               	skipnc
  3332  0E80  0ACE               	incf	??_UART_Write_Text,f
  3333  0E81  1BD1               	btfsc	UART_Write_Text@i,7
  3334  0E82  03CE               	decf	??_UART_Write_Text,f
  3335  0E83  1283               	bcf	3,5	;RP0=0, select bank0
  3336  0E84  1303               	bcf	3,6	;RP1=0, select bank0
  3337  0E85  084E               	movf	??_UART_Write_Text,w
  3338  0E86  00D0               	movwf	??_UART_Write_Text+2
  3339  0E87  0850               	movf	??_UART_Write_Text+2,w
  3340  0E88  00FF               	movwf	127
  3341  0E89  084F               	movf	??_UART_Write_Text+1,w
  3342  0E8A  0084               	movwf	4
  3343  0E8B  158A  2000  158A   	fcall	stringtab
  3344  0E8E  158A  262C  158A   	fcall	_UART_Write
  3345  0E91  3001               	movlw	1
  3346  0E92  07D1               	addwf	UART_Write_Text@i,f
  3347  0E93  1803               	skipnc
  3348  0E94  0AD2               	incf	UART_Write_Text@i+1,f
  3349  0E95  3000               	movlw	0
  3350  0E96  07D2               	addwf	UART_Write_Text@i+1,f
  3351  0E97  2E63               	goto	l3186
  3352  0E98                     __end_of_UART_Write_Text:
  3353                           
  3354                           	psect	text5
  3355  0E2C                     __ptext5:	
  3356 ;; *************** function _UART_Write *****************
  3357 ;; Defined at:
  3358 ;;		line 59 in file "usart.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  data            1    wreg     unsigned char 
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  data            1    4[BANK0 ] unsigned char 
  3363 ;;  timeout         4    5[BANK0 ] unsigned long 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      void 
  3366 ;; Registers used:
  3367 ;;		wreg
  3368 ;; Tracked objects:
  3369 ;;		On entry : 200/100
  3370 ;;		On exit  : 300/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3373 ;;      Params:         0       0       0       0
  3374 ;;      Locals:         0       5       0       0
  3375 ;;      Temps:          0       4       0       0
  3376 ;;      Totals:         0       9       0       0
  3377 ;;Total ram usage:        9 bytes
  3378 ;; Hardware stack levels used: 1
  3379 ;; Hardware stack levels required when called: 2
  3380 ;; This function calls:
  3381 ;;		Nothing
  3382 ;; This function is called by:
  3383 ;;		_main
  3384 ;;		_print_cnt
  3385 ;;		_UART_Write_Text
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389  0E2C                     _UART_Write:	
  3390                           ;psect for function _UART_Write
  3391                           
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in _UART_Write: [wreg]
  3395                           ;UART_Write@data stored from wreg
  3396  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
  3397  0E2D  00C7               	movwf	UART_Write@data
  3398                           
  3399                           ;usart.c: 60:     unsigned long timeout = 0x1FFFF;
  3400  0E2E  3000               	movlw	0
  3401  0E2F  00CB               	movwf	UART_Write@timeout+3
  3402  0E30  3001               	movlw	1
  3403  0E31  00CA               	movwf	UART_Write@timeout+2
  3404  0E32  30FF               	movlw	255
  3405  0E33  00C9               	movwf	UART_Write@timeout+1
  3406  0E34  30FF               	movlw	255
  3407  0E35  00C8               	movwf	UART_Write@timeout
  3408                           
  3409                           ;usart.c: 62:     while (!TRMT) {
  3410  0E36  2E53               	goto	l404
  3411  0E37                     l3146:
  3412                           
  3413                           ;usart.c: 64:             timeout--;
  3414  0E37  3001               	movlw	1
  3415  0E38  00C3               	movwf	??_UART_Write
  3416  0E39  3000               	movlw	0
  3417  0E3A  00C4               	movwf	??_UART_Write+1
  3418  0E3B  3000               	movlw	0
  3419  0E3C  00C5               	movwf	??_UART_Write+2
  3420  0E3D  3000               	movlw	0
  3421  0E3E  00C6               	movwf	??_UART_Write+3
  3422  0E3F  0843               	movf	??_UART_Write,w
  3423  0E40  02C8               	subwf	UART_Write@timeout,f
  3424  0E41  0844               	movf	??_UART_Write+1,w
  3425  0E42  1C03               	skipc
  3426  0E43  0F44               	incfsz	??_UART_Write+1,w
  3427  0E44  2E46               	goto	u3165
  3428  0E45  2E47               	goto	u3166
  3429  0E46                     u3165:
  3430  0E46  02C9               	subwf	UART_Write@timeout+1,f
  3431  0E47                     u3166:
  3432  0E47  0845               	movf	??_UART_Write+2,w
  3433  0E48  1C03               	skipc
  3434  0E49  0F45               	incfsz	??_UART_Write+2,w
  3435  0E4A  2E4C               	goto	u3167
  3436  0E4B  2E4D               	goto	u3168
  3437  0E4C                     u3167:
  3438  0E4C  02CA               	subwf	UART_Write@timeout+2,f
  3439  0E4D                     u3168:
  3440  0E4D  0846               	movf	??_UART_Write+3,w
  3441  0E4E  1C03               	skipc
  3442  0E4F  0F46               	incfsz	??_UART_Write+3,w
  3443  0E50  2E52               	goto	u3169
  3444  0E51  2E53               	goto	l404
  3445  0E52                     u3169:
  3446  0E52  02CB               	subwf	UART_Write@timeout+3,f
  3447  0E53                     l404:	
  3448                           ;usart.c: 68:     }
  3449                           
  3450                           
  3451                           ;usart.c: 62:     while (!TRMT) {
  3452  0E53  1683               	bsf	3,5	;RP0=1, select bank1
  3453  0E54  1898               	btfsc	24,1	;volatile
  3454  0E55  2E5D               	goto	l3148
  3455                           
  3456                           ;usart.c: 63:         if (timeout > 0) {
  3457  0E56  1283               	bcf	3,5	;RP0=0, select bank0
  3458  0E57  084B               	movf	UART_Write@timeout+3,w
  3459  0E58  044A               	iorwf	UART_Write@timeout+2,w
  3460  0E59  0449               	iorwf	UART_Write@timeout+1,w
  3461  0E5A  0448               	iorwf	UART_Write@timeout,w
  3462  0E5B  1D03               	btfss	3,2
  3463  0E5C  2E37               	goto	l3146
  3464  0E5D                     l3148:
  3465                           
  3466                           ;usart.c: 70:     TXREG = data;
  3467  0E5D  1283               	bcf	3,5	;RP0=0, select bank0
  3468  0E5E  0847               	movf	UART_Write@data,w
  3469  0E5F  0099               	movwf	25	;volatile
  3470  0E60  0008               	return
  3471  0E61                     __end_of_UART_Write:
  3472                           
  3473                           	psect	text6
  3474  0DB6                     __ptext6:	
  3475 ;; *************** function ___lbdiv *****************
  3476 ;; Defined at:
  3477 ;;		line 4 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/lbdiv.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;  dividend        1    wreg     unsigned char 
  3480 ;;  divisor         1    0[BANK0 ] unsigned char 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  dividend        1    2[BANK0 ] unsigned char 
  3483 ;;  quotient        1    4[BANK0 ] unsigned char 
  3484 ;;  counter         1    3[BANK0 ] unsigned char 
  3485 ;; Return value:  Size  Location     Type
  3486 ;;                  1    wreg      unsigned char 
  3487 ;; Registers used:
  3488 ;;		wreg, status,2, status,0
  3489 ;; Tracked objects:
  3490 ;;		On entry : 300/0
  3491 ;;		On exit  : 300/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3494 ;;      Params:         0       1       0       0
  3495 ;;      Locals:         0       3       0       0
  3496 ;;      Temps:          0       1       0       0
  3497 ;;      Totals:         0       5       0       0
  3498 ;;Total ram usage:        5 bytes
  3499 ;; Hardware stack levels used: 1
  3500 ;; Hardware stack levels required when called: 2
  3501 ;; This function calls:
  3502 ;;		Nothing
  3503 ;; This function is called by:
  3504 ;;		_main
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508  0DB6                     ___lbdiv:	
  3509                           ;psect for function ___lbdiv
  3510                           
  3511                           
  3512                           ;incstack = 0
  3513                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3514                           ;___lbdiv@dividend stored from wreg
  3515  0DB6  00C5               	movwf	___lbdiv@dividend
  3516  0DB7  01C7               	clrf	___lbdiv@quotient
  3517  0DB8  0843               	movf	___lbdiv@divisor,w
  3518  0DB9  1903               	btfsc	3,2
  3519  0DBA  2DD5               	goto	l3596
  3520  0DBB  01C6               	clrf	___lbdiv@counter
  3521  0DBC  0AC6               	incf	___lbdiv@counter,f
  3522  0DBD                     l3584:
  3523  0DBD  1BC3               	btfsc	___lbdiv@divisor,7
  3524  0DBE  2DC6               	goto	l3586
  3525  0DBF  1003               	clrc
  3526  0DC0  0DC3               	rlf	___lbdiv@divisor,f
  3527  0DC1  3001               	movlw	1
  3528  0DC2  00C4               	movwf	??___lbdiv
  3529  0DC3  0844               	movf	??___lbdiv,w
  3530  0DC4  07C6               	addwf	___lbdiv@counter,f
  3531  0DC5  2DBD               	goto	l3584
  3532  0DC6                     l3586:
  3533  0DC6  1003               	clrc
  3534  0DC7  0DC7               	rlf	___lbdiv@quotient,f
  3535  0DC8  0843               	movf	___lbdiv@divisor,w
  3536  0DC9  0245               	subwf	___lbdiv@dividend,w
  3537  0DCA  1C03               	skipc
  3538  0DCB  2DD0               	goto	L16
  3539  0DCC  0843               	movf	___lbdiv@divisor,w
  3540  0DCD  02C5               	subwf	___lbdiv@dividend,f
  3541  0DCE  1447               	bsf	___lbdiv@quotient,0
  3542  0DCF  1003               	clrc
  3543  0DD0                     L16:
  3544  0DD0  0CC3               	rrf	___lbdiv@divisor,f
  3545  0DD1  3001               	movlw	1
  3546  0DD2  02C6               	subwf	___lbdiv@counter,f
  3547  0DD3  1D03               	btfss	3,2
  3548  0DD4  2DC6               	goto	l3586
  3549  0DD5                     l3596:
  3550  0DD5  0847               	movf	___lbdiv@quotient,w
  3551  0DD6  0008               	return
  3552  0DD7                     __end_of___lbdiv:
  3553                           
  3554                           	psect	text7
  3555  0D3C                     __ptext7:	
  3556 ;; *************** function ___bmul *****************
  3557 ;; Defined at:
  3558 ;;		line 4 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/Umul8.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;  multiplier      1    wreg     unsigned char 
  3561 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3564 ;;  product         1    2[BANK0 ] unsigned char 
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  1    wreg      unsigned char 
  3567 ;; Registers used:
  3568 ;;		wreg, status,2, status,0
  3569 ;; Tracked objects:
  3570 ;;		On entry : 300/100
  3571 ;;		On exit  : 300/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3574 ;;      Params:         0       1       0       0
  3575 ;;      Locals:         0       2       0       0
  3576 ;;      Temps:          0       1       0       0
  3577 ;;      Totals:         0       4       0       0
  3578 ;;Total ram usage:        4 bytes
  3579 ;; Hardware stack levels used: 1
  3580 ;; Hardware stack levels required when called: 2
  3581 ;; This function calls:
  3582 ;;		Nothing
  3583 ;; This function is called by:
  3584 ;;		_main
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588  0D3C                     ___bmul:	
  3589                           ;psect for function ___bmul
  3590                           
  3591                           
  3592                           ;incstack = 0
  3593                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3594                           ;___bmul@multiplier stored from wreg
  3595  0D3C  1283               	bcf	3,5	;RP0=0, select bank0
  3596  0D3D  00C6               	movwf	___bmul@multiplier
  3597  0D3E  01C5               	clrf	___bmul@product
  3598  0D3F                     l3562:
  3599  0D3F  1C46               	btfss	___bmul@multiplier,0
  3600  0D40  2D45               	goto	l3566
  3601  0D41  0843               	movf	___bmul@multiplicand,w
  3602  0D42  00C4               	movwf	??___bmul
  3603  0D43  0844               	movf	??___bmul,w
  3604  0D44  07C5               	addwf	___bmul@product,f
  3605  0D45                     l3566:
  3606  0D45  1003               	clrc
  3607  0D46  0DC3               	rlf	___bmul@multiplicand,f
  3608  0D47  1003               	clrc
  3609  0D48  0CC6               	rrf	___bmul@multiplier,f
  3610  0D49  0846               	movf	___bmul@multiplier,w
  3611  0D4A  1D03               	btfss	3,2
  3612  0D4B  2D3F               	goto	l3562
  3613  0D4C  0845               	movf	___bmul@product,w
  3614  0D4D  0008               	return
  3615  0D4E                     __end_of___bmul:
  3616                           
  3617                           	psect	text8
  3618  0D64                     __ptext8:	
  3619 ;; *************** function _UC_Init *****************
  3620 ;; Defined at:
  3621 ;;		line 603 in file "main.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;		None
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;		None
  3626 ;; Return value:  Size  Location     Type
  3627 ;;                  1    wreg      void 
  3628 ;; Registers used:
  3629 ;;		wreg, status,2, status,0
  3630 ;; Tracked objects:
  3631 ;;		On entry : B00/0
  3632 ;;		On exit  : B00/100
  3633 ;;		Unchanged: 800/0
  3634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3635 ;;      Params:         0       0       0       0
  3636 ;;      Locals:         0       0       0       0
  3637 ;;      Temps:          0       0       0       0
  3638 ;;      Totals:         0       0       0       0
  3639 ;;Total ram usage:        0 bytes
  3640 ;; Hardware stack levels used: 1
  3641 ;; Hardware stack levels required when called: 2
  3642 ;; This function calls:
  3643 ;;		Nothing
  3644 ;; This function is called by:
  3645 ;;		_main
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649  0D64                     _UC_Init:	
  3650                           ;psect for function _UC_Init
  3651                           
  3652                           
  3653                           ;main.c: 604:     PCONbits.OSCF = 1;
  3654                           
  3655                           ;incstack = 0
  3656                           ; Regs used in _UC_Init: [wreg+status,2+status,0]
  3657  0D64  1683               	bsf	3,5	;RP0=1, select bank1
  3658  0D65  158E               	bsf	14,3	;volatile
  3659                           
  3660                           ;main.c: 607:     if ((PCONbits.nPOR == 1) && (PCONbits.nBOR == 1)) {
  3661  0D66  188E               	btfsc	14,1	;volatile
  3662  0D67  1C0E               	btfss	14,0	;volatile
  3663  0D68  2D6C               	goto	l3286
  3664                           
  3665                           ;main.c: 609:         is_reboot = 1;
  3666  0D69  1283               	bcf	3,5	;RP0=0, select bank0
  3667  0D6A  01A9               	clrf	_is_reboot
  3668  0D6B  0AA9               	incf	_is_reboot,f
  3669  0D6C                     l3286:
  3670                           
  3671                           ;main.c: 612:     PORTA = 0;
  3672  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  3673  0D6D  0185               	clrf	5	;volatile
  3674                           
  3675                           ;main.c: 613:     PORTB = 0;
  3676  0D6E  0186               	clrf	6	;volatile
  3677                           
  3678                           ;main.c: 615:     CMCON = 7;
  3679  0D6F  3007               	movlw	7
  3680  0D70  009F               	movwf	31	;volatile
  3681                           
  3682                           ;main.c: 617:     OPTION_REGbits.nRBPU = 1;
  3683  0D71  1683               	bsf	3,5	;RP0=1, select bank1
  3684  0D72  1781               	bsf	1,7	;volatile
  3685                           
  3686                           ;main.c: 618:     OPTION_REGbits.PSA = 1;
  3687  0D73  1581               	bsf	1,3	;volatile
  3688                           
  3689                           ;main.c: 619:     OPTION_REGbits.PS = 0b111;
  3690  0D74  3007               	movlw	7
  3691  0D75  0481               	iorwf	1,f	;volatile
  3692                           
  3693                           ;main.c: 624:     INTCONbits.GIE = 1;
  3694  0D76  178B               	bsf	11,7	;volatile
  3695                           
  3696                           ;main.c: 625:     INTCONbits.PEIE = 1;
  3697  0D77  170B               	bsf	11,6	;volatile
  3698                           
  3699                           ;main.c: 634:     TRISA = 0b00000000;
  3700  0D78  0185               	clrf	5	;volatile
  3701                           
  3702                           ;main.c: 644:     TRISB = 0b00000010;
  3703  0D79  3002               	movlw	2
  3704  0D7A  0086               	movwf	6	;volatile
  3705  0D7B  0008               	return
  3706  0D7C                     __end_of_UC_Init:
  3707                           
  3708                           	psect	text9
  3709  0F0C                     __ptext9:	
  3710 ;; *************** function _UART_Init *****************
  3711 ;; Defined at:
  3712 ;;		line 12 in file "usart.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;		None
  3715 ;; Auto vars:     Size  Location     Type
  3716 ;;  bauds_index     1    4[BANK0 ] unsigned char 
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  1    wreg      void 
  3719 ;; Registers used:
  3720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3721 ;; Tracked objects:
  3722 ;;		On entry : B00/100
  3723 ;;		On exit  : 300/100
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3726 ;;      Params:         0       0       0       0
  3727 ;;      Locals:         0       1       0       0
  3728 ;;      Temps:          0       2       0       0
  3729 ;;      Totals:         0       3       0       0
  3730 ;;Total ram usage:        3 bytes
  3731 ;; Hardware stack levels used: 1
  3732 ;; Hardware stack levels required when called: 4
  3733 ;; This function calls:
  3734 ;;		_BAUDS_get
  3735 ;; This function is called by:
  3736 ;;		_main
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740  0F0C                     _UART_Init:	
  3741                           ;psect for function _UART_Init
  3742                           
  3743                           
  3744                           ;usart.c: 16:     uint8_t bauds_index = BAUDS_get();
  3745                           
  3746                           ;incstack = 0
  3747                           ; Regs used in _UART_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3748  0F0C  118A  27FB  158A   	fcall	_BAUDS_get
  3749  0F0F  1283               	bcf	3,5	;RP0=0, select bank0
  3750  0F10  00C5               	movwf	??_UART_Init
  3751  0F11  0845               	movf	??_UART_Init,w
  3752  0F12  00C7               	movwf	UART_Init@bauds_index
  3753                           
  3754                           ;usart.c: 18:     switch (bauds_index) {
  3755  0F13  2F2C               	goto	l3320
  3756  0F14                     l394:	
  3757                           ;usart.c: 19:         case 0:
  3758                           
  3759                           
  3760                           ;usart.c: 20:             BRGH = 0;
  3761  0F14  1683               	bsf	3,5	;RP0=1, select bank1
  3762  0F15  1118               	bcf	24,2	;volatile
  3763  0F16                     l3306:
  3764                           
  3765                           ;usart.c: 21:             SPBRG = 25;
  3766  0F16  3019               	movlw	25
  3767  0F17  2F27               	goto	L20
  3768  0F18                     l396:	
  3769                           ;usart.c: 23:         case 1:
  3770                           
  3771                           ;usart.c: 22:             break;
  3772                           
  3773                           
  3774                           ;usart.c: 24:             BRGH = 1;
  3775  0F18  1683               	bsf	3,5	;RP0=1, select bank1
  3776  0F19  1518               	bsf	24,2	;volatile
  3777                           
  3778                           ;usart.c: 25:             SPBRG = 51;
  3779  0F1A  3033               	movlw	51
  3780  0F1B  2F27               	goto	L20
  3781  0F1C                     l397:	
  3782                           ;usart.c: 30:         case 3:
  3783                           
  3784                           ;usart.c: 26:             break;
  3785                           
  3786                           
  3787                           ;usart.c: 31:             BRGH = 1;
  3788  0F1C  1683               	bsf	3,5	;RP0=1, select bank1
  3789  0F1D  1518               	bsf	24,2	;volatile
  3790                           
  3791                           ;usart.c: 32:             SPBRG = 12;
  3792  0F1E  300C               	movlw	12
  3793  0F1F  2F27               	goto	L20
  3794  0F20                     l398:	
  3795                           ;usart.c: 34:         case 4:
  3796                           
  3797                           ;usart.c: 33:             break;
  3798                           
  3799                           
  3800                           ;usart.c: 35:             BRGH = 1;
  3801  0F20  1683               	bsf	3,5	;RP0=1, select bank1
  3802  0F21  1518               	bsf	24,2	;volatile
  3803                           
  3804                           ;usart.c: 36:             SPBRG = 6;
  3805  0F22  3006               	movlw	6
  3806  0F23  2F27               	goto	L20
  3807  0F24                     l399:	
  3808                           ;usart.c: 38:         case 5:
  3809                           
  3810                           ;usart.c: 37:             break;
  3811                           
  3812                           
  3813                           ;usart.c: 39:             BRGH = 1;
  3814  0F24  1683               	bsf	3,5	;RP0=1, select bank1
  3815  0F25  1518               	bsf	24,2	;volatile
  3816                           
  3817                           ;usart.c: 40:             SPBRG = 1;
  3818  0F26  3001               	movlw	1
  3819  0F27                     L20:
  3820  0F27  0099               	movwf	25	;volatile
  3821                           
  3822                           ;usart.c: 41:             break;
  3823  0F28  2F45               	goto	l395
  3824  0F29                     l400:	
  3825                           ;usart.c: 42:         default:
  3826                           
  3827                           
  3828                           ;usart.c: 43:             BRGH = 1;
  3829  0F29  1683               	bsf	3,5	;RP0=1, select bank1
  3830  0F2A  1518               	bsf	24,2	;volatile
  3831  0F2B  2F16               	goto	l3306
  3832  0F2C                     l3320:
  3833  0F2C  0847               	movf	UART_Init@bauds_index,w
  3834  0F2D  00C5               	movwf	??_UART_Init
  3835  0F2E  01C6               	clrf	??_UART_Init+1
  3836                           
  3837                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3838                           ; Switch size 1, requested type "simple"
  3839                           ; Number of cases is 1, Range of values is 0 to 0
  3840                           ; switch strategies available:
  3841                           ; Name         Instructions Cycles
  3842                           ; simple_byte            4     3 (average)
  3843                           ; direct_byte            9     7 (fixed)
  3844                           ; jumptable            260     6 (fixed)
  3845                           ;	Chosen strategy is simple_byte
  3846  0F2F  0846               	movf	??_UART_Init+1,w
  3847  0F30  3A00               	xorlw	0	; case 0
  3848  0F31  1903               	skipnz
  3849  0F32  2F34               	goto	l4028
  3850  0F33  2F29               	goto	l400
  3851  0F34                     l4028:
  3852                           
  3853                           ; Switch size 1, requested type "simple"
  3854                           ; Number of cases is 5, Range of values is 0 to 5
  3855                           ; switch strategies available:
  3856                           ; Name         Instructions Cycles
  3857                           ; simple_byte           16     9 (average)
  3858                           ; direct_byte           19     7 (fixed)
  3859                           ; jumptable            260     6 (fixed)
  3860                           ;	Chosen strategy is simple_byte
  3861  0F34  0845               	movf	??_UART_Init,w
  3862  0F35  3A00               	xorlw	0	; case 0
  3863  0F36  1903               	skipnz
  3864  0F37  2F14               	goto	l394
  3865  0F38  3A01               	xorlw	1	; case 1
  3866  0F39  1903               	skipnz
  3867  0F3A  2F18               	goto	l396
  3868  0F3B  3A02               	xorlw	2	; case 3
  3869  0F3C  1903               	skipnz
  3870  0F3D  2F1C               	goto	l397
  3871  0F3E  3A07               	xorlw	7	; case 4
  3872  0F3F  1903               	skipnz
  3873  0F40  2F20               	goto	l398
  3874  0F41  3A01               	xorlw	1	; case 5
  3875  0F42  1903               	skipnz
  3876  0F43  2F24               	goto	l399
  3877  0F44  2F29               	goto	l400
  3878  0F45                     l395:
  3879                           
  3880                           ;usart.c: 50:     SYNC = 0;
  3881  0F45  1218               	bcf	24,4	;volatile
  3882                           
  3883                           ;usart.c: 51:     SPEN = 1;
  3884  0F46  1283               	bcf	3,5	;RP0=0, select bank0
  3885  0F47  1798               	bsf	24,7	;volatile
  3886                           
  3887                           ;usart.c: 52:     CREN = 1;
  3888  0F48  1618               	bsf	24,4	;volatile
  3889                           
  3890                           ;usart.c: 53:     TXEN = 1;
  3891  0F49  1683               	bsf	3,5	;RP0=1, select bank1
  3892  0F4A  1698               	bsf	24,5	;volatile
  3893                           
  3894                           ;usart.c: 55:     PIR1bits.RCIF = 0;
  3895  0F4B  1283               	bcf	3,5	;RP0=0, select bank0
  3896  0F4C  128C               	bcf	12,5	;volatile
  3897                           
  3898                           ;usart.c: 56:     PIE1bits.RCIE = 1;
  3899  0F4D  1683               	bsf	3,5	;RP0=1, select bank1
  3900  0F4E  168C               	bsf	12,5	;volatile
  3901  0F4F  0008               	return
  3902  0F50                     __end_of_UART_Init:
  3903                           
  3904                           	psect	text10
  3905  07FB                     __ptext10:	
  3906 ;; *************** function _BAUDS_get *****************
  3907 ;; Defined at:
  3908 ;;		line 862 in file "main.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;		None
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;		None
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      unsigned char 
  3915 ;; Registers used:
  3916 ;;		wreg, status,2, status,0, pclath, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : B00/100
  3919 ;;		On exit  : 300/100
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3922 ;;      Params:         0       0       0       0
  3923 ;;      Locals:         0       0       0       0
  3924 ;;      Temps:          0       0       0       0
  3925 ;;      Totals:         0       0       0       0
  3926 ;;Total ram usage:        0 bytes
  3927 ;; Hardware stack levels used: 1
  3928 ;; Hardware stack levels required when called: 3
  3929 ;; This function calls:
  3930 ;;		_eeprom_read
  3931 ;; This function is called by:
  3932 ;;		_UART_Init
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936  07FB                     _BAUDS_get:	
  3937                           ;psect for function _BAUDS_get
  3938                           
  3939                           
  3940                           ;main.c: 864:     return eeprom_read(0xFF);
  3941                           
  3942                           ;incstack = 0
  3943                           ; Regs used in _BAUDS_get: [wreg+status,2+status,0+pclath+cstack]
  3944  07FB  30FF               	movlw	255
  3945  07FC  158A  254E         	fcall	_eeprom_read
  3946  07FE  0008               	return
  3947  07FF                     __end_of_BAUDS_get:
  3948                           
  3949                           	psect	text11
  3950  0D1C                     __ptext11:	
  3951 ;; *************** function _TIMER1_Init *****************
  3952 ;; Defined at:
  3953 ;;		line 655 in file "main.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;		None
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;		None
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  1    wreg      void 
  3960 ;; Registers used:
  3961 ;;		wreg
  3962 ;; Tracked objects:
  3963 ;;		On entry : 300/100
  3964 ;;		On exit  : 300/100
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3967 ;;      Params:         0       0       0       0
  3968 ;;      Locals:         0       0       0       0
  3969 ;;      Temps:          0       0       0       0
  3970 ;;      Totals:         0       0       0       0
  3971 ;;Total ram usage:        0 bytes
  3972 ;; Hardware stack levels used: 1
  3973 ;; Hardware stack levels required when called: 2
  3974 ;; This function calls:
  3975 ;;		Nothing
  3976 ;; This function is called by:
  3977 ;;		_main
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981  0D1C                     _TIMER1_Init:	
  3982                           ;psect for function _TIMER1_Init
  3983                           
  3984                           
  3985                           ;main.c: 658:     T1CONbits.T1CKPS1 = 1;
  3986                           
  3987                           ;incstack = 0
  3988                           ; Regs used in _TIMER1_Init: [wreg]
  3989  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
  3990  0D1D  1690               	bsf	16,5	;volatile
  3991                           
  3992                           ;main.c: 659:     T1CONbits.T1CKPS0 = 1;
  3993  0D1E  1610               	bsf	16,4	;volatile
  3994                           
  3995                           ;main.c: 660:     T1CONbits.T1OSCEN = 0;
  3996  0D1F  1190               	bcf	16,3	;volatile
  3997                           
  3998                           ;main.c: 661:     T1CONbits.nT1SYNC = 1;
  3999  0D20  1510               	bsf	16,2	;volatile
  4000                           
  4001                           ;main.c: 662:     T1CONbits.TMR1CS = 0;
  4002  0D21  1090               	bcf	16,1	;volatile
  4003                           
  4004                           ;main.c: 663:     T1CONbits.TMR1ON = 1;
  4005  0D22  1410               	bsf	16,0	;volatile
  4006                           
  4007                           ;main.c: 664:     TMR1H = 255;
  4008  0D23  30FF               	movlw	255
  4009  0D24  008F               	movwf	15	;volatile
  4010                           
  4011                           ;main.c: 665:     TMR1L = 131;
  4012  0D25  3083               	movlw	131
  4013  0D26  008E               	movwf	14	;volatile
  4014                           
  4015                           ;main.c: 667:     PIR1bits.TMR1IF = 0;
  4016  0D27  100C               	bcf	12,0	;volatile
  4017                           
  4018                           ;main.c: 668:     PIE1bits.TMR1IE = 1;
  4019  0D28  1683               	bsf	3,5	;RP0=1, select bank1
  4020  0D29  140C               	bsf	12,0	;volatile
  4021  0D2A  0008               	return
  4022  0D2B                     __end_of_TIMER1_Init:
  4023                           
  4024                           	psect	text12
  4025  0DF8                     __ptext12:	
  4026 ;; *************** function _SPEED_calc *****************
  4027 ;; Defined at:
  4028 ;;		line 800 in file "main.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  speed           1    wreg     unsigned char 
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;  speed           1   11[BANK0 ] unsigned char 
  4033 ;;  sp_calc         1   12[BANK0 ] unsigned char 
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      unsigned char 
  4036 ;; Registers used:
  4037 ;;		wreg, status,2, status,0, pclath, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 300/0
  4040 ;;		On exit  : 300/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4043 ;;      Params:         0       0       0       0
  4044 ;;      Locals:         0       2       0       0
  4045 ;;      Temps:          0       2       0       0
  4046 ;;      Totals:         0       4       0       0
  4047 ;;Total ram usage:        4 bytes
  4048 ;; Hardware stack levels used: 1
  4049 ;; Hardware stack levels required when called: 3
  4050 ;; This function calls:
  4051 ;;		___awdiv
  4052 ;; This function is called by:
  4053 ;;		_main
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057  0DF8                     _SPEED_calc:	
  4058                           ;psect for function _SPEED_calc
  4059                           
  4060                           
  4061                           ;incstack = 0
  4062                           ; Regs used in _SPEED_calc: [wreg+status,2+status,0+pclath+cstack]
  4063                           ;SPEED_calc@speed stored from wreg
  4064  0DF8  00CE               	movwf	SPEED_calc@speed
  4065                           
  4066                           ;main.c: 803:     if (speed > 0x32) {
  4067  0DF9  3033               	movlw	51
  4068  0DFA  024E               	subwf	SPEED_calc@speed,w
  4069  0DFB  1C03               	skipc
  4070  0DFC  2E01               	goto	l323
  4071                           
  4072                           ;main.c: 804:         speed = 0x32;
  4073  0DFD  3032               	movlw	50
  4074  0DFE  00CC               	movwf	??_SPEED_calc
  4075  0DFF  084C               	movf	??_SPEED_calc,w
  4076  0E00  00CE               	movwf	SPEED_calc@speed
  4077  0E01                     l323:	
  4078                           ;main.c: 805:     }
  4079                           
  4080                           
  4081                           ;main.c: 807:     if (speed < 0x06) {
  4082  0E01  3006               	movlw	6
  4083  0E02  024E               	subwf	SPEED_calc@speed,w
  4084  0E03  1803               	skipnc
  4085  0E04  2E09               	goto	l3548
  4086                           
  4087                           ;main.c: 808:         speed = 0x06;
  4088  0E05  3006               	movlw	6
  4089  0E06  00CC               	movwf	??_SPEED_calc
  4090  0E07  084C               	movf	??_SPEED_calc,w
  4091  0E08  00CE               	movwf	SPEED_calc@speed
  4092  0E09                     l3548:
  4093                           
  4094                           ;main.c: 811:     sp_calc = 1 + ((0x32 - speed) / 2);
  4095  0E09  3002               	movlw	2
  4096  0E0A  00C3               	movwf	___awdiv@divisor
  4097  0E0B  3000               	movlw	0
  4098  0E0C  00C4               	movwf	___awdiv@divisor+1
  4099  0E0D  3032               	movlw	50
  4100  0E0E  00CC               	movwf	??_SPEED_calc
  4101  0E0F  084E               	movf	SPEED_calc@speed,w
  4102  0E10  024C               	subwf	??_SPEED_calc,w
  4103  0E11  00C5               	movwf	___awdiv@dividend
  4104  0E12  01C6               	clrf	___awdiv@dividend+1
  4105  0E13  1C03               	skipc
  4106  0E14  03C6               	decf	___awdiv@dividend+1,f
  4107  0E15  158A  27A7  158A   	fcall	___awdiv
  4108  0E18  0843               	movf	?___awdiv,w
  4109  0E19  3E01               	addlw	1
  4110  0E1A  00CD               	movwf	??_SPEED_calc+1
  4111  0E1B  084D               	movf	??_SPEED_calc+1,w
  4112  0E1C  00CF               	movwf	SPEED_calc@sp_calc
  4113                           
  4114                           ;main.c: 813:     if (sp_calc < 1) {
  4115  0E1D  084F               	movf	SPEED_calc@sp_calc,w
  4116  0E1E  1D03               	btfss	3,2
  4117  0E1F  2E22               	goto	l3554
  4118                           
  4119                           ;main.c: 814:         sp_calc = 1;
  4120  0E20  01CF               	clrf	SPEED_calc@sp_calc
  4121  0E21  0ACF               	incf	SPEED_calc@sp_calc,f
  4122  0E22                     l3554:
  4123                           
  4124                           ;main.c: 817:     if (sp_calc > 19) {
  4125  0E22  3014               	movlw	20
  4126  0E23  024F               	subwf	SPEED_calc@sp_calc,w
  4127  0E24  1C03               	skipc
  4128  0E25  2E2A               	goto	l326
  4129                           
  4130                           ;main.c: 819:         sp_calc = 19;
  4131  0E26  3013               	movlw	19
  4132  0E27  00CC               	movwf	??_SPEED_calc
  4133  0E28  084C               	movf	??_SPEED_calc,w
  4134  0E29  00CF               	movwf	SPEED_calc@sp_calc
  4135  0E2A                     l326:	
  4136                           ;main.c: 820:     }
  4137                           
  4138                           
  4139                           ;main.c: 822:     return sp_calc;
  4140  0E2A  084F               	movf	SPEED_calc@sp_calc,w
  4141  0E2B  0008               	return
  4142  0E2C                     __end_of_SPEED_calc:
  4143                           
  4144                           	psect	text13
  4145  0FA7                     __ptext13:	
  4146 ;; *************** function ___awdiv *****************
  4147 ;; Defined at:
  4148 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/awdiv.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;  divisor         2    0[BANK0 ] int 
  4151 ;;  dividend        2    2[BANK0 ] int 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;  quotient        2    7[BANK0 ] int 
  4154 ;;  sign            1    6[BANK0 ] unsigned char 
  4155 ;;  counter         1    5[BANK0 ] unsigned char 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  2    0[BANK0 ] int 
  4158 ;; Registers used:
  4159 ;;		wreg, status,2, status,0
  4160 ;; Tracked objects:
  4161 ;;		On entry : 300/0
  4162 ;;		On exit  : 300/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4165 ;;      Params:         0       4       0       0
  4166 ;;      Locals:         0       4       0       0
  4167 ;;      Temps:          0       1       0       0
  4168 ;;      Totals:         0       9       0       0
  4169 ;;Total ram usage:        9 bytes
  4170 ;; Hardware stack levels used: 1
  4171 ;; Hardware stack levels required when called: 2
  4172 ;; This function calls:
  4173 ;;		Nothing
  4174 ;; This function is called by:
  4175 ;;		_SPEED_calc
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179  0FA7                     ___awdiv:	
  4180                           ;psect for function ___awdiv
  4181                           
  4182                           
  4183                           ;incstack = 0
  4184                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4185  0FA7  01C9               	clrf	___awdiv@sign
  4186  0FA8  1FC4               	btfss	___awdiv@divisor+1,7
  4187  0FA9  2FB1               	goto	l3218
  4188  0FAA  09C3               	comf	___awdiv@divisor,f
  4189  0FAB  09C4               	comf	___awdiv@divisor+1,f
  4190  0FAC  0AC3               	incf	___awdiv@divisor,f
  4191  0FAD  1903               	skipnz
  4192  0FAE  0AC4               	incf	___awdiv@divisor+1,f
  4193  0FAF  01C9               	clrf	___awdiv@sign
  4194  0FB0  0AC9               	incf	___awdiv@sign,f
  4195  0FB1                     l3218:
  4196  0FB1  1FC6               	btfss	___awdiv@dividend+1,7
  4197  0FB2  2FBC               	goto	l3224
  4198  0FB3  09C5               	comf	___awdiv@dividend,f
  4199  0FB4  09C6               	comf	___awdiv@dividend+1,f
  4200  0FB5  0AC5               	incf	___awdiv@dividend,f
  4201  0FB6  1903               	skipnz
  4202  0FB7  0AC6               	incf	___awdiv@dividend+1,f
  4203  0FB8  3001               	movlw	1
  4204  0FB9  00C7               	movwf	??___awdiv
  4205  0FBA  0847               	movf	??___awdiv,w
  4206  0FBB  06C9               	xorwf	___awdiv@sign,f
  4207  0FBC                     l3224:
  4208  0FBC  01CA               	clrf	___awdiv@quotient
  4209  0FBD  01CB               	clrf	___awdiv@quotient+1
  4210  0FBE  0843               	movf	___awdiv@divisor,w
  4211  0FBF  0444               	iorwf	___awdiv@divisor+1,w
  4212  0FC0  1903               	btfsc	3,2
  4213  0FC1  2FF3               	goto	l3246
  4214  0FC2  01C8               	clrf	___awdiv@counter
  4215  0FC3  0AC8               	incf	___awdiv@counter,f
  4216  0FC4                     l3234:
  4217  0FC4  1BC4               	btfsc	___awdiv@divisor+1,7
  4218  0FC5  2FD2               	goto	l3236
  4219  0FC6  3001               	movlw	1
  4220  0FC7                     u3345:
  4221  0FC7  1003               	clrc
  4222  0FC8  0DC3               	rlf	___awdiv@divisor,f
  4223  0FC9  0DC4               	rlf	___awdiv@divisor+1,f
  4224  0FCA  3EFF               	addlw	-1
  4225  0FCB  1D03               	skipz
  4226  0FCC  2FC7               	goto	u3345
  4227  0FCD  3001               	movlw	1
  4228  0FCE  00C7               	movwf	??___awdiv
  4229  0FCF  0847               	movf	??___awdiv,w
  4230  0FD0  07C8               	addwf	___awdiv@counter,f
  4231  0FD1  2FC4               	goto	l3234
  4232  0FD2                     l3236:
  4233  0FD2  3001               	movlw	1
  4234  0FD3                     u3365:
  4235  0FD3  1003               	clrc
  4236  0FD4  0DCA               	rlf	___awdiv@quotient,f
  4237  0FD5  0DCB               	rlf	___awdiv@quotient+1,f
  4238  0FD6  3EFF               	addlw	-1
  4239  0FD7  1D03               	skipz
  4240  0FD8  2FD3               	goto	u3365
  4241  0FD9  0844               	movf	___awdiv@divisor+1,w
  4242  0FDA  0246               	subwf	___awdiv@dividend+1,w
  4243  0FDB  1D03               	skipz
  4244  0FDC  2FDF               	goto	u3375
  4245  0FDD  0843               	movf	___awdiv@divisor,w
  4246  0FDE  0245               	subwf	___awdiv@dividend,w
  4247  0FDF                     u3375:
  4248  0FDF  1C03               	skipc
  4249  0FE0  2FE8               	goto	l3242
  4250  0FE1  0843               	movf	___awdiv@divisor,w
  4251  0FE2  02C5               	subwf	___awdiv@dividend,f
  4252  0FE3  0844               	movf	___awdiv@divisor+1,w
  4253  0FE4  1C03               	skipc
  4254  0FE5  03C6               	decf	___awdiv@dividend+1,f
  4255  0FE6  02C6               	subwf	___awdiv@dividend+1,f
  4256  0FE7  144A               	bsf	___awdiv@quotient,0
  4257  0FE8                     l3242:
  4258  0FE8  3001               	movlw	1
  4259  0FE9                     u3385:
  4260  0FE9  1003               	clrc
  4261  0FEA  0CC4               	rrf	___awdiv@divisor+1,f
  4262  0FEB  0CC3               	rrf	___awdiv@divisor,f
  4263  0FEC  3EFF               	addlw	-1
  4264  0FED  1D03               	skipz
  4265  0FEE  2FE9               	goto	u3385
  4266  0FEF  3001               	movlw	1
  4267  0FF0  02C8               	subwf	___awdiv@counter,f
  4268  0FF1  1D03               	btfss	3,2
  4269  0FF2  2FD2               	goto	l3236
  4270  0FF3                     l3246:
  4271  0FF3  0849               	movf	___awdiv@sign,w
  4272  0FF4  1903               	btfsc	3,2
  4273  0FF5  2FFB               	goto	l3250
  4274  0FF6  09CA               	comf	___awdiv@quotient,f
  4275  0FF7  09CB               	comf	___awdiv@quotient+1,f
  4276  0FF8  0ACA               	incf	___awdiv@quotient,f
  4277  0FF9  1903               	skipnz
  4278  0FFA  0ACB               	incf	___awdiv@quotient+1,f
  4279  0FFB                     l3250:
  4280  0FFB  084B               	movf	___awdiv@quotient+1,w
  4281  0FFC  00C4               	movwf	?___awdiv+1
  4282  0FFD  084A               	movf	___awdiv@quotient,w
  4283  0FFE  00C3               	movwf	?___awdiv
  4284  0FFF  0008               	return
  4285  1000                     __end_of___awdiv:
  4286                           
  4287                           	psect	text14
  4288  0E98                     __ptext14:	
  4289 ;; *************** function _PRESET_save *****************
  4290 ;; Defined at:
  4291 ;;		line 831 in file "main.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;  id              1    wreg     unsigned char 
  4294 ;;  pan             2    6[BANK0 ] unsigned int 
  4295 ;;  tilt            2    8[BANK0 ] unsigned int 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  id              1   12[BANK0 ] unsigned char 
  4298 ;;  _addr           1   13[BANK0 ] unsigned char 
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  1    wreg      void 
  4301 ;; Registers used:
  4302 ;;		wreg, status,2, status,0, pclath, cstack
  4303 ;; Tracked objects:
  4304 ;;		On entry : B00/0
  4305 ;;		On exit  : 200/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4308 ;;      Params:         0       4       0       0
  4309 ;;      Locals:         0       2       0       0
  4310 ;;      Temps:          0       2       0       0
  4311 ;;      Totals:         0       8       0       0
  4312 ;;Total ram usage:        8 bytes
  4313 ;; Hardware stack levels used: 1
  4314 ;; Hardware stack levels required when called: 4
  4315 ;; This function calls:
  4316 ;;		_eeprom_update
  4317 ;; This function is called by:
  4318 ;;		_main
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322  0E98                     _PRESET_save:	
  4323                           ;psect for function _PRESET_save
  4324                           
  4325                           
  4326                           ;incstack = 0
  4327                           ; Regs used in _PRESET_save: [wreg+status,2+status,0+pclath+cstack]
  4328                           ;PRESET_save@id stored from wreg
  4329  0E98  00CF               	movwf	PRESET_save@id
  4330                           
  4331                           ;main.c: 832:     uint8_t _addr = id * 4;
  4332  0E99  084F               	movf	PRESET_save@id,w
  4333  0E9A  00CD               	movwf	??_PRESET_save
  4334  0E9B  3001               	movlw	1
  4335  0E9C                     u3705:
  4336  0E9C  1003               	clrc
  4337  0E9D  0DCD               	rlf	??_PRESET_save,f
  4338  0E9E  3EFF               	addlw	-1
  4339  0E9F  1D03               	skipz
  4340  0EA0  2E9C               	goto	u3705
  4341  0EA1  1003               	clrc
  4342  0EA2  0D4D               	rlf	??_PRESET_save,w
  4343  0EA3  00CE               	movwf	??_PRESET_save+1
  4344  0EA4  084E               	movf	??_PRESET_save+1,w
  4345  0EA5  00D0               	movwf	PRESET_save@_addr
  4346                           
  4347                           ;main.c: 834:     if (id < 50) {
  4348  0EA6  3032               	movlw	50
  4349  0EA7  024F               	subwf	PRESET_save@id,w
  4350  0EA8  1803               	skipnc
  4351  0EA9  0008               	return
  4352                           
  4353                           ;main.c: 836:         eeprom_update(_addr, pan & 0xFF);
  4354  0EAA  0849               	movf	PRESET_save@pan,w
  4355  0EAB  00CD               	movwf	??_PRESET_save
  4356  0EAC  084D               	movf	??_PRESET_save,w
  4357  0EAD  00C6               	movwf	eeprom_update@value
  4358  0EAE  0850               	movf	PRESET_save@_addr,w
  4359  0EAF  158A  252B  158A   	fcall	_eeprom_update
  4360                           
  4361                           ;main.c: 837:         eeprom_update(_addr + 1, (pan >> 8) & 0xFF);
  4362  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  4363  0EB3  084A               	movf	PRESET_save@pan+1,w
  4364  0EB4  00CD               	movwf	??_PRESET_save
  4365  0EB5  084D               	movf	??_PRESET_save,w
  4366  0EB6  00C6               	movwf	eeprom_update@value
  4367  0EB7  0850               	movf	PRESET_save@_addr,w
  4368  0EB8  3E01               	addlw	1
  4369  0EB9  158A  252B  158A   	fcall	_eeprom_update
  4370                           
  4371                           ;main.c: 839:         eeprom_update(_addr + 2, tilt & 0xFF);
  4372  0EBC  1283               	bcf	3,5	;RP0=0, select bank0
  4373  0EBD  084B               	movf	PRESET_save@tilt,w
  4374  0EBE  00CD               	movwf	??_PRESET_save
  4375  0EBF  084D               	movf	??_PRESET_save,w
  4376  0EC0  00C6               	movwf	eeprom_update@value
  4377  0EC1  0850               	movf	PRESET_save@_addr,w
  4378  0EC2  3E02               	addlw	2
  4379  0EC3  158A  252B  158A   	fcall	_eeprom_update
  4380                           
  4381                           ;main.c: 840:         eeprom_update(_addr + 3, (tilt >> 8) & 0xFF);
  4382  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  4383  0EC7  084C               	movf	PRESET_save@tilt+1,w
  4384  0EC8  00CD               	movwf	??_PRESET_save
  4385  0EC9  084D               	movf	??_PRESET_save,w
  4386  0ECA  00C6               	movwf	eeprom_update@value
  4387  0ECB  0850               	movf	PRESET_save@_addr,w
  4388  0ECC  3E03               	addlw	3
  4389  0ECD  158A  252B         	fcall	_eeprom_update
  4390  0ECF  0008               	return
  4391  0ED0                     __end_of_PRESET_save:
  4392                           
  4393                           	psect	text15
  4394  0F50                     __ptext15:	
  4395 ;; *************** function _PRESET_load *****************
  4396 ;; Defined at:
  4397 ;;		line 844 in file "main.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  id              1    wreg     unsigned char 
  4400 ;;  pan             1    2[BANK0 ] PTR unsigned int 
  4401 ;;		 -> main@pan_tmp_421(2), main@pan_tmp(2), 
  4402 ;;  tilt            1    3[BANK0 ] PTR unsigned int 
  4403 ;;		 -> main@tilt_tmp_422(2), main@tilt_tmp(2), 
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  id              1    6[BANK0 ] unsigned char 
  4406 ;;  _addr           1    7[BANK0 ] unsigned char 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4411 ;; Tracked objects:
  4412 ;;		On entry : 300/0
  4413 ;;		On exit  : 300/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4416 ;;      Params:         0       2       0       0
  4417 ;;      Locals:         0       2       0       0
  4418 ;;      Temps:          0       2       0       0
  4419 ;;      Totals:         0       6       0       0
  4420 ;;Total ram usage:        6 bytes
  4421 ;; Hardware stack levels used: 1
  4422 ;; Hardware stack levels required when called: 3
  4423 ;; This function calls:
  4424 ;;		_eeprom_read
  4425 ;; This function is called by:
  4426 ;;		_main
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430  0F50                     _PRESET_load:	
  4431                           ;psect for function _PRESET_load
  4432                           
  4433                           
  4434                           ;incstack = 0
  4435                           ; Regs used in _PRESET_load: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4436                           ;PRESET_load@id stored from wreg
  4437  0F50  00C9               	movwf	PRESET_load@id
  4438                           
  4439                           ;main.c: 845:     uint8_t _addr = id * 4;
  4440  0F51  0849               	movf	PRESET_load@id,w
  4441  0F52  00C7               	movwf	??_PRESET_load
  4442  0F53  3001               	movlw	1
  4443  0F54                     u3725:
  4444  0F54  1003               	clrc
  4445  0F55  0DC7               	rlf	??_PRESET_load,f
  4446  0F56  3EFF               	addlw	-1
  4447  0F57  1D03               	skipz
  4448  0F58  2F54               	goto	u3725
  4449  0F59  1003               	clrc
  4450  0F5A  0D47               	rlf	??_PRESET_load,w
  4451  0F5B  00C8               	movwf	??_PRESET_load+1
  4452  0F5C  0848               	movf	??_PRESET_load+1,w
  4453  0F5D  00CA               	movwf	PRESET_load@_addr
  4454                           
  4455                           ;main.c: 847:     if (id < 50) {
  4456  0F5E  3032               	movlw	50
  4457  0F5F  0249               	subwf	PRESET_load@id,w
  4458  0F60  1803               	skipnc
  4459  0F61  0008               	return
  4460                           
  4461                           ;main.c: 849:         *pan = (uint16_t) (eeprom_read(_addr));
  4462  0F62  084A               	movf	PRESET_load@_addr,w
  4463  0F63  158A  254E  158A   	fcall	_eeprom_read
  4464  0F66  1283               	bcf	3,5	;RP0=0, select bank0
  4465  0F67  00C7               	movwf	??_PRESET_load
  4466  0F68  01C8               	clrf	??_PRESET_load+1
  4467  0F69  0845               	movf	PRESET_load@pan,w
  4468  0F6A  0084               	movwf	4
  4469  0F6B  0847               	movf	??_PRESET_load,w
  4470  0F6C  1383               	bcf	3,7	;select IRP bank0
  4471  0F6D  0080               	movwf	0
  4472  0F6E  0A84               	incf	4,f
  4473  0F6F  0848               	movf	??_PRESET_load+1,w
  4474  0F70  0080               	movwf	0
  4475                           
  4476                           ;main.c: 850:         *pan |= (uint16_t) (eeprom_read(_addr + 1) << 8);
  4477  0F71  084A               	movf	PRESET_load@_addr,w
  4478  0F72  3E01               	addlw	1
  4479  0F73  158A  254E  158A   	fcall	_eeprom_read
  4480  0F76  1283               	bcf	3,5	;RP0=0, select bank0
  4481  0F77  00C7               	movwf	??_PRESET_load
  4482  0F78  01C8               	clrf	??_PRESET_load+1
  4483  0F79  0847               	movf	??_PRESET_load,w
  4484  0F7A  00C8               	movwf	??_PRESET_load+1
  4485  0F7B  01C7               	clrf	??_PRESET_load
  4486  0F7C  0845               	movf	PRESET_load@pan,w
  4487  0F7D  0084               	movwf	4
  4488  0F7E  0847               	movf	??_PRESET_load,w
  4489  0F7F  1383               	bcf	3,7	;select IRP bank0
  4490  0F80  0480               	iorwf	0,f
  4491  0F81  0A84               	incf	4,f
  4492  0F82  0848               	movf	??_PRESET_load+1,w
  4493  0F83  0480               	iorwf	0,f
  4494                           
  4495                           ;main.c: 852:         *tilt = (uint16_t) (eeprom_read(_addr + 2));
  4496  0F84  084A               	movf	PRESET_load@_addr,w
  4497  0F85  3E02               	addlw	2
  4498  0F86  158A  254E  158A   	fcall	_eeprom_read
  4499  0F89  1283               	bcf	3,5	;RP0=0, select bank0
  4500  0F8A  00C7               	movwf	??_PRESET_load
  4501  0F8B  01C8               	clrf	??_PRESET_load+1
  4502  0F8C  0846               	movf	PRESET_load@tilt,w
  4503  0F8D  0084               	movwf	4
  4504  0F8E  0847               	movf	??_PRESET_load,w
  4505  0F8F  1383               	bcf	3,7	;select IRP bank0
  4506  0F90  0080               	movwf	0
  4507  0F91  0A84               	incf	4,f
  4508  0F92  0848               	movf	??_PRESET_load+1,w
  4509  0F93  0080               	movwf	0
  4510                           
  4511                           ;main.c: 853:         *tilt |= (uint16_t) (eeprom_read(_addr + 3) << 8);
  4512  0F94  084A               	movf	PRESET_load@_addr,w
  4513  0F95  3E03               	addlw	3
  4514  0F96  158A  254E         	fcall	_eeprom_read
  4515  0F98  1283               	bcf	3,5	;RP0=0, select bank0
  4516  0F99  00C7               	movwf	??_PRESET_load
  4517  0F9A  01C8               	clrf	??_PRESET_load+1
  4518  0F9B  0847               	movf	??_PRESET_load,w
  4519  0F9C  00C8               	movwf	??_PRESET_load+1
  4520  0F9D  01C7               	clrf	??_PRESET_load
  4521  0F9E  0846               	movf	PRESET_load@tilt,w
  4522  0F9F  0084               	movwf	4
  4523  0FA0  0847               	movf	??_PRESET_load,w
  4524  0FA1  1383               	bcf	3,7	;select IRP bank0
  4525  0FA2  0480               	iorwf	0,f
  4526  0FA3  0A84               	incf	4,f
  4527  0FA4  0848               	movf	??_PRESET_load+1,w
  4528  0FA5  0480               	iorwf	0,f
  4529  0FA6  0008               	return
  4530  0FA7                     __end_of_PRESET_load:
  4531                           
  4532                           	psect	text16
  4533  075F                     __ptext16:	
  4534 ;; *************** function _MOTOR_Init *****************
  4535 ;; Defined at:
  4536 ;;		line 724 in file "main.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;		None
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;		None
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  1    wreg      void 
  4543 ;; Registers used:
  4544 ;;		wreg, status,2, status,0, pclath, cstack
  4545 ;; Tracked objects:
  4546 ;;		On entry : 300/0
  4547 ;;		On exit  : 300/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4550 ;;      Params:         0       0       0       0
  4551 ;;      Locals:         0       0       0       0
  4552 ;;      Temps:          0       1       0       0
  4553 ;;      Totals:         0       1       0       0
  4554 ;;Total ram usage:        1 bytes
  4555 ;; Hardware stack levels used: 1
  4556 ;; Hardware stack levels required when called: 3
  4557 ;; This function calls:
  4558 ;;		_delay_wdt
  4559 ;; This function is called by:
  4560 ;;		_main
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564  075F                     _MOTOR_Init:	
  4565                           ;psect for function _MOTOR_Init
  4566                           
  4567                           
  4568                           ;main.c: 725:     is_init = 1;
  4569                           
  4570                           ;incstack = 0
  4571                           ; Regs used in _MOTOR_Init: [wreg+status,2+status,0+pclath+cstack]
  4572  075F  01A8               	clrf	_is_init
  4573  0760  0AA8               	incf	_is_init,f
  4574                           
  4575                           ;main.c: 727:     delay_wdt(50);
  4576  0761  3032               	movlw	50
  4577  0762  00C3               	movwf	delay_wdt@_ms
  4578  0763  3000               	movlw	0
  4579  0764  00C4               	movwf	delay_wdt@_ms+1
  4580  0765  158A  257C  118A   	fcall	_delay_wdt
  4581                           
  4582                           ;main.c: 730:     pan_speed = 0x32;
  4583  0768  3032               	movlw	50
  4584  0769  00C6               	movwf	??_MOTOR_Init
  4585  076A  0846               	movf	??_MOTOR_Init,w
  4586  076B  00BA               	movwf	_pan_speed	;volatile
  4587                           
  4588                           ;main.c: 731:     pan_direction = 1;
  4589  076C  3001               	movlw	1
  4590  076D  00C6               	movwf	??_MOTOR_Init
  4591  076E  0846               	movf	??_MOTOR_Init,w
  4592  076F  00BB               	movwf	_pan_direction	;volatile
  4593                           
  4594                           ;main.c: 732:     pan_enabled = 1;
  4595  0770  3001               	movlw	1
  4596  0771  00C6               	movwf	??_MOTOR_Init
  4597  0772  0846               	movf	??_MOTOR_Init,w
  4598  0773  00BC               	movwf	_pan_enabled	;volatile
  4599                           
  4600                           ;main.c: 734:     delay_wdt(22500);
  4601  0774  30E4               	movlw	228
  4602  0775  00C3               	movwf	delay_wdt@_ms
  4603  0776  3057               	movlw	87
  4604  0777  00C4               	movwf	delay_wdt@_ms+1
  4605  0778  158A  257C  118A   	fcall	_delay_wdt
  4606                           
  4607                           ;main.c: 736:     pan_enabled = 0;
  4608  077B  01BC               	clrf	_pan_enabled	;volatile
  4609                           
  4610                           ;main.c: 738:     pan_counter = 0;
  4611  077C  01A6               	clrf	_pan_counter	;volatile
  4612  077D  01A7               	clrf	_pan_counter+1	;volatile
  4613                           
  4614                           ;main.c: 740:     delay_wdt(100);
  4615  077E  3064               	movlw	100
  4616  077F  00C3               	movwf	delay_wdt@_ms
  4617  0780  3000               	movlw	0
  4618  0781  00C4               	movwf	delay_wdt@_ms+1
  4619  0782  158A  257C  118A   	fcall	_delay_wdt
  4620                           
  4621                           ;main.c: 743:     pan_speed = 0x32;
  4622  0785  3032               	movlw	50
  4623  0786  00C6               	movwf	??_MOTOR_Init
  4624  0787  0846               	movf	??_MOTOR_Init,w
  4625  0788  00BA               	movwf	_pan_speed	;volatile
  4626                           
  4627                           ;main.c: 744:     pan_direction = 0;
  4628  0789  01BB               	clrf	_pan_direction	;volatile
  4629                           
  4630                           ;main.c: 745:     pan_enabled = 1;
  4631  078A  3001               	movlw	1
  4632  078B  00C6               	movwf	??_MOTOR_Init
  4633  078C  0846               	movf	??_MOTOR_Init,w
  4634  078D  00BC               	movwf	_pan_enabled	;volatile
  4635                           
  4636                           ;main.c: 747:     delay_wdt(500);
  4637  078E  30F4               	movlw	244
  4638  078F  00C3               	movwf	delay_wdt@_ms
  4639  0790  3001               	movlw	1
  4640  0791  00C4               	movwf	delay_wdt@_ms+1
  4641  0792  158A  257C  118A   	fcall	_delay_wdt
  4642                           
  4643                           ;main.c: 749:     pan_enabled = 0;
  4644  0795  01BC               	clrf	_pan_enabled	;volatile
  4645                           
  4646                           ;main.c: 751:     pan_counter = 0;
  4647  0796  01A6               	clrf	_pan_counter	;volatile
  4648  0797  01A7               	clrf	_pan_counter+1	;volatile
  4649                           
  4650                           ;main.c: 753:     delay_wdt(50);
  4651  0798  3032               	movlw	50
  4652  0799  00C3               	movwf	delay_wdt@_ms
  4653  079A  3000               	movlw	0
  4654  079B  00C4               	movwf	delay_wdt@_ms+1
  4655  079C  158A  257C  118A   	fcall	_delay_wdt
  4656                           
  4657                           ;main.c: 756:     tilt_speed = 0x32;
  4658  079F  3032               	movlw	50
  4659  07A0  00C6               	movwf	??_MOTOR_Init
  4660  07A1  0846               	movf	??_MOTOR_Init,w
  4661  07A2  00B6               	movwf	_tilt_speed	;volatile
  4662                           
  4663                           ;main.c: 757:     tilt_direction = 1;
  4664  07A3  3001               	movlw	1
  4665  07A4  00C6               	movwf	??_MOTOR_Init
  4666  07A5  0846               	movf	??_MOTOR_Init,w
  4667  07A6  00B7               	movwf	_tilt_direction	;volatile
  4668                           
  4669                           ;main.c: 758:     tilt_enabled = 1;
  4670  07A7  3001               	movlw	1
  4671  07A8  00C6               	movwf	??_MOTOR_Init
  4672  07A9  0846               	movf	??_MOTOR_Init,w
  4673  07AA  00B8               	movwf	_tilt_enabled	;volatile
  4674                           
  4675                           ;main.c: 760:     delay_wdt(6000);
  4676  07AB  3070               	movlw	112
  4677  07AC  00C3               	movwf	delay_wdt@_ms
  4678  07AD  3017               	movlw	23
  4679  07AE  00C4               	movwf	delay_wdt@_ms+1
  4680  07AF  158A  257C  118A   	fcall	_delay_wdt
  4681                           
  4682                           ;main.c: 762:     tilt_enabled = 0;
  4683  07B2  01B8               	clrf	_tilt_enabled	;volatile
  4684                           
  4685                           ;main.c: 764:     tilt_counter = 0;
  4686  07B3  01A4               	clrf	_tilt_counter	;volatile
  4687  07B4  01A5               	clrf	_tilt_counter+1	;volatile
  4688                           
  4689                           ;main.c: 766:     delay_wdt(100);
  4690  07B5  3064               	movlw	100
  4691  07B6  00C3               	movwf	delay_wdt@_ms
  4692  07B7  3000               	movlw	0
  4693  07B8  00C4               	movwf	delay_wdt@_ms+1
  4694  07B9  158A  257C  118A   	fcall	_delay_wdt
  4695                           
  4696                           ;main.c: 769:     tilt_speed = 0x32;
  4697  07BC  3032               	movlw	50
  4698  07BD  00C6               	movwf	??_MOTOR_Init
  4699  07BE  0846               	movf	??_MOTOR_Init,w
  4700  07BF  00B6               	movwf	_tilt_speed	;volatile
  4701                           
  4702                           ;main.c: 770:     tilt_direction = 0;
  4703  07C0  01B7               	clrf	_tilt_direction	;volatile
  4704                           
  4705                           ;main.c: 771:     tilt_enabled = 1;
  4706  07C1  3001               	movlw	1
  4707  07C2  00C6               	movwf	??_MOTOR_Init
  4708  07C3  0846               	movf	??_MOTOR_Init,w
  4709  07C4  00B8               	movwf	_tilt_enabled	;volatile
  4710                           
  4711                           ;main.c: 773:     delay_wdt(750);
  4712  07C5  30EE               	movlw	238
  4713  07C6  00C3               	movwf	delay_wdt@_ms
  4714  07C7  3002               	movlw	2
  4715  07C8  00C4               	movwf	delay_wdt@_ms+1
  4716  07C9  158A  257C  118A   	fcall	_delay_wdt
  4717                           
  4718                           ;main.c: 775:     tilt_enabled = 0;
  4719  07CC  01B8               	clrf	_tilt_enabled	;volatile
  4720                           
  4721                           ;main.c: 777:     tilt_counter = 0;
  4722  07CD  01A4               	clrf	_tilt_counter	;volatile
  4723  07CE  01A5               	clrf	_tilt_counter+1	;volatile
  4724                           
  4725                           ;main.c: 780:     pan_speed = 0x32;
  4726  07CF  3032               	movlw	50
  4727  07D0  00C6               	movwf	??_MOTOR_Init
  4728  07D1  0846               	movf	??_MOTOR_Init,w
  4729  07D2  00BA               	movwf	_pan_speed	;volatile
  4730                           
  4731                           ;main.c: 781:     pan_direction = 0;
  4732  07D3  01BB               	clrf	_pan_direction	;volatile
  4733                           
  4734                           ;main.c: 782:     pan_enabled = 1;
  4735  07D4  3001               	movlw	1
  4736  07D5  00C6               	movwf	??_MOTOR_Init
  4737  07D6  0846               	movf	??_MOTOR_Init,w
  4738  07D7  00BC               	movwf	_pan_enabled	;volatile
  4739                           
  4740                           ;main.c: 784:     delay_wdt(4500);
  4741  07D8  3094               	movlw	148
  4742  07D9  00C3               	movwf	delay_wdt@_ms
  4743  07DA  3011               	movlw	17
  4744  07DB  00C4               	movwf	delay_wdt@_ms+1
  4745  07DC  158A  257C  118A   	fcall	_delay_wdt
  4746                           
  4747                           ;main.c: 786:     pan_enabled = 0;
  4748  07DF  01BC               	clrf	_pan_enabled	;volatile
  4749                           
  4750                           ;main.c: 789:     tilt_speed = 0x32;
  4751  07E0  3032               	movlw	50
  4752  07E1  00C6               	movwf	??_MOTOR_Init
  4753  07E2  0846               	movf	??_MOTOR_Init,w
  4754  07E3  00B6               	movwf	_tilt_speed	;volatile
  4755                           
  4756                           ;main.c: 790:     tilt_direction = 0;
  4757  07E4  01B7               	clrf	_tilt_direction	;volatile
  4758                           
  4759                           ;main.c: 791:     tilt_enabled = 1;
  4760  07E5  3001               	movlw	1
  4761  07E6  00C6               	movwf	??_MOTOR_Init
  4762  07E7  0846               	movf	??_MOTOR_Init,w
  4763  07E8  00B8               	movwf	_tilt_enabled	;volatile
  4764                           
  4765                           ;main.c: 793:     delay_wdt(1000);
  4766  07E9  30E8               	movlw	232
  4767  07EA  00C3               	movwf	delay_wdt@_ms
  4768  07EB  3003               	movlw	3
  4769  07EC  00C4               	movwf	delay_wdt@_ms+1
  4770  07ED  158A  257C         	fcall	_delay_wdt
  4771                           
  4772                           ;main.c: 795:     tilt_enabled = 0;
  4773  07EF  01B8               	clrf	_tilt_enabled	;volatile
  4774                           
  4775                           ;main.c: 797:     is_init = 0;
  4776  07F0  01A8               	clrf	_is_init
  4777  07F1  0008               	return
  4778  07F2                     __end_of_MOTOR_Init:
  4779                           
  4780                           	psect	text17
  4781  0D7C                     __ptext17:	
  4782 ;; *************** function _delay_wdt *****************
  4783 ;; Defined at:
  4784 ;;		line 714 in file "main.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;  _ms             2    0[BANK0 ] unsigned int 
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;		None
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  1    wreg      void 
  4791 ;; Registers used:
  4792 ;;		wreg, status,2, status,0
  4793 ;; Tracked objects:
  4794 ;;		On entry : 300/0
  4795 ;;		On exit  : 300/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4798 ;;      Params:         0       2       0       0
  4799 ;;      Locals:         0       0       0       0
  4800 ;;      Temps:          0       1       0       0
  4801 ;;      Totals:         0       3       0       0
  4802 ;;Total ram usage:        3 bytes
  4803 ;; Hardware stack levels used: 1
  4804 ;; Hardware stack levels required when called: 2
  4805 ;; This function calls:
  4806 ;;		Nothing
  4807 ;; This function is called by:
  4808 ;;		_main
  4809 ;;		_MOTOR_Init
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813  0D7C                     _delay_wdt:	
  4814                           ;psect for function _delay_wdt
  4815                           
  4816                           
  4817                           ;incstack = 0
  4818                           ; Regs used in _delay_wdt: [wreg+status,2+status,0]
  4819  0D7C  0064               	clrwdt	;# 
  4820  0D7D                     l3178:	
  4821                           ;main.c: 717:     while (_ms--) {
  4822                           
  4823                           
  4824                           ;main.c: 717:     while (_ms--) {
  4825  0D7D  3001               	movlw	1
  4826  0D7E  1283               	bcf	3,5	;RP0=0, select bank0
  4827  0D7F  1303               	bcf	3,6	;RP1=0, select bank0
  4828  0D80  02C3               	subwf	delay_wdt@_ms,f
  4829  0D81  3000               	movlw	0
  4830  0D82  1C03               	skipc
  4831  0D83  03C4               	decf	delay_wdt@_ms+1,f
  4832  0D84  02C4               	subwf	delay_wdt@_ms+1,f
  4833  0D85  0A43               	incf	delay_wdt@_ms,w
  4834  0D86  1903               	btfsc	3,2
  4835  0D87  0A44               	incf	delay_wdt@_ms+1,w
  4836  0D88  1903               	btfsc	3,2
  4837  0D89  0008               	return
  4838  0D8A  0064               	clrwdt	;# 
  4839                           
  4840                           ;main.c: 720:         _delay((unsigned long)((1)*(4000000/4000.0)));
  4841  0D8B  30C7               	movlw	199
  4842  0D8C  1283               	bcf	3,5	;RP0=0, select bank0
  4843  0D8D  1303               	bcf	3,6	;RP1=0, select bank0
  4844  0D8E  00C5               	movwf	??_delay_wdt
  4845  0D8F                     u4327:
  4846  0D8F  2D90               	nop2
  4847  0D90  0BC5               	decfsz	??_delay_wdt,f
  4848  0D91  2D8F               	goto	u4327
  4849  0D92  2D93               	nop2
  4850  0D93  0000               	nop
  4851  0D94  2D7D               	goto	l3178
  4852  0D95                     __end_of_delay_wdt:
  4853                           
  4854                           	psect	text18
  4855  07F2                     __ptext18:	
  4856 ;; *************** function _BAUDS_set *****************
  4857 ;; Defined at:
  4858 ;;		line 857 in file "main.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  index           1    wreg     unsigned char 
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;  index           1    7[BANK0 ] unsigned char 
  4863 ;; Return value:  Size  Location     Type
  4864 ;;                  1    wreg      void 
  4865 ;; Registers used:
  4866 ;;		wreg, status,2, status,0, pclath, cstack
  4867 ;; Tracked objects:
  4868 ;;		On entry : B00/0
  4869 ;;		On exit  : 200/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4872 ;;      Params:         0       0       0       0
  4873 ;;      Locals:         0       1       0       0
  4874 ;;      Temps:          0       1       0       0
  4875 ;;      Totals:         0       2       0       0
  4876 ;;Total ram usage:        2 bytes
  4877 ;; Hardware stack levels used: 1
  4878 ;; Hardware stack levels required when called: 4
  4879 ;; This function calls:
  4880 ;;		_eeprom_update
  4881 ;; This function is called by:
  4882 ;;		_main
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886  07F2                     _BAUDS_set:	
  4887                           ;psect for function _BAUDS_set
  4888                           
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _BAUDS_set: [wreg+status,2+status,0+pclath+cstack]
  4892                           ;BAUDS_set@index stored from wreg
  4893  07F2  00CA               	movwf	BAUDS_set@index
  4894                           
  4895                           ;main.c: 859:     eeprom_update(0xFF, index);
  4896  07F3  084A               	movf	BAUDS_set@index,w
  4897  07F4  00C9               	movwf	??_BAUDS_set
  4898  07F5  0849               	movf	??_BAUDS_set,w
  4899  07F6  00C6               	movwf	eeprom_update@value
  4900  07F7  30FF               	movlw	255
  4901  07F8  158A  252B         	fcall	_eeprom_update
  4902  07FA  0008               	return
  4903  07FB                     __end_of_BAUDS_set:
  4904                           
  4905                           	psect	text19
  4906  0D2B                     __ptext19:	
  4907 ;; *************** function _eeprom_update *****************
  4908 ;; Defined at:
  4909 ;;		line 825 in file "main.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;  addr            1    wreg     unsigned char 
  4912 ;;  value           1    3[BANK0 ] unsigned char 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  addr            1    5[BANK0 ] unsigned char 
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      void 
  4917 ;; Registers used:
  4918 ;;		wreg, status,2, status,0, pclath, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 300/0
  4921 ;;		On exit  : 200/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4924 ;;      Params:         0       1       0       0
  4925 ;;      Locals:         0       1       0       0
  4926 ;;      Temps:          0       1       0       0
  4927 ;;      Totals:         0       3       0       0
  4928 ;;Total ram usage:        3 bytes
  4929 ;; Hardware stack levels used: 1
  4930 ;; Hardware stack levels required when called: 3
  4931 ;; This function calls:
  4932 ;;		_eeprom_read
  4933 ;;		_eeprom_write
  4934 ;; This function is called by:
  4935 ;;		_PRESET_save
  4936 ;;		_BAUDS_set
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940  0D2B                     _eeprom_update:	
  4941                           ;psect for function _eeprom_update
  4942                           
  4943                           
  4944                           ;incstack = 0
  4945                           ; Regs used in _eeprom_update: [wreg+status,2+status,0+pclath+cstack]
  4946                           ;eeprom_update@addr stored from wreg
  4947  0D2B  00C8               	movwf	eeprom_update@addr
  4948                           
  4949                           ;main.c: 826:     if (value != eeprom_read(addr)) {
  4950  0D2C  0848               	movf	eeprom_update@addr,w
  4951  0D2D  158A  254E  158A   	fcall	_eeprom_read
  4952  0D30  1283               	bcf	3,5	;RP0=0, select bank0
  4953  0D31  0646               	xorwf	eeprom_update@value,w
  4954  0D32  1903               	skipnz
  4955  0D33  0008               	return
  4956                           
  4957                           ;main.c: 827:         eeprom_write(addr, value);
  4958  0D34  0846               	movf	eeprom_update@value,w
  4959  0D35  00C7               	movwf	??_eeprom_update
  4960  0D36  0847               	movf	??_eeprom_update,w
  4961  0D37  00C3               	movwf	eeprom_write@value
  4962  0D38  0848               	movf	eeprom_update@addr,w
  4963  0D39  158A  2595         	fcall	_eeprom_write
  4964  0D3B  0008               	return
  4965  0D3C                     __end_of_eeprom_update:
  4966                           
  4967                           	psect	text20
  4968  0D95                     __ptext20:	
  4969 ;; *************** function _eeprom_write *****************
  4970 ;; Defined at:
  4971 ;;		line 6 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  addr            1    wreg     unsigned char 
  4974 ;;  value           1    0[BANK0 ] unsigned char 
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;  addr            1    2[BANK0 ] unsigned char 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  1    wreg      void 
  4979 ;; Registers used:
  4980 ;;		wreg, status,2, status,0
  4981 ;; Tracked objects:
  4982 ;;		On entry : 300/0
  4983 ;;		On exit  : 300/100
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4986 ;;      Params:         0       1       0       0
  4987 ;;      Locals:         0       1       0       0
  4988 ;;      Temps:          0       1       0       0
  4989 ;;      Totals:         0       3       0       0
  4990 ;;Total ram usage:        3 bytes
  4991 ;; Hardware stack levels used: 1
  4992 ;; Hardware stack levels required when called: 2
  4993 ;; This function calls:
  4994 ;;		Nothing
  4995 ;; This function is called by:
  4996 ;;		_eeprom_update
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000  0D95                     _eeprom_write:	
  5001                           ;psect for function _eeprom_write
  5002                           
  5003                           
  5004                           ;incstack = 0
  5005                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  5006                           ;eeprom_write@addr stored from wreg
  5007  0D95  00C5               	movwf	eeprom_write@addr
  5008  0D96                     l528:	
  5009                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 6: eeprom_write(unsigned char
      +                           addr, unsigned char value);/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 7:
      +                           {;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 8:  do{ while (EECON1bits.W
      +                          R) { continue; } EEADR = (addr); EEDATA = (value); EECON1 &= 0x3F; STATUSbits.CARRY = 0;
      +                           if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCONbits.GIE = 0; EECON1bits.WREN = 1; 
      +                          EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EECON1bits.WREN = 0; if (STATUSbits.CAR
      +                          RY) { INTCONbits.GIE = 1; } } while (0);
  5010                           
  5011  0D96  1683               	bsf	3,5	;RP0=1, select bank1
  5012  0D97  189C               	btfsc	28,1	;volsfr
  5013  0D98  2D96               	goto	l528
  5014  0D99  1283               	bcf	3,5	;RP0=0, select bank0
  5015  0D9A  0845               	movf	eeprom_write@addr,w
  5016  0D9B  1683               	bsf	3,5	;RP0=1, select bank1
  5017  0D9C  009B               	movwf	27	;volatile
  5018  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  5019  0D9E  0843               	movf	eeprom_write@value,w
  5020  0D9F  1683               	bsf	3,5	;RP0=1, select bank1
  5021  0DA0  009A               	movwf	26	;volatile
  5022  0DA1  303F               	movlw	63
  5023  0DA2  1283               	bcf	3,5	;RP0=0, select bank0
  5024  0DA3  00C4               	movwf	??_eeprom_write
  5025  0DA4  0844               	movf	??_eeprom_write,w
  5026  0DA5  1683               	bsf	3,5	;RP0=1, select bank1
  5027  0DA6  059C               	andwf	28,f	;volsfr
  5028  0DA7  1003               	bcf	3,0	;volatile
  5029  0DA8  1B8B               	btfsc	11,7	;volatile
  5030  0DA9  1403               	bsf	3,0	;volatile
  5031  0DAA  138B               	bcf	11,7	;volatile
  5032  0DAB  151C               	bsf	28,2	;volsfr
  5033  0DAC  3055               	movlw	85
  5034  0DAD  009D               	movwf	29	;volsfr
  5035  0DAE  30AA               	movlw	170
  5036  0DAF  009D               	movwf	29	;volsfr
  5037  0DB0  149C               	bsf	28,1	;volsfr
  5038  0DB1  111C               	bcf	28,2	;volsfr
  5039  0DB2  1C03               	btfss	3,0	;volatile
  5040  0DB3  0008               	return
  5041  0DB4  178B               	bsf	11,7	;volatile
  5042  0DB5  0008               	return
  5043  0DB6                     __end_of_eeprom_write:
  5044                           
  5045                           	psect	text21
  5046  0D4E                     __ptext21:	
  5047 ;; *************** function _eeprom_read *****************
  5048 ;; Defined at:
  5049 ;;		line 6 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  addr            1    wreg     unsigned char 
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;  addr            1    1[BANK0 ] unsigned char 
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  1    wreg      unsigned char 
  5056 ;; Registers used:
  5057 ;;		wreg, status,2, status,0
  5058 ;; Tracked objects:
  5059 ;;		On entry : 200/100
  5060 ;;		On exit  : 300/100
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5063 ;;      Params:         0       0       0       0
  5064 ;;      Locals:         0       1       0       0
  5065 ;;      Temps:          0       1       0       0
  5066 ;;      Totals:         0       2       0       0
  5067 ;;Total ram usage:        2 bytes
  5068 ;; Hardware stack levels used: 1
  5069 ;; Hardware stack levels required when called: 2
  5070 ;; This function calls:
  5071 ;;		Nothing
  5072 ;; This function is called by:
  5073 ;;		_eeprom_update
  5074 ;;		_PRESET_load
  5075 ;;		_BAUDS_get
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079  0D4E                     _eeprom_read:	
  5080                           ;psect for function _eeprom_read
  5081                           
  5082                           
  5083                           ;incstack = 0
  5084                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  5085                           ;eeprom_read@addr stored from wreg
  5086  0D4E  1283               	bcf	3,5	;RP0=0, select bank0
  5087  0D4F  00C4               	movwf	eeprom_read@addr
  5088  0D50  2D52               	goto	l508
  5089  0D51                     u3181:
  5090  0D51  1283               	bcf	3,5	;RP0=0, select bank0
  5091  0D52                     l508:	
  5092                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 6: eeprom_read(unsigned char a
      +                          ddr);/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 7: {;/opt/microchip/xc8/v2
      +                          .36/pic/sources/c90/pic/__eeread.c: 8:  do
  5093                           
  5094  0D52  0064               	clrwdt	;# 
  5095  0D53  1683               	bsf	3,5	;RP0=1, select bank1
  5096  0D54  1303               	bcf	3,6	;RP1=0, select bank1
  5097  0D55  189C               	btfsc	28,1	;volsfr
  5098  0D56  2D51               	goto	u3181
  5099                           
  5100                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 18:  return ( EEADR = addr, EE
      +                          CON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  5101  0D57  1283               	bcf	3,5	;RP0=0, select bank0
  5102  0D58  0844               	movf	eeprom_read@addr,w
  5103  0D59  1683               	bsf	3,5	;RP0=1, select bank1
  5104  0D5A  009B               	movwf	27	;volatile
  5105  0D5B  303F               	movlw	63
  5106  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  5107  0D5D  00C3               	movwf	??_eeprom_read
  5108  0D5E  0843               	movf	??_eeprom_read,w
  5109  0D5F  1683               	bsf	3,5	;RP0=1, select bank1
  5110  0D60  059C               	andwf	28,f	;volsfr
  5111  0D61  141C               	bsf	28,0	;volsfr
  5112  0D62  081A               	movf	26,w	;volatile
  5113  0D63  0008               	return
  5114  0D64                     __end_of_eeprom_read:
  5115                           
  5116                           	psect	text22
  5117  0595                     __ptext22:	
  5118 ;; *************** function _myISR *****************
  5119 ;; Defined at:
  5120 ;;		line 154 in file "main.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;		None
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;		None
  5125 ;; Return value:  Size  Location     Type
  5126 ;;                  1    wreg      void 
  5127 ;; Registers used:
  5128 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 300/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5134 ;;      Params:         0       0       0       0
  5135 ;;      Locals:         0       0       0       0
  5136 ;;      Temps:          5       0       0       0
  5137 ;;      Totals:         5       0       0       0
  5138 ;;Total ram usage:        5 bytes
  5139 ;; Hardware stack levels used: 2
  5140 ;; This function calls:
  5141 ;;		Nothing
  5142 ;; This function is called by:
  5143 ;;		Interrupt level 1
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147  0595                     _myISR:	
  5148                           ;psect for function _myISR
  5149                           
  5150                           
  5151                           ;main.c: 155:     if (PIR1bits.RCIF == 1) {
  5152  0595  1283               	bcf	3,5	;RP0=0, select bank0
  5153  0596  1303               	bcf	3,6	;RP1=0, select bank0
  5154  0597  1E8C               	btfss	12,5	;volatile
  5155  0598  2E05               	goto	i1l171
  5156                           
  5157                           ;main.c: 156:         data_receiv = RCREG;
  5158  0599  081A               	movf	26,w	;volatile
  5159  059A  00F5               	movwf	??_myISR
  5160  059B  0875               	movf	??_myISR,w
  5161  059C  00F4               	movwf	_data_receiv	;volatile
  5162                           
  5163                           ;main.c: 158:         PORTBbits.RB3 = !PORTBbits.RB3;
  5164  059D  1003               	clrc
  5165  059E  1D86               	btfss	6,3	;volatile
  5166  059F  1403               	setc
  5167  05A0  1C03               	btfss	3,0
  5168  05A1  2DA6               	goto	u228_20
  5169  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  5170  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  5171  05A4  1586               	bsf	6,3	;volatile
  5172  05A5  2DA9               	goto	i1l2554
  5173  05A6                     u228_20:
  5174  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  5175  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  5176  05A8  1186               	bcf	6,3	;volatile
  5177  05A9                     i1l2554:
  5178                           
  5179                           ;main.c: 160:         if (is_init == 1) {
  5180  05A9  0328               	decf	_is_init,w
  5181  05AA  1903               	btfsc	3,2
  5182  05AB  2F54               	goto	i1l173
  5183                           
  5184                           ;main.c: 164:         if (data_receiv == 0xFF) {
  5185  05AC  0A74               	incf	_data_receiv,w	;volatile
  5186  05AD  1D03               	btfss	3,2
  5187  05AE  2DB0               	goto	i1l2562
  5188                           
  5189                           ;main.c: 165:             timeout_receiv = 0;
  5190  05AF  01C1               	clrf	_timeout_receiv	;volatile
  5191  05B0                     i1l2562:
  5192                           
  5193                           ;main.c: 168:         if ((buffer_index2 <= 6) || ((buffer_index2 == 0) && (data_receiv 
      +                          == 0xFF))) {
  5194  05B0  3007               	movlw	7
  5195  05B1  0272               	subwf	_buffer_index2,w	;volatile
  5196  05B2  1C03               	skipc
  5197  05B3  2DBA               	goto	i1l2568
  5198  05B4  0872               	movf	_buffer_index2,w	;volatile
  5199  05B5  1D03               	btfss	3,2
  5200  05B6  2DEC               	goto	i1l2598
  5201  05B7  0A74               	incf	_data_receiv,w	;volatile
  5202  05B8  1D03               	btfss	3,2
  5203  05B9  2DEC               	goto	i1l2598
  5204  05BA                     i1l2568:
  5205                           
  5206                           ;main.c: 169:             if (buffer_index1 == 0) {
  5207  05BA  0873               	movf	_buffer_index1,w	;volatile
  5208  05BB  1D03               	btfss	3,2
  5209  05BC  2DC2               	goto	i1l2574
  5210                           
  5211                           ;main.c: 170:                 buffer_data0[buffer_index2++] = data_receiv;
  5212  05BD  0874               	movf	_data_receiv,w	;volatile
  5213  05BE  00F5               	movwf	??_myISR
  5214  05BF  0872               	movf	_buffer_index2,w
  5215  05C0  3EC3               	addlw	(low (_buffer_data0| 0))& (0+255)
  5216  05C1  2DE4               	goto	L22
  5217  05C2                     i1l2574:	
  5218                           ;main.c: 171:             } else if (buffer_index1 == 1) {
  5219                           
  5220  05C2  0373               	decf	_buffer_index1,w	;volatile
  5221  05C3  1D03               	btfss	3,2
  5222  05C4  2DCA               	goto	i1l2580
  5223                           
  5224                           ;main.c: 172:                 buffer_data1[buffer_index2++] = data_receiv;
  5225  05C5  0874               	movf	_data_receiv,w	;volatile
  5226  05C6  00F5               	movwf	??_myISR
  5227  05C7  0872               	movf	_buffer_index2,w
  5228  05C8  3EBC               	addlw	(low (_buffer_data1| 0))& (0+255)
  5229  05C9  2DE4               	goto	L22
  5230  05CA                     i1l2580:
  5231  05CA  3002               	movlw	2
  5232  05CB  0673               	xorwf	_buffer_index1,w	;volatile
  5233  05CC  1D03               	btfss	3,2
  5234  05CD  2DD3               	goto	i1l2586
  5235                           
  5236                           ;main.c: 174:                 buffer_data2[buffer_index2++] = data_receiv;
  5237  05CE  0874               	movf	_data_receiv,w	;volatile
  5238  05CF  00F5               	movwf	??_myISR
  5239  05D0  0872               	movf	_buffer_index2,w
  5240  05D1  3EB5               	addlw	(low (_buffer_data2| 0))& (0+255)
  5241  05D2  2DE4               	goto	L22
  5242  05D3                     i1l2586:
  5243  05D3  3003               	movlw	3
  5244  05D4  0673               	xorwf	_buffer_index1,w	;volatile
  5245  05D5  1D03               	btfss	3,2
  5246  05D6  2DDC               	goto	i1l2592
  5247                           
  5248                           ;main.c: 176:                 buffer_data3[buffer_index2++] = data_receiv;
  5249  05D7  0874               	movf	_data_receiv,w	;volatile
  5250  05D8  00F5               	movwf	??_myISR
  5251  05D9  0872               	movf	_buffer_index2,w
  5252  05DA  3EAE               	addlw	(low (_buffer_data3| 0))& (0+255)
  5253  05DB  2DE4               	goto	L22
  5254  05DC                     i1l2592:
  5255  05DC  3004               	movlw	4
  5256  05DD  0673               	xorwf	_buffer_index1,w	;volatile
  5257  05DE  1D03               	btfss	3,2
  5258  05DF  2DEC               	goto	i1l2598
  5259                           
  5260                           ;main.c: 178:                 buffer_data4[buffer_index2++] = data_receiv;
  5261  05E0  0874               	movf	_data_receiv,w	;volatile
  5262  05E1  00F5               	movwf	??_myISR
  5263  05E2  0872               	movf	_buffer_index2,w
  5264  05E3  3EA7               	addlw	(low (_buffer_data4| 0))& (0+255)
  5265  05E4                     L22:
  5266  05E4  0084               	movwf	4
  5267  05E5  0875               	movf	??_myISR,w
  5268  05E6  1383               	bcf	3,7	;select IRP bank1
  5269  05E7  0080               	movwf	0
  5270  05E8  3001               	movlw	1
  5271  05E9  00F5               	movwf	??_myISR
  5272  05EA  0875               	movf	??_myISR,w
  5273  05EB  07F2               	addwf	_buffer_index2,f	;volatile
  5274  05EC                     i1l2598:
  5275                           
  5276                           ;main.c: 182:         if (buffer_index2 == 7) {
  5277  05EC  3007               	movlw	7
  5278  05ED  0672               	xorwf	_buffer_index2,w	;volatile
  5279  05EE  1D03               	btfss	3,2
  5280  05EF  2E03               	goto	i1l2610
  5281                           
  5282                           ;main.c: 183:             buffer_index2 = 0;
  5283  05F0  01F2               	clrf	_buffer_index2	;volatile
  5284                           
  5285                           ;main.c: 185:             buffer_ready[buffer_index1] = 1;
  5286  05F1  3001               	movlw	1
  5287  05F2  00F5               	movwf	??_myISR
  5288  05F3  0873               	movf	_buffer_index1,w
  5289  05F4  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  5290  05F5  0084               	movwf	4
  5291  05F6  0875               	movf	??_myISR,w
  5292  05F7  1383               	bcf	3,7	;select IRP bank1
  5293  05F8  0080               	movwf	0
  5294                           
  5295                           ;main.c: 187:             if (buffer_index1 < 4) {
  5296  05F9  3004               	movlw	4
  5297  05FA  0273               	subwf	_buffer_index1,w	;volatile
  5298  05FB  1803               	skipnc
  5299  05FC  2E02               	goto	i1l2608
  5300                           
  5301                           ;main.c: 188:                 buffer_index1++;
  5302  05FD  3001               	movlw	1
  5303  05FE  00F5               	movwf	??_myISR
  5304  05FF  0875               	movf	??_myISR,w
  5305  0600  07F3               	addwf	_buffer_index1,f	;volatile
  5306                           
  5307                           ;main.c: 189:             } else {
  5308  0601  2E03               	goto	i1l2610
  5309  0602                     i1l2608:
  5310                           
  5311                           ;main.c: 190:                 buffer_index1 = 0;
  5312  0602  01F3               	clrf	_buffer_index1	;volatile
  5313  0603                     i1l2610:
  5314                           
  5315                           ;main.c: 194:         PIR1bits.RCIF = 0;
  5316  0603  128C               	bcf	12,5	;volatile
  5317                           
  5318                           ;main.c: 195:     } else if (PIR1bits.TMR1IF == 1) {
  5319  0604  2F54               	goto	i1l173
  5320  0605                     i1l171:
  5321  0605  1C0C               	btfss	12,0	;volatile
  5322  0606  2F54               	goto	i1l173
  5323                           
  5324                           ;main.c: 197:         PIE1bits.TMR1IE = 1;
  5325  0607  1683               	bsf	3,5	;RP0=1, select bank1
  5326  0608  140C               	bsf	12,0	;volatile
  5327                           
  5328                           ;main.c: 198:         TMR1H = 255;
  5329  0609  30FF               	movlw	255
  5330  060A  1283               	bcf	3,5	;RP0=0, select bank0
  5331  060B  008F               	movwf	15	;volatile
  5332                           
  5333                           ;main.c: 199:         TMR1L = 131;
  5334  060C  3083               	movlw	131
  5335  060D  008E               	movwf	14	;volatile
  5336                           
  5337                           ;main.c: 201:         if (timeout_receiv < 15) {
  5338  060E  300F               	movlw	15
  5339  060F  0241               	subwf	_timeout_receiv,w	;volatile
  5340  0610  1803               	skipnc
  5341  0611  2E17               	goto	i1l2618
  5342                           
  5343                           ;main.c: 202:             timeout_receiv++;
  5344  0612  3001               	movlw	1
  5345  0613  00F5               	movwf	??_myISR
  5346  0614  0875               	movf	??_myISR,w
  5347  0615  07C1               	addwf	_timeout_receiv,f	;volatile
  5348                           
  5349                           ;main.c: 203:         } else if (buffer_index2 > 0) {
  5350  0616  2E1B               	goto	i1l2622
  5351  0617                     i1l2618:
  5352  0617  0872               	movf	_buffer_index2,w	;volatile
  5353  0618  1903               	btfsc	3,2
  5354  0619  2E1B               	goto	i1l2622
  5355                           
  5356                           ;main.c: 204:             buffer_index2 = 0;
  5357  061A  01F2               	clrf	_buffer_index2	;volatile
  5358  061B                     i1l2622:
  5359                           
  5360                           ;main.c: 207:         if (timer1_pan < timer1_pan_ref) {
  5361  061B  0833               	movf	_timer1_pan_ref,w	;volatile
  5362  061C  0235               	subwf	_timer1_pan,w	;volatile
  5363  061D  1803               	skipnc
  5364  061E  2E24               	goto	i1l2626
  5365                           
  5366                           ;main.c: 208:             timer1_pan++;
  5367  061F  3001               	movlw	1
  5368  0620  00F5               	movwf	??_myISR
  5369  0621  0875               	movf	??_myISR,w
  5370  0622  07B5               	addwf	_timer1_pan,f	;volatile
  5371                           
  5372                           ;main.c: 209:         } else {
  5373  0623  2EB6               	goto	i1l2668
  5374  0624                     i1l2626:
  5375                           
  5376                           ;main.c: 210:             timer1_pan = 0;
  5377  0624  01B5               	clrf	_timer1_pan	;volatile
  5378                           
  5379                           ;main.c: 214:             if (pan_enabled == 1) {
  5380  0625  033C               	decf	_pan_enabled,w	;volatile
  5381  0626  1D03               	btfss	3,2
  5382  0627  2EB2               	goto	i1l197
  5383                           
  5384                           ;main.c: 215:                 if (pan_direction == 0) {
  5385  0628  083B               	movf	_pan_direction,w	;volatile
  5386  0629  1D03               	btfss	3,2
  5387  062A  2E47               	goto	i1l2644
  5388                           
  5389                           ;main.c: 216:                     if (pan_counter < 12000) {
  5390  062B  302E               	movlw	46
  5391  062C  0227               	subwf	_pan_counter+1,w	;volatile
  5392  062D  30E0               	movlw	224
  5393  062E  1903               	skipnz
  5394  062F  0226               	subwf	_pan_counter,w	;volatile
  5395  0630  1803               	skipnc
  5396  0631  2E5E               	goto	i1l2654
  5397                           
  5398                           ;main.c: 217:                         pan_counter++;
  5399  0632  3001               	movlw	1
  5400  0633  07A6               	addwf	_pan_counter,f	;volatile
  5401  0634  1803               	skipnc
  5402  0635  0AA7               	incf	_pan_counter+1,f	;volatile
  5403  0636  3000               	movlw	0
  5404  0637  07A7               	addwf	_pan_counter+1,f	;volatile
  5405                           
  5406                           ;main.c: 219:                         if ((pan_step_phase == 0) || (pan_step_phase > 7))
      +                           {
  5407  0638  0871               	movf	_pan_step_phase,w	;volatile
  5408  0639  1903               	btfsc	3,2
  5409  063A  2E3F               	goto	i1l2640
  5410  063B  3008               	movlw	8
  5411  063C  0271               	subwf	_pan_step_phase,w	;volatile
  5412  063D  1C03               	skipc
  5413  063E  2E44               	goto	i1l2642
  5414  063F                     i1l2640:
  5415                           
  5416                           ;main.c: 220:                             pan_step_phase = 7;
  5417  063F  3007               	movlw	7
  5418  0640  00F5               	movwf	??_myISR
  5419  0641  0875               	movf	??_myISR,w
  5420  0642  00F1               	movwf	_pan_step_phase	;volatile
  5421                           
  5422                           ;main.c: 221:                         } else {
  5423  0643  2E5E               	goto	i1l2654
  5424  0644                     i1l2642:
  5425                           
  5426                           ;main.c: 222:                             pan_step_phase--;
  5427  0644  3001               	movlw	1
  5428  0645  02F1               	subwf	_pan_step_phase,f	;volatile
  5429  0646  2E5E               	goto	i1l2654
  5430  0647                     i1l2644:
  5431                           
  5432                           ;main.c: 226:                     if ((pan_counter > 0) || (is_init == 1)) {
  5433  0647  0826               	movf	_pan_counter,w	;volatile
  5434  0648  0427               	iorwf	_pan_counter+1,w	;volatile
  5435  0649  1D03               	btfss	3,2
  5436  064A  2E4E               	goto	i1l2648
  5437  064B  0328               	decf	_is_init,w
  5438  064C  1D03               	btfss	3,2
  5439  064D  2E5E               	goto	i1l2654
  5440  064E                     i1l2648:
  5441                           
  5442                           ;main.c: 227:                         pan_counter--;
  5443  064E  3001               	movlw	1
  5444  064F  02A6               	subwf	_pan_counter,f	;volatile
  5445  0650  3000               	movlw	0
  5446  0651  1C03               	skipc
  5447  0652  03A7               	decf	_pan_counter+1,f	;volatile
  5448  0653  02A7               	subwf	_pan_counter+1,f	;volatile
  5449                           
  5450                           ;main.c: 229:                         if (pan_step_phase >= 7) {
  5451  0654  3007               	movlw	7
  5452  0655  0271               	subwf	_pan_step_phase,w	;volatile
  5453  0656  1C03               	skipc
  5454  0657  2E5A               	goto	i1l2652
  5455                           
  5456                           ;main.c: 230:                             pan_step_phase = 0;
  5457  0658  01F1               	clrf	_pan_step_phase	;volatile
  5458                           
  5459                           ;main.c: 231:                         } else {
  5460  0659  2E5E               	goto	i1l2654
  5461  065A                     i1l2652:
  5462                           
  5463                           ;main.c: 232:                             pan_step_phase++;
  5464  065A  3001               	movlw	1
  5465  065B  00F5               	movwf	??_myISR
  5466  065C  0875               	movf	??_myISR,w
  5467  065D  07F1               	addwf	_pan_step_phase,f	;volatile
  5468  065E                     i1l2654:
  5469                           
  5470                           ;main.c: 237:                 if (pan_goto == pan_counter) {
  5471  065E  0827               	movf	_pan_counter+1,w	;volatile
  5472  065F  0623               	xorwf	_pan_goto+1,w	;volatile
  5473  0660  1D03               	skipz
  5474  0661  2E64               	goto	u254_25
  5475  0662  0826               	movf	_pan_counter,w	;volatile
  5476  0663  0622               	xorwf	_pan_goto,w	;volatile
  5477  0664                     u254_25:
  5478  0664  1D03               	skipz
  5479  0665  2E6B               	goto	i1l2660
  5480                           
  5481                           ;main.c: 238:                     if (preset_pan_enabled == 1) {
  5482  0666  0340               	decf	_preset_pan_enabled,w	;volatile
  5483  0667  1D03               	btfss	3,2
  5484  0668  2E6B               	goto	i1l2660
  5485                           
  5486                           ;main.c: 239:                         preset_pan_enabled = 0;
  5487  0669  01C0               	clrf	_preset_pan_enabled	;volatile
  5488                           
  5489                           ;main.c: 241:                         pan_enabled = 0;
  5490  066A  01BC               	clrf	_pan_enabled	;volatile
  5491  066B                     i1l2660:
  5492                           
  5493                           ;main.c: 245:                 PORTAbits.RA0 = steps_1A[pan_step_phase];
  5494  066B  0871               	movf	_pan_step_phase,w
  5495  066C  3E32               	addlw	low (_steps_1A| (0+32768))
  5496  066D  0084               	movwf	4
  5497  066E  3088               	movlw	high (_steps_1A| (0+32768))
  5498  066F  1803               	skipnc
  5499  0670  3E01               	addlw	1
  5500  0671  00FF               	movwf	127
  5501  0672  158A  2000  118A   	fcall	stringtab
  5502  0675  00F5               	movwf	??_myISR
  5503  0676  0805               	movf	5,w	;volatile
  5504  0677  0675               	xorwf	??_myISR,w
  5505  0678  39FE               	andlw	-2
  5506  0679  0675               	xorwf	??_myISR,w
  5507  067A  0085               	movwf	5	;volatile
  5508                           
  5509                           ;main.c: 246:                 PORTAbits.RA7 = steps_1B[pan_step_phase];
  5510  067B  0871               	movf	_pan_step_phase,w
  5511  067C  3E2A               	addlw	low (_steps_1B| (0+32768))
  5512  067D  0084               	movwf	4
  5513  067E  3088               	movlw	high (_steps_1B| (0+32768))
  5514  067F  1803               	skipnc
  5515  0680  3E01               	addlw	1
  5516  0681  00FF               	movwf	127
  5517  0682  158A  2000  118A   	fcall	stringtab
  5518  0685  00F5               	movwf	??_myISR
  5519  0686  0CF5               	rrf	??_myISR,f
  5520  0687  0CF5               	rrf	??_myISR,f
  5521  0688  0805               	movf	5,w	;volatile
  5522  0689  0675               	xorwf	??_myISR,w
  5523  068A  397F               	andlw	-129
  5524  068B  0675               	xorwf	??_myISR,w
  5525  068C  0085               	movwf	5	;volatile
  5526                           
  5527                           ;main.c: 247:                 PORTAbits.RA6 = steps_2A[pan_step_phase];
  5528  068D  0871               	movf	_pan_step_phase,w
  5529  068E  3E22               	addlw	low (_steps_2A| (0+32768))
  5530  068F  0084               	movwf	4
  5531  0690  3088               	movlw	high (_steps_2A| (0+32768))
  5532  0691  1803               	skipnc
  5533  0692  3E01               	addlw	1
  5534  0693  00FF               	movwf	127
  5535  0694  158A  2000  118A   	fcall	stringtab
  5536  0697  00F5               	movwf	??_myISR
  5537  0698  0EF5               	swapf	??_myISR,f
  5538  0699  0DF5               	rlf	??_myISR,f
  5539  069A  0DF5               	rlf	??_myISR,f
  5540  069B  0805               	movf	5,w	;volatile
  5541  069C  0675               	xorwf	??_myISR,w
  5542  069D  39BF               	andlw	-65
  5543  069E  0675               	xorwf	??_myISR,w
  5544  069F  0085               	movwf	5	;volatile
  5545                           
  5546                           ;main.c: 248:                 PORTAbits.RA1 = steps_2B[pan_step_phase];
  5547  06A0  0871               	movf	_pan_step_phase,w
  5548  06A1  3E1A               	addlw	low (_steps_2B| (0+32768))
  5549  06A2  0084               	movwf	4
  5550  06A3  3088               	movlw	high (_steps_2B| (0+32768))
  5551  06A4  1803               	skipnc
  5552  06A5  3E01               	addlw	1
  5553  06A6  00FF               	movwf	127
  5554  06A7  158A  2000  118A   	fcall	stringtab
  5555  06AA  00F5               	movwf	??_myISR
  5556  06AB  0DF5               	rlf	??_myISR,f
  5557  06AC  0805               	movf	5,w	;volatile
  5558  06AD  0675               	xorwf	??_myISR,w
  5559  06AE  39FD               	andlw	-3
  5560  06AF  0675               	xorwf	??_myISR,w
  5561  06B0  0085               	movwf	5	;volatile
  5562                           
  5563                           ;main.c: 249:             } else {
  5564  06B1  2EB6               	goto	i1l2668
  5565  06B2                     i1l197:
  5566                           
  5567                           ;main.c: 250:                 PORTAbits.RA0 = 0;
  5568  06B2  1005               	bcf	5,0	;volatile
  5569                           
  5570                           ;main.c: 251:                 PORTAbits.RA7 = 0;
  5571  06B3  1385               	bcf	5,7	;volatile
  5572                           
  5573                           ;main.c: 252:                 PORTAbits.RA6 = 0;
  5574  06B4  1305               	bcf	5,6	;volatile
  5575                           
  5576                           ;main.c: 253:                 PORTAbits.RA1 = 0;
  5577  06B5  1085               	bcf	5,1	;volatile
  5578  06B6                     i1l2668:
  5579                           
  5580                           ;main.c: 259:         if (timer1_tilt < timer1_tilt_ref) {
  5581  06B6  0832               	movf	_timer1_tilt_ref,w	;volatile
  5582  06B7  0234               	subwf	_timer1_tilt,w	;volatile
  5583  06B8  1803               	skipnc
  5584  06B9  2EBF               	goto	i1l2672
  5585                           
  5586                           ;main.c: 260:             timer1_tilt++;
  5587  06BA  3001               	movlw	1
  5588  06BB  00F5               	movwf	??_myISR
  5589  06BC  0875               	movf	??_myISR,w
  5590  06BD  07B4               	addwf	_timer1_tilt,f	;volatile
  5591                           
  5592                           ;main.c: 261:         } else {
  5593  06BE  2F53               	goto	i1l214
  5594  06BF                     i1l2672:
  5595                           
  5596                           ;main.c: 262:             timer1_tilt = 0;
  5597  06BF  01B4               	clrf	_timer1_tilt	;volatile
  5598                           
  5599                           ;main.c: 264:             if (tilt_enabled == 1) {
  5600  06C0  0338               	decf	_tilt_enabled,w	;volatile
  5601  06C1  1D03               	btfss	3,2
  5602  06C2  2F4F               	goto	i1l215
  5603                           
  5604                           ;main.c: 265:                 if (tilt_direction == 0) {
  5605  06C3  0837               	movf	_tilt_direction,w	;volatile
  5606  06C4  1D03               	btfss	3,2
  5607  06C5  2EE2               	goto	i1l2690
  5608                           
  5609                           ;main.c: 266:                     if (tilt_counter < 2800) {
  5610  06C6  300A               	movlw	10
  5611  06C7  0225               	subwf	_tilt_counter+1,w	;volatile
  5612  06C8  30F0               	movlw	240
  5613  06C9  1903               	skipnz
  5614  06CA  0224               	subwf	_tilt_counter,w	;volatile
  5615  06CB  1803               	skipnc
  5616  06CC  2EF9               	goto	i1l2700
  5617                           
  5618                           ;main.c: 267:                         tilt_counter++;
  5619  06CD  3001               	movlw	1
  5620  06CE  07A4               	addwf	_tilt_counter,f	;volatile
  5621  06CF  1803               	skipnc
  5622  06D0  0AA5               	incf	_tilt_counter+1,f	;volatile
  5623  06D1  3000               	movlw	0
  5624  06D2  07A5               	addwf	_tilt_counter+1,f	;volatile
  5625                           
  5626                           ;main.c: 269:                         if ((tilt_step_phase == 0) || (tilt_step_phase > 7
      +                          )) {
  5627  06D3  0870               	movf	_tilt_step_phase,w	;volatile
  5628  06D4  1903               	btfsc	3,2
  5629  06D5  2EDA               	goto	i1l2686
  5630  06D6  3008               	movlw	8
  5631  06D7  0270               	subwf	_tilt_step_phase,w	;volatile
  5632  06D8  1C03               	skipc
  5633  06D9  2EDF               	goto	i1l2688
  5634  06DA                     i1l2686:
  5635                           
  5636                           ;main.c: 270:                             tilt_step_phase = 7;
  5637  06DA  3007               	movlw	7
  5638  06DB  00F5               	movwf	??_myISR
  5639  06DC  0875               	movf	??_myISR,w
  5640  06DD  00F0               	movwf	_tilt_step_phase	;volatile
  5641                           
  5642                           ;main.c: 271:                         } else {
  5643  06DE  2EF9               	goto	i1l2700
  5644  06DF                     i1l2688:
  5645                           
  5646                           ;main.c: 272:                             tilt_step_phase--;
  5647  06DF  3001               	movlw	1
  5648  06E0  02F0               	subwf	_tilt_step_phase,f	;volatile
  5649  06E1  2EF9               	goto	i1l2700
  5650  06E2                     i1l2690:
  5651                           
  5652                           ;main.c: 276:                     if ((tilt_counter > 0) || (is_init == 1)) {
  5653  06E2  0824               	movf	_tilt_counter,w	;volatile
  5654  06E3  0425               	iorwf	_tilt_counter+1,w	;volatile
  5655  06E4  1D03               	btfss	3,2
  5656  06E5  2EE9               	goto	i1l2694
  5657  06E6  0328               	decf	_is_init,w
  5658  06E7  1D03               	btfss	3,2
  5659  06E8  2EF9               	goto	i1l2700
  5660  06E9                     i1l2694:
  5661                           
  5662                           ;main.c: 277:                         tilt_counter--;
  5663  06E9  3001               	movlw	1
  5664  06EA  02A4               	subwf	_tilt_counter,f	;volatile
  5665  06EB  3000               	movlw	0
  5666  06EC  1C03               	skipc
  5667  06ED  03A5               	decf	_tilt_counter+1,f	;volatile
  5668  06EE  02A5               	subwf	_tilt_counter+1,f	;volatile
  5669                           
  5670                           ;main.c: 279:                         if (tilt_step_phase >= 7) {
  5671  06EF  3007               	movlw	7
  5672  06F0  0270               	subwf	_tilt_step_phase,w	;volatile
  5673  06F1  1C03               	skipc
  5674  06F2  2EF5               	goto	i1l2698
  5675                           
  5676                           ;main.c: 280:                             tilt_step_phase = 0;
  5677  06F3  01F0               	clrf	_tilt_step_phase	;volatile
  5678                           
  5679                           ;main.c: 281:                         } else {
  5680  06F4  2EF9               	goto	i1l2700
  5681  06F5                     i1l2698:
  5682                           
  5683                           ;main.c: 282:                             tilt_step_phase++;
  5684  06F5  3001               	movlw	1
  5685  06F6  00F5               	movwf	??_myISR
  5686  06F7  0875               	movf	??_myISR,w
  5687  06F8  07F0               	addwf	_tilt_step_phase,f	;volatile
  5688  06F9                     i1l2700:
  5689                           
  5690                           ;main.c: 287:                 if (tilt_goto == tilt_counter) {
  5691  06F9  0825               	movf	_tilt_counter+1,w	;volatile
  5692  06FA  0621               	xorwf	_tilt_goto+1,w	;volatile
  5693  06FB  1D03               	skipz
  5694  06FC  2EFF               	goto	u265_25
  5695  06FD  0824               	movf	_tilt_counter,w	;volatile
  5696  06FE  0620               	xorwf	_tilt_goto,w	;volatile
  5697  06FF                     u265_25:
  5698  06FF  1D03               	skipz
  5699  0700  2F06               	goto	i1l2706
  5700                           
  5701                           ;main.c: 288:                     if (preset_tilt_enabled == 1) {
  5702  0701  033E               	decf	_preset_tilt_enabled,w	;volatile
  5703  0702  1D03               	btfss	3,2
  5704  0703  2F06               	goto	i1l2706
  5705                           
  5706                           ;main.c: 289:                         preset_tilt_enabled = 0;
  5707  0704  01BE               	clrf	_preset_tilt_enabled	;volatile
  5708                           
  5709                           ;main.c: 291:                         tilt_enabled = 0;
  5710  0705  01B8               	clrf	_tilt_enabled	;volatile
  5711  0706                     i1l2706:
  5712                           
  5713                           ;main.c: 295:                 PORTBbits.RB4 = steps_1A[tilt_step_phase];
  5714  0706  0870               	movf	_tilt_step_phase,w
  5715  0707  3E32               	addlw	low (_steps_1A| (0+32768))
  5716  0708  0084               	movwf	4
  5717  0709  3088               	movlw	high (_steps_1A| (0+32768))
  5718  070A  1803               	skipnc
  5719  070B  3E01               	addlw	1
  5720  070C  00FF               	movwf	127
  5721  070D  158A  2000  118A   	fcall	stringtab
  5722  0710  00F5               	movwf	??_myISR
  5723  0711  0EF5               	swapf	??_myISR,f
  5724  0712  0806               	movf	6,w	;volatile
  5725  0713  0675               	xorwf	??_myISR,w
  5726  0714  39EF               	andlw	-17
  5727  0715  0675               	xorwf	??_myISR,w
  5728  0716  0086               	movwf	6	;volatile
  5729                           
  5730                           ;main.c: 296:                 PORTBbits.RB5 = steps_1B[tilt_step_phase];
  5731  0717  0870               	movf	_tilt_step_phase,w
  5732  0718  3E2A               	addlw	low (_steps_1B| (0+32768))
  5733  0719  0084               	movwf	4
  5734  071A  3088               	movlw	high (_steps_1B| (0+32768))
  5735  071B  1803               	skipnc
  5736  071C  3E01               	addlw	1
  5737  071D  00FF               	movwf	127
  5738  071E  158A  2000  118A   	fcall	stringtab
  5739  0721  00F5               	movwf	??_myISR
  5740  0722  0EF5               	swapf	??_myISR,f
  5741  0723  0DF5               	rlf	??_myISR,f
  5742  0724  0806               	movf	6,w	;volatile
  5743  0725  0675               	xorwf	??_myISR,w
  5744  0726  39DF               	andlw	-33
  5745  0727  0675               	xorwf	??_myISR,w
  5746  0728  0086               	movwf	6	;volatile
  5747                           
  5748                           ;main.c: 297:                 PORTBbits.RB6 = steps_2A[tilt_step_phase];
  5749  0729  0870               	movf	_tilt_step_phase,w
  5750  072A  3E22               	addlw	low (_steps_2A| (0+32768))
  5751  072B  0084               	movwf	4
  5752  072C  3088               	movlw	high (_steps_2A| (0+32768))
  5753  072D  1803               	skipnc
  5754  072E  3E01               	addlw	1
  5755  072F  00FF               	movwf	127
  5756  0730  158A  2000  118A   	fcall	stringtab
  5757  0733  00F5               	movwf	??_myISR
  5758  0734  0EF5               	swapf	??_myISR,f
  5759  0735  0DF5               	rlf	??_myISR,f
  5760  0736  0DF5               	rlf	??_myISR,f
  5761  0737  0806               	movf	6,w	;volatile
  5762  0738  0675               	xorwf	??_myISR,w
  5763  0739  39BF               	andlw	-65
  5764  073A  0675               	xorwf	??_myISR,w
  5765  073B  0086               	movwf	6	;volatile
  5766                           
  5767                           ;main.c: 298:                 PORTBbits.RB7 = steps_2B[tilt_step_phase];
  5768  073C  0870               	movf	_tilt_step_phase,w
  5769  073D  3E1A               	addlw	low (_steps_2B| (0+32768))
  5770  073E  0084               	movwf	4
  5771  073F  3088               	movlw	high (_steps_2B| (0+32768))
  5772  0740  1803               	skipnc
  5773  0741  3E01               	addlw	1
  5774  0742  00FF               	movwf	127
  5775  0743  158A  2000  118A   	fcall	stringtab
  5776  0746  00F5               	movwf	??_myISR
  5777  0747  0CF5               	rrf	??_myISR,f
  5778  0748  0CF5               	rrf	??_myISR,f
  5779  0749  0806               	movf	6,w	;volatile
  5780  074A  0675               	xorwf	??_myISR,w
  5781  074B  397F               	andlw	-129
  5782  074C  0675               	xorwf	??_myISR,w
  5783  074D  0086               	movwf	6	;volatile
  5784                           
  5785                           ;main.c: 299:             } else {
  5786  074E  2F53               	goto	i1l214
  5787  074F                     i1l215:
  5788                           
  5789                           ;main.c: 300:                 PORTBbits.RB4 = 0;
  5790  074F  1206               	bcf	6,4	;volatile
  5791                           
  5792                           ;main.c: 301:                 PORTBbits.RB5 = 0;
  5793  0750  1286               	bcf	6,5	;volatile
  5794                           
  5795                           ;main.c: 302:                 PORTBbits.RB6 = 0;
  5796  0751  1306               	bcf	6,6	;volatile
  5797                           
  5798                           ;main.c: 303:                 PORTBbits.RB7 = 0;
  5799  0752  1386               	bcf	6,7	;volatile
  5800  0753                     i1l214:	
  5801                           ;main.c: 305:         }
  5802                           
  5803                           
  5804                           ;main.c: 307:         PIR1bits.TMR1IF = 0;
  5805  0753  100C               	bcf	12,0	;volatile
  5806  0754                     i1l173:
  5807  0754  0879               	movf	??_myISR+4,w
  5808  0755  00FF               	movwf	127
  5809  0756  0878               	movf	??_myISR+3,w
  5810  0757  008A               	movwf	10
  5811  0758  0877               	movf	??_myISR+2,w
  5812  0759  0084               	movwf	4
  5813  075A  0E76               	swapf	??_myISR+1,w
  5814  075B  0083               	movwf	3
  5815  075C  0EFE               	swapf	126,f
  5816  075D  0E7E               	swapf	126,w
  5817  075E  0009               	retfie
  5818  075F                     __end_of_myISR:
  5819  007E                     btemp	set	126	;btemp
  5820  007E                     wtemp0	set	126
  5821                           
  5822                           	psect	intentry
  5823  0004                     __pintentry:	
  5824                           ;incstack = 0
  5825                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5826                           
  5827  0004                     interrupt_function:
  5828  007E                     saved_w	set	btemp
  5829  0004  00FE               	movwf	btemp
  5830  0005  0E03               	swapf	3,w
  5831  0006  00F6               	movwf	??_myISR+1
  5832  0007  0804               	movf	4,w
  5833  0008  00F7               	movwf	??_myISR+2
  5834  0009  080A               	movf	10,w
  5835  000A  00F8               	movwf	??_myISR+3
  5836  000B  087F               	movf	btemp+1,w
  5837  000C  00F9               	movwf	??_myISR+4
  5838  000D  118A  2D95         	ljmp	_myISR
  5839                           
  5840                           	psect	config
  5841                           
  5842                           ;Config register CONFIG @ 0x2007
  5843                           ;	Oscillator Selection bits
  5844                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  5845                           ;	Watchdog Timer Enable bit
  5846                           ;	WDTE = ON, WDT enabled
  5847                           ;	Power-up Timer Enable bit
  5848                           ;	PWRTE = ON, PWRT enabled
  5849                           ;	RA5/MCLR/VPP Pin Function Select bit
  5850                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  5851                           ;	Brown-out Detect Enable bit
  5852                           ;	BOREN = ON, BOD enabled
  5853                           ;	Low-Voltage Programming Enable bit
  5854                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  5855                           ;	Data EE Memory Code Protection bit
  5856                           ;	CPD = OFF, Data memory code protection off
  5857                           ;	Flash Program Memory Code Protection bit
  5858                           ;	CP = OFF, Code protection off
  5859  2007                     	org	8199
  5860  2007  3F54               	dw	16212

Data Sizes:
    Strings     234
    Constant    40
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     32      67
    BANK1            80     17      68
    BANK2            80      0       0

Pointer List with Targets:

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 25
		 -> STR_33(CODE[3]), STR_32(CODE[4]), STR_31(CODE[5]), STR_30(CODE[4]), 
		 -> STR_29(CODE[7]), STR_28(CODE[4]), STR_27(CODE[8]), STR_26(CODE[4]), 
		 -> STR_25(CODE[7]), STR_24(CODE[4]), STR_23(CODE[3]), STR_22(CODE[13]), 
		 -> STR_21(CODE[4]), STR_20(CODE[3]), STR_19(CODE[14]), STR_18(CODE[4]), 
		 -> STR_17(CODE[3]), STR_16(CODE[12]), STR_15(CODE[4]), STR_14(CODE[7]), 
		 -> STR_13(CODE[16]), STR_12(CODE[18]), STR_11(CODE[7]), STR_10(CODE[9]), 
		 -> STR_9(CODE[8]), STR_8(CODE[8]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[14]), STR_4(CODE[9]), STR_3(CODE[23]), STR_2(CODE[25]), 
		 -> STR_1(CODE[12]), 

    PRESET_load@tilt	PTR unsigned int  size(1) Largest target is 2
		 -> main@tilt_tmp_422(BANK1[2]), main@tilt_tmp(BANK1[2]), 

    PRESET_load@pan	PTR unsigned int  size(1) Largest target is 2
		 -> main@pan_tmp_421(BANK1[2]), main@pan_tmp(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_print_cnt
    _print_cnt->_UART_Write_Text
    _UART_Write_Text->_UART_Write
    _BAUDS_get->_eeprom_read
    _SPEED_calc->___awdiv
    _PRESET_save->_eeprom_update
    _PRESET_load->_eeprom_read
    _MOTOR_Init->_delay_wdt
    _BAUDS_set->_eeprom_update
    _eeprom_update->_eeprom_write

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   20854
                                             30 BANK0      2     2      0
                                              0 BANK1     17    17      0
                          _BAUDS_set
                         _MOTOR_Init
                        _PRESET_load
                        _PRESET_save
                         _SPEED_calc
                        _TIMER1_Init
                          _UART_Init
                         _UART_Write
                    _UART_Write_Text
                            _UC_Init
                             ___bmul
                            ___lbdiv
                          _delay_wdt
                          _print_cnt
 ---------------------------------------------------------------------------------
 (1) _print_cnt                                           14    10      4    9520
                                             16 BANK0     14    10      4
                         _UART_Write
                    _UART_Write_Text
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1576
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4    1681
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      7     5      2    3168
                                              9 BANK0      7     5      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           9     9      0      68
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) ___lbdiv                                              5     4      1     511
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     406
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UC_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            3     3      0      65
                                              2 BANK0      3     3      0
                          _BAUDS_get
 ---------------------------------------------------------------------------------
 (2) _BAUDS_get                                            0     0      0      31
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _TIMER1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPEED_calc                                           4     4      0     829
                                              9 BANK0      4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     625
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _PRESET_save                                          8     4      4    1436
                                              6 BANK0      8     4      4
                      _eeprom_update
 ---------------------------------------------------------------------------------
 (1) _PRESET_load                                          6     4      2     704
                                              2 BANK0      6     4      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _MOTOR_Init                                           1     1      0    1111
                                              3 BANK0      1     1      0
                          _delay_wdt
 ---------------------------------------------------------------------------------
 (1) _delay_wdt                                            3     1      2    1111
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _BAUDS_set                                            2     2      0     788
                                              6 BANK0      2     2      0
                      _eeprom_update
 ---------------------------------------------------------------------------------
 (2) _eeprom_update                                        3     2      1     757
                                              3 BANK0      3     2      1
                        _eeprom_read
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     152
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _myISR                                                5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BAUDS_set
     _eeprom_update
       _eeprom_read
       _eeprom_write
   _MOTOR_Init
     _delay_wdt
   _PRESET_load
     _eeprom_read
   _PRESET_save
     _eeprom_update
   _SPEED_calc
     ___awdiv
   _TIMER1_Init
   _UART_Init
     _BAUDS_get
       _eeprom_read
   _UART_Write
   _UART_Write_Text
     _UART_Write
   _UC_Init
   ___bmul
   ___lbdiv
   _delay_wdt
   _print_cnt
     _UART_Write
     _UART_Write_Text
     ___lwdiv
     ___wmul

 _myISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     20      43       3       83.8%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50     11      44       5       85.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      91       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      91      10        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed Feb 12 09:50:36 2025

                      pc 0002           ___bmul@product 0045             ___awdiv@sign 0049  
                     fsr 0004      ___wmul@multiplicand 0045                      l400 0F29  
                    l323 0E01                      l235 03BA                      l404 0E53  
                    l326 0E2A                      l254 00F1                      l355 04AC  
                    l508 0D52                      l292 0322                      l365 0591  
                    l278 0307                      l295 0382                      l528 0D96  
                    l394 0F14                      l538 0DE1                      l395 0F45  
                    l396 0F18                      l397 0F1C                      l398 0F20  
                    l399 0F24                      fsr0 0004                      indf 0000  
                   l3224 0FBC                     l3320 0F2C                     l3250 0FFB  
                   l3242 0FE8                     l3234 0FC4                     l3218 0FB1  
                   l3306 0F16                     l3146 0E37                     l3236 0FD2  
                   l4028 0F34                     l3148 0E5D                     l3500 0561  
                   l3246 0FF3                     l3272 0EFC                     l3264 0ED8  
                   l3512 0579                     l3504 0569                     l3178 0D7D  
                   l3186 0E63                     l3266 0EE6                     l3522 058D  
                   l3514 057D                     l3506 056D                     l3442 047C  
                   l3276 0F07                     l3620 0056                     l3286 0D6C  
                   l3198 0DD9                     l3454 0494                     l3446 0484  
                   l3710 0121                     l3702 0112                     l3464 04A8  
                   l3456 0498                     l3448 0488                     l3720 013C  
                   l3640 0073                     l3632 0064                     l3554 0E22  
                   l3562 0D3F                     l3714 0129                     l3706 0119  
                   l3722 0140                     l3548 0E09                     l3740 0156  
                   l3644 007B                     l3636 006B                     l3628 005C  
                   l3566 0D45                     l3814 0225                     l3718 0131  
                   l3662 009C                     l3584 0DBD                     l3648 008D  
                   l3586 0DC6                     l3596 0DD5                     l3852 0287  
                   l3772 01B0                     l3870 02AE                     l3686 00F2  
                   l3944 0355                     l3856 0289                     l3848 027A  
                   l3874 02BB                     l3878 02BD                     l3994 03B6  
                   STR_1 08B5                     STR_2 083A                     STR_3 0853  
                   STR_4 0883                     STR_5 089A                     STR_6 08EE  
                   STR_7 08FC                     STR_8 08D6                     STR_9 08DE  
                   _BRGH 04C2                     _CREN 00C4                     u3181 0D51  
                   u3165 0E46                     u3166 0E47                     u3167 0E4C  
                   u3168 0E4D                     u3345 0FC7                     u3169 0E52  
                   u3425 0EDB                     u4225 0276                     u4235 0280  
                   u3365 0FD3                     u3445 0EE7                     u3285 0DE2  
                   u4327 0D8F                     u3375 0FDF                     u3455 0EF3  
                   u3295 0DE9                     u4255 02AA                     u3705 0E9C  
                   u3385 0FE9                     u3465 0EFD                     u4265 02B4  
                   u3725 0F54                     _SPEN 00C7                     _TRMT 04C1  
                   _TXEN 04C5                     _SYNC 04C4           ??_eeprom_write 0044  
            main@pan_tmp 00DA                     _main 0025                     btemp 007E  
        __end_of_UC_Init 0D7C                     start 000F       _preset_pan_enabled 0040  
      ___bmul@multiplier 0046  __end_of_UART_Write_Text 0E98              ?_MOTOR_Init 0075  
                  ?_main 0075          __end_of___awdiv 1000          __end_of___lbdiv 0DD7  
                  _EEADR 009B                    STR_10 08CD                    STR_11 08F5  
                  STR_20 0907                    STR_12 086A                    STR_21 091D  
                  STR_13 087C                    STR_30 091D                    STR_14 090A  
                  STR_22 08A8                    STR_23 0907                    STR_15 091D  
                  STR_31 0918                    STR_32 091D                    STR_24 091D  
                  STR_16 08C1                    STR_17 0907                    STR_33 0921  
                  STR_25 0911                    STR_26 091D                    STR_18 091D  
                  STR_27 08E6                    STR_19 088C                    STR_28 091D  
                  STR_29 0903                    _CMCON 001F              ?_SPEED_calc 0075  
        ___awdiv@divisor 0043          __end_of___lwdiv 0F0C                    i1l214 0753  
                  i1l215 074F                    i1l171 0605                    i1l173 0754  
                  i1l197 06B2          ___awdiv@counter 0048                    _RCREG 001A  
        ??_eeprom_update 0047                    _TMR1H 000F                    _TMR1L 000E  
                  _SPBRG 0099                    _PORTA 0005                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086                    _TXREG 0019  
            ?_UART_Write 0075                    _myISR 0595                    main@i 00E3  
                  main@m 00E2                    pclath 000A          _timer1_tilt_ref 0032  
           main@tilt_tmp 00DC        __end_of_BAUDS_get 07FF        __end_of_BAUDS_set 07FB  
          print_cnt@_pan 0053            print_cnt@val1 0057                    status 0003  
                  wtemp0 007E          ___lbdiv@divisor 0043          ___lbdiv@counter 0046  
        __initialization 0011             __end_of_main 03CA                   ??_main 0061  
           ?_TIMER1_Init 0075             ?_PRESET_load 0045             ?_PRESET_save 0049  
                 ?_myISR 0075                   _EEDATA 009A                   _EECON1 009C  
                 _EECON2 009D         ___awdiv@dividend 0045                ??_UC_Init 0043  
                 i1l2610 0603                   i1l2700 06F9                   i1l2622 061B  
                 i1l2640 063F                   i1l2608 0602                   i1l2706 0706  
                 i1l2642 0644                   i1l2626 0624                   i1l2618 0617  
                 i1l2562 05B0                   i1l2554 05A9                   i1l2660 066B  
                 i1l2652 065A                   i1l2644 0647                   i1l2580 05CA  
                 i1l2654 065E                   i1l2574 05C2                   i1l2672 06BF  
                 i1l2648 064E                   i1l2592 05DC                   i1l2568 05BA  
                 i1l2690 06E2                   i1l2586 05D3                   i1l2668 06B6  
                 i1l2694 06E9                   i1l2686 06DA                   i1l2598 05EC  
                 i1l2688 06DF                   i1l2698 06F5                   u228_20 05A6  
                 u254_25 0664                   u265_25 06FF                   _P_dat1 002C  
                 _P_dat2 002B                   _P_cmd1 002E                   _P_cmd2 002D  
                 _P_addr 002F  _preset_tilt_enabled_old 003D        __end_of_UART_Init 0F50  
                 ___bmul 0D3C                   ___wmul 0DD7                ??___awdiv 0047  
              ??___lbdiv 0044         ?_UART_Write_Text 004C        eeprom_update@addr 0048  
              ??___lwdiv 0047         ___awdiv@quotient 004A     __end_of_eeprom_write 0DB6  
        SPEED_calc@speed 004E                   saved_w 007E           print_cnt@_tilt 0055  
         print_cnt@val10 0059         __end_of_steps_1A 083A         __end_of_steps_1B 0832  
       __end_of_steps_2A 082A         __end_of_steps_2B 0822         ___lbdiv@dividend 0045  
__end_of__initialization 0022          eeprom_read@addr 0044      ___bmul@multiplicand 0043  
         __pcstackCOMMON 0075            _pan_direction 003B            __end_of_myISR 075F  
       ___lbdiv@quotient 0047           _OPTION_REGbits 0081        eeprom_write@value 0043  
                ??_myISR 0075               __pbssBANK0 0020               __pbssBANK1 00A0  
             __pmaintext 0025            _pan_speed_old 0039                  ?___bmul 0043  
             _header_cnt 0042               _header_pos 00D1                  ?___wmul 0043  
             __pintentry 0004             ??_MOTOR_Init 0046             ??_SPEED_calc 004C  
           ??_UART_Write 0043                  _UC_Init 0D64               __stringtab 0800  
             _frame_data 00A0        __end_of_delay_wdt 0D95       __end_of_MOTOR_Init 07F2  
    main@preset_id_1_424 00D6      main@preset_id_1_417 00D5                _BAUDS_get 07FB  
              _BAUDS_set 07F2       __end_of_SPEED_calc 0E2C                  ___awdiv 0FA7  
                ___lbdiv 0DB6       __end_of_UART_Write 0E61                  ___lwdiv 0ED0  
                __ptext1 03CA                  __ptext2 0DD7                  __ptext3 0ED0  
                __ptext4 0E61                  __ptext5 0E2C                  __ptext6 0DB6  
                __ptext7 0D3C                  __ptext8 0D64                  __ptext9 0F0C  
     eeprom_update@value 0046                _T1CONbits 0010                  _is_init 0028  
  __end_of_eeprom_update 0D3C                  clrloop0 0D15     end_of_initialization 0022  
    _preset_tilt_enabled 003E             _eeprom_write 0D95               ?_BAUDS_get 0075  
      __end_of_speed_ref 081A               ?_BAUDS_set 0075             _buffer_data0 00C3  
           _buffer_data1 00BC             _buffer_data2 00B5             _buffer_data3 00AE  
           _buffer_data4 00A7        __end_of_print_cnt 0595             _buffer_ready 00CA  
             _timer1_pan 0035          print_cnt@val100 005B             __pstringtext 0800  
              _UART_Init 0F0C                _PORTAbits 0005                _PORTBbits 0006  
         UART_Write@data 0047            PRESET_load@id 0049               _tilt_speed 0036  
          PRESET_save@id 004F            ??_eeprom_read 0043           __end_of___bmul 0D4E  
         __end_of___wmul 0DF8           _timer1_pan_ref 0033               ?_UART_Init 0075  
    start_initialization 0011              ??_BAUDS_get 0045              ??_BAUDS_set 0049  
               ??___bmul 0044                 ??___wmul 0047      __end_of_eeprom_read 0D64  
            __pbssCOMMON 0070                ___latbits 0001            __pcstackBANK0 0043  
          __pcstackBANK1 00D3          main@chksum_calc 00D3              _data_receiv 0074  
               ?_UC_Init 0075         eeprom_write@addr 0045              _alarms_data 00CF  
       ___lwdiv@dividend 0045                _delay_wdt 0D7C                 ?___awdiv 0043  
               ?___lbdiv 0043                 ?___lwdiv 0043              ??_UART_Init 0045  
          ??_TIMER1_Init 0043            ??_PRESET_load 0047           _pan_step_phase 0071  
          ??_PRESET_save 004D         ___lwdiv@quotient 0049                _is_reboot 0029  
              _pan_speed 003A        ??_UART_Write_Text 004E        interrupt_function 0004  
         ___wmul@product 0047                clear_ram0 0D14              _eeprom_read 0D4E  
               _PIE1bits 008C                 _PCONbits 008E                 _PIR1bits 000C  
             ?_delay_wdt 0043                _speed_ref 0812                _preset_id 002A  
              _print_cnt 03CA                _tilt_goto 0020              __stringbase 0812  
      ___wmul@multiplier 0043              _frame_index 0031          main@pan_tmp_421 00DE  
    __end_of_TIMER1_Init 0D2B     main@preset_id_10_423 00D9     main@preset_id_10_416 00D8  
               _P_chksum 00D0             delay_wdt@_ms 0043      __end_of_PRESET_load 0FA7  
    __end_of_PRESET_save 0ED0               _EECON1bits 009C         main@preset_id_10 00D7  
             ?_print_cnt 0053              _pan_enabled 003C       __end_of__stringtab 0812  
            _pan_counter 0026            _response_type 0030          ___lwdiv@divisor 0043  
        ___lwdiv@counter 0048                 __ptext10 07FB                 __ptext11 0D1C  
               __ptext20 0D95                 __ptext12 0DF8                 __ptext21 0D4E  
               __ptext13 0FA7                 __ptext22 0595                 __ptext14 0E98  
               __ptext15 0F50                 __ptext16 075F                 __ptext17 0D7C  
               __ptext18 07F2                 __ptext19 0D2B         main@tilt_tmp_422 00E0  
         _timeout_receiv 0041           _tilt_direction 0037          _tilt_step_phase 0070  
    UART_Write_Text@text 004C                 _pan_goto 0022           BAUDS_set@index 004A  
            ??_delay_wdt 0045                 _steps_1A 0832                 _steps_1B 082A  
               _steps_2A 0822                 _steps_2B 081A              _TIMER1_Init 0D1C  
      print_cnt@val10000 005F               _INTCONbits 000B          main@preset_id_1 00D4  
            _PRESET_load 0F50            _eeprom_update 0D2B              _PRESET_save 0E98  
      SPEED_calc@sp_calc 004F           _tilt_speed_old 00D2                 intlevel1 0000  
       PRESET_load@_addr 004A                stringcode 080A            _buffer_index1 0073  
          _buffer_index2 0072        UART_Write@timeout 0048              _timer1_tilt 0034  
            ??_print_cnt 0057         print_cnt@val1000 005D               _MOTOR_Init 075F  
        _UART_Write_Text 0E61               _SPEED_calc 0DF8             _tilt_enabled 0038  
        PRESET_load@tilt 0046         PRESET_save@_addr 0050                 stringtab 0800  
         ?_eeprom_update 0046             _tilt_counter 0024               _UART_Write 0E2C  
         PRESET_load@pan 0045         UART_Write_Text@i 0051            ?_eeprom_write 0043  
   UART_Init@bauds_index 0047          PRESET_save@tilt 004B               _STATUSbits 0003  
 _preset_pan_enabled_old 003F             ?_eeprom_read 0075           PRESET_save@pan 0049  
