

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed Feb 12 10:49:02 2025

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	16F648A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Generated 12/10/2023 GMT
    44                           ; 
    45                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F648A Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0015                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0017                     	;# 
    97  0018                     	;# 
    98  0019                     	;# 
    99  001A                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  008C                     	;# 
   105  008E                     	;# 
   106  0092                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009F                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001F                     	;# 
   138  0081                     	;# 
   139  0085                     	;# 
   140  0086                     	;# 
   141  008C                     	;# 
   142  008E                     	;# 
   143  0092                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009A                     	;# 
   147  009B                     	;# 
   148  009C                     	;# 
   149  009D                     	;# 
   150  009F                     	;# 
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0015                     	;# 
   168  0015                     	;# 
   169  0016                     	;# 
   170  0017                     	;# 
   171  0018                     	;# 
   172  0019                     	;# 
   173  001A                     	;# 
   174  001F                     	;# 
   175  0081                     	;# 
   176  0085                     	;# 
   177  0086                     	;# 
   178  008C                     	;# 
   179  008E                     	;# 
   180  0092                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009A                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009F                     	;# 
   188  0000                     	;# 
   189  0001                     	;# 
   190  0002                     	;# 
   191  0003                     	;# 
   192  0004                     	;# 
   193  0005                     	;# 
   194  0006                     	;# 
   195  000A                     	;# 
   196  000B                     	;# 
   197  000C                     	;# 
   198  000E                     	;# 
   199  000E                     	;# 
   200  000F                     	;# 
   201  0010                     	;# 
   202  0011                     	;# 
   203  0012                     	;# 
   204  0015                     	;# 
   205  0015                     	;# 
   206  0016                     	;# 
   207  0017                     	;# 
   208  0018                     	;# 
   209  0019                     	;# 
   210  001A                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  008C                     	;# 
   216  008E                     	;# 
   217  0092                     	;# 
   218  0098                     	;# 
   219  0099                     	;# 
   220  009A                     	;# 
   221  009B                     	;# 
   222  009C                     	;# 
   223  009D                     	;# 
   224  009F                     	;# 
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000E                     	;# 
   236  000E                     	;# 
   237  000F                     	;# 
   238  0010                     	;# 
   239  0011                     	;# 
   240  0012                     	;# 
   241  0015                     	;# 
   242  0015                     	;# 
   243  0016                     	;# 
   244  0017                     	;# 
   245  0018                     	;# 
   246  0019                     	;# 
   247  001A                     	;# 
   248  001F                     	;# 
   249  0081                     	;# 
   250  0085                     	;# 
   251  0086                     	;# 
   252  008C                     	;# 
   253  008E                     	;# 
   254  0092                     	;# 
   255  0098                     	;# 
   256  0099                     	;# 
   257  009A                     	;# 
   258  009B                     	;# 
   259  009C                     	;# 
   260  009D                     	;# 
   261  009F                     	;# 
   262                           
   263                           	psect	strings
   264  0500                     __pstrings:
   265  0500                     stringtab:
   266  0500                     __stringtab:
   267  0500                     stringcode:	
   268                           ;	String table - string pointers are 1 byte each
   269                           
   270  0500                     stringdir:
   271  0500  3005               	movlw	high stringdir
   272  0501  008A               	movwf	10
   273  0502  0804               	movf	4,w
   274  0503  0A84               	incf	4,f
   275  0504  0782               	addwf	2,f
   276  0505                     __stringbase:
   277  0505  3400               	retlw	0
   278  0506                     __end_of__stringtab:
   279  0506                     _speed_ref:
   280  0506  3406               	retlw	6
   281  0507  340C               	retlw	12
   282  0508  3412               	retlw	18
   283  0509  3419               	retlw	25
   284  050A  341F               	retlw	31
   285  050B  3425               	retlw	37
   286  050C  342C               	retlw	44
   287  050D  3432               	retlw	50
   288  050E                     __end_of_speed_ref:
   289  050E                     _steps_2B:
   290  050E  3400               	retlw	0
   291  050F  3400               	retlw	0
   292  0510  3400               	retlw	0
   293  0511  3400               	retlw	0
   294  0512  3400               	retlw	0
   295  0513  3401               	retlw	1
   296  0514  3401               	retlw	1
   297  0515  3401               	retlw	1
   298  0516                     __end_of_steps_2B:
   299  0516                     _steps_2A:
   300  0516  3400               	retlw	0
   301  0517  3400               	retlw	0
   302  0518  3400               	retlw	0
   303  0519  3401               	retlw	1
   304  051A  3401               	retlw	1
   305  051B  3401               	retlw	1
   306  051C  3400               	retlw	0
   307  051D  3400               	retlw	0
   308  051E                     __end_of_steps_2A:
   309  051E                     _steps_1B:
   310  051E  3400               	retlw	0
   311  051F  3401               	retlw	1
   312  0520  3401               	retlw	1
   313  0521  3401               	retlw	1
   314  0522  3400               	retlw	0
   315  0523  3400               	retlw	0
   316  0524  3400               	retlw	0
   317  0525  3400               	retlw	0
   318  0526                     __end_of_steps_1B:
   319  0526                     _steps_1A:
   320  0526  3401               	retlw	1
   321  0527  3401               	retlw	1
   322  0528  3400               	retlw	0
   323  0529  3400               	retlw	0
   324  052A  3400               	retlw	0
   325  052B  3400               	retlw	0
   326  052C  3400               	retlw	0
   327  052D  3401               	retlw	1
   328  052E                     __end_of_steps_1A:
   329  0003                     _STATUSbits	set	3
   330  0019                     _TXREG	set	25
   331  0010                     _T1CONbits	set	16
   332  000B                     _INTCONbits	set	11
   333  001F                     _CMCON	set	31
   334  0006                     _PORTB	set	6
   335  0005                     _PORTA	set	5
   336  0005                     _PORTAbits	set	5
   337  000E                     _TMR1L	set	14
   338  000F                     _TMR1H	set	15
   339  0006                     _PORTBbits	set	6
   340  001A                     _RCREG	set	26
   341  000C                     _PIR1bits	set	12
   342  00C4                     _CREN	set	196
   343  00C7                     _SPEN	set	199
   344  009D                     _EECON2	set	157
   345  009A                     _EEDATA	set	154
   346  009C                     _EECON1	set	156
   347  009B                     _EEADR	set	155
   348  009C                     _EECON1bits	set	156
   349  0099                     _SPBRG	set	153
   350  0086                     _TRISB	set	134
   351  0085                     _TRISA	set	133
   352  0081                     _OPTION_REGbits	set	129
   353  008E                     _PCONbits	set	142
   354  008C                     _PIE1bits	set	140
   355  04C1                     _TRMT	set	1217
   356  04C5                     _TXEN	set	1221
   357  04C4                     _SYNC	set	1220
   358  04C2                     _BRGH	set	1218
   359  052E                     STR_2:
   360  052E  3447               	retlw	71	;'G'
   361  052F  346F               	retlw	111	;'o'
   362  0530  3474               	retlw	116	;'t'
   363  0531  346F               	retlw	111	;'o'
   364  0532  3420               	retlw	32	;' '
   365  0533  3450               	retlw	80	;'P'
   366  0534  3441               	retlw	65	;'A'
   367  0535  344E               	retlw	78	;'N'
   368  0536  3420               	retlw	32	;' '
   369  0537  3461               	retlw	97	;'a'
   370  0538  346E               	retlw	110	;'n'
   371  0539  3464               	retlw	100	;'d'
   372  053A  3420               	retlw	32	;' '
   373  053B  3454               	retlw	84	;'T'
   374  053C  3449               	retlw	73	;'I'
   375  053D  344C               	retlw	76	;'L'
   376  053E  3454               	retlw	84	;'T'
   377  053F  3420               	retlw	32	;' '
   378  0540  3448               	retlw	72	;'H'
   379  0541  346F               	retlw	111	;'o'
   380  0542  346D               	retlw	109	;'m'
   381  0543  3465               	retlw	101	;'e'
   382  0544  3400               	retlw	0
   383  0545                     STR_3:
   384  0545  3457               	retlw	87	;'W'
   385  0546  3461               	retlw	97	;'a'
   386  0547  3469               	retlw	105	;'i'
   387  0548  3474               	retlw	116	;'t'
   388  0549  3469               	retlw	105	;'i'
   389  054A  346E               	retlw	110	;'n'
   390  054B  3467               	retlw	103	;'g'
   391  054C  3420               	retlw	32	;' '
   392  054D  3466               	retlw	102	;'f'
   393  054E  346F               	retlw	111	;'o'
   394  054F  3472               	retlw	114	;'r'
   395  0550  3420               	retlw	32	;' '
   396  0551  3463               	retlw	99	;'c'
   397  0552  346F               	retlw	111	;'o'
   398  0553  346D               	retlw	109	;'m'
   399  0554  346D               	retlw	109	;'m'
   400  0555  3461               	retlw	97	;'a'
   401  0556  346E               	retlw	110	;'n'
   402  0557  3464               	retlw	100	;'d'
   403  0558  3473               	retlw	115	;'s'
   404  0559  3400               	retlw	0
   405  055A                     STR_18:
   406  055A  3443               	retlw	67	;'C'
   407  055B  344C               	retlw	76	;'L'
   408  055C  3445               	retlw	69	;'E'
   409  055D  3441               	retlw	65	;'A'
   410  055E  3452               	retlw	82	;'R'
   411  055F  3420               	retlw	32	;' '
   412  0560  3450               	retlw	80	;'P'
   413  0561  3452               	retlw	82	;'R'
   414  0562  3445               	retlw	69	;'E'
   415  0563  3453               	retlw	83	;'S'
   416  0564  3445               	retlw	69	;'E'
   417  0565  3454               	retlw	84	;'T'
   418  0566  3420               	retlw	32	;' '
   419  0567  3400               	retlw	0
   420  0568                     STR_5:
   421  0568  3453               	retlw	83	;'S'
   422  0569  3445               	retlw	69	;'E'
   423  056A  3454               	retlw	84	;'T'
   424  056B  3420               	retlw	32	;' '
   425  056C  3442               	retlw	66	;'B'
   426  056D  3441               	retlw	65	;'A'
   427  056E  3455               	retlw	85	;'U'
   428  056F  3444               	retlw	68	;'D'
   429  0570  3420               	retlw	32	;' '
   430  0571  3452               	retlw	82	;'R'
   431  0572  3441               	retlw	65	;'A'
   432  0573  3454               	retlw	84	;'T'
   433  0574  3445               	retlw	69	;'E'
   434  0575  3400               	retlw	0
   435  0576                     STR_19:
   436  0576  3447               	retlw	71	;'G'
   437  0577  344F               	retlw	79	;'O'
   438  0578  3454               	retlw	84	;'T'
   439  0579  344F               	retlw	79	;'O'
   440  057A  3420               	retlw	32	;' '
   441  057B  3450               	retlw	80	;'P'
   442  057C  3452               	retlw	82	;'R'
   443  057D  3445               	retlw	69	;'E'
   444  057E  3453               	retlw	83	;'S'
   445  057F  3445               	retlw	69	;'E'
   446  0580  3454               	retlw	84	;'T'
   447  0581  3420               	retlw	32	;' '
   448  0582  3400               	retlw	0
   449  0583                     STR_17:
   450  0583  3453               	retlw	83	;'S'
   451  0584  3445               	retlw	69	;'E'
   452  0585  3454               	retlw	84	;'T'
   453  0586  3420               	retlw	32	;' '
   454  0587  3450               	retlw	80	;'P'
   455  0588  3452               	retlw	82	;'R'
   456  0589  3445               	retlw	69	;'E'
   457  058A  3453               	retlw	83	;'S'
   458  058B  3445               	retlw	69	;'E'
   459  058C  3454               	retlw	84	;'T'
   460  058D  3420               	retlw	32	;' '
   461  058E  3400               	retlw	0
   462  058F                     STR_12:
   463  058F  340D               	retlw	13
   464  0590  340A               	retlw	10
   465  0591  3450               	retlw	80	;'P'
   466  0592  344C               	retlw	76	;'L'
   467  0593  3445               	retlw	69	;'E'
   468  0594  3441               	retlw	65	;'A'
   469  0595  3453               	retlw	83	;'S'
   470  0596  3445               	retlw	69	;'E'
   471  0597  3420               	retlw	32	;' '
   472  0598  3400               	retlw	0
   473  0599                     STR_1:
   474  0599  340D               	retlw	13
   475  059A  340A               	retlw	10
   476  059B  340D               	retlw	13
   477  059C  340A               	retlw	10
   478  059D  3453               	retlw	83	;'S'
   479  059E  3474               	retlw	116	;'t'
   480  059F  3461               	retlw	97	;'a'
   481  05A0  3472               	retlw	114	;'r'
   482  05A1  3474               	retlw	116	;'t'
   483  05A2  3400               	retlw	0
   484  05A3                     STR_13:
   485  05A3  340D               	retlw	13
   486  05A4  340A               	retlw	10
   487  05A5  344E               	retlw	78	;'N'
   488  05A6  3445               	retlw	69	;'E'
   489  05A7  3445               	retlw	69	;'E'
   490  05A8  3444               	retlw	68	;'D'
   491  05A9  3420               	retlw	32	;' '
   492  05AA  3400               	retlw	0
   493  05AB                     STR_15:
   494  05AB  3453               	retlw	83	;'S'
   495  05AC  3454               	retlw	84	;'T'
   496  05AD  344F               	retlw	79	;'O'
   497  05AE  3450               	retlw	80	;'P'
   498  05AF  3420               	retlw	32	;' '
   499  05B0  3428               	retlw	40	;'('
   500  05B1  3400               	retlw	0
   501  05B2                     STR_10:
   502  05B2  3431               	retlw	49	;'1'
   503  05B3  3431               	retlw	49	;'1'
   504  05B4  3435               	retlw	53	;'5'
   505  05B5  3432               	retlw	50	;'2'
   506  05B6  3430               	retlw	48	;'0'
   507  05B7  3430               	retlw	48	;'0'
   508  05B8  3400               	retlw	0
   509  05B9                     STR_4:
   510  05B9  3452               	retlw	82	;'R'
   511  05BA  3445               	retlw	69	;'E'
   512  05BB  3442               	retlw	66	;'B'
   513  05BC  344F               	retlw	79	;'O'
   514  05BD  344F               	retlw	79	;'O'
   515  05BE  3454               	retlw	84	;'T'
   516  05BF  3400               	retlw	0
   517  05C0                     STR_8:
   518  05C0  3431               	retlw	49	;'1'
   519  05C1  3439               	retlw	57	;'9'
   520  05C2  3432               	retlw	50	;'2'
   521  05C3  3430               	retlw	48	;'0'
   522  05C4  3430               	retlw	48	;'0'
   523  05C5  3400               	retlw	0
   524  05C6                     STR_9:
   525  05C6  3433               	retlw	51	;'3'
   526  05C7  3438               	retlw	56	;'8'
   527  05C8  3434               	retlw	52	;'4'
   528  05C9  3430               	retlw	48	;'0'
   529  05CA  3430               	retlw	48	;'0'
   530  05CB  3400               	retlw	0
   531  05CC                     STR_21:
   532  05CC  3452               	retlw	82	;'R'
   533  05CD  3449               	retlw	73	;'I'
   534  05CE  3447               	retlw	71	;'G'
   535  05CF  3448               	retlw	72	;'H'
   536  05D0  3454               	retlw	84	;'T'
   537  05D1  3400               	retlw	0
   538  05D2                     STR_6:
   539  05D2  3432               	retlw	50	;'2'
   540  05D3  3434               	retlw	52	;'4'
   541  05D4  3430               	retlw	48	;'0'
   542  05D5  3430               	retlw	48	;'0'
   543  05D6  3400               	retlw	0
   544  05D7                     STR_11:
   545  05D7  3439               	retlw	57	;'9'
   546  05D8  3436               	retlw	54	;'6'
   547  05D9  3430               	retlw	48	;'0'
   548  05DA  3430               	retlw	48	;'0'
   549  05DB  3400               	retlw	0
   550  05DC                     STR_7:
   551  05DC  3434               	retlw	52	;'4'
   552  05DD  3438               	retlw	56	;'8'
   553  05DE  3430               	retlw	48	;'0'
   554  05DF  3430               	retlw	48	;'0'
   555  05E0  3400               	retlw	0
   556  05E1                     STR_22:
   557  05E1  3444               	retlw	68	;'D'
   558  05E2  344F               	retlw	79	;'O'
   559  05E3  3457               	retlw	87	;'W'
   560  05E4  344E               	retlw	78	;'N'
   561  05E5  3400               	retlw	0
   562  05E6                     STR_20:
   563  05E6  344C               	retlw	76	;'L'
   564  05E7  3445               	retlw	69	;'E'
   565  05E8  3446               	retlw	70	;'F'
   566  05E9  3454               	retlw	84	;'T'
   567  05EA  3400               	retlw	0
   568  05EB                     STR_24:
   569  05EB  342C               	retlw	44	;','
   570  05EC  3420               	retlw	32	;' '
   571  05ED  3400               	retlw	0
   572  05EE                     STR_23:
   573  05EE  3455               	retlw	85	;'U'
   574  05EF  3450               	retlw	80	;'P'
   575  05F0  3400               	retlw	0
   576  05F1                     STR_16:
   577  05F1  3429               	retlw	41	;')'
   578  05F2  3400               	retlw	0
   579  05AF                     
   580                           	psect	cinit
   581  0011                     start_initialization:	
   582                           ; #config settings
   583                           
   584  0011                     __initialization:
   585                           
   586                           ; Clear objects allocated to COMMON
   587  0011  3070               	movlw	low __pbssCOMMON
   588  0012  0084               	movwf	4
   589  0013  3076               	movlw	low (__pbssCOMMON+6)
   590  0014  158A  2576  118A   	fcall	clear_ram0
   591                           
   592                           ; Clear objects allocated to BANK0
   593  0017  1383               	bcf	3,7	;select IRP bank0
   594  0018  3050               	movlw	low __pbssBANK0
   595  0019  0084               	movwf	4
   596  001A  3070               	movlw	low (__pbssBANK0+32)
   597  001B  158A  2576  118A   	fcall	clear_ram0
   598                           
   599                           ; Clear objects allocated to BANK1
   600  001E  30A0               	movlw	low __pbssBANK1
   601  001F  0084               	movwf	4
   602  0020  30D5               	movlw	low (__pbssBANK1+53)
   603  0021  158A  2576         	fcall	clear_ram0
   604  0023                     end_of_initialization:	
   605                           ;End of C runtime variable initialization code
   606                           
   607  0023                     __end_of__initialization:
   608  0023  0183               	clrf	3
   609  0024  118A  2826         	ljmp	_main	;jump to C main() function
   610                           
   611                           	psect	bssCOMMON
   612  0070                     __pbssCOMMON:
   613  0070                     _is_init:
   614  0070                     	ds	1
   615  0071                     _tilt_step_phase:
   616  0071                     	ds	1
   617  0072                     _pan_step_phase:
   618  0072                     	ds	1
   619  0073                     _buffer_index2:
   620  0073                     	ds	1
   621  0074                     _buffer_index1:
   622  0074                     	ds	1
   623  0075                     _data_receiv:
   624  0075                     	ds	1
   625                           
   626                           	psect	bssBANK0
   627  0050                     __pbssBANK0:
   628  0050                     _tilt_goto:
   629  0050                     	ds	2
   630  0052                     _pan_goto:
   631  0052                     	ds	2
   632  0054                     _tilt_counter:
   633  0054                     	ds	2
   634  0056                     _pan_counter:
   635  0056                     	ds	2
   636  0058                     _is_reboot:
   637  0058                     	ds	1
   638  0059                     _preset_id:
   639  0059                     	ds	1
   640  005A                     _P_dat2:
   641  005A                     	ds	1
   642  005B                     _P_dat1:
   643  005B                     	ds	1
   644  005C                     _P_cmd2:
   645  005C                     	ds	1
   646  005D                     _P_cmd1:
   647  005D                     	ds	1
   648  005E                     _P_addr:
   649  005E                     	ds	1
   650  005F                     _response_type:
   651  005F                     	ds	1
   652  0060                     _frame_index:
   653  0060                     	ds	1
   654  0061                     _timer1_tilt_ref:
   655  0061                     	ds	1
   656  0062                     _timer1_pan_ref:
   657  0062                     	ds	1
   658  0063                     _timer1_tilt:
   659  0063                     	ds	1
   660  0064                     _timer1_pan:
   661  0064                     	ds	1
   662  0065                     _tilt_speed:
   663  0065                     	ds	1
   664  0066                     _tilt_direction:
   665  0066                     	ds	1
   666  0067                     _tilt_enabled:
   667  0067                     	ds	1
   668  0068                     _pan_speed:
   669  0068                     	ds	1
   670  0069                     _pan_direction:
   671  0069                     	ds	1
   672  006A                     _pan_enabled:
   673  006A                     	ds	1
   674  006B                     _preset_tilt_enabled:
   675  006B                     	ds	1
   676  006C                     _preset_pan_enabled_old:
   677  006C                     	ds	1
   678  006D                     _preset_pan_enabled:
   679  006D                     	ds	1
   680  006E                     _timeout_receiv:
   681  006E                     	ds	1
   682  006F                     _header_cnt:
   683  006F                     	ds	1
   684                           
   685                           	psect	bssBANK1
   686  00A0                     __pbssBANK1:
   687  00A0                     _frame_data:
   688  00A0                     	ds	7
   689  00A7                     _buffer_data4:
   690  00A7                     	ds	7
   691  00AE                     _buffer_data3:
   692  00AE                     	ds	7
   693  00B5                     _buffer_data2:
   694  00B5                     	ds	7
   695  00BC                     _buffer_data1:
   696  00BC                     	ds	7
   697  00C3                     _buffer_data0:
   698  00C3                     	ds	7
   699  00CA                     _buffer_ready:
   700  00CA                     	ds	5
   701  00CF                     _alarms_data:
   702  00CF                     	ds	1
   703  00D0                     _P_chksum:
   704  00D0                     	ds	1
   705  00D1                     _header_pos:
   706  00D1                     	ds	1
   707  00D2                     _tilt_speed_old:
   708  00D2                     	ds	1
   709  00D3                     _pan_speed_old:
   710  00D3                     	ds	1
   711  00D4                     _preset_tilt_enabled_old:
   712  00D4                     	ds	1
   713                           
   714                           	psect	clrtext
   715  0D76                     clear_ram0:	
   716                           ;	Called with FSR containing the base address, and
   717                           ;	W with the last address+1
   718                           
   719  0D76  0064               	clrwdt	;clear the watchdog before getting into this loop
   720  0D77                     clrloop0:
   721  0D77  0180               	clrf	0	;clear RAM location pointed to by FSR
   722  0D78  0A84               	incf	4,f	;increment pointer
   723  0D79  0604               	xorwf	4,w	;XOR with final address
   724  0D7A  1903               	btfsc	3,2	;have we reached the end yet?
   725  0D7B  3400               	retlw	0	;all done for this memory range, return
   726  0D7C  0604               	xorwf	4,w	;XOR again to restore value
   727  0D7D  2D77               	goto	clrloop0	;do the next byte
   728                           
   729                           	psect	cstackCOMMON
   730  0076                     __pcstackCOMMON:
   731  0076                     ?_UC_Init:
   732  0076                     ?_UART_Init:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0076                     ?_TIMER1_Init:	
   736                           ; 1 bytes @ 0x0
   737                           
   738  0076                     ?_UART_Write_Text_CRLF:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0076                     ?_MOTOR_Init:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0076                     ?_BAUDS_set:	
   745                           ; 1 bytes @ 0x0
   746                           
   747  0076                     ?_UART_Write_Text:	
   748                           ; 1 bytes @ 0x0
   749                           
   750  0076                     ?_SPEED_calc:	
   751                           ; 1 bytes @ 0x0
   752                           
   753  0076                     ?_eeprom_read:	
   754                           ; 1 bytes @ 0x0
   755                           
   756  0076                     ?_UART_Write:	
   757                           ; 1 bytes @ 0x0
   758                           
   759  0076                     ?_myISR:	
   760                           ; 1 bytes @ 0x0
   761                           
   762  0076                     ??_myISR:	
   763                           ; 1 bytes @ 0x0
   764                           
   765  0076                     ?_main:	
   766                           ; 1 bytes @ 0x0
   767                           
   768  0076                     ?_BAUDS_get:	
   769                           ; 1 bytes @ 0x0
   770                           
   771                           
   772                           ; 1 bytes @ 0x0
   773  0076                     	ds	6
   774                           
   775                           	psect	cstackBANK0
   776  0020                     __pcstackBANK0:
   777  0020                     ??_UC_Init:
   778  0020                     ??_TIMER1_Init:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  0020                     ?_delay_wdt:	
   782                           ; 1 bytes @ 0x0
   783                           
   784  0020                     ??_eeprom_read:	
   785                           ; 1 bytes @ 0x0
   786                           
   787  0020                     ?_eeprom_write:	
   788                           ; 1 bytes @ 0x0
   789                           
   790  0020                     ??_UART_Write:	
   791                           ; 1 bytes @ 0x0
   792                           
   793  0020                     ?___bmul:	
   794                           ; 1 bytes @ 0x0
   795                           
   796  0020                     ?___lbdiv:	
   797                           ; 1 bytes @ 0x0
   798                           
   799  0020                     ?___wmul:	
   800                           ; 1 bytes @ 0x0
   801                           
   802  0020                     ?___awdiv:	
   803                           ; 2 bytes @ 0x0
   804                           
   805  0020                     ?___lwdiv:	
   806                           ; 2 bytes @ 0x0
   807                           
   808  0020                     eeprom_write@value:	
   809                           ; 2 bytes @ 0x0
   810                           
   811  0020                     ___bmul@multiplicand:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0020                     ___lbdiv@divisor:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0020                     delay_wdt@_ms:	
   818                           ; 1 bytes @ 0x0
   819                           
   820  0020                     ___wmul@multiplier:	
   821                           ; 2 bytes @ 0x0
   822                           
   823  0020                     ___awdiv@divisor:	
   824                           ; 2 bytes @ 0x0
   825                           
   826  0020                     ___lwdiv@divisor:	
   827                           ; 2 bytes @ 0x0
   828                           
   829                           
   830                           ; 2 bytes @ 0x0
   831  0020                     	ds	1
   832  0021                     ??_eeprom_write:
   833  0021                     ??___bmul:	
   834                           ; 1 bytes @ 0x1
   835                           
   836  0021                     ??___lbdiv:	
   837                           ; 1 bytes @ 0x1
   838                           
   839  0021                     eeprom_read@addr:	
   840                           ; 1 bytes @ 0x1
   841                           
   842                           
   843                           ; 1 bytes @ 0x1
   844  0021                     	ds	1
   845  0022                     ??_UART_Init:
   846  0022                     ??_delay_wdt:	
   847                           ; 1 bytes @ 0x2
   848                           
   849  0022                     ?_PRESET_load:	
   850                           ; 1 bytes @ 0x2
   851                           
   852  0022                     ??_BAUDS_get:	
   853                           ; 1 bytes @ 0x2
   854                           
   855  0022                     PRESET_load@pan:	
   856                           ; 1 bytes @ 0x2
   857                           
   858  0022                     eeprom_write@addr:	
   859                           ; 1 bytes @ 0x2
   860                           
   861  0022                     ___bmul@product:	
   862                           ; 1 bytes @ 0x2
   863                           
   864  0022                     ___lbdiv@dividend:	
   865                           ; 1 bytes @ 0x2
   866                           
   867  0022                     ___wmul@multiplicand:	
   868                           ; 1 bytes @ 0x2
   869                           
   870  0022                     ___awdiv@dividend:	
   871                           ; 2 bytes @ 0x2
   872                           
   873  0022                     ___lwdiv@dividend:	
   874                           ; 2 bytes @ 0x2
   875                           
   876                           
   877                           ; 2 bytes @ 0x2
   878  0022                     	ds	1
   879  0023                     ??_MOTOR_Init:
   880  0023                     ?_eeprom_update:	
   881                           ; 1 bytes @ 0x3
   882                           
   883  0023                     eeprom_update@value:	
   884                           ; 1 bytes @ 0x3
   885                           
   886  0023                     PRESET_load@tilt:	
   887                           ; 1 bytes @ 0x3
   888                           
   889  0023                     ___bmul@multiplier:	
   890                           ; 1 bytes @ 0x3
   891                           
   892  0023                     ___lbdiv@counter:	
   893                           ; 1 bytes @ 0x3
   894                           
   895                           
   896                           ; 1 bytes @ 0x3
   897  0023                     	ds	1
   898  0024                     ??_PRESET_load:
   899  0024                     ??_eeprom_update:	
   900                           ; 1 bytes @ 0x4
   901                           
   902  0024                     ??___wmul:	
   903                           ; 1 bytes @ 0x4
   904                           
   905  0024                     ??___awdiv:	
   906                           ; 1 bytes @ 0x4
   907                           
   908  0024                     ??___lwdiv:	
   909                           ; 1 bytes @ 0x4
   910                           
   911  0024                     UART_Init@bauds_index:	
   912                           ; 1 bytes @ 0x4
   913                           
   914  0024                     UART_Write@data:	
   915                           ; 1 bytes @ 0x4
   916                           
   917  0024                     ___lbdiv@quotient:	
   918                           ; 1 bytes @ 0x4
   919                           
   920  0024                     ___wmul@product:	
   921                           ; 1 bytes @ 0x4
   922                           
   923                           
   924                           ; 2 bytes @ 0x4
   925  0024                     	ds	1
   926  0025                     eeprom_update@addr:
   927  0025                     ___awdiv@counter:	
   928                           ; 1 bytes @ 0x5
   929                           
   930  0025                     ___lwdiv@counter:	
   931                           ; 1 bytes @ 0x5
   932                           
   933  0025                     UART_Write@timeout:	
   934                           ; 1 bytes @ 0x5
   935                           
   936                           
   937                           ; 4 bytes @ 0x5
   938  0025                     	ds	1
   939  0026                     ??_BAUDS_set:
   940  0026                     ?_PRESET_save:	
   941                           ; 1 bytes @ 0x6
   942                           
   943  0026                     PRESET_load@id:	
   944                           ; 1 bytes @ 0x6
   945                           
   946  0026                     ___awdiv@sign:	
   947                           ; 1 bytes @ 0x6
   948                           
   949  0026                     PRESET_save@pan:	
   950                           ; 1 bytes @ 0x6
   951                           
   952  0026                     ___lwdiv@quotient:	
   953                           ; 2 bytes @ 0x6
   954                           
   955                           
   956                           ; 2 bytes @ 0x6
   957  0026                     	ds	1
   958  0027                     PRESET_load@_addr:
   959  0027                     BAUDS_set@index:	
   960                           ; 1 bytes @ 0x7
   961                           
   962  0027                     ___awdiv@quotient:	
   963                           ; 1 bytes @ 0x7
   964                           
   965                           
   966                           ; 2 bytes @ 0x7
   967  0027                     	ds	1
   968  0028                     PRESET_save@tilt:
   969                           
   970                           ; 2 bytes @ 0x8
   971  0028                     	ds	1
   972  0029                     ??_UART_Write_Text_CRLF:
   973  0029                     ??_UART_Write_Text:	
   974                           ; 1 bytes @ 0x9
   975                           
   976  0029                     ??_SPEED_calc:	
   977                           ; 1 bytes @ 0x9
   978                           
   979  0029                     ?_print_val:	
   980                           ; 1 bytes @ 0x9
   981                           
   982  0029                     print_val@value:	
   983                           ; 1 bytes @ 0x9
   984                           
   985  0029                     UART_Write_Text@i:	
   986                           ; 2 bytes @ 0x9
   987                           
   988  0029                     UART_Write_Text_CRLF@i:	
   989                           ; 2 bytes @ 0x9
   990                           
   991                           
   992                           ; 2 bytes @ 0x9
   993  0029                     	ds	1
   994  002A                     ??_PRESET_save:
   995                           
   996                           ; 1 bytes @ 0xA
   997  002A                     	ds	1
   998  002B                     ??_print_val:
   999  002B                     SPEED_calc@speed:	
  1000                           ; 1 bytes @ 0xB
  1001                           
  1002  002B                     UART_Write_Text@text:	
  1003                           ; 1 bytes @ 0xB
  1004                           
  1005  002B                     UART_Write_Text_CRLF@text:	
  1006                           ; 1 bytes @ 0xB
  1007                           
  1008  002B                     print_val@val1:	
  1009                           ; 1 bytes @ 0xB
  1010                           
  1011                           
  1012                           ; 2 bytes @ 0xB
  1013  002B                     	ds	1
  1014  002C                     SPEED_calc@sp_calc:
  1015  002C                     PRESET_save@id:	
  1016                           ; 1 bytes @ 0xC
  1017                           
  1018                           
  1019                           ; 1 bytes @ 0xC
  1020  002C                     	ds	1
  1021  002D                     PRESET_save@_addr:
  1022  002D                     print_val@val10:	
  1023                           ; 1 bytes @ 0xD
  1024                           
  1025                           
  1026                           ; 2 bytes @ 0xD
  1027  002D                     	ds	2
  1028  002F                     print_val@val100:
  1029                           
  1030                           ; 2 bytes @ 0xF
  1031  002F                     	ds	2
  1032  0031                     print_val@val1000:
  1033                           
  1034                           ; 2 bytes @ 0x11
  1035  0031                     	ds	2
  1036  0033                     print_val@val10000:
  1037                           
  1038                           ; 2 bytes @ 0x13
  1039  0033                     	ds	2
  1040  0035                     ?_print_cnt:
  1041  0035                     print_cnt@_pan:	
  1042                           ; 1 bytes @ 0x15
  1043                           
  1044                           
  1045                           ; 2 bytes @ 0x15
  1046  0035                     	ds	2
  1047  0037                     print_cnt@_tilt:
  1048                           
  1049                           ; 2 bytes @ 0x17
  1050  0037                     	ds	2
  1051  0039                     ??_print_cnt:
  1052  0039                     ?_print_preset:	
  1053                           ; 1 bytes @ 0x19
  1054                           
  1055  0039                     ?_print_cmd_mov:	
  1056                           ; 1 bytes @ 0x19
  1057                           
  1058  0039                     print_preset@pan:	
  1059                           ; 1 bytes @ 0x19
  1060                           
  1061  0039                     print_cmd_mov@pan:	
  1062                           ; 2 bytes @ 0x19
  1063                           
  1064                           
  1065                           ; 2 bytes @ 0x19
  1066  0039                     	ds	2
  1067  003B                     print_preset@tilt:
  1068  003B                     print_cmd_mov@tilt:	
  1069                           ; 2 bytes @ 0x1B
  1070                           
  1071                           
  1072                           ; 2 bytes @ 0x1B
  1073  003B                     	ds	2
  1074  003D                     ??_print_cmd_mov:
  1075  003D                     print_preset@text:	
  1076                           ; 1 bytes @ 0x1D
  1077                           
  1078  003D                     print_cmd_mov@text:	
  1079                           ; 1 bytes @ 0x1D
  1080                           
  1081                           
  1082                           ; 1 bytes @ 0x1D
  1083  003D                     	ds	1
  1084  003E                     ??_print_preset:
  1085                           
  1086                           ; 1 bytes @ 0x1E
  1087  003E                     	ds	2
  1088  0040                     print_preset@preset_id_1:
  1089                           
  1090                           ; 1 bytes @ 0x20
  1091  0040                     	ds	1
  1092  0041                     print_preset@id:
  1093                           
  1094                           ; 1 bytes @ 0x21
  1095  0041                     	ds	1
  1096  0042                     print_preset@preset_id_10:
  1097                           
  1098                           ; 1 bytes @ 0x22
  1099  0042                     	ds	1
  1100  0043                     ??_main:
  1101                           
  1102                           ; 1 bytes @ 0x23
  1103  0043                     	ds	2
  1104  0045                     main@chksum_calc:
  1105                           
  1106                           ; 1 bytes @ 0x25
  1107  0045                     	ds	1
  1108  0046                     main@pan_tmp:
  1109                           
  1110                           ; 2 bytes @ 0x26
  1111  0046                     	ds	2
  1112  0048                     main@tilt_tmp:
  1113                           
  1114                           ; 2 bytes @ 0x28
  1115  0048                     	ds	2
  1116  004A                     main@pan_tmp_439:
  1117                           
  1118                           ; 2 bytes @ 0x2A
  1119  004A                     	ds	2
  1120  004C                     main@tilt_tmp_440:
  1121                           
  1122                           ; 2 bytes @ 0x2C
  1123  004C                     	ds	2
  1124  004E                     main@m:
  1125                           
  1126                           ; 1 bytes @ 0x2E
  1127  004E                     	ds	1
  1128  004F                     main@i:
  1129                           
  1130                           ; 1 bytes @ 0x2F
  1131  004F                     	ds	1
  1132                           
  1133                           	psect	maintext
  1134  0026                     __pmaintext:	
  1135 ;;
  1136 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1137 ;;
  1138 ;; *************** function _main *****************
  1139 ;; Defined at:
  1140 ;;		line 324 in file "main.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  tilt_tmp        2   44[BANK0 ] unsigned int 
  1145 ;;  pan_tmp         2   42[BANK0 ] unsigned int 
  1146 ;;  tilt_tmp        2   40[BANK0 ] unsigned int 
  1147 ;;  pan_tmp         2   38[BANK0 ] unsigned int 
  1148 ;;  m               1   46[BANK0 ] unsigned char 
  1149 ;;  chksum_calc     1   37[BANK0 ] unsigned char 
  1150 ;;  i               1   47[BANK0 ] unsigned char 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : B00/0
  1157 ;;		On exit  : B00/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1160 ;;      Params:         0       0       0       0
  1161 ;;      Locals:         0      11       0       0
  1162 ;;      Temps:          0       2       0       0
  1163 ;;      Totals:         0      13       0       0
  1164 ;;Total ram usage:       13 bytes
  1165 ;; Hardware stack levels required when called: 6
  1166 ;; This function calls:
  1167 ;;		_BAUDS_set
  1168 ;;		_MOTOR_Init
  1169 ;;		_PRESET_load
  1170 ;;		_PRESET_save
  1171 ;;		_SPEED_calc
  1172 ;;		_TIMER1_Init
  1173 ;;		_UART_Init
  1174 ;;		_UART_Write_Text
  1175 ;;		_UART_Write_Text_CRLF
  1176 ;;		_UC_Init
  1177 ;;		_delay_wdt
  1178 ;;		_print_cmd_mov
  1179 ;;		_print_cnt
  1180 ;;		_print_preset
  1181 ;; This function is called by:
  1182 ;;		Startup code after reset
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186  0026                     _main:	
  1187                           ;psect for function _main
  1188                           
  1189                           
  1190                           ;main.c: 325:     UC_Init();
  1191                           
  1192                           ;incstack = 0
  1193                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1194  0026  158A  25E0  118A   	fcall	_UC_Init
  1195                           
  1196                           ;main.c: 327:     UART_Init();
  1197  0029  118A  27B7  118A   	fcall	_UART_Init
  1198                           
  1199                           ;main.c: 329:     TIMER1_Init();
  1200  002C  158A  2587  118A   	fcall	_TIMER1_Init
  1201                           
  1202                           ;main.c: 331:     delay_wdt(500);
  1203  002F  30F4               	movlw	244
  1204  0030  1283               	bcf	3,5	;RP0=0, select bank0
  1205  0031  00A0               	movwf	delay_wdt@_ms
  1206  0032  3001               	movlw	1
  1207  0033  00A1               	movwf	delay_wdt@_ms+1
  1208  0034  158A  2610  118A   	fcall	_delay_wdt
  1209                           
  1210                           ;main.c: 333:     UART_Write_Text_CRLF("\r\n\r\nStart");
  1211  0037  3094               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1212  0038  158A  26A9  118A   	fcall	_UART_Write_Text_CRLF
  1213                           
  1214                           ;main.c: 335:     UART_Write_Text_CRLF("Goto PAN and TILT Home");
  1215  003B  3029               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1216  003C  158A  26A9  118A   	fcall	_UART_Write_Text_CRLF
  1217                           
  1218                           ;main.c: 337:     delay_wdt(50);
  1219  003F  3032               	movlw	50
  1220  0040  00A0               	movwf	delay_wdt@_ms
  1221  0041  3000               	movlw	0
  1222  0042  00A1               	movwf	delay_wdt@_ms+1
  1223  0043  158A  2610  118A   	fcall	_delay_wdt
  1224                           
  1225                           ;main.c: 339:     MOTOR_Init();
  1226  0046  118A  26D9  118A   	fcall	_MOTOR_Init
  1227                           
  1228                           ;main.c: 341:     UART_Write_Text_CRLF("Waiting for commands");
  1229  0049  3040               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1230  004A                     L6:
  1231  004A  158A  26A9  118A   	fcall	_UART_Write_Text_CRLF
  1232  004D  2B02               	goto	l242
  1233  004E                     l3482:
  1234                           
  1235                           ;main.c: 347:             buffer_ready[frame_index] = 0;
  1236  004E  0860               	movf	_frame_index,w
  1237  004F  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  1238  0050  0084               	movwf	4
  1239  0051  0180               	clrf	0
  1240                           
  1241                           ;main.c: 349:             for (uint8_t i = 0; i < 7; i++) {
  1242  0052  01CF               	clrf	main@i
  1243  0053                     l3490:
  1244                           
  1245                           ;main.c: 350:                 if (frame_index == 0) {
  1246  0053  0860               	movf	_frame_index,w
  1247  0054  1D03               	btfss	3,2
  1248  0055  2859               	goto	l3494
  1249                           
  1250                           ;main.c: 351:                     frame_data[i] = buffer_data0[i];
  1251  0056  084F               	movf	main@i,w
  1252  0057  3EC3               	addlw	(low (_buffer_data0| 0))& (0+255)
  1253  0058  2873               	goto	L4
  1254  0059                     l3494:	
  1255                           ;main.c: 352:                 } else if (frame_index == 1) {
  1256                           
  1257  0059  0360               	decf	_frame_index,w
  1258  005A  1D03               	btfss	3,2
  1259  005B  285F               	goto	l3498
  1260                           
  1261                           ;main.c: 353:                     frame_data[i] = buffer_data1[i];
  1262  005C  084F               	movf	main@i,w
  1263  005D  3EBC               	addlw	(low (_buffer_data1| 0))& (0+255)
  1264  005E  2873               	goto	L4
  1265  005F                     l3498:	
  1266                           ;main.c: 354:                 } else if (frame_index == 2) {
  1267                           
  1268  005F  3002               	movlw	2
  1269  0060  0660               	xorwf	_frame_index,w
  1270  0061  1D03               	btfss	3,2
  1271  0062  2866               	goto	l3502
  1272                           
  1273                           ;main.c: 355:                     frame_data[i] = buffer_data2[i];
  1274  0063  084F               	movf	main@i,w
  1275  0064  3EB5               	addlw	(low (_buffer_data2| 0))& (0+255)
  1276  0065  2873               	goto	L4
  1277  0066                     l3502:	
  1278                           ;main.c: 356:                 } else if (frame_index == 3) {
  1279                           
  1280  0066  3003               	movlw	3
  1281  0067  0660               	xorwf	_frame_index,w
  1282  0068  1D03               	btfss	3,2
  1283  0069  286D               	goto	l3506
  1284                           
  1285                           ;main.c: 357:                     frame_data[i] = buffer_data3[i];
  1286  006A  084F               	movf	main@i,w
  1287  006B  3EAE               	addlw	(low (_buffer_data3| 0))& (0+255)
  1288  006C  2873               	goto	L4
  1289  006D                     l3506:	
  1290                           ;main.c: 358:                 } else if (frame_index == 4) {
  1291                           
  1292  006D  3004               	movlw	4
  1293  006E  0660               	xorwf	_frame_index,w
  1294  006F  1D03               	btfss	3,2
  1295  0070  287B               	goto	l3510
  1296                           
  1297                           ;main.c: 359:                     frame_data[i] = buffer_data4[i];
  1298  0071  084F               	movf	main@i,w
  1299  0072  3EA7               	addlw	(low (_buffer_data4| 0))& (0+255)
  1300  0073                     L4:
  1301  0073  0084               	movwf	4
  1302  0074  0800               	movf	0,w
  1303  0075  00C3               	movwf	??_main
  1304  0076  084F               	movf	main@i,w
  1305  0077  3EA0               	addlw	(low (_frame_data| 0))& (0+255)
  1306  0078  0084               	movwf	4
  1307  0079  0843               	movf	??_main,w
  1308  007A  0080               	movwf	0
  1309  007B                     l3510:
  1310                           
  1311                           ;main.c: 363:             }
  1312  007B  3001               	movlw	1
  1313  007C  00C3               	movwf	??_main
  1314  007D  0843               	movf	??_main,w
  1315  007E  07CF               	addwf	main@i,f
  1316  007F  3007               	movlw	7
  1317  0080  024F               	subwf	main@i,w
  1318  0081  1C03               	skipc
  1319  0082  2853               	goto	l3490
  1320                           
  1321                           ;main.c: 365:             if (frame_data[0] == 0xFF) {
  1322  0083  1683               	bsf	3,5	;RP0=1, select bank1
  1323  0084  0A20               	incf	_frame_data^(0+128),w
  1324  0085  1D03               	btfss	3,2
  1325  0086  2B02               	goto	l242
  1326                           
  1327                           ;main.c: 366:                 uint8_t chksum_calc = 0;
  1328  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1329  0088  01C5               	clrf	main@chksum_calc
  1330                           
  1331                           ;main.c: 368:                 for (uint8_t m = 1; m <= 5; m++) {
  1332  0089  01CE               	clrf	main@m
  1333  008A  0ACE               	incf	main@m,f
  1334  008B                     l3524:
  1335                           
  1336                           ;main.c: 369:                     chksum_calc += frame_data[m];
  1337  008B  084E               	movf	main@m,w
  1338  008C  3EA0               	addlw	(low (_frame_data| 0))& (0+255)
  1339  008D  0084               	movwf	4
  1340  008E  0800               	movf	0,w
  1341  008F  00C3               	movwf	??_main
  1342  0090  0843               	movf	??_main,w
  1343  0091  07C5               	addwf	main@chksum_calc,f
  1344                           
  1345                           ;main.c: 370:                 }
  1346  0092  3001               	movlw	1
  1347  0093  00C3               	movwf	??_main
  1348  0094  0843               	movf	??_main,w
  1349  0095  07CE               	addwf	main@m,f
  1350  0096  3006               	movlw	6
  1351  0097  024E               	subwf	main@m,w
  1352  0098  1C03               	skipc
  1353  0099  288B               	goto	l3524
  1354                           
  1355                           ;main.c: 372:                 if (chksum_calc == frame_data[6]) {
  1356  009A  1683               	bsf	3,5	;RP0=1, select bank1
  1357  009B  0826               	movf	(_frame_data^(0+128)+6),w
  1358  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1359  009D  0645               	xorwf	main@chksum_calc,w
  1360  009E  1D03               	skipz
  1361  009F  2B02               	goto	l242
  1362                           
  1363                           ;main.c: 374:                     P_addr = frame_data[1];
  1364  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  1365  00A1  0821               	movf	(_frame_data^(0+128)+1),w
  1366  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  1367  00A3  00C3               	movwf	??_main
  1368  00A4  0843               	movf	??_main,w
  1369  00A5  00DE               	movwf	_P_addr
  1370                           
  1371                           ;main.c: 375:                     P_cmd1 = frame_data[2];
  1372  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  1373  00A7  0822               	movf	(_frame_data^(0+128)+2),w
  1374  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  1375  00A9  00C3               	movwf	??_main
  1376  00AA  0843               	movf	??_main,w
  1377  00AB  00DD               	movwf	_P_cmd1
  1378                           
  1379                           ;main.c: 376:                     P_cmd2 = frame_data[3];
  1380  00AC  1683               	bsf	3,5	;RP0=1, select bank1
  1381  00AD  0823               	movf	(_frame_data^(0+128)+3),w
  1382  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1383  00AF  00C3               	movwf	??_main
  1384  00B0  0843               	movf	??_main,w
  1385  00B1  00DC               	movwf	_P_cmd2
  1386                           
  1387                           ;main.c: 377:                     P_dat1 = frame_data[4];
  1388  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  1389  00B3  0824               	movf	(_frame_data^(0+128)+4),w
  1390  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1391  00B5  00C3               	movwf	??_main
  1392  00B6  0843               	movf	??_main,w
  1393  00B7  00DB               	movwf	_P_dat1
  1394                           
  1395                           ;main.c: 378:                     P_dat2 = frame_data[5];
  1396  00B8  1683               	bsf	3,5	;RP0=1, select bank1
  1397  00B9  0825               	movf	(_frame_data^(0+128)+5),w
  1398  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1399  00BB  00C3               	movwf	??_main
  1400  00BC  0843               	movf	??_main,w
  1401  00BD  00DA               	movwf	_P_dat2
  1402                           
  1403                           ;main.c: 379:                     P_chksum = frame_data[6];
  1404  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  1405  00BF  0826               	movf	(_frame_data^(0+128)+6),w
  1406  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1407  00C1  00C3               	movwf	??_main
  1408  00C2  0843               	movf	??_main,w
  1409  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  1410  00C4  00D0               	movwf	_P_chksum^(0+128)
  1411                           
  1412                           ;main.c: 381:                     response_type = 0x00;
  1413  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  1414  00C6  01DF               	clrf	_response_type
  1415                           
  1416                           ;main.c: 384:                     if (P_addr == 0x01) {
  1417  00C7  035E               	decf	_P_addr,w
  1418  00C8  1D03               	btfss	3,2
  1419  00C9  2B02               	goto	l242
  1420                           
  1421                           ;main.c: 385:                         if ((P_cmd1 == 0xF0) && (P_cmd2 == 0x83) && (P_dat
      +                          1 == 0x00) && (P_dat2 == 0x01)) {
  1422  00CA  30F0               	movlw	240
  1423  00CB  065D               	xorwf	_P_cmd1,w
  1424  00CC  1D03               	btfss	3,2
  1425  00CD  28DD               	goto	l3548
  1426  00CE  3083               	movlw	131
  1427  00CF  065C               	xorwf	_P_cmd2,w
  1428  00D0  1D03               	btfss	3,2
  1429  00D1  28DD               	goto	l3548
  1430  00D2  085B               	movf	_P_dat1,w
  1431  00D3  1D03               	btfss	3,2
  1432  00D4  28DD               	goto	l3548
  1433  00D5  035A               	decf	_P_dat2,w
  1434  00D6  1D03               	btfss	3,2
  1435  00D7  28DD               	goto	l3548
  1436                           
  1437                           ;main.c: 386:                             UART_Write_Text_CRLF("REBOOT");
  1438  00D8  30B4               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1439  00D9  158A  26A9  118A   	fcall	_UART_Write_Text_CRLF
  1440  00DC                     l261:	
  1441                           ;main.c: 388:                             while (1) {
  1442                           
  1443                           
  1444                           ;main.c: 390:                             }
  1445  00DC  28DC               	goto	l261
  1446  00DD                     l3548:
  1447  00DD  085D               	movf	_P_cmd1,w
  1448  00DE  1D03               	btfss	3,2
  1449  00DF  2932               	goto	l3580
  1450  00E0  3067               	movlw	103
  1451  00E1  065C               	xorwf	_P_cmd2,w
  1452  00E2  1D03               	btfss	3,2
  1453  00E3  2932               	goto	l3580
  1454  00E4  085B               	movf	_P_dat1,w
  1455  00E5  1D03               	btfss	3,2
  1456  00E6  2932               	goto	l3580
  1457                           
  1458                           ;main.c: 393:                             if (is_reboot == 1) {
  1459  00E7  0358               	decf	_is_reboot,w
  1460  00E8  1D03               	btfss	3,2
  1461  00E9  292C               	goto	l3578
  1462                           
  1463                           ;main.c: 394:                                 BAUDS_set(P_dat2);
  1464  00EA  085A               	movf	_P_dat2,w
  1465  00EB  158A  257E  118A   	fcall	_BAUDS_set
  1466                           
  1467                           ;main.c: 396:                                 UART_Write_Text("SET BAUD RATE");
  1468  00EE  3063               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1469  00EF  158A  2629  118A   	fcall	_UART_Write_Text
  1470                           
  1471                           ;main.c: 398:                                 switch (P_dat2) {
  1472  00F2  2911               	goto	l3574
  1473  00F3                     l3560:
  1474                           
  1475                           ;main.c: 400:                                         UART_Write_Text_CRLF("2400");
  1476  00F3  30CD               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1477  00F4  158A  26A9  118A   	fcall	_UART_Write_Text_CRLF
  1478                           
  1479                           ;main.c: 401:                                         break;
  1480  00F7  292A               	goto	l3576
  1481  00F8                     l3562:
  1482                           
  1483                           ;main.c: 403:                                         UART_Write_Text_CRLF("4800");
  1484  00F8  30D7               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1485  00F9  158A  26A9  118A   	fcall	_UART_Write_Text_CRLF
  1486                           
  1487                           ;main.c: 404:                                         break;
  1488  00FC  292A               	goto	l3576
  1489  00FD                     l3564:
  1490                           
  1491                           ;main.c: 406:                                         UART_Write_Text_CRLF("19200");
  1492  00FD  30BB               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1493  00FE  158A  26A9  118A   	fcall	_UART_Write_Text_CRLF
  1494                           
  1495                           ;main.c: 407:                                         break;
  1496  0101  292A               	goto	l3576
  1497  0102                     l3566:
  1498                           
  1499                           ;main.c: 409:                                         UART_Write_Text_CRLF("38400");
  1500  0102  30C1               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1501  0103  158A  26A9  118A   	fcall	_UART_Write_Text_CRLF
  1502                           
  1503                           ;main.c: 410:                                         break;
  1504  0106  292A               	goto	l3576
  1505  0107                     l3568:
  1506                           
  1507                           ;main.c: 412:                                         UART_Write_Text_CRLF("115200");
  1508  0107  30AD               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1509  0108  158A  26A9  118A   	fcall	_UART_Write_Text_CRLF
  1510                           
  1511                           ;main.c: 413:                                         break;
  1512  010B  292A               	goto	l3576
  1513  010C                     l3570:
  1514                           
  1515                           ;main.c: 416:                                         UART_Write_Text_CRLF("9600");
  1516  010C  30D2               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1517  010D  158A  26A9  118A   	fcall	_UART_Write_Text_CRLF
  1518                           
  1519                           ;main.c: 417:                                         break;
  1520  0110  292A               	goto	l3576
  1521  0111                     l3574:
  1522  0111  085A               	movf	_P_dat2,w
  1523  0112  00C3               	movwf	??_main
  1524  0113  01C4               	clrf	??_main+1
  1525                           
  1526                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1527                           ; Switch size 1, requested type "simple"
  1528                           ; Number of cases is 1, Range of values is 0 to 0
  1529                           ; switch strategies available:
  1530                           ; Name         Instructions Cycles
  1531                           ; simple_byte            4     3 (average)
  1532                           ; direct_byte            9     7 (fixed)
  1533                           ; jumptable            260     6 (fixed)
  1534                           ;	Chosen strategy is simple_byte
  1535  0114  0844               	movf	??_main+1,w
  1536  0115  3A00               	xorlw	0	; case 0
  1537  0116  1903               	skipnz
  1538  0117  2919               	goto	l3880
  1539  0118  290C               	goto	l3570
  1540  0119                     l3880:
  1541                           
  1542                           ; Switch size 1, requested type "simple"
  1543                           ; Number of cases is 5, Range of values is 0 to 5
  1544                           ; switch strategies available:
  1545                           ; Name         Instructions Cycles
  1546                           ; simple_byte           16     9 (average)
  1547                           ; direct_byte           19     7 (fixed)
  1548                           ; jumptable            260     6 (fixed)
  1549                           ;	Chosen strategy is simple_byte
  1550  0119  0843               	movf	??_main,w
  1551  011A  3A00               	xorlw	0	; case 0
  1552  011B  1903               	skipnz
  1553  011C  28F3               	goto	l3560
  1554  011D  3A01               	xorlw	1	; case 1
  1555  011E  1903               	skipnz
  1556  011F  28F8               	goto	l3562
  1557  0120  3A02               	xorlw	2	; case 3
  1558  0121  1903               	skipnz
  1559  0122  28FD               	goto	l3564
  1560  0123  3A07               	xorlw	7	; case 4
  1561  0124  1903               	skipnz
  1562  0125  2902               	goto	l3566
  1563  0126  3A01               	xorlw	1	; case 5
  1564  0127  1903               	skipnz
  1565  0128  2907               	goto	l3568
  1566  0129  290C               	goto	l3570
  1567  012A                     l3576:
  1568                           
  1569                           ;main.c: 420:                                 UART_Write_Text("\r\nPLEASE ");
  1570  012A  308A               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1571  012B  292D               	goto	L5
  1572  012C                     l3578:	
  1573                           ;main.c: 421:                             } else {
  1574                           
  1575                           
  1576                           ;main.c: 422:                                 UART_Write_Text("\r\nNEED ");
  1577  012C  309E               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1578  012D                     L5:
  1579  012D  158A  2629  118A   	fcall	_UART_Write_Text
  1580                           
  1581                           ;main.c: 425:                             UART_Write_Text_CRLF("REBOOT");
  1582                           
  1583                           ;main.c: 423:                             }
  1584  0130  30B4               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1585  0131  284A               	goto	L6
  1586  0132                     l3580:	
  1587                           ;main.c: 426:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x00) &&
      +                           (P_dat1 == 0x00) && (P_dat2 == 0x00)) {
  1588                           
  1589  0132  085D               	movf	_P_cmd1,w
  1590  0133  1D03               	btfss	3,2
  1591  0134  2955               	goto	l3598
  1592  0135  085C               	movf	_P_cmd2,w
  1593  0136  1D03               	btfss	3,2
  1594  0137  2955               	goto	l3598
  1595  0138  085B               	movf	_P_dat1,w
  1596  0139  1D03               	btfss	3,2
  1597  013A  2955               	goto	l3598
  1598  013B  085A               	movf	_P_dat2,w
  1599  013C  1D03               	btfss	3,2
  1600  013D  2955               	goto	l3598
  1601                           
  1602                           ;main.c: 427:                             pan_enabled = 0;
  1603  013E  01EA               	clrf	_pan_enabled	;volatile
  1604                           
  1605                           ;main.c: 428:                             tilt_enabled = 0;
  1606  013F  01E7               	clrf	_tilt_enabled	;volatile
  1607                           
  1608                           ;main.c: 429:                             preset_pan_enabled = 0;
  1609  0140  01ED               	clrf	_preset_pan_enabled	;volatile
  1610                           
  1611                           ;main.c: 430:                             preset_tilt_enabled = 0;
  1612  0141  01EB               	clrf	_preset_tilt_enabled	;volatile
  1613                           
  1614                           ;main.c: 432:                             response_type = 0x01;
  1615  0142  01DF               	clrf	_response_type
  1616  0143  0ADF               	incf	_response_type,f
  1617                           
  1618                           ;main.c: 433:                             UART_Write_Text("STOP (");
  1619  0144  30A6               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1620  0145  158A  2629  118A   	fcall	_UART_Write_Text
  1621                           
  1622                           ;main.c: 434:                             print_cnt(pan_counter, tilt_counter);
  1623  0148  0857               	movf	_pan_counter+1,w	;volatile
  1624  0149  00B6               	movwf	print_cnt@_pan+1
  1625  014A  0856               	movf	_pan_counter,w	;volatile
  1626  014B  00B5               	movwf	print_cnt@_pan
  1627  014C  0855               	movf	_tilt_counter+1,w	;volatile
  1628  014D  00B8               	movwf	print_cnt@_tilt+1
  1629  014E  0854               	movf	_tilt_counter,w	;volatile
  1630  014F  00B7               	movwf	print_cnt@_tilt
  1631  0150  158A  25B8  118A   	fcall	_print_cnt
  1632                           
  1633                           ;main.c: 435:                             UART_Write_Text_CRLF(")");
  1634  0153  30EC               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1635  0154  284A               	goto	L6
  1636  0155                     l3598:	
  1637                           ;main.c: 437:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x03) &&
      +                           (P_dat1 == 0x00)) {
  1638                           
  1639  0155  085D               	movf	_P_cmd1,w
  1640  0156  1D03               	btfss	3,2
  1641  0157  2983               	goto	l3612
  1642  0158  3003               	movlw	3
  1643  0159  065C               	xorwf	_P_cmd2,w
  1644  015A  1D03               	btfss	3,2
  1645  015B  2983               	goto	l3612
  1646  015C  085B               	movf	_P_dat1,w
  1647  015D  1D03               	btfss	3,2
  1648  015E  2983               	goto	l3612
  1649                           
  1650                           ;main.c: 438:                             preset_id = P_dat2;
  1651  015F  085A               	movf	_P_dat2,w
  1652  0160  00C3               	movwf	??_main
  1653  0161  0843               	movf	??_main,w
  1654  0162  00D9               	movwf	_preset_id
  1655                           
  1656                           ;main.c: 439:                             PRESET_save(preset_id, pan_counter, tilt_count
      +                          er);
  1657  0163  0857               	movf	_pan_counter+1,w	;volatile
  1658  0164  00A7               	movwf	PRESET_save@pan+1
  1659  0165  0856               	movf	_pan_counter,w	;volatile
  1660  0166  00A6               	movwf	PRESET_save@pan
  1661  0167  0855               	movf	_tilt_counter+1,w	;volatile
  1662  0168  00A9               	movwf	PRESET_save@tilt+1
  1663  0169  0854               	movf	_tilt_counter,w	;volatile
  1664  016A  00A8               	movwf	PRESET_save@tilt
  1665  016B  0859               	movf	_preset_id,w
  1666  016C  158A  2735  118A   	fcall	_PRESET_save
  1667                           
  1668                           ;main.c: 440:                             response_type = 0x01;
  1669  016F  1283               	bcf	3,5	;RP0=0, select bank0
  1670  0170  01DF               	clrf	_response_type
  1671  0171  0ADF               	incf	_response_type,f
  1672                           
  1673                           ;main.c: 442:                             print_preset(preset_id, pan_counter, tilt_coun
      +                          ter, "SET PRESET ");
  1674  0172  0857               	movf	_pan_counter+1,w	;volatile
  1675  0173  00BA               	movwf	print_preset@pan+1
  1676  0174  0856               	movf	_pan_counter,w	;volatile
  1677  0175  00B9               	movwf	print_preset@pan
  1678  0176  0855               	movf	_tilt_counter+1,w	;volatile
  1679  0177  00BC               	movwf	print_preset@tilt+1
  1680  0178  0854               	movf	_tilt_counter,w	;volatile
  1681  0179  00BB               	movwf	print_preset@tilt
  1682  017A  307E               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  1683  017B  00C3               	movwf	??_main
  1684  017C  0843               	movf	??_main,w
  1685  017D  00BD               	movwf	print_preset@text
  1686  017E  0859               	movf	_preset_id,w
  1687  017F  118A  24C5  118A   	fcall	_print_preset
  1688                           
  1689                           ;main.c: 443:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x05) &&
      +                           (P_dat1 == 0x00)) {
  1690  0182  2B02               	goto	l242
  1691  0183                     l3612:
  1692  0183  085D               	movf	_P_cmd1,w
  1693  0184  1D03               	btfss	3,2
  1694  0185  29C9               	goto	l3636
  1695  0186  3005               	movlw	5
  1696  0187  065C               	xorwf	_P_cmd2,w
  1697  0188  1D03               	btfss	3,2
  1698  0189  29C9               	goto	l3636
  1699  018A  085B               	movf	_P_dat1,w
  1700  018B  1D03               	btfss	3,2
  1701  018C  29C9               	goto	l3636
  1702                           
  1703                           ;main.c: 444:                             preset_id = P_dat2;
  1704  018D  085A               	movf	_P_dat2,w
  1705  018E  00C3               	movwf	??_main
  1706  018F  0843               	movf	??_main,w
  1707  0190  00D9               	movwf	_preset_id
  1708                           
  1709                           ;main.c: 445:                             PRESET_save(preset_id, 0xFFFF, 0xFFFF);
  1710  0191  30FF               	movlw	255
  1711  0192  00A6               	movwf	PRESET_save@pan
  1712  0193  30FF               	movlw	255
  1713  0194  00A7               	movwf	PRESET_save@pan+1
  1714  0195  30FF               	movlw	255
  1715  0196  00A8               	movwf	PRESET_save@tilt
  1716  0197  30FF               	movlw	255
  1717  0198  00A9               	movwf	PRESET_save@tilt+1
  1718  0199  0859               	movf	_preset_id,w
  1719  019A  158A  2735  118A   	fcall	_PRESET_save
  1720                           
  1721                           ;main.c: 447:                             uint16_t pan_tmp = 0;
  1722  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1723  019E  01C6               	clrf	main@pan_tmp
  1724  019F  01C7               	clrf	main@pan_tmp+1
  1725                           
  1726                           ;main.c: 448:                             uint16_t tilt_tmp = 0;
  1727  01A0  01C8               	clrf	main@tilt_tmp
  1728  01A1  01C9               	clrf	main@tilt_tmp+1
  1729                           
  1730                           ;main.c: 449:                             PRESET_load(preset_id, &pan_tmp, &tilt_tmp);
  1731  01A2  3046               	movlw	(low (main@pan_tmp| 0))& (0+255)
  1732  01A3  00C3               	movwf	??_main
  1733  01A4  0843               	movf	??_main,w
  1734  01A5  00A2               	movwf	PRESET_load@pan
  1735  01A6  3048               	movlw	(low (main@tilt_tmp| 0))& (0+255)
  1736  01A7  00C4               	movwf	??_main+1
  1737  01A8  0844               	movf	??_main+1,w
  1738  01A9  00A3               	movwf	PRESET_load@tilt
  1739  01AA  0859               	movf	_preset_id,w
  1740  01AB  158A  27A9  118A   	fcall	_PRESET_load
  1741                           
  1742                           ;main.c: 450:                             pan_goto = pan_tmp;
  1743  01AE  0847               	movf	main@pan_tmp+1,w
  1744  01AF  00D3               	movwf	_pan_goto+1	;volatile
  1745  01B0  0846               	movf	main@pan_tmp,w
  1746  01B1  00D2               	movwf	_pan_goto	;volatile
  1747                           
  1748                           ;main.c: 451:                             tilt_goto = tilt_tmp;
  1749  01B2  0849               	movf	main@tilt_tmp+1,w
  1750  01B3  00D1               	movwf	_tilt_goto+1	;volatile
  1751  01B4  0848               	movf	main@tilt_tmp,w
  1752  01B5  00D0               	movwf	_tilt_goto	;volatile
  1753                           
  1754                           ;main.c: 453:                             response_type = 0x01;
  1755  01B6  01DF               	clrf	_response_type
  1756  01B7  0ADF               	incf	_response_type,f
  1757                           
  1758                           ;main.c: 455:                             print_preset(preset_id, pan_goto, tilt_goto, "
      +                          CLEAR PRESET ");
  1759  01B8  0853               	movf	_pan_goto+1,w	;volatile
  1760  01B9  00BA               	movwf	print_preset@pan+1
  1761  01BA  0852               	movf	_pan_goto,w	;volatile
  1762  01BB  00B9               	movwf	print_preset@pan
  1763  01BC  0851               	movf	_tilt_goto+1,w	;volatile
  1764  01BD  00BC               	movwf	print_preset@tilt+1
  1765  01BE  0850               	movf	_tilt_goto,w	;volatile
  1766  01BF  00BB               	movwf	print_preset@tilt
  1767  01C0  3055               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  1768  01C1  00C3               	movwf	??_main
  1769  01C2  0843               	movf	??_main,w
  1770  01C3  00BD               	movwf	print_preset@text
  1771  01C4  0859               	movf	_preset_id,w
  1772  01C5  118A  24C5  118A   	fcall	_print_preset
  1773                           
  1774                           ;main.c: 456:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x07) &&
      +                           (P_dat1 == 0x00)) {
  1775  01C8  2B02               	goto	l242
  1776  01C9                     l3636:
  1777  01C9  085D               	movf	_P_cmd1,w
  1778  01CA  1D03               	btfss	3,2
  1779  01CB  2A6C               	goto	l283
  1780  01CC  3007               	movlw	7
  1781  01CD  065C               	xorwf	_P_cmd2,w
  1782  01CE  1D03               	btfss	3,2
  1783  01CF  2A6C               	goto	l283
  1784  01D0  085B               	movf	_P_dat1,w
  1785  01D1  1D03               	btfss	3,2
  1786  01D2  2A6C               	goto	l283
  1787                           
  1788                           ;main.c: 457:                             preset_id = P_dat2;
  1789  01D3  085A               	movf	_P_dat2,w
  1790  01D4  00C3               	movwf	??_main
  1791  01D5  0843               	movf	??_main,w
  1792  01D6  00D9               	movwf	_preset_id
  1793                           
  1794                           ;main.c: 459:                             uint16_t pan_tmp = 0;
  1795  01D7  01CA               	clrf	main@pan_tmp_439
  1796  01D8  01CB               	clrf	main@pan_tmp_439+1
  1797                           
  1798                           ;main.c: 460:                             uint16_t tilt_tmp = 0;
  1799  01D9  01CC               	clrf	main@tilt_tmp_440
  1800  01DA  01CD               	clrf	main@tilt_tmp_440+1
  1801                           
  1802                           ;main.c: 461:                             PRESET_load(preset_id, &pan_tmp, &tilt_tmp);
  1803  01DB  304A               	movlw	(low (main@pan_tmp_439| 0))& (0+255)
  1804  01DC  00C3               	movwf	??_main
  1805  01DD  0843               	movf	??_main,w
  1806  01DE  00A2               	movwf	PRESET_load@pan
  1807  01DF  304C               	movlw	(low (main@tilt_tmp_440| 0))& (0+255)
  1808  01E0  00C4               	movwf	??_main+1
  1809  01E1  0844               	movf	??_main+1,w
  1810  01E2  00A3               	movwf	PRESET_load@tilt
  1811  01E3  0859               	movf	_preset_id,w
  1812  01E4  158A  27A9  118A   	fcall	_PRESET_load
  1813                           
  1814                           ;main.c: 462:                             pan_goto = pan_tmp;
  1815  01E7  084B               	movf	main@pan_tmp_439+1,w
  1816  01E8  00D3               	movwf	_pan_goto+1	;volatile
  1817  01E9  084A               	movf	main@pan_tmp_439,w
  1818  01EA  00D2               	movwf	_pan_goto	;volatile
  1819                           
  1820                           ;main.c: 463:                             tilt_goto = tilt_tmp;
  1821  01EB  084D               	movf	main@tilt_tmp_440+1,w
  1822  01EC  00D1               	movwf	_tilt_goto+1	;volatile
  1823  01ED  084C               	movf	main@tilt_tmp_440,w
  1824  01EE  00D0               	movwf	_tilt_goto	;volatile
  1825                           
  1826                           ;main.c: 465:                             preset_pan_enabled = 1;
  1827  01EF  3001               	movlw	1
  1828  01F0  00C3               	movwf	??_main
  1829  01F1  0843               	movf	??_main,w
  1830  01F2  00ED               	movwf	_preset_pan_enabled	;volatile
  1831                           
  1832                           ;main.c: 466:                             preset_pan_enabled_old = 0;
  1833  01F3  01EC               	clrf	_preset_pan_enabled_old	;volatile
  1834                           
  1835                           ;main.c: 468:                             pan_speed = 0x32;
  1836  01F4  3032               	movlw	50
  1837  01F5  00C3               	movwf	??_main
  1838  01F6  0843               	movf	??_main,w
  1839  01F7  00E8               	movwf	_pan_speed	;volatile
  1840                           
  1841                           ;main.c: 469:                             timer1_pan_ref = SPEED_calc(pan_speed);
  1842  01F8  0868               	movf	_pan_speed,w	;volatile
  1843  01F9  158A  26CD  118A   	fcall	_SPEED_calc
  1844  01FC  00C3               	movwf	??_main
  1845  01FD  0843               	movf	??_main,w
  1846  01FE  00E2               	movwf	_timer1_pan_ref	;volatile
  1847                           
  1848                           ;main.c: 470:                             pan_enabled = 1;
  1849  01FF  3001               	movlw	1
  1850  0200  00C3               	movwf	??_main
  1851  0201  0843               	movf	??_main,w
  1852  0202  00EA               	movwf	_pan_enabled	;volatile
  1853                           
  1854                           ;main.c: 472:                             if (pan_goto < 12000) {
  1855  0203  302E               	movlw	46
  1856  0204  0253               	subwf	_pan_goto+1,w	;volatile
  1857  0205  30E0               	movlw	224
  1858  0206  1903               	skipnz
  1859  0207  0252               	subwf	_pan_goto,w	;volatile
  1860  0208  1803               	skipnc
  1861  0209  2A21               	goto	l3674
  1862                           
  1863                           ;main.c: 473:                                 if (pan_goto > pan_counter) {
  1864  020A  0853               	movf	_pan_goto+1,w	;volatile
  1865  020B  0257               	subwf	_pan_counter+1,w	;volatile
  1866  020C  1D03               	skipz
  1867  020D  2A10               	goto	u3615
  1868  020E  0852               	movf	_pan_goto,w	;volatile
  1869  020F  0256               	subwf	_pan_counter,w	;volatile
  1870  0210                     u3615:
  1871  0210  1803               	skipnc
  1872  0211  2A14               	goto	l3670
  1873                           
  1874                           ;main.c: 474:                                     pan_direction = 0;
  1875  0212  01E9               	clrf	_pan_direction	;volatile
  1876                           
  1877                           ;main.c: 475:                                 } else if (pan_goto < pan_counter) {
  1878  0213  2A23               	goto	l3678
  1879  0214                     l3670:
  1880  0214  0857               	movf	_pan_counter+1,w	;volatile
  1881  0215  0253               	subwf	_pan_goto+1,w	;volatile
  1882  0216  1D03               	skipz
  1883  0217  2A1A               	goto	u3625
  1884  0218  0856               	movf	_pan_counter,w	;volatile
  1885  0219  0252               	subwf	_pan_goto,w	;volatile
  1886  021A                     u3625:
  1887  021A  1803               	skipnc
  1888  021B  2A21               	goto	l3674
  1889                           
  1890                           ;main.c: 476:                                     pan_direction = 1;
  1891  021C  3001               	movlw	1
  1892  021D  00C3               	movwf	??_main
  1893  021E  0843               	movf	??_main,w
  1894  021F  00E9               	movwf	_pan_direction	;volatile
  1895                           
  1896                           ;main.c: 477:                                 } else {
  1897  0220  2A23               	goto	l3678
  1898  0221                     l3674:
  1899                           
  1900                           ;main.c: 478:                                     preset_pan_enabled = 0;
  1901  0221  01ED               	clrf	_preset_pan_enabled	;volatile
  1902                           
  1903                           ;main.c: 479:                                     pan_enabled = 0;
  1904  0222  01EA               	clrf	_pan_enabled	;volatile
  1905  0223                     l3678:
  1906                           
  1907                           ;main.c: 486:                             preset_tilt_enabled = 1;
  1908  0223  3001               	movlw	1
  1909  0224  00C3               	movwf	??_main
  1910  0225  0843               	movf	??_main,w
  1911  0226  00EB               	movwf	_preset_tilt_enabled	;volatile
  1912                           
  1913                           ;main.c: 487:                             preset_tilt_enabled_old = 0;
  1914  0227  1683               	bsf	3,5	;RP0=1, select bank1
  1915  0228  01D4               	clrf	_preset_tilt_enabled_old^(0+128)	;volatile
  1916                           
  1917                           ;main.c: 489:                             tilt_speed = 0x32;
  1918  0229  3032               	movlw	50
  1919  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1920  022B  00C3               	movwf	??_main
  1921  022C  0843               	movf	??_main,w
  1922  022D  00E5               	movwf	_tilt_speed	;volatile
  1923                           
  1924                           ;main.c: 490:                             timer1_tilt_ref = SPEED_calc(tilt_speed);
  1925  022E  0865               	movf	_tilt_speed,w	;volatile
  1926  022F  158A  26CD  118A   	fcall	_SPEED_calc
  1927  0232  00C3               	movwf	??_main
  1928  0233  0843               	movf	??_main,w
  1929  0234  00E1               	movwf	_timer1_tilt_ref	;volatile
  1930                           
  1931                           ;main.c: 491:                             tilt_enabled = 1;
  1932  0235  3001               	movlw	1
  1933  0236  00C3               	movwf	??_main
  1934  0237  0843               	movf	??_main,w
  1935  0238  00E7               	movwf	_tilt_enabled	;volatile
  1936                           
  1937                           ;main.c: 493:                             if (tilt_goto < 2800) {
  1938  0239  300A               	movlw	10
  1939  023A  0251               	subwf	_tilt_goto+1,w	;volatile
  1940  023B  30F0               	movlw	240
  1941  023C  1903               	skipnz
  1942  023D  0250               	subwf	_tilt_goto,w	;volatile
  1943  023E  1803               	skipnc
  1944  023F  2A57               	goto	l3696
  1945                           
  1946                           ;main.c: 494:                                 if (tilt_goto > tilt_counter) {
  1947  0240  0851               	movf	_tilt_goto+1,w	;volatile
  1948  0241  0255               	subwf	_tilt_counter+1,w	;volatile
  1949  0242  1D03               	skipz
  1950  0243  2A46               	goto	u3645
  1951  0244  0850               	movf	_tilt_goto,w	;volatile
  1952  0245  0254               	subwf	_tilt_counter,w	;volatile
  1953  0246                     u3645:
  1954  0246  1803               	skipnc
  1955  0247  2A4A               	goto	l3692
  1956                           
  1957                           ;main.c: 495:                                     tilt_direction = 0;
  1958  0248  01E6               	clrf	_tilt_direction	;volatile
  1959                           
  1960                           ;main.c: 496:                                 } else if (tilt_goto < tilt_counter) {
  1961  0249  2A59               	goto	l3700
  1962  024A                     l3692:
  1963  024A  0855               	movf	_tilt_counter+1,w	;volatile
  1964  024B  0251               	subwf	_tilt_goto+1,w	;volatile
  1965  024C  1D03               	skipz
  1966  024D  2A50               	goto	u3655
  1967  024E  0854               	movf	_tilt_counter,w	;volatile
  1968  024F  0250               	subwf	_tilt_goto,w	;volatile
  1969  0250                     u3655:
  1970  0250  1803               	skipnc
  1971  0251  2A57               	goto	l3696
  1972                           
  1973                           ;main.c: 497:                                     tilt_direction = 1;
  1974  0252  3001               	movlw	1
  1975  0253  00C3               	movwf	??_main
  1976  0254  0843               	movf	??_main,w
  1977  0255  00E6               	movwf	_tilt_direction	;volatile
  1978                           
  1979                           ;main.c: 498:                                 } else {
  1980  0256  2A59               	goto	l3700
  1981  0257                     l3696:
  1982                           
  1983                           ;main.c: 499:                                     preset_tilt_enabled = 0;
  1984  0257  01EB               	clrf	_preset_tilt_enabled	;volatile
  1985                           
  1986                           ;main.c: 500:                                     tilt_enabled = 0;
  1987  0258  01E7               	clrf	_tilt_enabled	;volatile
  1988  0259                     l3700:
  1989                           
  1990                           ;main.c: 507:                             response_type = 0x01;
  1991  0259  01DF               	clrf	_response_type
  1992  025A  0ADF               	incf	_response_type,f
  1993                           
  1994                           ;main.c: 509:                             print_preset(preset_id, pan_goto, tilt_goto, "
      +                          GOTO PRESET ");
  1995  025B  0853               	movf	_pan_goto+1,w	;volatile
  1996  025C  00BA               	movwf	print_preset@pan+1
  1997  025D  0852               	movf	_pan_goto,w	;volatile
  1998  025E  00B9               	movwf	print_preset@pan
  1999  025F  0851               	movf	_tilt_goto+1,w	;volatile
  2000  0260  00BC               	movwf	print_preset@tilt+1
  2001  0261  0850               	movf	_tilt_goto,w	;volatile
  2002  0262  00BB               	movwf	print_preset@tilt
  2003  0263  3071               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  2004  0264  00C3               	movwf	??_main
  2005  0265  0843               	movf	??_main,w
  2006  0266  00BD               	movwf	print_preset@text
  2007  0267  0859               	movf	_preset_id,w
  2008  0268  118A  24C5  118A   	fcall	_print_preset
  2009                           
  2010                           ;main.c: 510:                         } else {
  2011  026B  2B02               	goto	l242
  2012  026C                     l283:
  2013                           
  2014                           ;main.c: 511:                             if ((P_cmd2 & 0x04) == 0x04) {
  2015  026C  1D5C               	btfss	_P_cmd2,2
  2016  026D  2A8D               	goto	l297
  2017                           
  2018                           ;main.c: 512:                                 pan_speed = P_dat1;
  2019  026E  085B               	movf	_P_dat1,w
  2020  026F  00C3               	movwf	??_main
  2021  0270  0843               	movf	??_main,w
  2022  0271  00E8               	movwf	_pan_speed	;volatile
  2023                           
  2024                           ;main.c: 513:                                 timer1_pan_ref = SPEED_calc(pan_speed);
  2025  0272  0868               	movf	_pan_speed,w	;volatile
  2026  0273  158A  26CD  118A   	fcall	_SPEED_calc
  2027  0276  00C3               	movwf	??_main
  2028  0277  0843               	movf	??_main,w
  2029  0278  00E2               	movwf	_timer1_pan_ref	;volatile
  2030                           
  2031                           ;main.c: 514:                                 pan_direction = 0;
  2032  0279  01E9               	clrf	_pan_direction	;volatile
  2033                           
  2034                           ;main.c: 515:                                 pan_enabled = 1;
  2035  027A  3001               	movlw	1
  2036  027B  00C3               	movwf	??_main
  2037  027C  0843               	movf	??_main,w
  2038  027D  00EA               	movwf	_pan_enabled	;volatile
  2039                           
  2040                           ;main.c: 517:                                 preset_pan_enabled = 0;
  2041  027E  01ED               	clrf	_preset_pan_enabled	;volatile
  2042                           
  2043                           ;main.c: 518:                                 preset_tilt_enabled = 0;
  2044  027F  01EB               	clrf	_preset_tilt_enabled	;volatile
  2045                           
  2046                           ;main.c: 520:                                 response_type = 0x01;
  2047  0280  01DF               	clrf	_response_type
  2048  0281  0ADF               	incf	_response_type,f
  2049                           
  2050                           ;main.c: 521:                                 is_reboot = 0;
  2051  0282  01D8               	clrf	_is_reboot
  2052                           
  2053                           ;main.c: 523:                                 print_cmd_mov("LEFT", pan_counter, tilt_co
      +                          unter);
  2054  0283  0857               	movf	_pan_counter+1,w	;volatile
  2055  0284  00BA               	movwf	print_cmd_mov@pan+1
  2056  0285  0856               	movf	_pan_counter,w	;volatile
  2057  0286  00B9               	movwf	print_cmd_mov@pan
  2058  0287  0855               	movf	_tilt_counter+1,w	;volatile
  2059  0288  00BC               	movwf	print_cmd_mov@tilt+1
  2060  0289  0854               	movf	_tilt_counter,w	;volatile
  2061  028A  00BB               	movwf	print_cmd_mov@tilt
  2062  028B  30E1               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  2063  028C  2AB0               	goto	L7
  2064  028D                     l297:	
  2065                           ;main.c: 524:                             } else if ((P_cmd2 & 0x02) == 0x02) {
  2066                           
  2067  028D  1CDC               	btfss	_P_cmd2,1
  2068  028E  2AB3               	goto	l3740
  2069                           
  2070                           ;main.c: 525:                                 pan_speed = P_dat1;
  2071  028F  085B               	movf	_P_dat1,w
  2072  0290  00C3               	movwf	??_main
  2073  0291  0843               	movf	??_main,w
  2074  0292  00E8               	movwf	_pan_speed	;volatile
  2075                           
  2076                           ;main.c: 526:                                 timer1_pan_ref = SPEED_calc(pan_speed);
  2077  0293  0868               	movf	_pan_speed,w	;volatile
  2078  0294  158A  26CD  118A   	fcall	_SPEED_calc
  2079  0297  00C3               	movwf	??_main
  2080  0298  0843               	movf	??_main,w
  2081  0299  00E2               	movwf	_timer1_pan_ref	;volatile
  2082                           
  2083                           ;main.c: 527:                                 pan_direction = 1;
  2084  029A  3001               	movlw	1
  2085  029B  00C3               	movwf	??_main
  2086  029C  0843               	movf	??_main,w
  2087  029D  00E9               	movwf	_pan_direction	;volatile
  2088                           
  2089                           ;main.c: 528:                                 pan_enabled = 1;
  2090  029E  3001               	movlw	1
  2091  029F  00C3               	movwf	??_main
  2092  02A0  0843               	movf	??_main,w
  2093  02A1  00EA               	movwf	_pan_enabled	;volatile
  2094                           
  2095                           ;main.c: 530:                                 preset_pan_enabled = 0;
  2096  02A2  01ED               	clrf	_preset_pan_enabled	;volatile
  2097                           
  2098                           ;main.c: 531:                                 preset_tilt_enabled = 0;
  2099  02A3  01EB               	clrf	_preset_tilt_enabled	;volatile
  2100                           
  2101                           ;main.c: 533:                                 response_type = 0x01;
  2102  02A4  01DF               	clrf	_response_type
  2103  02A5  0ADF               	incf	_response_type,f
  2104                           
  2105                           ;main.c: 534:                                 is_reboot = 0;
  2106  02A6  01D8               	clrf	_is_reboot
  2107                           
  2108                           ;main.c: 536:                                 print_cmd_mov("RIGHT", pan_counter, tilt_c
      +                          ounter);
  2109  02A7  0857               	movf	_pan_counter+1,w	;volatile
  2110  02A8  00BA               	movwf	print_cmd_mov@pan+1
  2111  02A9  0856               	movf	_pan_counter,w	;volatile
  2112  02AA  00B9               	movwf	print_cmd_mov@pan
  2113  02AB  0855               	movf	_tilt_counter+1,w	;volatile
  2114  02AC  00BC               	movwf	print_cmd_mov@tilt+1
  2115  02AD  0854               	movf	_tilt_counter,w	;volatile
  2116  02AE  00BB               	movwf	print_cmd_mov@tilt
  2117  02AF  30C7               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  2118  02B0                     L7:
  2119  02B0  158A  25F8  118A   	fcall	_print_cmd_mov
  2120  02B3                     l3740:
  2121                           
  2122                           ;main.c: 539:                             if ((P_cmd2 & 0x10) == 0x10) {
  2123  02B3  1E5C               	btfss	_P_cmd2,4
  2124  02B4  2AD7               	goto	l300
  2125                           
  2126                           ;main.c: 540:                                 tilt_speed = P_dat2;
  2127  02B5  085A               	movf	_P_dat2,w
  2128  02B6  00C3               	movwf	??_main
  2129  02B7  0843               	movf	??_main,w
  2130  02B8  00E5               	movwf	_tilt_speed	;volatile
  2131                           
  2132                           ;main.c: 541:                                 timer1_tilt_ref = SPEED_calc(tilt_speed);
  2133  02B9  0865               	movf	_tilt_speed,w	;volatile
  2134  02BA  158A  26CD  118A   	fcall	_SPEED_calc
  2135  02BD  00C3               	movwf	??_main
  2136  02BE  0843               	movf	??_main,w
  2137  02BF  00E1               	movwf	_timer1_tilt_ref	;volatile
  2138                           
  2139                           ;main.c: 542:                                 tilt_direction = 0;
  2140  02C0  01E6               	clrf	_tilt_direction	;volatile
  2141                           
  2142                           ;main.c: 543:                                 tilt_enabled = 1;
  2143  02C1  3001               	movlw	1
  2144  02C2  00C3               	movwf	??_main
  2145  02C3  0843               	movf	??_main,w
  2146  02C4  00E7               	movwf	_tilt_enabled	;volatile
  2147                           
  2148                           ;main.c: 545:                                 preset_pan_enabled = 0;
  2149  02C5  01ED               	clrf	_preset_pan_enabled	;volatile
  2150                           
  2151                           ;main.c: 546:                                 preset_tilt_enabled = 0;
  2152  02C6  01EB               	clrf	_preset_tilt_enabled	;volatile
  2153                           
  2154                           ;main.c: 548:                                 response_type = 0x01;
  2155  02C7  01DF               	clrf	_response_type
  2156  02C8  0ADF               	incf	_response_type,f
  2157                           
  2158                           ;main.c: 549:                                 is_reboot = 0;
  2159  02C9  01D8               	clrf	_is_reboot
  2160                           
  2161                           ;main.c: 551:                                 print_cmd_mov("DOWN", pan_counter, tilt_co
      +                          unter);
  2162  02CA  0857               	movf	_pan_counter+1,w	;volatile
  2163  02CB  00BA               	movwf	print_cmd_mov@pan+1
  2164  02CC  0856               	movf	_pan_counter,w	;volatile
  2165  02CD  00B9               	movwf	print_cmd_mov@pan
  2166  02CE  0855               	movf	_tilt_counter+1,w	;volatile
  2167  02CF  00BC               	movwf	print_cmd_mov@tilt+1
  2168  02D0  0854               	movf	_tilt_counter,w	;volatile
  2169  02D1  00BB               	movwf	print_cmd_mov@tilt
  2170  02D2  30DC               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  2171  02D3  158A  25F8  118A   	fcall	_print_cmd_mov
  2172                           
  2173                           ;main.c: 552:                             } else if ((P_cmd2 & 0x08) == 0x08) {
  2174  02D6  2B02               	goto	l242
  2175  02D7                     l300:
  2176  02D7  1DDC               	btfss	_P_cmd2,3
  2177  02D8  2B02               	goto	l242
  2178                           
  2179                           ;main.c: 553:                                 tilt_speed = P_dat2;
  2180  02D9  085A               	movf	_P_dat2,w
  2181  02DA  00C3               	movwf	??_main
  2182  02DB  0843               	movf	??_main,w
  2183  02DC  00E5               	movwf	_tilt_speed	;volatile
  2184                           
  2185                           ;main.c: 554:                                 timer1_tilt_ref = SPEED_calc(tilt_speed);
  2186  02DD  0865               	movf	_tilt_speed,w	;volatile
  2187  02DE  158A  26CD  118A   	fcall	_SPEED_calc
  2188  02E1  00C3               	movwf	??_main
  2189  02E2  0843               	movf	??_main,w
  2190  02E3  00E1               	movwf	_timer1_tilt_ref	;volatile
  2191                           
  2192                           ;main.c: 555:                                 tilt_direction = 1;
  2193  02E4  3001               	movlw	1
  2194  02E5  00C3               	movwf	??_main
  2195  02E6  0843               	movf	??_main,w
  2196  02E7  00E6               	movwf	_tilt_direction	;volatile
  2197                           
  2198                           ;main.c: 556:                                 tilt_enabled = 1;
  2199  02E8  3001               	movlw	1
  2200  02E9  00C3               	movwf	??_main
  2201  02EA  0843               	movf	??_main,w
  2202  02EB  00E7               	movwf	_tilt_enabled	;volatile
  2203                           
  2204                           ;main.c: 558:                                 preset_pan_enabled = 0;
  2205  02EC  01ED               	clrf	_preset_pan_enabled	;volatile
  2206                           
  2207                           ;main.c: 559:                                 preset_tilt_enabled = 0;
  2208  02ED  01EB               	clrf	_preset_tilt_enabled	;volatile
  2209                           
  2210                           ;main.c: 561:                                 response_type = 0x01;
  2211  02EE  01DF               	clrf	_response_type
  2212  02EF  0ADF               	incf	_response_type,f
  2213                           
  2214                           ;main.c: 562:                                 is_reboot = 0;
  2215  02F0  01D8               	clrf	_is_reboot
  2216                           
  2217                           ;main.c: 564:                                 print_cmd_mov("UP", pan_counter, tilt_coun
      +                          ter);
  2218  02F1  0857               	movf	_pan_counter+1,w	;volatile
  2219  02F2  00BA               	movwf	print_cmd_mov@pan+1
  2220  02F3  0856               	movf	_pan_counter,w	;volatile
  2221  02F4  00B9               	movwf	print_cmd_mov@pan
  2222  02F5  0855               	movf	_tilt_counter+1,w	;volatile
  2223  02F6  00BC               	movwf	print_cmd_mov@tilt+1
  2224  02F7  0854               	movf	_tilt_counter,w	;volatile
  2225  02F8  00BB               	movwf	print_cmd_mov@tilt
  2226  02F9  30E9               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  2227  02FA  158A  25F8  118A   	fcall	_print_cmd_mov
  2228  02FD  2B02               	goto	l242
  2229  02FE                     l3782:
  2230                           
  2231                           ;main.c: 576:                 frame_index++;
  2232  02FE  3001               	movlw	1
  2233  02FF  00C3               	movwf	??_main
  2234  0300  0843               	movf	??_main,w
  2235  0301  07E0               	addwf	_frame_index,f
  2236  0302                     l242:	
  2237                           ;main.c: 343:     while (1) {
  2238                           
  2239                           ;main.c: 577:             } else {
  2240                           
  2241  0302  0064               	clrwdt	;# 
  2242                           
  2243                           ;main.c: 346:         if (buffer_ready[frame_index] == 1) {
  2244  0303  1283               	bcf	3,5	;RP0=0, select bank0
  2245  0304  1303               	bcf	3,6	;RP1=0, select bank0
  2246  0305  0860               	movf	_frame_index,w
  2247  0306  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  2248  0307  0084               	movwf	4
  2249  0308  1383               	bcf	3,7	;select IRP bank1
  2250  0309  0300               	decf	0,w
  2251  030A  1903               	btfsc	3,2
  2252  030B  284E               	goto	l3482
  2253                           
  2254                           ;main.c: 575:             if (frame_index < 4) {
  2255  030C  3004               	movlw	4
  2256  030D  0260               	subwf	_frame_index,w
  2257  030E  1C03               	btfss	3,0
  2258  030F  2AFE               	goto	l3782
  2259                           
  2260                           ;main.c: 579:                 frame_index = 0;
  2261  0310  01E0               	clrf	_frame_index
  2262  0311  2B02               	goto	l242
  2263  0312                     __end_of_main:
  2264                           
  2265                           	psect	text1
  2266  04C5                     __ptext1:	
  2267 ;; *************** function _print_preset *****************
  2268 ;; Defined at:
  2269 ;;		line 976 in file "main.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;  id              1    wreg     unsigned char 
  2272 ;;  pan             2   25[BANK0 ] unsigned int 
  2273 ;;  tilt            2   27[BANK0 ] unsigned int 
  2274 ;;  text            1   29[BANK0 ] PTR unsigned char 
  2275 ;;		 -> STR_19(13), STR_18(14), STR_17(12), 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  id              1   33[BANK0 ] unsigned char 
  2278 ;;  preset_id_10    1   34[BANK0 ] unsigned char 
  2279 ;;  preset_id_1     1   32[BANK0 ] unsigned char 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 300/0
  2286 ;;		On exit  : 300/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2289 ;;      Params:         0       5       0       0
  2290 ;;      Locals:         0       3       0       0
  2291 ;;      Temps:          0       2       0       0
  2292 ;;      Totals:         0      10       0       0
  2293 ;;Total ram usage:       10 bytes
  2294 ;; Hardware stack levels used: 1
  2295 ;; Hardware stack levels required when called: 5
  2296 ;; This function calls:
  2297 ;;		_UART_Write
  2298 ;;		_UART_Write_Text
  2299 ;;		___bmul
  2300 ;;		___lbdiv
  2301 ;;		_print_cnt
  2302 ;; This function is called by:
  2303 ;;		_main
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307  04C5                     _print_preset:	
  2308                           ;psect for function _print_preset
  2309                           
  2310                           
  2311                           ;incstack = 0
  2312                           ; Regs used in _print_preset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2313                           ;print_preset@id stored from wreg
  2314  04C5  00C1               	movwf	print_preset@id
  2315                           
  2316                           ;main.c: 977:     uint8_t preset_id_10 = id / 10;
  2317  04C6  300A               	movlw	10
  2318  04C7  00BE               	movwf	??_print_preset
  2319  04C8  083E               	movf	??_print_preset,w
  2320  04C9  00A0               	movwf	___lbdiv@divisor
  2321  04CA  0841               	movf	print_preset@id,w
  2322  04CB  158A  2688  118A   	fcall	___lbdiv
  2323  04CE  00BF               	movwf	??_print_preset+1
  2324  04CF  083F               	movf	??_print_preset+1,w
  2325  04D0  00C2               	movwf	print_preset@preset_id_10
  2326                           
  2327                           ;main.c: 978:     uint8_t preset_id_1 = id - (preset_id_10 * 10);
  2328  04D1  30F6               	movlw	246
  2329  04D2  00BE               	movwf	??_print_preset
  2330  04D3  083E               	movf	??_print_preset,w
  2331  04D4  00A0               	movwf	___bmul@multiplicand
  2332  04D5  0842               	movf	print_preset@preset_id_10,w
  2333  04D6  158A  25A7  118A   	fcall	___bmul
  2334  04D9  0741               	addwf	print_preset@id,w
  2335  04DA  00BF               	movwf	??_print_preset+1
  2336  04DB  083F               	movf	??_print_preset+1,w
  2337  04DC  00C0               	movwf	print_preset@preset_id_1
  2338                           
  2339                           ;main.c: 980:     preset_id_10 += 48;
  2340  04DD  3030               	movlw	48
  2341  04DE  00BE               	movwf	??_print_preset
  2342  04DF  083E               	movf	??_print_preset,w
  2343  04E0  07C2               	addwf	print_preset@preset_id_10,f
  2344                           
  2345                           ;main.c: 981:     preset_id_1 += 48;
  2346  04E1  3030               	movlw	48
  2347  04E2  00BE               	movwf	??_print_preset
  2348  04E3  083E               	movf	??_print_preset,w
  2349  04E4  07C0               	addwf	print_preset@preset_id_1,f
  2350                           
  2351                           ;main.c: 983:     UART_Write_Text(text);
  2352  04E5  083D               	movf	print_preset@text,w
  2353  04E6  158A  2629  118A   	fcall	_UART_Write_Text
  2354                           
  2355                           ;main.c: 984:     UART_Write(preset_id_10);
  2356  04E9  0842               	movf	print_preset@preset_id_10,w
  2357  04EA  158A  2701  118A   	fcall	_UART_Write
  2358                           
  2359                           ;main.c: 985:     UART_Write(preset_id_1);
  2360  04ED  0840               	movf	print_preset@preset_id_1,w
  2361  04EE  158A  2701  118A   	fcall	_UART_Write
  2362                           
  2363                           ;main.c: 986:     UART_Write_Text(" (");
  2364  04F1  30AA               	movlw	(low (((STR_15+4)-__stringbase)| (0+32768)))& (0+255)
  2365  04F2  158A  2629  118A   	fcall	_UART_Write_Text
  2366                           
  2367                           ;main.c: 987:     print_cnt(pan, tilt);
  2368  04F5  083A               	movf	print_preset@pan+1,w
  2369  04F6  00B6               	movwf	print_cnt@_pan+1
  2370  04F7  0839               	movf	print_preset@pan,w
  2371  04F8  00B5               	movwf	print_cnt@_pan
  2372  04F9  083C               	movf	print_preset@tilt+1,w
  2373  04FA  00B8               	movwf	print_cnt@_tilt+1
  2374  04FB  083B               	movf	print_preset@tilt,w
  2375  04FC  00B7               	movwf	print_cnt@_tilt
  2376  04FD  158A  25B8         	fcall	_print_cnt
  2377  04FF  0008               	return
  2378  0500                     __end_of_print_preset:
  2379                           
  2380                           	psect	text2
  2381  0E88                     __ptext2:	
  2382 ;; *************** function ___lbdiv *****************
  2383 ;; Defined at:
  2384 ;;		line 4 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/lbdiv.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;  dividend        1    wreg     unsigned char 
  2387 ;;  divisor         1    0[BANK0 ] unsigned char 
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  dividend        1    2[BANK0 ] unsigned char 
  2390 ;;  quotient        1    4[BANK0 ] unsigned char 
  2391 ;;  counter         1    3[BANK0 ] unsigned char 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      unsigned char 
  2394 ;; Registers used:
  2395 ;;		wreg, status,2, status,0
  2396 ;; Tracked objects:
  2397 ;;		On entry : 300/0
  2398 ;;		On exit  : 300/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2401 ;;      Params:         0       1       0       0
  2402 ;;      Locals:         0       3       0       0
  2403 ;;      Temps:          0       1       0       0
  2404 ;;      Totals:         0       5       0       0
  2405 ;;Total ram usage:        5 bytes
  2406 ;; Hardware stack levels used: 1
  2407 ;; Hardware stack levels required when called: 2
  2408 ;; This function calls:
  2409 ;;		Nothing
  2410 ;; This function is called by:
  2411 ;;		_print_preset
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415  0E88                     ___lbdiv:	
  2416                           ;psect for function ___lbdiv
  2417                           
  2418                           
  2419                           ;incstack = 0
  2420                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2421                           ;___lbdiv@dividend stored from wreg
  2422  0E88  00A2               	movwf	___lbdiv@dividend
  2423  0E89  01A4               	clrf	___lbdiv@quotient
  2424  0E8A  0820               	movf	___lbdiv@divisor,w
  2425  0E8B  1903               	btfsc	3,2
  2426  0E8C  2EA7               	goto	l3294
  2427  0E8D  01A3               	clrf	___lbdiv@counter
  2428  0E8E  0AA3               	incf	___lbdiv@counter,f
  2429  0E8F                     l3282:
  2430  0E8F  1BA0               	btfsc	___lbdiv@divisor,7
  2431  0E90  2E98               	goto	l3284
  2432  0E91  1003               	clrc
  2433  0E92  0DA0               	rlf	___lbdiv@divisor,f
  2434  0E93  3001               	movlw	1
  2435  0E94  00A1               	movwf	??___lbdiv
  2436  0E95  0821               	movf	??___lbdiv,w
  2437  0E96  07A3               	addwf	___lbdiv@counter,f
  2438  0E97  2E8F               	goto	l3282
  2439  0E98                     l3284:
  2440  0E98  1003               	clrc
  2441  0E99  0DA4               	rlf	___lbdiv@quotient,f
  2442  0E9A  0820               	movf	___lbdiv@divisor,w
  2443  0E9B  0222               	subwf	___lbdiv@dividend,w
  2444  0E9C  1C03               	skipc
  2445  0E9D  2EA2               	goto	L8
  2446  0E9E  0820               	movf	___lbdiv@divisor,w
  2447  0E9F  02A2               	subwf	___lbdiv@dividend,f
  2448  0EA0  1424               	bsf	___lbdiv@quotient,0
  2449  0EA1  1003               	clrc
  2450  0EA2                     L8:
  2451  0EA2  0CA0               	rrf	___lbdiv@divisor,f
  2452  0EA3  3001               	movlw	1
  2453  0EA4  02A3               	subwf	___lbdiv@counter,f
  2454  0EA5  1D03               	btfss	3,2
  2455  0EA6  2E98               	goto	l3284
  2456  0EA7                     l3294:
  2457  0EA7  0824               	movf	___lbdiv@quotient,w
  2458  0EA8  0008               	return
  2459  0EA9                     __end_of___lbdiv:
  2460                           
  2461                           	psect	text3
  2462  0DA7                     __ptext3:	
  2463 ;; *************** function ___bmul *****************
  2464 ;; Defined at:
  2465 ;;		line 4 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/Umul8.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;  multiplier      1    wreg     unsigned char 
  2468 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2471 ;;  product         1    2[BANK0 ] unsigned char 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  1    wreg      unsigned char 
  2474 ;; Registers used:
  2475 ;;		wreg, status,2, status,0
  2476 ;; Tracked objects:
  2477 ;;		On entry : 300/0
  2478 ;;		On exit  : 300/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2481 ;;      Params:         0       1       0       0
  2482 ;;      Locals:         0       2       0       0
  2483 ;;      Temps:          0       1       0       0
  2484 ;;      Totals:         0       4       0       0
  2485 ;;Total ram usage:        4 bytes
  2486 ;; Hardware stack levels used: 1
  2487 ;; Hardware stack levels required when called: 2
  2488 ;; This function calls:
  2489 ;;		Nothing
  2490 ;; This function is called by:
  2491 ;;		_print_preset
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495  0DA7                     ___bmul:	
  2496                           ;psect for function ___bmul
  2497                           
  2498                           
  2499                           ;incstack = 0
  2500                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2501                           ;___bmul@multiplier stored from wreg
  2502  0DA7  00A3               	movwf	___bmul@multiplier
  2503  0DA8  01A2               	clrf	___bmul@product
  2504  0DA9                     l3216:
  2505  0DA9  1C23               	btfss	___bmul@multiplier,0
  2506  0DAA  2DAF               	goto	l3220
  2507  0DAB  0820               	movf	___bmul@multiplicand,w
  2508  0DAC  00A1               	movwf	??___bmul
  2509  0DAD  0821               	movf	??___bmul,w
  2510  0DAE  07A2               	addwf	___bmul@product,f
  2511  0DAF                     l3220:
  2512  0DAF  1003               	clrc
  2513  0DB0  0DA0               	rlf	___bmul@multiplicand,f
  2514  0DB1  1003               	clrc
  2515  0DB2  0CA3               	rrf	___bmul@multiplier,f
  2516  0DB3  0823               	movf	___bmul@multiplier,w
  2517  0DB4  1D03               	btfss	3,2
  2518  0DB5  2DA9               	goto	l3216
  2519  0DB6  0822               	movf	___bmul@product,w
  2520  0DB7  0008               	return
  2521  0DB8                     __end_of___bmul:
  2522                           
  2523                           	psect	text4
  2524  0DF8                     __ptext4:	
  2525 ;; *************** function _print_cmd_mov *****************
  2526 ;; Defined at:
  2527 ;;		line 990 in file "main.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  text            1    wreg     PTR unsigned char 
  2530 ;;		 -> STR_23(3), STR_22(5), STR_21(6), STR_20(5), 
  2531 ;;  pan             2   25[BANK0 ] unsigned int 
  2532 ;;  tilt            2   27[BANK0 ] unsigned int 
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  text            1   29[BANK0 ] PTR unsigned char 
  2535 ;;		 -> STR_23(3), STR_22(5), STR_21(6), STR_20(5), 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 300/0
  2542 ;;		On exit  : 300/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2545 ;;      Params:         0       4       0       0
  2546 ;;      Locals:         0       1       0       0
  2547 ;;      Temps:          0       0       0       0
  2548 ;;      Totals:         0       5       0       0
  2549 ;;Total ram usage:        5 bytes
  2550 ;; Hardware stack levels used: 1
  2551 ;; Hardware stack levels required when called: 5
  2552 ;; This function calls:
  2553 ;;		_UART_Write_Text
  2554 ;;		_UART_Write_Text_CRLF
  2555 ;;		_print_cnt
  2556 ;; This function is called by:
  2557 ;;		_main
  2558 ;; This function uses a non-reentrant model
  2559 ;;
  2560                           
  2561  0DF8                     _print_cmd_mov:	
  2562                           ;psect for function _print_cmd_mov
  2563                           
  2564                           
  2565                           ;incstack = 0
  2566                           ; Regs used in _print_cmd_mov: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2567                           ;print_cmd_mov@text stored from wreg
  2568  0DF8  00BD               	movwf	print_cmd_mov@text
  2569                           
  2570                           ;main.c: 991:     UART_Write_Text(text);
  2571  0DF9  083D               	movf	print_cmd_mov@text,w
  2572  0DFA  158A  2629  158A   	fcall	_UART_Write_Text
  2573                           
  2574                           ;main.c: 992:     UART_Write_Text(" (");
  2575  0DFD  30AA               	movlw	(low (((STR_15+4)-__stringbase)| (0+32768)))& (0+255)
  2576  0DFE  158A  2629  158A   	fcall	_UART_Write_Text
  2577                           
  2578                           ;main.c: 993:     print_cnt(pan, tilt);
  2579  0E01  083A               	movf	print_cmd_mov@pan+1,w
  2580  0E02  00B6               	movwf	print_cnt@_pan+1
  2581  0E03  0839               	movf	print_cmd_mov@pan,w
  2582  0E04  00B5               	movwf	print_cnt@_pan
  2583  0E05  083C               	movf	print_cmd_mov@tilt+1,w
  2584  0E06  00B8               	movwf	print_cnt@_tilt+1
  2585  0E07  083B               	movf	print_cmd_mov@tilt,w
  2586  0E08  00B7               	movwf	print_cnt@_tilt
  2587  0E09  158A  25B8  158A   	fcall	_print_cnt
  2588                           
  2589                           ;main.c: 994:     UART_Write_Text_CRLF(")");
  2590  0E0C  30EC               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2591  0E0D  158A  26A9         	fcall	_UART_Write_Text_CRLF
  2592  0E0F  0008               	return
  2593  0E10                     __end_of_print_cmd_mov:
  2594                           
  2595                           	psect	text5
  2596  0DB8                     __ptext5:	
  2597 ;; *************** function _print_cnt *****************
  2598 ;; Defined at:
  2599 ;;		line 923 in file "main.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  _pan            2   21[BANK0 ] unsigned int 
  2602 ;;  _tilt           2   23[BANK0 ] unsigned int 
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;		None
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 300/0
  2611 ;;		On exit  : 300/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2614 ;;      Params:         0       4       0       0
  2615 ;;      Locals:         0       0       0       0
  2616 ;;      Temps:          0       0       0       0
  2617 ;;      Totals:         0       4       0       0
  2618 ;;Total ram usage:        4 bytes
  2619 ;; Hardware stack levels used: 1
  2620 ;; Hardware stack levels required when called: 4
  2621 ;; This function calls:
  2622 ;;		_UART_Write_Text
  2623 ;;		_print_val
  2624 ;; This function is called by:
  2625 ;;		_main
  2626 ;;		_print_preset
  2627 ;;		_print_cmd_mov
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631  0DB8                     _print_cnt:	
  2632                           ;psect for function _print_cnt
  2633                           
  2634                           
  2635                           ;main.c: 924:     print_val(_pan);
  2636                           
  2637                           ;incstack = 0
  2638                           ; Regs used in _print_cnt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2639  0DB8  0836               	movf	print_cnt@_pan+1,w
  2640  0DB9  00AA               	movwf	print_val@value+1
  2641  0DBA  0835               	movf	print_cnt@_pan,w
  2642  0DBB  00A9               	movwf	print_val@value
  2643  0DBC  118A  25F3  158A   	fcall	_print_val
  2644                           
  2645                           ;main.c: 926:     UART_Write_Text(", ");
  2646  0DBF  30E6               	movlw	(low ((STR_24-__stringbase)| (0+32768)))& (0+255)
  2647  0DC0  158A  2629  158A   	fcall	_UART_Write_Text
  2648                           
  2649                           ;main.c: 928:     print_val(_tilt);
  2650  0DC3  0838               	movf	print_cnt@_tilt+1,w
  2651  0DC4  00AA               	movwf	print_val@value+1
  2652  0DC5  0837               	movf	print_cnt@_tilt,w
  2653  0DC6  00A9               	movwf	print_val@value
  2654  0DC7  118A  25F3         	fcall	_print_val
  2655  0DC9  0008               	return
  2656  0DCA                     __end_of_print_cnt:
  2657                           
  2658                           	psect	text6
  2659  05F3                     __ptext6:	
  2660 ;; *************** function _print_val *****************
  2661 ;; Defined at:
  2662 ;;		line 931 in file "main.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  value           2    9[BANK0 ] unsigned int 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  val10000        2   19[BANK0 ] unsigned int 
  2667 ;;  val1000         2   17[BANK0 ] unsigned int 
  2668 ;;  val100          2   15[BANK0 ] unsigned int 
  2669 ;;  val10           2   13[BANK0 ] unsigned int 
  2670 ;;  val1            2   11[BANK0 ] unsigned int 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  1    wreg      void 
  2673 ;; Registers used:
  2674 ;;		wreg, status,2, status,0, pclath, cstack
  2675 ;; Tracked objects:
  2676 ;;		On entry : 300/0
  2677 ;;		On exit  : 300/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2680 ;;      Params:         0       2       0       0
  2681 ;;      Locals:         0      10       0       0
  2682 ;;      Temps:          0       0       0       0
  2683 ;;      Totals:         0      12       0       0
  2684 ;;Total ram usage:       12 bytes
  2685 ;; Hardware stack levels used: 1
  2686 ;; Hardware stack levels required when called: 3
  2687 ;; This function calls:
  2688 ;;		_UART_Write
  2689 ;;		___lwdiv
  2690 ;;		___wmul
  2691 ;; This function is called by:
  2692 ;;		_print_cnt
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696  05F3                     _print_val:	
  2697                           ;psect for function _print_val
  2698                           
  2699                           
  2700                           ;main.c: 933:     uint16_t val1000 = 0;
  2701                           
  2702                           ;incstack = 0
  2703                           ; Regs used in _print_val: [wreg+status,2+status,0+pclath+cstack]
  2704  05F3  01B1               	clrf	print_val@val1000
  2705  05F4  01B2               	clrf	print_val@val1000+1
  2706                           
  2707                           ;main.c: 934:     uint16_t val100 = 0;
  2708  05F5  01AF               	clrf	print_val@val100
  2709  05F6  01B0               	clrf	print_val@val100+1
  2710                           
  2711                           ;main.c: 935:     uint16_t val10 = 0;
  2712  05F7  01AD               	clrf	print_val@val10
  2713  05F8  01AE               	clrf	print_val@val10+1
  2714                           
  2715                           ;main.c: 936:     uint16_t val1 = 0;
  2716  05F9  01AB               	clrf	print_val@val1
  2717  05FA  01AC               	clrf	print_val@val1+1
  2718                           
  2719                           ;main.c: 938:     val10000 = value / 10000;
  2720  05FB  3010               	movlw	16
  2721  05FC  00A0               	movwf	___lwdiv@divisor
  2722  05FD  3027               	movlw	39
  2723  05FE  00A1               	movwf	___lwdiv@divisor+1
  2724  05FF  082A               	movf	print_val@value+1,w
  2725  0600  00A3               	movwf	___lwdiv@dividend+1
  2726  0601  0829               	movf	print_val@value,w
  2727  0602  00A2               	movwf	___lwdiv@dividend
  2728  0603  158A  276D  118A   	fcall	___lwdiv
  2729  0606  0821               	movf	?___lwdiv+1,w
  2730  0607  00B4               	movwf	print_val@val10000+1
  2731  0608  0820               	movf	?___lwdiv,w
  2732  0609  00B3               	movwf	print_val@val10000
  2733                           
  2734                           ;main.c: 939:     value -= val10000 * 10000;
  2735  060A  0834               	movf	print_val@val10000+1,w
  2736  060B  00A1               	movwf	___wmul@multiplier+1
  2737  060C  0833               	movf	print_val@val10000,w
  2738  060D  00A0               	movwf	___wmul@multiplier
  2739  060E  3010               	movlw	16
  2740  060F  00A2               	movwf	___wmul@multiplicand
  2741  0610  3027               	movlw	39
  2742  0611  00A3               	movwf	___wmul@multiplicand+1
  2743  0612  158A  2667  118A   	fcall	___wmul
  2744  0615  0820               	movf	?___wmul,w
  2745  0616  02A9               	subwf	print_val@value,f
  2746  0617  0821               	movf	?___wmul+1,w
  2747  0618  1C03               	skipc
  2748  0619  03AA               	decf	print_val@value+1,f
  2749  061A  02AA               	subwf	print_val@value+1,f
  2750                           
  2751                           ;main.c: 941:     val1000 = value / 1000;
  2752  061B  30E8               	movlw	232
  2753  061C  00A0               	movwf	___lwdiv@divisor
  2754  061D  3003               	movlw	3
  2755  061E  00A1               	movwf	___lwdiv@divisor+1
  2756  061F  082A               	movf	print_val@value+1,w
  2757  0620  00A3               	movwf	___lwdiv@dividend+1
  2758  0621  0829               	movf	print_val@value,w
  2759  0622  00A2               	movwf	___lwdiv@dividend
  2760  0623  158A  276D  118A   	fcall	___lwdiv
  2761  0626  0821               	movf	?___lwdiv+1,w
  2762  0627  00B2               	movwf	print_val@val1000+1
  2763  0628  0820               	movf	?___lwdiv,w
  2764  0629  00B1               	movwf	print_val@val1000
  2765                           
  2766                           ;main.c: 942:     value -= val1000 * 1000;
  2767  062A  0832               	movf	print_val@val1000+1,w
  2768  062B  00A1               	movwf	___wmul@multiplier+1
  2769  062C  0831               	movf	print_val@val1000,w
  2770  062D  00A0               	movwf	___wmul@multiplier
  2771  062E  30E8               	movlw	232
  2772  062F  00A2               	movwf	___wmul@multiplicand
  2773  0630  3003               	movlw	3
  2774  0631  00A3               	movwf	___wmul@multiplicand+1
  2775  0632  158A  2667  118A   	fcall	___wmul
  2776  0635  0820               	movf	?___wmul,w
  2777  0636  02A9               	subwf	print_val@value,f
  2778  0637  0821               	movf	?___wmul+1,w
  2779  0638  1C03               	skipc
  2780  0639  03AA               	decf	print_val@value+1,f
  2781  063A  02AA               	subwf	print_val@value+1,f
  2782                           
  2783                           ;main.c: 944:     val100 = value / 100;
  2784  063B  3064               	movlw	100
  2785  063C  00A0               	movwf	___lwdiv@divisor
  2786  063D  3000               	movlw	0
  2787  063E  00A1               	movwf	___lwdiv@divisor+1
  2788  063F  082A               	movf	print_val@value+1,w
  2789  0640  00A3               	movwf	___lwdiv@dividend+1
  2790  0641  0829               	movf	print_val@value,w
  2791  0642  00A2               	movwf	___lwdiv@dividend
  2792  0643  158A  276D  118A   	fcall	___lwdiv
  2793  0646  0821               	movf	?___lwdiv+1,w
  2794  0647  00B0               	movwf	print_val@val100+1
  2795  0648  0820               	movf	?___lwdiv,w
  2796  0649  00AF               	movwf	print_val@val100
  2797                           
  2798                           ;main.c: 945:     value -= val100 * 100;
  2799  064A  0830               	movf	print_val@val100+1,w
  2800  064B  00A1               	movwf	___wmul@multiplier+1
  2801  064C  082F               	movf	print_val@val100,w
  2802  064D  00A0               	movwf	___wmul@multiplier
  2803  064E  3064               	movlw	100
  2804  064F  00A2               	movwf	___wmul@multiplicand
  2805  0650  3000               	movlw	0
  2806  0651  00A3               	movwf	___wmul@multiplicand+1
  2807  0652  158A  2667  118A   	fcall	___wmul
  2808  0655  0820               	movf	?___wmul,w
  2809  0656  02A9               	subwf	print_val@value,f
  2810  0657  0821               	movf	?___wmul+1,w
  2811  0658  1C03               	skipc
  2812  0659  03AA               	decf	print_val@value+1,f
  2813  065A  02AA               	subwf	print_val@value+1,f
  2814                           
  2815                           ;main.c: 947:     val10 = value / 10;
  2816  065B  300A               	movlw	10
  2817  065C  00A0               	movwf	___lwdiv@divisor
  2818  065D  3000               	movlw	0
  2819  065E  00A1               	movwf	___lwdiv@divisor+1
  2820  065F  082A               	movf	print_val@value+1,w
  2821  0660  00A3               	movwf	___lwdiv@dividend+1
  2822  0661  0829               	movf	print_val@value,w
  2823  0662  00A2               	movwf	___lwdiv@dividend
  2824  0663  158A  276D  118A   	fcall	___lwdiv
  2825  0666  0821               	movf	?___lwdiv+1,w
  2826  0667  00AE               	movwf	print_val@val10+1
  2827  0668  0820               	movf	?___lwdiv,w
  2828  0669  00AD               	movwf	print_val@val10
  2829                           
  2830                           ;main.c: 948:     value -= val10 * 10;
  2831  066A  082E               	movf	print_val@val10+1,w
  2832  066B  00A1               	movwf	___wmul@multiplier+1
  2833  066C  082D               	movf	print_val@val10,w
  2834  066D  00A0               	movwf	___wmul@multiplier
  2835  066E  300A               	movlw	10
  2836  066F  00A2               	movwf	___wmul@multiplicand
  2837  0670  3000               	movlw	0
  2838  0671  00A3               	movwf	___wmul@multiplicand+1
  2839  0672  158A  2667  118A   	fcall	___wmul
  2840  0675  0820               	movf	?___wmul,w
  2841  0676  02A9               	subwf	print_val@value,f
  2842  0677  0821               	movf	?___wmul+1,w
  2843  0678  1C03               	skipc
  2844  0679  03AA               	decf	print_val@value+1,f
  2845  067A  02AA               	subwf	print_val@value+1,f
  2846                           
  2847                           ;main.c: 950:     val1 = value;
  2848  067B  082A               	movf	print_val@value+1,w
  2849  067C  00AC               	movwf	print_val@val1+1
  2850  067D  0829               	movf	print_val@value,w
  2851  067E  00AB               	movwf	print_val@val1
  2852                           
  2853                           ;main.c: 952:     val10000 += 48;
  2854  067F  3030               	movlw	48
  2855  0680  07B3               	addwf	print_val@val10000,f
  2856  0681  1803               	skipnc
  2857  0682  0AB4               	incf	print_val@val10000+1,f
  2858  0683  3000               	movlw	0
  2859  0684  07B4               	addwf	print_val@val10000+1,f
  2860                           
  2861                           ;main.c: 953:     val1000 += 48;
  2862  0685  3030               	movlw	48
  2863  0686  07B1               	addwf	print_val@val1000,f
  2864  0687  1803               	skipnc
  2865  0688  0AB2               	incf	print_val@val1000+1,f
  2866  0689  3000               	movlw	0
  2867  068A  07B2               	addwf	print_val@val1000+1,f
  2868                           
  2869                           ;main.c: 954:     val100 += 48;
  2870  068B  3030               	movlw	48
  2871  068C  07AF               	addwf	print_val@val100,f
  2872  068D  1803               	skipnc
  2873  068E  0AB0               	incf	print_val@val100+1,f
  2874  068F  3000               	movlw	0
  2875  0690  07B0               	addwf	print_val@val100+1,f
  2876                           
  2877                           ;main.c: 955:     val10 += 48;
  2878  0691  3030               	movlw	48
  2879  0692  07AD               	addwf	print_val@val10,f
  2880  0693  1803               	skipnc
  2881  0694  0AAE               	incf	print_val@val10+1,f
  2882  0695  3000               	movlw	0
  2883  0696  07AE               	addwf	print_val@val10+1,f
  2884                           
  2885                           ;main.c: 956:     val1 += 48;
  2886  0697  3030               	movlw	48
  2887  0698  07AB               	addwf	print_val@val1,f
  2888  0699  1803               	skipnc
  2889  069A  0AAC               	incf	print_val@val1+1,f
  2890  069B  3000               	movlw	0
  2891  069C  07AC               	addwf	print_val@val1+1,f
  2892                           
  2893                           ;main.c: 958:     if (val10000 > 0) {
  2894  069D  0833               	movf	print_val@val10000,w
  2895  069E  0434               	iorwf	print_val@val10000+1,w
  2896  069F  1903               	btfsc	3,2
  2897  06A0  2EA5               	goto	l3160
  2898                           
  2899                           ;main.c: 959:         UART_Write((uint8_t) val10000);
  2900  06A1  0833               	movf	print_val@val10000,w
  2901  06A2  158A  2701  118A   	fcall	_UART_Write
  2902  06A5                     l3160:
  2903                           
  2904                           ;main.c: 962:     if ((val10000 > 0) || (val1000 > 0)) {
  2905  06A5  0833               	movf	print_val@val10000,w
  2906  06A6  0434               	iorwf	print_val@val10000+1,w
  2907  06A7  1D03               	btfss	3,2
  2908  06A8  2EAD               	goto	l3164
  2909  06A9  0831               	movf	print_val@val1000,w
  2910  06AA  0432               	iorwf	print_val@val1000+1,w
  2911  06AB  1903               	btfsc	3,2
  2912  06AC  2EB1               	goto	l3166
  2913  06AD                     l3164:
  2914                           
  2915                           ;main.c: 963:         UART_Write((uint8_t) val1000);
  2916  06AD  0831               	movf	print_val@val1000,w
  2917  06AE  158A  2701  118A   	fcall	_UART_Write
  2918  06B1                     l3166:
  2919                           
  2920                           ;main.c: 966:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0)) {
  2921  06B1  0833               	movf	print_val@val10000,w
  2922  06B2  0434               	iorwf	print_val@val10000+1,w
  2923  06B3  1D03               	btfss	3,2
  2924  06B4  2EBD               	goto	l3172
  2925  06B5  0831               	movf	print_val@val1000,w
  2926  06B6  0432               	iorwf	print_val@val1000+1,w
  2927  06B7  1D03               	btfss	3,2
  2928  06B8  2EBD               	goto	l3172
  2929  06B9  082F               	movf	print_val@val100,w
  2930  06BA  0430               	iorwf	print_val@val100+1,w
  2931  06BB  1903               	btfsc	3,2
  2932  06BC  2EC1               	goto	l3174
  2933  06BD                     l3172:
  2934                           
  2935                           ;main.c: 967:         UART_Write((uint8_t) val100);
  2936  06BD  082F               	movf	print_val@val100,w
  2937  06BE  158A  2701  118A   	fcall	_UART_Write
  2938  06C1                     l3174:
  2939                           
  2940                           ;main.c: 969:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0) || (val10 > 0)) {
  2941  06C1  0833               	movf	print_val@val10000,w
  2942  06C2  0434               	iorwf	print_val@val10000+1,w
  2943  06C3  1D03               	btfss	3,2
  2944  06C4  2ED1               	goto	l3182
  2945  06C5  0831               	movf	print_val@val1000,w
  2946  06C6  0432               	iorwf	print_val@val1000+1,w
  2947  06C7  1D03               	btfss	3,2
  2948  06C8  2ED1               	goto	l3182
  2949  06C9  082F               	movf	print_val@val100,w
  2950  06CA  0430               	iorwf	print_val@val100+1,w
  2951  06CB  1D03               	btfss	3,2
  2952  06CC  2ED1               	goto	l3182
  2953  06CD  082D               	movf	print_val@val10,w
  2954  06CE  042E               	iorwf	print_val@val10+1,w
  2955  06CF  1903               	btfsc	3,2
  2956  06D0  2ED5               	goto	l363
  2957  06D1                     l3182:
  2958                           
  2959                           ;main.c: 970:         UART_Write((uint8_t) val10);
  2960  06D1  082D               	movf	print_val@val10,w
  2961  06D2  158A  2701  118A   	fcall	_UART_Write
  2962  06D5                     l363:	
  2963                           ;main.c: 971:     }
  2964                           
  2965                           
  2966                           ;main.c: 973:     UART_Write((uint8_t) val1);
  2967  06D5  082B               	movf	print_val@val1,w
  2968  06D6  158A  2701         	fcall	_UART_Write
  2969  06D8  0008               	return
  2970  06D9                     __end_of_print_val:
  2971                           
  2972                           	psect	text7
  2973  0E67                     __ptext7:	
  2974 ;; *************** function ___wmul *****************
  2975 ;; Defined at:
  2976 ;;		line 15 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/Umul16.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2979 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  product         2    4[BANK0 ] unsigned int 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  2    0[BANK0 ] unsigned int 
  2984 ;; Registers used:
  2985 ;;		wreg, status,2, status,0
  2986 ;; Tracked objects:
  2987 ;;		On entry : 300/0
  2988 ;;		On exit  : 300/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2991 ;;      Params:         0       4       0       0
  2992 ;;      Locals:         0       2       0       0
  2993 ;;      Temps:          0       0       0       0
  2994 ;;      Totals:         0       6       0       0
  2995 ;;Total ram usage:        6 bytes
  2996 ;; Hardware stack levels used: 1
  2997 ;; Hardware stack levels required when called: 2
  2998 ;; This function calls:
  2999 ;;		Nothing
  3000 ;; This function is called by:
  3001 ;;		_print_val
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005  0E67                     ___wmul:	
  3006                           ;psect for function ___wmul
  3007                           
  3008                           
  3009                           ;incstack = 0
  3010                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3011  0E67  01A4               	clrf	___wmul@product
  3012  0E68  01A5               	clrf	___wmul@product+1
  3013  0E69                     l3056:
  3014  0E69  1C20               	btfss	___wmul@multiplier,0
  3015  0E6A  2E71               	goto	l548
  3016  0E6B  0822               	movf	___wmul@multiplicand,w
  3017  0E6C  07A4               	addwf	___wmul@product,f
  3018  0E6D  1803               	skipnc
  3019  0E6E  0AA5               	incf	___wmul@product+1,f
  3020  0E6F  0823               	movf	___wmul@multiplicand+1,w
  3021  0E70  07A5               	addwf	___wmul@product+1,f
  3022  0E71                     l548:
  3023  0E71  3001               	movlw	1
  3024  0E72                     u2745:
  3025  0E72  1003               	clrc
  3026  0E73  0DA2               	rlf	___wmul@multiplicand,f
  3027  0E74  0DA3               	rlf	___wmul@multiplicand+1,f
  3028  0E75  3EFF               	addlw	-1
  3029  0E76  1D03               	skipz
  3030  0E77  2E72               	goto	u2745
  3031  0E78  3001               	movlw	1
  3032  0E79                     u2755:
  3033  0E79  1003               	clrc
  3034  0E7A  0CA1               	rrf	___wmul@multiplier+1,f
  3035  0E7B  0CA0               	rrf	___wmul@multiplier,f
  3036  0E7C  3EFF               	addlw	-1
  3037  0E7D  1D03               	skipz
  3038  0E7E  2E79               	goto	u2755
  3039  0E7F  0820               	movf	___wmul@multiplier,w
  3040  0E80  0421               	iorwf	___wmul@multiplier+1,w
  3041  0E81  1D03               	btfss	3,2
  3042  0E82  2E69               	goto	l3056
  3043  0E83  0825               	movf	___wmul@product+1,w
  3044  0E84  00A1               	movwf	?___wmul+1
  3045  0E85  0824               	movf	___wmul@product,w
  3046  0E86  00A0               	movwf	?___wmul
  3047  0E87  0008               	return
  3048  0E88                     __end_of___wmul:
  3049                           
  3050                           	psect	text8
  3051  0F6D                     __ptext8:	
  3052 ;; *************** function ___lwdiv *****************
  3053 ;; Defined at:
  3054 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/lwdiv.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;  divisor         2    0[BANK0 ] unsigned int 
  3057 ;;  dividend        2    2[BANK0 ] unsigned int 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  quotient        2    6[BANK0 ] unsigned int 
  3060 ;;  counter         1    5[BANK0 ] unsigned char 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  2    0[BANK0 ] unsigned int 
  3063 ;; Registers used:
  3064 ;;		wreg, status,2, status,0
  3065 ;; Tracked objects:
  3066 ;;		On entry : 300/0
  3067 ;;		On exit  : 300/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3070 ;;      Params:         0       4       0       0
  3071 ;;      Locals:         0       3       0       0
  3072 ;;      Temps:          0       1       0       0
  3073 ;;      Totals:         0       8       0       0
  3074 ;;Total ram usage:        8 bytes
  3075 ;; Hardware stack levels used: 1
  3076 ;; Hardware stack levels required when called: 2
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_print_val
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084  0F6D                     ___lwdiv:	
  3085                           ;psect for function ___lwdiv
  3086                           
  3087                           
  3088                           ;incstack = 0
  3089                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3090  0F6D  01A6               	clrf	___lwdiv@quotient
  3091  0F6E  01A7               	clrf	___lwdiv@quotient+1
  3092  0F6F  0820               	movf	___lwdiv@divisor,w
  3093  0F70  0421               	iorwf	___lwdiv@divisor+1,w
  3094  0F71  1903               	btfsc	3,2
  3095  0F72  2FA4               	goto	l3090
  3096  0F73  01A5               	clrf	___lwdiv@counter
  3097  0F74  0AA5               	incf	___lwdiv@counter,f
  3098  0F75                     l3078:
  3099  0F75  1BA1               	btfsc	___lwdiv@divisor+1,7
  3100  0F76  2F83               	goto	l3080
  3101  0F77  3001               	movlw	1
  3102  0F78                     u2785:
  3103  0F78  1003               	clrc
  3104  0F79  0DA0               	rlf	___lwdiv@divisor,f
  3105  0F7A  0DA1               	rlf	___lwdiv@divisor+1,f
  3106  0F7B  3EFF               	addlw	-1
  3107  0F7C  1D03               	skipz
  3108  0F7D  2F78               	goto	u2785
  3109  0F7E  3001               	movlw	1
  3110  0F7F  00A4               	movwf	??___lwdiv
  3111  0F80  0824               	movf	??___lwdiv,w
  3112  0F81  07A5               	addwf	___lwdiv@counter,f
  3113  0F82  2F75               	goto	l3078
  3114  0F83                     l3080:
  3115  0F83  3001               	movlw	1
  3116  0F84                     u2805:
  3117  0F84  1003               	clrc
  3118  0F85  0DA6               	rlf	___lwdiv@quotient,f
  3119  0F86  0DA7               	rlf	___lwdiv@quotient+1,f
  3120  0F87  3EFF               	addlw	-1
  3121  0F88  1D03               	skipz
  3122  0F89  2F84               	goto	u2805
  3123  0F8A  0821               	movf	___lwdiv@divisor+1,w
  3124  0F8B  0223               	subwf	___lwdiv@dividend+1,w
  3125  0F8C  1D03               	skipz
  3126  0F8D  2F90               	goto	u2815
  3127  0F8E  0820               	movf	___lwdiv@divisor,w
  3128  0F8F  0222               	subwf	___lwdiv@dividend,w
  3129  0F90                     u2815:
  3130  0F90  1C03               	skipc
  3131  0F91  2F99               	goto	l3086
  3132  0F92  0820               	movf	___lwdiv@divisor,w
  3133  0F93  02A2               	subwf	___lwdiv@dividend,f
  3134  0F94  0821               	movf	___lwdiv@divisor+1,w
  3135  0F95  1C03               	skipc
  3136  0F96  03A3               	decf	___lwdiv@dividend+1,f
  3137  0F97  02A3               	subwf	___lwdiv@dividend+1,f
  3138  0F98  1426               	bsf	___lwdiv@quotient,0
  3139  0F99                     l3086:
  3140  0F99  3001               	movlw	1
  3141  0F9A                     u2825:
  3142  0F9A  1003               	clrc
  3143  0F9B  0CA1               	rrf	___lwdiv@divisor+1,f
  3144  0F9C  0CA0               	rrf	___lwdiv@divisor,f
  3145  0F9D  3EFF               	addlw	-1
  3146  0F9E  1D03               	skipz
  3147  0F9F  2F9A               	goto	u2825
  3148  0FA0  3001               	movlw	1
  3149  0FA1  02A5               	subwf	___lwdiv@counter,f
  3150  0FA2  1D03               	btfss	3,2
  3151  0FA3  2F83               	goto	l3080
  3152  0FA4                     l3090:
  3153  0FA4  0827               	movf	___lwdiv@quotient+1,w
  3154  0FA5  00A1               	movwf	?___lwdiv+1
  3155  0FA6  0826               	movf	___lwdiv@quotient,w
  3156  0FA7  00A0               	movwf	?___lwdiv
  3157  0FA8  0008               	return
  3158  0FA9                     __end_of___lwdiv:
  3159                           
  3160                           	psect	text9
  3161  0E29                     __ptext9:	
  3162 ;; *************** function _UART_Write_Text *****************
  3163 ;; Defined at:
  3164 ;;		line 73 in file "usart.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  text            1    wreg     PTR unsigned char 
  3167 ;;		 -> STR_26(3), STR_25(3), STR_24(3), STR_23(3), 
  3168 ;;		 -> STR_22(5), STR_21(6), STR_20(5), STR_19(13), 
  3169 ;;		 -> STR_18(14), STR_17(12), STR_15(7), STR_13(8), 
  3170 ;;		 -> STR_12(10), STR_5(14), 
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;  text            1   11[BANK0 ] PTR unsigned char 
  3173 ;;		 -> STR_26(3), STR_25(3), STR_24(3), STR_23(3), 
  3174 ;;		 -> STR_22(5), STR_21(6), STR_20(5), STR_19(13), 
  3175 ;;		 -> STR_18(14), STR_17(12), STR_15(7), STR_13(8), 
  3176 ;;		 -> STR_12(10), STR_5(14), 
  3177 ;;  i               2    9[BANK0 ] int 
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  1    wreg      void 
  3180 ;; Registers used:
  3181 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3182 ;; Tracked objects:
  3183 ;;		On entry : 200/0
  3184 ;;		On exit  : 300/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3187 ;;      Params:         0       0       0       0
  3188 ;;      Locals:         0       3       0       0
  3189 ;;      Temps:          0       0       0       0
  3190 ;;      Totals:         0       3       0       0
  3191 ;;Total ram usage:        3 bytes
  3192 ;; Hardware stack levels used: 1
  3193 ;; Hardware stack levels required when called: 3
  3194 ;; This function calls:
  3195 ;;		_UART_Write
  3196 ;; This function is called by:
  3197 ;;		_main
  3198 ;;		_print_cnt
  3199 ;;		_print_preset
  3200 ;;		_print_cmd_mov
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204  0E29                     _UART_Write_Text:	
  3205                           ;psect for function _UART_Write_Text
  3206                           
  3207                           
  3208                           ;incstack = 0
  3209                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3210                           ;UART_Write_Text@text stored from wreg
  3211  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  3212  0E2A  00AB               	movwf	UART_Write_Text@text
  3213                           
  3214                           ;usart.c: 74:     int i;;usart.c: 75:     for (i = 0; text[i] != '\0'; i++)
  3215  0E2B  01A9               	clrf	UART_Write_Text@i
  3216  0E2C  01AA               	clrf	UART_Write_Text@i+1
  3217  0E2D                     l3100:
  3218  0E2D  0829               	movf	UART_Write_Text@i,w
  3219  0E2E  072B               	addwf	UART_Write_Text@text,w
  3220  0E2F  0084               	movwf	4
  3221  0E30  118A  2500  158A   	fcall	stringdir
  3222  0E33  3A00               	xorlw	0
  3223  0E34  1903               	btfsc	3,2
  3224  0E35  0008               	return
  3225                           
  3226                           ;usart.c: 76:         UART_Write(text[i]);
  3227  0E36  0829               	movf	UART_Write_Text@i,w
  3228  0E37  072B               	addwf	UART_Write_Text@text,w
  3229  0E38  0084               	movwf	4
  3230  0E39  118A  2500  158A   	fcall	stringdir
  3231  0E3C  158A  2701  158A   	fcall	_UART_Write
  3232  0E3F  3001               	movlw	1
  3233  0E40  07A9               	addwf	UART_Write_Text@i,f
  3234  0E41  1803               	skipnc
  3235  0E42  0AAA               	incf	UART_Write_Text@i+1,f
  3236  0E43  3000               	movlw	0
  3237  0E44  07AA               	addwf	UART_Write_Text@i+1,f
  3238  0E45  2E2D               	goto	l3100
  3239  0E46                     __end_of_UART_Write_Text:
  3240                           
  3241                           	psect	text10
  3242  0EA9                     __ptext10:	
  3243 ;; *************** function _UART_Write_Text_CRLF *****************
  3244 ;; Defined at:
  3245 ;;		line 79 in file "usart.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  text            1    wreg     PTR unsigned char 
  3248 ;;		 -> STR_27(2), STR_16(2), STR_14(7), STR_11(5), 
  3249 ;;		 -> STR_10(7), STR_9(6), STR_8(6), STR_7(5), 
  3250 ;;		 -> STR_6(5), STR_4(7), STR_3(21), STR_2(23), 
  3251 ;;		 -> STR_1(10), 
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;  text            1   11[BANK0 ] PTR unsigned char 
  3254 ;;		 -> STR_27(2), STR_16(2), STR_14(7), STR_11(5), 
  3255 ;;		 -> STR_10(7), STR_9(6), STR_8(6), STR_7(5), 
  3256 ;;		 -> STR_6(5), STR_4(7), STR_3(21), STR_2(23), 
  3257 ;;		 -> STR_1(10), 
  3258 ;;  i               2    9[BANK0 ] int 
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      void 
  3261 ;; Registers used:
  3262 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3263 ;; Tracked objects:
  3264 ;;		On entry : 300/0
  3265 ;;		On exit  : 300/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3268 ;;      Params:         0       0       0       0
  3269 ;;      Locals:         0       3       0       0
  3270 ;;      Temps:          0       0       0       0
  3271 ;;      Totals:         0       3       0       0
  3272 ;;Total ram usage:        3 bytes
  3273 ;; Hardware stack levels used: 1
  3274 ;; Hardware stack levels required when called: 3
  3275 ;; This function calls:
  3276 ;;		_UART_Write
  3277 ;; This function is called by:
  3278 ;;		_main
  3279 ;;		_print_cmd_mov
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283  0EA9                     _UART_Write_Text_CRLF:	
  3284                           ;psect for function _UART_Write_Text_CRLF
  3285                           
  3286                           
  3287                           ;incstack = 0
  3288                           ; Regs used in _UART_Write_Text_CRLF: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3289                           ;UART_Write_Text_CRLF@text stored from wreg
  3290  0EA9  00AB               	movwf	UART_Write_Text_CRLF@text
  3291                           
  3292                           ;usart.c: 80:     int i;;usart.c: 81:     for (i = 0; text[i] != '\0'; i++) {
  3293  0EAA  01A9               	clrf	UART_Write_Text_CRLF@i
  3294  0EAB  01AA               	clrf	UART_Write_Text_CRLF@i+1
  3295  0EAC                     l3196:
  3296  0EAC  0829               	movf	UART_Write_Text_CRLF@i,w
  3297  0EAD  072B               	addwf	UART_Write_Text_CRLF@text,w
  3298  0EAE  0084               	movwf	4
  3299  0EAF  118A  2500  158A   	fcall	stringdir
  3300  0EB2  3A00               	xorlw	0
  3301  0EB3  1903               	btfsc	3,2
  3302  0EB4  2EC5               	goto	l3198
  3303                           
  3304                           ;usart.c: 82:         UART_Write(text[i]);
  3305  0EB5  0829               	movf	UART_Write_Text_CRLF@i,w
  3306  0EB6  072B               	addwf	UART_Write_Text_CRLF@text,w
  3307  0EB7  0084               	movwf	4
  3308  0EB8  118A  2500  158A   	fcall	stringdir
  3309  0EBB  158A  2701  158A   	fcall	_UART_Write
  3310                           
  3311                           ;usart.c: 83:     }
  3312  0EBE  3001               	movlw	1
  3313  0EBF  07A9               	addwf	UART_Write_Text_CRLF@i,f
  3314  0EC0  1803               	skipnc
  3315  0EC1  0AAA               	incf	UART_Write_Text_CRLF@i+1,f
  3316  0EC2  3000               	movlw	0
  3317  0EC3  07AA               	addwf	UART_Write_Text_CRLF@i+1,f
  3318  0EC4  2EAC               	goto	l3196
  3319  0EC5                     l3198:
  3320                           
  3321                           ;usart.c: 84:     UART_Write(0x0C);
  3322  0EC5  300C               	movlw	12
  3323  0EC6  158A  2701  158A   	fcall	_UART_Write
  3324                           
  3325                           ;usart.c: 85:     UART_Write(0x0A);
  3326  0EC9  300A               	movlw	10
  3327  0ECA  158A  2701         	fcall	_UART_Write
  3328  0ECC  0008               	return
  3329  0ECD                     __end_of_UART_Write_Text_CRLF:
  3330                           
  3331                           	psect	text11
  3332  0F01                     __ptext11:	
  3333 ;; *************** function _UART_Write *****************
  3334 ;; Defined at:
  3335 ;;		line 59 in file "usart.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;  data            1    wreg     unsigned char 
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;  data            1    4[BANK0 ] unsigned char 
  3340 ;;  timeout         4    5[BANK0 ] unsigned long 
  3341 ;; Return value:  Size  Location     Type
  3342 ;;                  1    wreg      void 
  3343 ;; Registers used:
  3344 ;;		wreg
  3345 ;; Tracked objects:
  3346 ;;		On entry : 300/0
  3347 ;;		On exit  : 300/0
  3348 ;;		Unchanged: 0/0
  3349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3350 ;;      Params:         0       0       0       0
  3351 ;;      Locals:         0       5       0       0
  3352 ;;      Temps:          0       4       0       0
  3353 ;;      Totals:         0       9       0       0
  3354 ;;Total ram usage:        9 bytes
  3355 ;; Hardware stack levels used: 1
  3356 ;; Hardware stack levels required when called: 2
  3357 ;; This function calls:
  3358 ;;		Nothing
  3359 ;; This function is called by:
  3360 ;;		_print_val
  3361 ;;		_print_preset
  3362 ;;		_UART_Write_Text
  3363 ;;		_UART_Write_Text_CRLF
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367  0F01                     _UART_Write:	
  3368                           ;psect for function _UART_Write
  3369                           
  3370                           
  3371                           ;incstack = 0
  3372                           ; Regs used in _UART_Write: [wreg]
  3373                           ;UART_Write@data stored from wreg
  3374  0F01  00A4               	movwf	UART_Write@data
  3375                           
  3376                           ;usart.c: 60:     unsigned long timeout = 0x1FFFF;
  3377  0F02  3000               	movlw	0
  3378  0F03  00A8               	movwf	UART_Write@timeout+3
  3379  0F04  3001               	movlw	1
  3380  0F05  00A7               	movwf	UART_Write@timeout+2
  3381  0F06  30FF               	movlw	255
  3382  0F07  00A6               	movwf	UART_Write@timeout+1
  3383  0F08  30FF               	movlw	255
  3384  0F09  00A5               	movwf	UART_Write@timeout
  3385                           
  3386                           ;usart.c: 62:     while (!TRMT) {
  3387  0F0A  2F27               	goto	l408
  3388  0F0B                     l2056:
  3389                           
  3390                           ;usart.c: 64:             timeout--;
  3391  0F0B  3001               	movlw	1
  3392  0F0C  00A0               	movwf	??_UART_Write
  3393  0F0D  3000               	movlw	0
  3394  0F0E  00A1               	movwf	??_UART_Write+1
  3395  0F0F  3000               	movlw	0
  3396  0F10  00A2               	movwf	??_UART_Write+2
  3397  0F11  3000               	movlw	0
  3398  0F12  00A3               	movwf	??_UART_Write+3
  3399  0F13  0820               	movf	??_UART_Write,w
  3400  0F14  02A5               	subwf	UART_Write@timeout,f
  3401  0F15  0821               	movf	??_UART_Write+1,w
  3402  0F16  1C03               	skipc
  3403  0F17  0F21               	incfsz	??_UART_Write+1,w
  3404  0F18  2F1A               	goto	u1385
  3405  0F19  2F1B               	goto	u1386
  3406  0F1A                     u1385:
  3407  0F1A  02A6               	subwf	UART_Write@timeout+1,f
  3408  0F1B                     u1386:
  3409  0F1B  0822               	movf	??_UART_Write+2,w
  3410  0F1C  1C03               	skipc
  3411  0F1D  0F22               	incfsz	??_UART_Write+2,w
  3412  0F1E  2F20               	goto	u1387
  3413  0F1F  2F21               	goto	u1388
  3414  0F20                     u1387:
  3415  0F20  02A7               	subwf	UART_Write@timeout+2,f
  3416  0F21                     u1388:
  3417  0F21  0823               	movf	??_UART_Write+3,w
  3418  0F22  1C03               	skipc
  3419  0F23  0F23               	incfsz	??_UART_Write+3,w
  3420  0F24  2F26               	goto	u1389
  3421  0F25  2F27               	goto	l408
  3422  0F26                     u1389:
  3423  0F26  02A8               	subwf	UART_Write@timeout+3,f
  3424  0F27                     l408:	
  3425                           ;usart.c: 68:     }
  3426                           
  3427                           
  3428                           ;usart.c: 62:     while (!TRMT) {
  3429  0F27  1683               	bsf	3,5	;RP0=1, select bank1
  3430  0F28  1898               	btfsc	24,1	;volatile
  3431  0F29  2F31               	goto	l2058
  3432                           
  3433                           ;usart.c: 63:         if (timeout > 0) {
  3434  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  3435  0F2B  0828               	movf	UART_Write@timeout+3,w
  3436  0F2C  0427               	iorwf	UART_Write@timeout+2,w
  3437  0F2D  0426               	iorwf	UART_Write@timeout+1,w
  3438  0F2E  0425               	iorwf	UART_Write@timeout,w
  3439  0F2F  1D03               	btfss	3,2
  3440  0F30  2F0B               	goto	l2056
  3441  0F31                     l2058:
  3442                           
  3443                           ;usart.c: 70:     TXREG = data;
  3444  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  3445  0F32  0824               	movf	UART_Write@data,w
  3446  0F33  0099               	movwf	25	;volatile
  3447  0F34  0008               	return
  3448  0F35                     __end_of_UART_Write:
  3449                           
  3450                           	psect	text12
  3451  0DE0                     __ptext12:	
  3452 ;; *************** function _UC_Init *****************
  3453 ;; Defined at:
  3454 ;;		line 589 in file "main.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2, status,0
  3463 ;; Tracked objects:
  3464 ;;		On entry : B00/0
  3465 ;;		On exit  : B00/100
  3466 ;;		Unchanged: 800/0
  3467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3468 ;;      Params:         0       0       0       0
  3469 ;;      Locals:         0       0       0       0
  3470 ;;      Temps:          0       0       0       0
  3471 ;;      Totals:         0       0       0       0
  3472 ;;Total ram usage:        0 bytes
  3473 ;; Hardware stack levels used: 1
  3474 ;; Hardware stack levels required when called: 2
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_main
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482  0DE0                     _UC_Init:	
  3483                           ;psect for function _UC_Init
  3484                           
  3485                           
  3486                           ;main.c: 590:     PCONbits.OSCF = 1;
  3487                           
  3488                           ;incstack = 0
  3489                           ; Regs used in _UC_Init: [wreg+status,2+status,0]
  3490  0DE0  1683               	bsf	3,5	;RP0=1, select bank1
  3491  0DE1  158E               	bsf	14,3	;volatile
  3492                           
  3493                           ;main.c: 593:     if ((PCONbits.nPOR == 1) && (PCONbits.nBOR == 1)) {
  3494  0DE2  188E               	btfsc	14,1	;volatile
  3495  0DE3  1C0E               	btfss	14,0	;volatile
  3496  0DE4  2DE8               	goto	l3304
  3497                           
  3498                           ;main.c: 595:         is_reboot = 1;
  3499  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  3500  0DE6  01D8               	clrf	_is_reboot
  3501  0DE7  0AD8               	incf	_is_reboot,f
  3502  0DE8                     l3304:
  3503                           
  3504                           ;main.c: 598:     PORTA = 0;
  3505  0DE8  1283               	bcf	3,5	;RP0=0, select bank0
  3506  0DE9  0185               	clrf	5	;volatile
  3507                           
  3508                           ;main.c: 599:     PORTB = 0;
  3509  0DEA  0186               	clrf	6	;volatile
  3510                           
  3511                           ;main.c: 601:     CMCON = 7;
  3512  0DEB  3007               	movlw	7
  3513  0DEC  009F               	movwf	31	;volatile
  3514                           
  3515                           ;main.c: 603:     OPTION_REGbits.nRBPU = 1;
  3516  0DED  1683               	bsf	3,5	;RP0=1, select bank1
  3517  0DEE  1781               	bsf	1,7	;volatile
  3518                           
  3519                           ;main.c: 604:     OPTION_REGbits.PSA = 1;
  3520  0DEF  1581               	bsf	1,3	;volatile
  3521                           
  3522                           ;main.c: 605:     OPTION_REGbits.PS = 0b111;
  3523  0DF0  3007               	movlw	7
  3524  0DF1  0481               	iorwf	1,f	;volatile
  3525                           
  3526                           ;main.c: 610:     INTCONbits.GIE = 1;
  3527  0DF2  178B               	bsf	11,7	;volatile
  3528                           
  3529                           ;main.c: 611:     INTCONbits.PEIE = 1;
  3530  0DF3  170B               	bsf	11,6	;volatile
  3531                           
  3532                           ;main.c: 620:     TRISA = 0b00000000;
  3533  0DF4  0185               	clrf	5	;volatile
  3534                           
  3535                           ;main.c: 630:     TRISB = 0b00000010;
  3536  0DF5  3002               	movlw	2
  3537  0DF6  0086               	movwf	6	;volatile
  3538  0DF7  0008               	return
  3539  0DF8                     __end_of_UC_Init:
  3540                           
  3541                           	psect	text13
  3542  07B7                     __ptext13:	
  3543 ;; *************** function _UART_Init *****************
  3544 ;; Defined at:
  3545 ;;		line 12 in file "usart.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;		None
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;  bauds_index     1    4[BANK0 ] unsigned char 
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  1    wreg      void 
  3552 ;; Registers used:
  3553 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : B00/100
  3556 ;;		On exit  : 300/100
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3559 ;;      Params:         0       0       0       0
  3560 ;;      Locals:         0       1       0       0
  3561 ;;      Temps:          0       2       0       0
  3562 ;;      Totals:         0       3       0       0
  3563 ;;Total ram usage:        3 bytes
  3564 ;; Hardware stack levels used: 1
  3565 ;; Hardware stack levels required when called: 4
  3566 ;; This function calls:
  3567 ;;		_BAUDS_get
  3568 ;; This function is called by:
  3569 ;;		_main
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573  07B7                     _UART_Init:	
  3574                           ;psect for function _UART_Init
  3575                           
  3576                           
  3577                           ;usart.c: 16:     uint8_t bauds_index = BAUDS_get();
  3578                           
  3579                           ;incstack = 0
  3580                           ; Regs used in _UART_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3581  07B7  118A  27FB  118A   	fcall	_BAUDS_get
  3582  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  3583  07BB  00A2               	movwf	??_UART_Init
  3584  07BC  0822               	movf	??_UART_Init,w
  3585  07BD  00A4               	movwf	UART_Init@bauds_index
  3586                           
  3587                           ;usart.c: 18:     switch (bauds_index) {
  3588  07BE  2FD7               	goto	l3338
  3589  07BF                     l398:	
  3590                           ;usart.c: 19:         case 0:
  3591                           
  3592                           
  3593                           ;usart.c: 20:             BRGH = 0;
  3594  07BF  1683               	bsf	3,5	;RP0=1, select bank1
  3595  07C0  1118               	bcf	24,2	;volatile
  3596  07C1                     l3324:
  3597                           
  3598                           ;usart.c: 21:             SPBRG = 25;
  3599  07C1  3019               	movlw	25
  3600  07C2  2FD2               	goto	L12
  3601  07C3                     l400:	
  3602                           ;usart.c: 23:         case 1:
  3603                           
  3604                           ;usart.c: 22:             break;
  3605                           
  3606                           
  3607                           ;usart.c: 24:             BRGH = 1;
  3608  07C3  1683               	bsf	3,5	;RP0=1, select bank1
  3609  07C4  1518               	bsf	24,2	;volatile
  3610                           
  3611                           ;usart.c: 25:             SPBRG = 51;
  3612  07C5  3033               	movlw	51
  3613  07C6  2FD2               	goto	L12
  3614  07C7                     l401:	
  3615                           ;usart.c: 30:         case 3:
  3616                           
  3617                           ;usart.c: 26:             break;
  3618                           
  3619                           
  3620                           ;usart.c: 31:             BRGH = 1;
  3621  07C7  1683               	bsf	3,5	;RP0=1, select bank1
  3622  07C8  1518               	bsf	24,2	;volatile
  3623                           
  3624                           ;usart.c: 32:             SPBRG = 12;
  3625  07C9  300C               	movlw	12
  3626  07CA  2FD2               	goto	L12
  3627  07CB                     l402:	
  3628                           ;usart.c: 34:         case 4:
  3629                           
  3630                           ;usart.c: 33:             break;
  3631                           
  3632                           
  3633                           ;usart.c: 35:             BRGH = 1;
  3634  07CB  1683               	bsf	3,5	;RP0=1, select bank1
  3635  07CC  1518               	bsf	24,2	;volatile
  3636                           
  3637                           ;usart.c: 36:             SPBRG = 6;
  3638  07CD  3006               	movlw	6
  3639  07CE  2FD2               	goto	L12
  3640  07CF                     l403:	
  3641                           ;usart.c: 38:         case 5:
  3642                           
  3643                           ;usart.c: 37:             break;
  3644                           
  3645                           
  3646                           ;usart.c: 39:             BRGH = 1;
  3647  07CF  1683               	bsf	3,5	;RP0=1, select bank1
  3648  07D0  1518               	bsf	24,2	;volatile
  3649                           
  3650                           ;usart.c: 40:             SPBRG = 1;
  3651  07D1  3001               	movlw	1
  3652  07D2                     L12:
  3653  07D2  0099               	movwf	25	;volatile
  3654                           
  3655                           ;usart.c: 41:             break;
  3656  07D3  2FF0               	goto	l399
  3657  07D4                     l404:	
  3658                           ;usart.c: 42:         default:
  3659                           
  3660                           
  3661                           ;usart.c: 43:             BRGH = 1;
  3662  07D4  1683               	bsf	3,5	;RP0=1, select bank1
  3663  07D5  1518               	bsf	24,2	;volatile
  3664  07D6  2FC1               	goto	l3324
  3665  07D7                     l3338:
  3666  07D7  0824               	movf	UART_Init@bauds_index,w
  3667  07D8  00A2               	movwf	??_UART_Init
  3668  07D9  01A3               	clrf	??_UART_Init+1
  3669                           
  3670                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3671                           ; Switch size 1, requested type "simple"
  3672                           ; Number of cases is 1, Range of values is 0 to 0
  3673                           ; switch strategies available:
  3674                           ; Name         Instructions Cycles
  3675                           ; simple_byte            4     3 (average)
  3676                           ; direct_byte            9     7 (fixed)
  3677                           ; jumptable            260     6 (fixed)
  3678                           ;	Chosen strategy is simple_byte
  3679  07DA  0823               	movf	??_UART_Init+1,w
  3680  07DB  3A00               	xorlw	0	; case 0
  3681  07DC  1903               	skipnz
  3682  07DD  2FDF               	goto	l3882
  3683  07DE  2FD4               	goto	l404
  3684  07DF                     l3882:
  3685                           
  3686                           ; Switch size 1, requested type "simple"
  3687                           ; Number of cases is 5, Range of values is 0 to 5
  3688                           ; switch strategies available:
  3689                           ; Name         Instructions Cycles
  3690                           ; simple_byte           16     9 (average)
  3691                           ; direct_byte           19     7 (fixed)
  3692                           ; jumptable            260     6 (fixed)
  3693                           ;	Chosen strategy is simple_byte
  3694  07DF  0822               	movf	??_UART_Init,w
  3695  07E0  3A00               	xorlw	0	; case 0
  3696  07E1  1903               	skipnz
  3697  07E2  2FBF               	goto	l398
  3698  07E3  3A01               	xorlw	1	; case 1
  3699  07E4  1903               	skipnz
  3700  07E5  2FC3               	goto	l400
  3701  07E6  3A02               	xorlw	2	; case 3
  3702  07E7  1903               	skipnz
  3703  07E8  2FC7               	goto	l401
  3704  07E9  3A07               	xorlw	7	; case 4
  3705  07EA  1903               	skipnz
  3706  07EB  2FCB               	goto	l402
  3707  07EC  3A01               	xorlw	1	; case 5
  3708  07ED  1903               	skipnz
  3709  07EE  2FCF               	goto	l403
  3710  07EF  2FD4               	goto	l404
  3711  07F0                     l399:
  3712                           
  3713                           ;usart.c: 50:     SYNC = 0;
  3714  07F0  1218               	bcf	24,4	;volatile
  3715                           
  3716                           ;usart.c: 51:     SPEN = 1;
  3717  07F1  1283               	bcf	3,5	;RP0=0, select bank0
  3718  07F2  1798               	bsf	24,7	;volatile
  3719                           
  3720                           ;usart.c: 52:     CREN = 1;
  3721  07F3  1618               	bsf	24,4	;volatile
  3722                           
  3723                           ;usart.c: 53:     TXEN = 1;
  3724  07F4  1683               	bsf	3,5	;RP0=1, select bank1
  3725  07F5  1698               	bsf	24,5	;volatile
  3726                           
  3727                           ;usart.c: 55:     PIR1bits.RCIF = 0;
  3728  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  3729  07F7  128C               	bcf	12,5	;volatile
  3730                           
  3731                           ;usart.c: 56:     PIE1bits.RCIE = 1;
  3732  07F8  1683               	bsf	3,5	;RP0=1, select bank1
  3733  07F9  168C               	bsf	12,5	;volatile
  3734  07FA  0008               	return
  3735  07FB                     __end_of_UART_Init:
  3736                           
  3737                           	psect	text14
  3738  07FB                     __ptext14:	
  3739 ;; *************** function _BAUDS_get *****************
  3740 ;; Defined at:
  3741 ;;		line 918 in file "main.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;		None
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;		None
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  1    wreg      unsigned char 
  3748 ;; Registers used:
  3749 ;;		wreg, status,2, status,0, pclath, cstack
  3750 ;; Tracked objects:
  3751 ;;		On entry : B00/100
  3752 ;;		On exit  : 300/100
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3755 ;;      Params:         0       0       0       0
  3756 ;;      Locals:         0       0       0       0
  3757 ;;      Temps:          0       0       0       0
  3758 ;;      Totals:         0       0       0       0
  3759 ;;Total ram usage:        0 bytes
  3760 ;; Hardware stack levels used: 1
  3761 ;; Hardware stack levels required when called: 3
  3762 ;; This function calls:
  3763 ;;		_eeprom_read
  3764 ;; This function is called by:
  3765 ;;		_UART_Init
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769  07FB                     _BAUDS_get:	
  3770                           ;psect for function _BAUDS_get
  3771                           
  3772                           
  3773                           ;main.c: 920:     return eeprom_read(0xFF);
  3774                           
  3775                           ;incstack = 0
  3776                           ; Regs used in _BAUDS_get: [wreg+status,2+status,0+pclath+cstack]
  3777  07FB  30FF               	movlw	255
  3778  07FC  158A  25CA         	fcall	_eeprom_read
  3779  07FE  0008               	return
  3780  07FF                     __end_of_BAUDS_get:
  3781                           
  3782                           	psect	text15
  3783  0D87                     __ptext15:	
  3784 ;; *************** function _TIMER1_Init *****************
  3785 ;; Defined at:
  3786 ;;		line 641 in file "main.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;		None
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;		None
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1    wreg      void 
  3793 ;; Registers used:
  3794 ;;		wreg
  3795 ;; Tracked objects:
  3796 ;;		On entry : 300/100
  3797 ;;		On exit  : 300/100
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3800 ;;      Params:         0       0       0       0
  3801 ;;      Locals:         0       0       0       0
  3802 ;;      Temps:          0       0       0       0
  3803 ;;      Totals:         0       0       0       0
  3804 ;;Total ram usage:        0 bytes
  3805 ;; Hardware stack levels used: 1
  3806 ;; Hardware stack levels required when called: 2
  3807 ;; This function calls:
  3808 ;;		Nothing
  3809 ;; This function is called by:
  3810 ;;		_main
  3811 ;; This function uses a non-reentrant model
  3812 ;;
  3813                           
  3814  0D87                     _TIMER1_Init:	
  3815                           ;psect for function _TIMER1_Init
  3816                           
  3817                           
  3818                           ;main.c: 644:     T1CONbits.T1CKPS1 = 1;
  3819                           
  3820                           ;incstack = 0
  3821                           ; Regs used in _TIMER1_Init: [wreg]
  3822  0D87  1283               	bcf	3,5	;RP0=0, select bank0
  3823  0D88  1690               	bsf	16,5	;volatile
  3824                           
  3825                           ;main.c: 645:     T1CONbits.T1CKPS0 = 1;
  3826  0D89  1610               	bsf	16,4	;volatile
  3827                           
  3828                           ;main.c: 646:     T1CONbits.T1OSCEN = 0;
  3829  0D8A  1190               	bcf	16,3	;volatile
  3830                           
  3831                           ;main.c: 647:     T1CONbits.nT1SYNC = 1;
  3832  0D8B  1510               	bsf	16,2	;volatile
  3833                           
  3834                           ;main.c: 648:     T1CONbits.TMR1CS = 0;
  3835  0D8C  1090               	bcf	16,1	;volatile
  3836                           
  3837                           ;main.c: 649:     T1CONbits.TMR1ON = 1;
  3838  0D8D  1410               	bsf	16,0	;volatile
  3839                           
  3840                           ;main.c: 650:     TMR1H = 255;
  3841  0D8E  30FF               	movlw	255
  3842  0D8F  008F               	movwf	15	;volatile
  3843                           
  3844                           ;main.c: 651:     TMR1L = 131;
  3845  0D90  3083               	movlw	131
  3846  0D91  008E               	movwf	14	;volatile
  3847                           
  3848                           ;main.c: 653:     PIR1bits.TMR1IF = 0;
  3849  0D92  100C               	bcf	12,0	;volatile
  3850                           
  3851                           ;main.c: 654:     PIE1bits.TMR1IE = 1;
  3852  0D93  1683               	bsf	3,5	;RP0=1, select bank1
  3853  0D94  140C               	bsf	12,0	;volatile
  3854  0D95  0008               	return
  3855  0D96                     __end_of_TIMER1_Init:
  3856                           
  3857                           	psect	text16
  3858  0ECD                     __ptext16:	
  3859 ;; *************** function _SPEED_calc *****************
  3860 ;; Defined at:
  3861 ;;		line 856 in file "main.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  speed           1    wreg     unsigned char 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  speed           1   11[BANK0 ] unsigned char 
  3866 ;;  sp_calc         1   12[BANK0 ] unsigned char 
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  1    wreg      unsigned char 
  3869 ;; Registers used:
  3870 ;;		wreg, status,2, status,0, pclath, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 300/0
  3873 ;;		On exit  : 300/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3876 ;;      Params:         0       0       0       0
  3877 ;;      Locals:         0       2       0       0
  3878 ;;      Temps:          0       2       0       0
  3879 ;;      Totals:         0       4       0       0
  3880 ;;Total ram usage:        4 bytes
  3881 ;; Hardware stack levels used: 1
  3882 ;; Hardware stack levels required when called: 3
  3883 ;; This function calls:
  3884 ;;		___awdiv
  3885 ;; This function is called by:
  3886 ;;		_main
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890  0ECD                     _SPEED_calc:	
  3891                           ;psect for function _SPEED_calc
  3892                           
  3893                           
  3894                           ;incstack = 0
  3895                           ; Regs used in _SPEED_calc: [wreg+status,2+status,0+pclath+cstack]
  3896                           ;SPEED_calc@speed stored from wreg
  3897  0ECD  00AB               	movwf	SPEED_calc@speed
  3898                           
  3899                           ;main.c: 859:     if (speed > 0x32) {
  3900  0ECE  3033               	movlw	51
  3901  0ECF  022B               	subwf	SPEED_calc@speed,w
  3902  0ED0  1C03               	skipc
  3903  0ED1  2ED6               	goto	l328
  3904                           
  3905                           ;main.c: 860:         speed = 0x32;
  3906  0ED2  3032               	movlw	50
  3907  0ED3  00A9               	movwf	??_SPEED_calc
  3908  0ED4  0829               	movf	??_SPEED_calc,w
  3909  0ED5  00AB               	movwf	SPEED_calc@speed
  3910  0ED6                     l328:	
  3911                           ;main.c: 861:     }
  3912                           
  3913                           
  3914                           ;main.c: 863:     if (speed < 0x06) {
  3915  0ED6  3006               	movlw	6
  3916  0ED7  022B               	subwf	SPEED_calc@speed,w
  3917  0ED8  1803               	skipnc
  3918  0ED9  2EDE               	goto	l3448
  3919                           
  3920                           ;main.c: 864:         speed = 0x06;
  3921  0EDA  3006               	movlw	6
  3922  0EDB  00A9               	movwf	??_SPEED_calc
  3923  0EDC  0829               	movf	??_SPEED_calc,w
  3924  0EDD  00AB               	movwf	SPEED_calc@speed
  3925  0EDE                     l3448:
  3926                           
  3927                           ;main.c: 867:     sp_calc = 1 + ((0x32 - speed) / 2);
  3928  0EDE  3002               	movlw	2
  3929  0EDF  00A0               	movwf	___awdiv@divisor
  3930  0EE0  3000               	movlw	0
  3931  0EE1  00A1               	movwf	___awdiv@divisor+1
  3932  0EE2  3032               	movlw	50
  3933  0EE3  00A9               	movwf	??_SPEED_calc
  3934  0EE4  082B               	movf	SPEED_calc@speed,w
  3935  0EE5  0229               	subwf	??_SPEED_calc,w
  3936  0EE6  00A2               	movwf	___awdiv@dividend
  3937  0EE7  01A3               	clrf	___awdiv@dividend+1
  3938  0EE8  1C03               	skipc
  3939  0EE9  03A3               	decf	___awdiv@dividend+1,f
  3940  0EEA  118A  275E  158A   	fcall	___awdiv
  3941  0EED  0820               	movf	?___awdiv,w
  3942  0EEE  3E01               	addlw	1
  3943  0EEF  00AA               	movwf	??_SPEED_calc+1
  3944  0EF0  082A               	movf	??_SPEED_calc+1,w
  3945  0EF1  00AC               	movwf	SPEED_calc@sp_calc
  3946                           
  3947                           ;main.c: 869:     if (sp_calc < 1) {
  3948  0EF2  082C               	movf	SPEED_calc@sp_calc,w
  3949  0EF3  1D03               	btfss	3,2
  3950  0EF4  2EF7               	goto	l3454
  3951                           
  3952                           ;main.c: 870:         sp_calc = 1;
  3953  0EF5  01AC               	clrf	SPEED_calc@sp_calc
  3954  0EF6  0AAC               	incf	SPEED_calc@sp_calc,f
  3955  0EF7                     l3454:
  3956                           
  3957                           ;main.c: 873:     if (sp_calc > 19) {
  3958  0EF7  3014               	movlw	20
  3959  0EF8  022C               	subwf	SPEED_calc@sp_calc,w
  3960  0EF9  1C03               	skipc
  3961  0EFA  2EFF               	goto	l331
  3962                           
  3963                           ;main.c: 875:         sp_calc = 19;
  3964  0EFB  3013               	movlw	19
  3965  0EFC  00A9               	movwf	??_SPEED_calc
  3966  0EFD  0829               	movf	??_SPEED_calc,w
  3967  0EFE  00AC               	movwf	SPEED_calc@sp_calc
  3968  0EFF                     l331:	
  3969                           ;main.c: 876:     }
  3970                           
  3971                           
  3972                           ;main.c: 878:     return sp_calc;
  3973  0EFF  082C               	movf	SPEED_calc@sp_calc,w
  3974  0F00  0008               	return
  3975  0F01                     __end_of_SPEED_calc:
  3976                           
  3977                           	psect	text17
  3978  075E                     __ptext17:	
  3979 ;; *************** function ___awdiv *****************
  3980 ;; Defined at:
  3981 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/awdiv.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  divisor         2    0[BANK0 ] int 
  3984 ;;  dividend        2    2[BANK0 ] int 
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;  quotient        2    7[BANK0 ] int 
  3987 ;;  sign            1    6[BANK0 ] unsigned char 
  3988 ;;  counter         1    5[BANK0 ] unsigned char 
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  2    0[BANK0 ] int 
  3991 ;; Registers used:
  3992 ;;		wreg, status,2, status,0
  3993 ;; Tracked objects:
  3994 ;;		On entry : 300/0
  3995 ;;		On exit  : 300/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3998 ;;      Params:         0       4       0       0
  3999 ;;      Locals:         0       4       0       0
  4000 ;;      Temps:          0       1       0       0
  4001 ;;      Totals:         0       9       0       0
  4002 ;;Total ram usage:        9 bytes
  4003 ;; Hardware stack levels used: 1
  4004 ;; Hardware stack levels required when called: 2
  4005 ;; This function calls:
  4006 ;;		Nothing
  4007 ;; This function is called by:
  4008 ;;		_SPEED_calc
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012  075E                     ___awdiv:	
  4013                           ;psect for function ___awdiv
  4014                           
  4015                           
  4016                           ;incstack = 0
  4017                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4018  075E  01A6               	clrf	___awdiv@sign
  4019  075F  1FA1               	btfss	___awdiv@divisor+1,7
  4020  0760  2F68               	goto	l3236
  4021  0761  09A0               	comf	___awdiv@divisor,f
  4022  0762  09A1               	comf	___awdiv@divisor+1,f
  4023  0763  0AA0               	incf	___awdiv@divisor,f
  4024  0764  1903               	skipnz
  4025  0765  0AA1               	incf	___awdiv@divisor+1,f
  4026  0766  01A6               	clrf	___awdiv@sign
  4027  0767  0AA6               	incf	___awdiv@sign,f
  4028  0768                     l3236:
  4029  0768  1FA3               	btfss	___awdiv@dividend+1,7
  4030  0769  2F73               	goto	l3242
  4031  076A  09A2               	comf	___awdiv@dividend,f
  4032  076B  09A3               	comf	___awdiv@dividend+1,f
  4033  076C  0AA2               	incf	___awdiv@dividend,f
  4034  076D  1903               	skipnz
  4035  076E  0AA3               	incf	___awdiv@dividend+1,f
  4036  076F  3001               	movlw	1
  4037  0770  00A4               	movwf	??___awdiv
  4038  0771  0824               	movf	??___awdiv,w
  4039  0772  06A6               	xorwf	___awdiv@sign,f
  4040  0773                     l3242:
  4041  0773  01A7               	clrf	___awdiv@quotient
  4042  0774  01A8               	clrf	___awdiv@quotient+1
  4043  0775  0820               	movf	___awdiv@divisor,w
  4044  0776  0421               	iorwf	___awdiv@divisor+1,w
  4045  0777  1903               	btfsc	3,2
  4046  0778  2FAA               	goto	l3264
  4047  0779  01A5               	clrf	___awdiv@counter
  4048  077A  0AA5               	incf	___awdiv@counter,f
  4049  077B                     l3252:
  4050  077B  1BA1               	btfsc	___awdiv@divisor+1,7
  4051  077C  2F89               	goto	l3254
  4052  077D  3001               	movlw	1
  4053  077E                     u3075:
  4054  077E  1003               	clrc
  4055  077F  0DA0               	rlf	___awdiv@divisor,f
  4056  0780  0DA1               	rlf	___awdiv@divisor+1,f
  4057  0781  3EFF               	addlw	-1
  4058  0782  1D03               	skipz
  4059  0783  2F7E               	goto	u3075
  4060  0784  3001               	movlw	1
  4061  0785  00A4               	movwf	??___awdiv
  4062  0786  0824               	movf	??___awdiv,w
  4063  0787  07A5               	addwf	___awdiv@counter,f
  4064  0788  2F7B               	goto	l3252
  4065  0789                     l3254:
  4066  0789  3001               	movlw	1
  4067  078A                     u3095:
  4068  078A  1003               	clrc
  4069  078B  0DA7               	rlf	___awdiv@quotient,f
  4070  078C  0DA8               	rlf	___awdiv@quotient+1,f
  4071  078D  3EFF               	addlw	-1
  4072  078E  1D03               	skipz
  4073  078F  2F8A               	goto	u3095
  4074  0790  0821               	movf	___awdiv@divisor+1,w
  4075  0791  0223               	subwf	___awdiv@dividend+1,w
  4076  0792  1D03               	skipz
  4077  0793  2F96               	goto	u3105
  4078  0794  0820               	movf	___awdiv@divisor,w
  4079  0795  0222               	subwf	___awdiv@dividend,w
  4080  0796                     u3105:
  4081  0796  1C03               	skipc
  4082  0797  2F9F               	goto	l3260
  4083  0798  0820               	movf	___awdiv@divisor,w
  4084  0799  02A2               	subwf	___awdiv@dividend,f
  4085  079A  0821               	movf	___awdiv@divisor+1,w
  4086  079B  1C03               	skipc
  4087  079C  03A3               	decf	___awdiv@dividend+1,f
  4088  079D  02A3               	subwf	___awdiv@dividend+1,f
  4089  079E  1427               	bsf	___awdiv@quotient,0
  4090  079F                     l3260:
  4091  079F  3001               	movlw	1
  4092  07A0                     u3115:
  4093  07A0  1003               	clrc
  4094  07A1  0CA1               	rrf	___awdiv@divisor+1,f
  4095  07A2  0CA0               	rrf	___awdiv@divisor,f
  4096  07A3  3EFF               	addlw	-1
  4097  07A4  1D03               	skipz
  4098  07A5  2FA0               	goto	u3115
  4099  07A6  3001               	movlw	1
  4100  07A7  02A5               	subwf	___awdiv@counter,f
  4101  07A8  1D03               	btfss	3,2
  4102  07A9  2F89               	goto	l3254
  4103  07AA                     l3264:
  4104  07AA  0826               	movf	___awdiv@sign,w
  4105  07AB  1903               	btfsc	3,2
  4106  07AC  2FB2               	goto	l3268
  4107  07AD  09A7               	comf	___awdiv@quotient,f
  4108  07AE  09A8               	comf	___awdiv@quotient+1,f
  4109  07AF  0AA7               	incf	___awdiv@quotient,f
  4110  07B0  1903               	skipnz
  4111  07B1  0AA8               	incf	___awdiv@quotient+1,f
  4112  07B2                     l3268:
  4113  07B2  0828               	movf	___awdiv@quotient+1,w
  4114  07B3  00A1               	movwf	?___awdiv+1
  4115  07B4  0827               	movf	___awdiv@quotient,w
  4116  07B5  00A0               	movwf	?___awdiv
  4117  07B6  0008               	return
  4118  07B7                     __end_of___awdiv:
  4119                           
  4120                           	psect	text18
  4121  0F35                     __ptext18:	
  4122 ;; *************** function _PRESET_save *****************
  4123 ;; Defined at:
  4124 ;;		line 887 in file "main.c"
  4125 ;; Parameters:    Size  Location     Type
  4126 ;;  id              1    wreg     unsigned char 
  4127 ;;  pan             2    6[BANK0 ] unsigned int 
  4128 ;;  tilt            2    8[BANK0 ] unsigned int 
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;  id              1   12[BANK0 ] unsigned char 
  4131 ;;  _addr           1   13[BANK0 ] unsigned char 
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  1    wreg      void 
  4134 ;; Registers used:
  4135 ;;		wreg, status,2, status,0, pclath, cstack
  4136 ;; Tracked objects:
  4137 ;;		On entry : B00/0
  4138 ;;		On exit  : 200/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4141 ;;      Params:         0       4       0       0
  4142 ;;      Locals:         0       2       0       0
  4143 ;;      Temps:          0       2       0       0
  4144 ;;      Totals:         0       8       0       0
  4145 ;;Total ram usage:        8 bytes
  4146 ;; Hardware stack levels used: 1
  4147 ;; Hardware stack levels required when called: 4
  4148 ;; This function calls:
  4149 ;;		_eeprom_update
  4150 ;; This function is called by:
  4151 ;;		_main
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155  0F35                     _PRESET_save:	
  4156                           ;psect for function _PRESET_save
  4157                           
  4158                           
  4159                           ;incstack = 0
  4160                           ; Regs used in _PRESET_save: [wreg+status,2+status,0+pclath+cstack]
  4161                           ;PRESET_save@id stored from wreg
  4162  0F35  00AC               	movwf	PRESET_save@id
  4163                           
  4164                           ;main.c: 888:     uint8_t _addr = id * 4;
  4165  0F36  082C               	movf	PRESET_save@id,w
  4166  0F37  00AA               	movwf	??_PRESET_save
  4167  0F38  3001               	movlw	1
  4168  0F39                     u3205:
  4169  0F39  1003               	clrc
  4170  0F3A  0DAA               	rlf	??_PRESET_save,f
  4171  0F3B  3EFF               	addlw	-1
  4172  0F3C  1D03               	skipz
  4173  0F3D  2F39               	goto	u3205
  4174  0F3E  1003               	clrc
  4175  0F3F  0D2A               	rlf	??_PRESET_save,w
  4176  0F40  00AB               	movwf	??_PRESET_save+1
  4177  0F41  082B               	movf	??_PRESET_save+1,w
  4178  0F42  00AD               	movwf	PRESET_save@_addr
  4179                           
  4180                           ;main.c: 890:     if (id < 50) {
  4181  0F43  3032               	movlw	50
  4182  0F44  022C               	subwf	PRESET_save@id,w
  4183  0F45  1803               	skipnc
  4184  0F46  0008               	return
  4185                           
  4186                           ;main.c: 892:         eeprom_update(_addr, pan & 0xFF);
  4187  0F47  0826               	movf	PRESET_save@pan,w
  4188  0F48  00AA               	movwf	??_PRESET_save
  4189  0F49  082A               	movf	??_PRESET_save,w
  4190  0F4A  00A3               	movwf	eeprom_update@value
  4191  0F4B  082D               	movf	PRESET_save@_addr,w
  4192  0F4C  158A  2596  158A   	fcall	_eeprom_update
  4193                           
  4194                           ;main.c: 893:         eeprom_update(_addr + 1, (pan >> 8) & 0xFF);
  4195  0F4F  1283               	bcf	3,5	;RP0=0, select bank0
  4196  0F50  0827               	movf	PRESET_save@pan+1,w
  4197  0F51  00AA               	movwf	??_PRESET_save
  4198  0F52  082A               	movf	??_PRESET_save,w
  4199  0F53  00A3               	movwf	eeprom_update@value
  4200  0F54  082D               	movf	PRESET_save@_addr,w
  4201  0F55  3E01               	addlw	1
  4202  0F56  158A  2596  158A   	fcall	_eeprom_update
  4203                           
  4204                           ;main.c: 895:         eeprom_update(_addr + 2, tilt & 0xFF);
  4205  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  4206  0F5A  0828               	movf	PRESET_save@tilt,w
  4207  0F5B  00AA               	movwf	??_PRESET_save
  4208  0F5C  082A               	movf	??_PRESET_save,w
  4209  0F5D  00A3               	movwf	eeprom_update@value
  4210  0F5E  082D               	movf	PRESET_save@_addr,w
  4211  0F5F  3E02               	addlw	2
  4212  0F60  158A  2596  158A   	fcall	_eeprom_update
  4213                           
  4214                           ;main.c: 896:         eeprom_update(_addr + 3, (tilt >> 8) & 0xFF);
  4215  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  4216  0F64  0829               	movf	PRESET_save@tilt+1,w
  4217  0F65  00AA               	movwf	??_PRESET_save
  4218  0F66  082A               	movf	??_PRESET_save,w
  4219  0F67  00A3               	movwf	eeprom_update@value
  4220  0F68  082D               	movf	PRESET_save@_addr,w
  4221  0F69  3E03               	addlw	3
  4222  0F6A  158A  2596         	fcall	_eeprom_update
  4223  0F6C  0008               	return
  4224  0F6D                     __end_of_PRESET_save:
  4225                           
  4226                           	psect	text19
  4227  0FA9                     __ptext19:	
  4228 ;; *************** function _PRESET_load *****************
  4229 ;; Defined at:
  4230 ;;		line 900 in file "main.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;  id              1    wreg     unsigned char 
  4233 ;;  pan             1    2[BANK0 ] PTR unsigned int 
  4234 ;;		 -> main@pan_tmp_439(2), main@pan_tmp(2), 
  4235 ;;  tilt            1    3[BANK0 ] PTR unsigned int 
  4236 ;;		 -> main@tilt_tmp_440(2), main@tilt_tmp(2), 
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;  id              1    6[BANK0 ] unsigned char 
  4239 ;;  _addr           1    7[BANK0 ] unsigned char 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  1    wreg      void 
  4242 ;; Registers used:
  4243 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4244 ;; Tracked objects:
  4245 ;;		On entry : 300/0
  4246 ;;		On exit  : 300/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4249 ;;      Params:         0       2       0       0
  4250 ;;      Locals:         0       2       0       0
  4251 ;;      Temps:          0       2       0       0
  4252 ;;      Totals:         0       6       0       0
  4253 ;;Total ram usage:        6 bytes
  4254 ;; Hardware stack levels used: 1
  4255 ;; Hardware stack levels required when called: 3
  4256 ;; This function calls:
  4257 ;;		_eeprom_read
  4258 ;; This function is called by:
  4259 ;;		_main
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263  0FA9                     _PRESET_load:	
  4264                           ;psect for function _PRESET_load
  4265                           
  4266                           
  4267                           ;incstack = 0
  4268                           ; Regs used in _PRESET_load: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4269                           ;PRESET_load@id stored from wreg
  4270  0FA9  00A6               	movwf	PRESET_load@id
  4271                           
  4272                           ;main.c: 901:     uint8_t _addr = id * 4;
  4273  0FAA  0826               	movf	PRESET_load@id,w
  4274  0FAB  00A4               	movwf	??_PRESET_load
  4275  0FAC  3001               	movlw	1
  4276  0FAD                     u3225:
  4277  0FAD  1003               	clrc
  4278  0FAE  0DA4               	rlf	??_PRESET_load,f
  4279  0FAF  3EFF               	addlw	-1
  4280  0FB0  1D03               	skipz
  4281  0FB1  2FAD               	goto	u3225
  4282  0FB2  1003               	clrc
  4283  0FB3  0D24               	rlf	??_PRESET_load,w
  4284  0FB4  00A5               	movwf	??_PRESET_load+1
  4285  0FB5  0825               	movf	??_PRESET_load+1,w
  4286  0FB6  00A7               	movwf	PRESET_load@_addr
  4287                           
  4288                           ;main.c: 903:     if (id < 50) {
  4289  0FB7  3032               	movlw	50
  4290  0FB8  0226               	subwf	PRESET_load@id,w
  4291  0FB9  1803               	skipnc
  4292  0FBA  0008               	return
  4293                           
  4294                           ;main.c: 905:         *pan = (uint16_t) (eeprom_read(_addr));
  4295  0FBB  0827               	movf	PRESET_load@_addr,w
  4296  0FBC  158A  25CA  158A   	fcall	_eeprom_read
  4297  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  4298  0FC0  00A4               	movwf	??_PRESET_load
  4299  0FC1  01A5               	clrf	??_PRESET_load+1
  4300  0FC2  0822               	movf	PRESET_load@pan,w
  4301  0FC3  0084               	movwf	4
  4302  0FC4  0824               	movf	??_PRESET_load,w
  4303  0FC5  1383               	bcf	3,7	;select IRP bank0
  4304  0FC6  0080               	movwf	0
  4305  0FC7  0A84               	incf	4,f
  4306  0FC8  0825               	movf	??_PRESET_load+1,w
  4307  0FC9  0080               	movwf	0
  4308                           
  4309                           ;main.c: 906:         *pan |= (uint16_t) (eeprom_read(_addr + 1) << 8);
  4310  0FCA  0827               	movf	PRESET_load@_addr,w
  4311  0FCB  3E01               	addlw	1
  4312  0FCC  158A  25CA  158A   	fcall	_eeprom_read
  4313  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  4314  0FD0  00A4               	movwf	??_PRESET_load
  4315  0FD1  01A5               	clrf	??_PRESET_load+1
  4316  0FD2  0824               	movf	??_PRESET_load,w
  4317  0FD3  00A5               	movwf	??_PRESET_load+1
  4318  0FD4  01A4               	clrf	??_PRESET_load
  4319  0FD5  0822               	movf	PRESET_load@pan,w
  4320  0FD6  0084               	movwf	4
  4321  0FD7  0824               	movf	??_PRESET_load,w
  4322  0FD8  1383               	bcf	3,7	;select IRP bank0
  4323  0FD9  0480               	iorwf	0,f
  4324  0FDA  0A84               	incf	4,f
  4325  0FDB  0825               	movf	??_PRESET_load+1,w
  4326  0FDC  0480               	iorwf	0,f
  4327                           
  4328                           ;main.c: 908:         *tilt = (uint16_t) (eeprom_read(_addr + 2));
  4329  0FDD  0827               	movf	PRESET_load@_addr,w
  4330  0FDE  3E02               	addlw	2
  4331  0FDF  158A  25CA  158A   	fcall	_eeprom_read
  4332  0FE2  1283               	bcf	3,5	;RP0=0, select bank0
  4333  0FE3  00A4               	movwf	??_PRESET_load
  4334  0FE4  01A5               	clrf	??_PRESET_load+1
  4335  0FE5  0823               	movf	PRESET_load@tilt,w
  4336  0FE6  0084               	movwf	4
  4337  0FE7  0824               	movf	??_PRESET_load,w
  4338  0FE8  1383               	bcf	3,7	;select IRP bank0
  4339  0FE9  0080               	movwf	0
  4340  0FEA  0A84               	incf	4,f
  4341  0FEB  0825               	movf	??_PRESET_load+1,w
  4342  0FEC  0080               	movwf	0
  4343                           
  4344                           ;main.c: 909:         *tilt |= (uint16_t) (eeprom_read(_addr + 3) << 8);
  4345  0FED  0827               	movf	PRESET_load@_addr,w
  4346  0FEE  3E03               	addlw	3
  4347  0FEF  158A  25CA         	fcall	_eeprom_read
  4348  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  4349  0FF2  00A4               	movwf	??_PRESET_load
  4350  0FF3  01A5               	clrf	??_PRESET_load+1
  4351  0FF4  0824               	movf	??_PRESET_load,w
  4352  0FF5  00A5               	movwf	??_PRESET_load+1
  4353  0FF6  01A4               	clrf	??_PRESET_load
  4354  0FF7  0823               	movf	PRESET_load@tilt,w
  4355  0FF8  0084               	movwf	4
  4356  0FF9  0824               	movf	??_PRESET_load,w
  4357  0FFA  1383               	bcf	3,7	;select IRP bank0
  4358  0FFB  0480               	iorwf	0,f
  4359  0FFC  0A84               	incf	4,f
  4360  0FFD  0825               	movf	??_PRESET_load+1,w
  4361  0FFE  0480               	iorwf	0,f
  4362  0FFF  0008               	return
  4363  1000                     __end_of_PRESET_load:
  4364                           
  4365                           	psect	text20
  4366  06D9                     __ptext20:	
  4367 ;; *************** function _MOTOR_Init *****************
  4368 ;; Defined at:
  4369 ;;		line 710 in file "main.c"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;		None
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;		None
  4374 ;; Return value:  Size  Location     Type
  4375 ;;                  1    wreg      void 
  4376 ;; Registers used:
  4377 ;;		wreg, status,2, status,0, pclath, cstack
  4378 ;; Tracked objects:
  4379 ;;		On entry : 300/0
  4380 ;;		On exit  : 300/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4383 ;;      Params:         0       0       0       0
  4384 ;;      Locals:         0       0       0       0
  4385 ;;      Temps:          0       1       0       0
  4386 ;;      Totals:         0       1       0       0
  4387 ;;Total ram usage:        1 bytes
  4388 ;; Hardware stack levels used: 1
  4389 ;; Hardware stack levels required when called: 3
  4390 ;; This function calls:
  4391 ;;		_delay_wdt
  4392 ;; This function is called by:
  4393 ;;		_main
  4394 ;; This function uses a non-reentrant model
  4395 ;;
  4396                           
  4397  06D9                     _MOTOR_Init:	
  4398                           ;psect for function _MOTOR_Init
  4399                           
  4400                           
  4401                           ;main.c: 711:     is_init = 1;
  4402                           
  4403                           ;incstack = 0
  4404                           ; Regs used in _MOTOR_Init: [wreg+status,2+status,0+pclath+cstack]
  4405  06D9  01F0               	clrf	_is_init
  4406  06DA  0AF0               	incf	_is_init,f
  4407                           
  4408                           ;main.c: 764:     pan_speed = 0x32;
  4409  06DB  3032               	movlw	50
  4410  06DC  00A3               	movwf	??_MOTOR_Init
  4411  06DD  0823               	movf	??_MOTOR_Init,w
  4412  06DE  00E8               	movwf	_pan_speed	;volatile
  4413                           
  4414                           ;main.c: 765:     pan_direction = 1;
  4415  06DF  3001               	movlw	1
  4416  06E0  00A3               	movwf	??_MOTOR_Init
  4417  06E1  0823               	movf	??_MOTOR_Init,w
  4418  06E2  00E9               	movwf	_pan_direction	;volatile
  4419                           
  4420                           ;main.c: 766:     pan_enabled = 1;
  4421  06E3  3001               	movlw	1
  4422  06E4  00A3               	movwf	??_MOTOR_Init
  4423  06E5  0823               	movf	??_MOTOR_Init,w
  4424  06E6  00EA               	movwf	_pan_enabled	;volatile
  4425                           
  4426                           ;main.c: 769:     tilt_speed = 0x32;
  4427  06E7  3032               	movlw	50
  4428  06E8  00A3               	movwf	??_MOTOR_Init
  4429  06E9  0823               	movf	??_MOTOR_Init,w
  4430  06EA  00E5               	movwf	_tilt_speed	;volatile
  4431                           
  4432                           ;main.c: 770:     tilt_direction = 1;
  4433  06EB  3001               	movlw	1
  4434  06EC  00A3               	movwf	??_MOTOR_Init
  4435  06ED  0823               	movf	??_MOTOR_Init,w
  4436  06EE  00E6               	movwf	_tilt_direction	;volatile
  4437                           
  4438                           ;main.c: 771:     tilt_enabled = 1;
  4439  06EF  3001               	movlw	1
  4440  06F0  00A3               	movwf	??_MOTOR_Init
  4441  06F1  0823               	movf	??_MOTOR_Init,w
  4442  06F2  00E7               	movwf	_tilt_enabled	;volatile
  4443                           
  4444                           ;main.c: 774:     delay_wdt(6000);
  4445  06F3  3070               	movlw	112
  4446  06F4  00A0               	movwf	delay_wdt@_ms
  4447  06F5  3017               	movlw	23
  4448  06F6  00A1               	movwf	delay_wdt@_ms+1
  4449  06F7  158A  2610  118A   	fcall	_delay_wdt
  4450                           
  4451                           ;main.c: 776:     tilt_enabled = 0;
  4452  06FA  01E7               	clrf	_tilt_enabled	;volatile
  4453                           
  4454                           ;main.c: 778:     tilt_counter = 0;
  4455  06FB  01D4               	clrf	_tilt_counter	;volatile
  4456  06FC  01D5               	clrf	_tilt_counter+1	;volatile
  4457                           
  4458                           ;main.c: 780:     delay_wdt(100);
  4459  06FD  3064               	movlw	100
  4460  06FE  00A0               	movwf	delay_wdt@_ms
  4461  06FF  3000               	movlw	0
  4462  0700  00A1               	movwf	delay_wdt@_ms+1
  4463  0701  158A  2610  118A   	fcall	_delay_wdt
  4464                           
  4465                           ;main.c: 783:     tilt_speed = 0x32;
  4466  0704  3032               	movlw	50
  4467  0705  00A3               	movwf	??_MOTOR_Init
  4468  0706  0823               	movf	??_MOTOR_Init,w
  4469  0707  00E5               	movwf	_tilt_speed	;volatile
  4470                           
  4471                           ;main.c: 784:     tilt_direction = 0;
  4472  0708  01E6               	clrf	_tilt_direction	;volatile
  4473                           
  4474                           ;main.c: 785:     tilt_enabled = 1;
  4475  0709  3001               	movlw	1
  4476  070A  00A3               	movwf	??_MOTOR_Init
  4477  070B  0823               	movf	??_MOTOR_Init,w
  4478  070C  00E7               	movwf	_tilt_enabled	;volatile
  4479                           
  4480                           ;main.c: 787:     delay_wdt(750);
  4481  070D  30EE               	movlw	238
  4482  070E  00A0               	movwf	delay_wdt@_ms
  4483  070F  3002               	movlw	2
  4484  0710  00A1               	movwf	delay_wdt@_ms+1
  4485  0711  158A  2610  118A   	fcall	_delay_wdt
  4486                           
  4487                           ;main.c: 789:     tilt_enabled = 0;
  4488  0714  01E7               	clrf	_tilt_enabled	;volatile
  4489                           
  4490                           ;main.c: 791:     tilt_counter = 0;
  4491  0715  01D4               	clrf	_tilt_counter	;volatile
  4492  0716  01D5               	clrf	_tilt_counter+1	;volatile
  4493                           
  4494                           ;main.c: 795:     delay_wdt(15650);
  4495  0717  3022               	movlw	34
  4496  0718  00A0               	movwf	delay_wdt@_ms
  4497  0719  303D               	movlw	61
  4498  071A  00A1               	movwf	delay_wdt@_ms+1
  4499  071B  158A  2610  118A   	fcall	_delay_wdt
  4500                           
  4501                           ;main.c: 797:     pan_enabled = 0;
  4502  071E  01EA               	clrf	_pan_enabled	;volatile
  4503                           
  4504                           ;main.c: 799:     pan_counter = 0;
  4505  071F  01D6               	clrf	_pan_counter	;volatile
  4506  0720  01D7               	clrf	_pan_counter+1	;volatile
  4507                           
  4508                           ;main.c: 801:     delay_wdt(100);
  4509  0721  3064               	movlw	100
  4510  0722  00A0               	movwf	delay_wdt@_ms
  4511  0723  3000               	movlw	0
  4512  0724  00A1               	movwf	delay_wdt@_ms+1
  4513  0725  158A  2610  118A   	fcall	_delay_wdt
  4514                           
  4515                           ;main.c: 804:     pan_speed = 0x32;
  4516  0728  3032               	movlw	50
  4517  0729  00A3               	movwf	??_MOTOR_Init
  4518  072A  0823               	movf	??_MOTOR_Init,w
  4519  072B  00E8               	movwf	_pan_speed	;volatile
  4520                           
  4521                           ;main.c: 805:     pan_direction = 0;
  4522  072C  01E9               	clrf	_pan_direction	;volatile
  4523                           
  4524                           ;main.c: 806:     pan_enabled = 1;
  4525  072D  3001               	movlw	1
  4526  072E  00A3               	movwf	??_MOTOR_Init
  4527  072F  0823               	movf	??_MOTOR_Init,w
  4528  0730  00EA               	movwf	_pan_enabled	;volatile
  4529                           
  4530                           ;main.c: 808:     delay_wdt(500);
  4531  0731  30F4               	movlw	244
  4532  0732  00A0               	movwf	delay_wdt@_ms
  4533  0733  3001               	movlw	1
  4534  0734  00A1               	movwf	delay_wdt@_ms+1
  4535  0735  158A  2610  118A   	fcall	_delay_wdt
  4536                           
  4537                           ;main.c: 810:     pan_enabled = 0;
  4538  0738  01EA               	clrf	_pan_enabled	;volatile
  4539                           
  4540                           ;main.c: 812:     pan_counter = 0;
  4541  0739  01D6               	clrf	_pan_counter	;volatile
  4542  073A  01D7               	clrf	_pan_counter+1	;volatile
  4543                           
  4544                           ;main.c: 833:     pan_speed = 0x32;
  4545  073B  3032               	movlw	50
  4546  073C  00A3               	movwf	??_MOTOR_Init
  4547  073D  0823               	movf	??_MOTOR_Init,w
  4548  073E  00E8               	movwf	_pan_speed	;volatile
  4549                           
  4550                           ;main.c: 834:     pan_direction = 0;
  4551  073F  01E9               	clrf	_pan_direction	;volatile
  4552                           
  4553                           ;main.c: 835:     pan_enabled = 1;
  4554  0740  3001               	movlw	1
  4555  0741  00A3               	movwf	??_MOTOR_Init
  4556  0742  0823               	movf	??_MOTOR_Init,w
  4557  0743  00EA               	movwf	_pan_enabled	;volatile
  4558                           
  4559                           ;main.c: 838:     tilt_speed = 0x32;
  4560  0744  3032               	movlw	50
  4561  0745  00A3               	movwf	??_MOTOR_Init
  4562  0746  0823               	movf	??_MOTOR_Init,w
  4563  0747  00E5               	movwf	_tilt_speed	;volatile
  4564                           
  4565                           ;main.c: 839:     tilt_direction = 0;
  4566  0748  01E6               	clrf	_tilt_direction	;volatile
  4567                           
  4568                           ;main.c: 840:     tilt_enabled = 1;
  4569  0749  3001               	movlw	1
  4570  074A  00A3               	movwf	??_MOTOR_Init
  4571  074B  0823               	movf	??_MOTOR_Init,w
  4572  074C  00E7               	movwf	_tilt_enabled	;volatile
  4573                           
  4574                           ;main.c: 843:     delay_wdt(1000);
  4575  074D  30E8               	movlw	232
  4576  074E  00A0               	movwf	delay_wdt@_ms
  4577  074F  3003               	movlw	3
  4578  0750  00A1               	movwf	delay_wdt@_ms+1
  4579  0751  158A  2610  118A   	fcall	_delay_wdt
  4580                           
  4581                           ;main.c: 845:     tilt_enabled = 0;
  4582  0754  01E7               	clrf	_tilt_enabled	;volatile
  4583                           
  4584                           ;main.c: 849:     delay_wdt(3500);
  4585  0755  30AC               	movlw	172
  4586  0756  00A0               	movwf	delay_wdt@_ms
  4587  0757  300D               	movlw	13
  4588  0758  00A1               	movwf	delay_wdt@_ms+1
  4589  0759  158A  2610         	fcall	_delay_wdt
  4590                           
  4591                           ;main.c: 851:     pan_enabled = 0;
  4592  075B  01EA               	clrf	_pan_enabled	;volatile
  4593                           
  4594                           ;main.c: 853:     is_init = 0;
  4595  075C  01F0               	clrf	_is_init
  4596  075D  0008               	return
  4597  075E                     __end_of_MOTOR_Init:
  4598                           
  4599                           	psect	text21
  4600  0E10                     __ptext21:	
  4601 ;; *************** function _delay_wdt *****************
  4602 ;; Defined at:
  4603 ;;		line 700 in file "main.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  _ms             2    0[BANK0 ] unsigned int 
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;		None
  4608 ;; Return value:  Size  Location     Type
  4609 ;;                  1    wreg      void 
  4610 ;; Registers used:
  4611 ;;		wreg, status,2, status,0
  4612 ;; Tracked objects:
  4613 ;;		On entry : 300/0
  4614 ;;		On exit  : 300/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4617 ;;      Params:         0       2       0       0
  4618 ;;      Locals:         0       0       0       0
  4619 ;;      Temps:          0       1       0       0
  4620 ;;      Totals:         0       3       0       0
  4621 ;;Total ram usage:        3 bytes
  4622 ;; Hardware stack levels used: 1
  4623 ;; Hardware stack levels required when called: 2
  4624 ;; This function calls:
  4625 ;;		Nothing
  4626 ;; This function is called by:
  4627 ;;		_main
  4628 ;;		_MOTOR_Init
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632  0E10                     _delay_wdt:	
  4633                           ;psect for function _delay_wdt
  4634                           
  4635                           
  4636                           ;incstack = 0
  4637                           ; Regs used in _delay_wdt: [wreg+status,2+status,0]
  4638  0E10  0064               	clrwdt	;# 
  4639  0E11                     l3188:	
  4640                           ;main.c: 703:     while (_ms--) {
  4641                           
  4642                           
  4643                           ;main.c: 703:     while (_ms--) {
  4644  0E11  3001               	movlw	1
  4645  0E12  1283               	bcf	3,5	;RP0=0, select bank0
  4646  0E13  1303               	bcf	3,6	;RP1=0, select bank0
  4647  0E14  02A0               	subwf	delay_wdt@_ms,f
  4648  0E15  3000               	movlw	0
  4649  0E16  1C03               	skipc
  4650  0E17  03A1               	decf	delay_wdt@_ms+1,f
  4651  0E18  02A1               	subwf	delay_wdt@_ms+1,f
  4652  0E19  0A20               	incf	delay_wdt@_ms,w
  4653  0E1A  1903               	btfsc	3,2
  4654  0E1B  0A21               	incf	delay_wdt@_ms+1,w
  4655  0E1C  1903               	btfsc	3,2
  4656  0E1D  0008               	return
  4657  0E1E  0064               	clrwdt	;# 
  4658                           
  4659                           ;main.c: 706:         _delay((unsigned long)((1)*(4000000/4000.0)));
  4660  0E1F  30C7               	movlw	199
  4661  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  4662  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  4663  0E22  00A2               	movwf	??_delay_wdt
  4664  0E23                     u3717:
  4665  0E23  2E24               	nop2
  4666  0E24  0BA2               	decfsz	??_delay_wdt,f
  4667  0E25  2E23               	goto	u3717
  4668  0E26  2E27               	nop2
  4669  0E27  0000               	nop
  4670  0E28  2E11               	goto	l3188
  4671  0E29                     __end_of_delay_wdt:
  4672                           
  4673                           	psect	text22
  4674  0D7E                     __ptext22:	
  4675 ;; *************** function _BAUDS_set *****************
  4676 ;; Defined at:
  4677 ;;		line 913 in file "main.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;  index           1    wreg     unsigned char 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  index           1    7[BANK0 ] unsigned char 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  1    wreg      void 
  4684 ;; Registers used:
  4685 ;;		wreg, status,2, status,0, pclath, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : B00/0
  4688 ;;		On exit  : 200/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4691 ;;      Params:         0       0       0       0
  4692 ;;      Locals:         0       1       0       0
  4693 ;;      Temps:          0       1       0       0
  4694 ;;      Totals:         0       2       0       0
  4695 ;;Total ram usage:        2 bytes
  4696 ;; Hardware stack levels used: 1
  4697 ;; Hardware stack levels required when called: 4
  4698 ;; This function calls:
  4699 ;;		_eeprom_update
  4700 ;; This function is called by:
  4701 ;;		_main
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705  0D7E                     _BAUDS_set:	
  4706                           ;psect for function _BAUDS_set
  4707                           
  4708                           
  4709                           ;incstack = 0
  4710                           ; Regs used in _BAUDS_set: [wreg+status,2+status,0+pclath+cstack]
  4711                           ;BAUDS_set@index stored from wreg
  4712  0D7E  00A7               	movwf	BAUDS_set@index
  4713                           
  4714                           ;main.c: 915:     eeprom_update(0xFF, index);
  4715  0D7F  0827               	movf	BAUDS_set@index,w
  4716  0D80  00A6               	movwf	??_BAUDS_set
  4717  0D81  0826               	movf	??_BAUDS_set,w
  4718  0D82  00A3               	movwf	eeprom_update@value
  4719  0D83  30FF               	movlw	255
  4720  0D84  158A  2596         	fcall	_eeprom_update
  4721  0D86  0008               	return
  4722  0D87                     __end_of_BAUDS_set:
  4723                           
  4724                           	psect	text23
  4725  0D96                     __ptext23:	
  4726 ;; *************** function _eeprom_update *****************
  4727 ;; Defined at:
  4728 ;;		line 881 in file "main.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;  addr            1    wreg     unsigned char 
  4731 ;;  value           1    3[BANK0 ] unsigned char 
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;  addr            1    5[BANK0 ] unsigned char 
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  1    wreg      void 
  4736 ;; Registers used:
  4737 ;;		wreg, status,2, status,0, pclath, cstack
  4738 ;; Tracked objects:
  4739 ;;		On entry : 300/0
  4740 ;;		On exit  : 200/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4743 ;;      Params:         0       1       0       0
  4744 ;;      Locals:         0       1       0       0
  4745 ;;      Temps:          0       1       0       0
  4746 ;;      Totals:         0       3       0       0
  4747 ;;Total ram usage:        3 bytes
  4748 ;; Hardware stack levels used: 1
  4749 ;; Hardware stack levels required when called: 3
  4750 ;; This function calls:
  4751 ;;		_eeprom_read
  4752 ;;		_eeprom_write
  4753 ;; This function is called by:
  4754 ;;		_PRESET_save
  4755 ;;		_BAUDS_set
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759  0D96                     _eeprom_update:	
  4760                           ;psect for function _eeprom_update
  4761                           
  4762                           
  4763                           ;incstack = 0
  4764                           ; Regs used in _eeprom_update: [wreg+status,2+status,0+pclath+cstack]
  4765                           ;eeprom_update@addr stored from wreg
  4766  0D96  00A5               	movwf	eeprom_update@addr
  4767                           
  4768                           ;main.c: 882:     if (value != eeprom_read(addr)) {
  4769  0D97  0825               	movf	eeprom_update@addr,w
  4770  0D98  158A  25CA  158A   	fcall	_eeprom_read
  4771  0D9B  1283               	bcf	3,5	;RP0=0, select bank0
  4772  0D9C  0623               	xorwf	eeprom_update@value,w
  4773  0D9D  1903               	skipnz
  4774  0D9E  0008               	return
  4775                           
  4776                           ;main.c: 883:         eeprom_write(addr, value);
  4777  0D9F  0823               	movf	eeprom_update@value,w
  4778  0DA0  00A4               	movwf	??_eeprom_update
  4779  0DA1  0824               	movf	??_eeprom_update,w
  4780  0DA2  00A0               	movwf	eeprom_write@value
  4781  0DA3  0825               	movf	eeprom_update@addr,w
  4782  0DA4  158A  2646         	fcall	_eeprom_write
  4783  0DA6  0008               	return
  4784  0DA7                     __end_of_eeprom_update:
  4785                           
  4786                           	psect	text24
  4787  0E46                     __ptext24:	
  4788 ;; *************** function _eeprom_write *****************
  4789 ;; Defined at:
  4790 ;;		line 6 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;  addr            1    wreg     unsigned char 
  4793 ;;  value           1    0[BANK0 ] unsigned char 
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;  addr            1    2[BANK0 ] unsigned char 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  1    wreg      void 
  4798 ;; Registers used:
  4799 ;;		wreg, status,2, status,0
  4800 ;; Tracked objects:
  4801 ;;		On entry : 300/0
  4802 ;;		On exit  : 300/100
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4805 ;;      Params:         0       1       0       0
  4806 ;;      Locals:         0       1       0       0
  4807 ;;      Temps:          0       1       0       0
  4808 ;;      Totals:         0       3       0       0
  4809 ;;Total ram usage:        3 bytes
  4810 ;; Hardware stack levels used: 1
  4811 ;; Hardware stack levels required when called: 2
  4812 ;; This function calls:
  4813 ;;		Nothing
  4814 ;; This function is called by:
  4815 ;;		_eeprom_update
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819  0E46                     _eeprom_write:	
  4820                           ;psect for function _eeprom_write
  4821                           
  4822                           
  4823                           ;incstack = 0
  4824                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  4825                           ;eeprom_write@addr stored from wreg
  4826  0E46  00A2               	movwf	eeprom_write@addr
  4827  0E47                     l538:	
  4828                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 6: eeprom_write(unsigned char
      +                           addr, unsigned char value);/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 7:
      +                           {;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 8:  do{ while (EECON1bits.W
      +                          R) { continue; } EEADR = (addr); EEDATA = (value); EECON1 &= 0x3F; STATUSbits.CARRY = 0;
      +                           if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCONbits.GIE = 0; EECON1bits.WREN = 1; 
      +                          EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EECON1bits.WREN = 0; if (STATUSbits.CAR
      +                          RY) { INTCONbits.GIE = 1; } } while (0);
  4829                           
  4830  0E47  1683               	bsf	3,5	;RP0=1, select bank1
  4831  0E48  189C               	btfsc	28,1	;volsfr
  4832  0E49  2E47               	goto	l538
  4833  0E4A  1283               	bcf	3,5	;RP0=0, select bank0
  4834  0E4B  0822               	movf	eeprom_write@addr,w
  4835  0E4C  1683               	bsf	3,5	;RP0=1, select bank1
  4836  0E4D  009B               	movwf	27	;volatile
  4837  0E4E  1283               	bcf	3,5	;RP0=0, select bank0
  4838  0E4F  0820               	movf	eeprom_write@value,w
  4839  0E50  1683               	bsf	3,5	;RP0=1, select bank1
  4840  0E51  009A               	movwf	26	;volatile
  4841  0E52  303F               	movlw	63
  4842  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  4843  0E54  00A1               	movwf	??_eeprom_write
  4844  0E55  0821               	movf	??_eeprom_write,w
  4845  0E56  1683               	bsf	3,5	;RP0=1, select bank1
  4846  0E57  059C               	andwf	28,f	;volsfr
  4847  0E58  1003               	bcf	3,0	;volatile
  4848  0E59  1B8B               	btfsc	11,7	;volatile
  4849  0E5A  1403               	bsf	3,0	;volatile
  4850  0E5B  138B               	bcf	11,7	;volatile
  4851  0E5C  151C               	bsf	28,2	;volsfr
  4852  0E5D  3055               	movlw	85
  4853  0E5E  009D               	movwf	29	;volsfr
  4854  0E5F  30AA               	movlw	170
  4855  0E60  009D               	movwf	29	;volsfr
  4856  0E61  149C               	bsf	28,1	;volsfr
  4857  0E62  111C               	bcf	28,2	;volsfr
  4858  0E63  1C03               	btfss	3,0	;volatile
  4859  0E64  0008               	return
  4860  0E65  178B               	bsf	11,7	;volatile
  4861  0E66  0008               	return
  4862  0E67                     __end_of_eeprom_write:
  4863                           
  4864                           	psect	text25
  4865  0DCA                     __ptext25:	
  4866 ;; *************** function _eeprom_read *****************
  4867 ;; Defined at:
  4868 ;;		line 6 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  addr            1    wreg     unsigned char 
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  addr            1    1[BANK0 ] unsigned char 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      unsigned char 
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0
  4877 ;; Tracked objects:
  4878 ;;		On entry : 200/100
  4879 ;;		On exit  : 300/100
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4882 ;;      Params:         0       0       0       0
  4883 ;;      Locals:         0       1       0       0
  4884 ;;      Temps:          0       1       0       0
  4885 ;;      Totals:         0       2       0       0
  4886 ;;Total ram usage:        2 bytes
  4887 ;; Hardware stack levels used: 1
  4888 ;; Hardware stack levels required when called: 2
  4889 ;; This function calls:
  4890 ;;		Nothing
  4891 ;; This function is called by:
  4892 ;;		_eeprom_update
  4893 ;;		_PRESET_load
  4894 ;;		_BAUDS_get
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898  0DCA                     _eeprom_read:	
  4899                           ;psect for function _eeprom_read
  4900                           
  4901                           
  4902                           ;incstack = 0
  4903                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4904                           ;eeprom_read@addr stored from wreg
  4905  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  4906  0DCB  00A1               	movwf	eeprom_read@addr
  4907  0DCC  2DCE               	goto	l518
  4908  0DCD                     u2851:
  4909  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  4910  0DCE                     l518:	
  4911                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 6: eeprom_read(unsigned char a
      +                          ddr);/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 7: {;/opt/microchip/xc8/v2
      +                          .36/pic/sources/c90/pic/__eeread.c: 8:  do
  4912                           
  4913  0DCE  0064               	clrwdt	;# 
  4914  0DCF  1683               	bsf	3,5	;RP0=1, select bank1
  4915  0DD0  1303               	bcf	3,6	;RP1=0, select bank1
  4916  0DD1  189C               	btfsc	28,1	;volsfr
  4917  0DD2  2DCD               	goto	u2851
  4918                           
  4919                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 18:  return ( EEADR = addr, EE
      +                          CON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  4920  0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  4921  0DD4  0821               	movf	eeprom_read@addr,w
  4922  0DD5  1683               	bsf	3,5	;RP0=1, select bank1
  4923  0DD6  009B               	movwf	27	;volatile
  4924  0DD7  303F               	movlw	63
  4925  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  4926  0DD9  00A0               	movwf	??_eeprom_read
  4927  0DDA  0820               	movf	??_eeprom_read,w
  4928  0DDB  1683               	bsf	3,5	;RP0=1, select bank1
  4929  0DDC  059C               	andwf	28,f	;volsfr
  4930  0DDD  141C               	bsf	28,0	;volsfr
  4931  0DDE  081A               	movf	26,w	;volatile
  4932  0DDF  0008               	return
  4933  0DE0                     __end_of_eeprom_read:
  4934                           
  4935                           	psect	text26
  4936  0312                     __ptext26:	
  4937 ;; *************** function _myISR *****************
  4938 ;; Defined at:
  4939 ;;		line 158 in file "main.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;		None
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 300/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4953 ;;      Params:         0       0       0       0
  4954 ;;      Locals:         0       0       0       0
  4955 ;;      Temps:          6       0       0       0
  4956 ;;      Totals:         6       0       0       0
  4957 ;;Total ram usage:        6 bytes
  4958 ;; Hardware stack levels used: 2
  4959 ;; This function calls:
  4960 ;;		Nothing
  4961 ;; This function is called by:
  4962 ;;		Interrupt level 1
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966  0312                     _myISR:	
  4967                           ;psect for function _myISR
  4968                           
  4969                           
  4970                           ;main.c: 159:     if (PIR1bits.RCIF == 1) {
  4971  0312  1283               	bcf	3,5	;RP0=0, select bank0
  4972  0313  1303               	bcf	3,6	;RP1=0, select bank0
  4973  0314  1E8C               	btfss	12,5	;volatile
  4974  0315  2B8B               	goto	i1l179
  4975                           
  4976                           ;main.c: 160:         data_receiv = RCREG;
  4977  0316  081A               	movf	26,w	;volatile
  4978  0317  00F6               	movwf	??_myISR
  4979  0318  0876               	movf	??_myISR,w
  4980  0319  00F5               	movwf	_data_receiv	;volatile
  4981                           
  4982                           ;main.c: 162:         PORTBbits.RB3 = !PORTBbits.RB3;
  4983  031A  1003               	clrc
  4984  031B  1D86               	btfss	6,3	;volatile
  4985  031C  1403               	setc
  4986  031D  1C03               	btfss	3,0
  4987  031E  2B23               	goto	u196_20
  4988  031F  1283               	bcf	3,5	;RP0=0, select bank0
  4989  0320  1303               	bcf	3,6	;RP1=0, select bank0
  4990  0321  1586               	bsf	6,3	;volatile
  4991  0322  2B26               	goto	i1l2474
  4992  0323                     u196_20:
  4993  0323  1283               	bcf	3,5	;RP0=0, select bank0
  4994  0324  1303               	bcf	3,6	;RP1=0, select bank0
  4995  0325  1186               	bcf	6,3	;volatile
  4996  0326                     i1l2474:
  4997                           
  4998                           ;main.c: 164:         if (is_init == 1) {
  4999  0326  0370               	decf	_is_init,w
  5000  0327  1903               	btfsc	3,2
  5001  0328  2CBA               	goto	i1l181
  5002                           
  5003                           ;main.c: 168:         if (data_receiv == 0xFF) {
  5004  0329  0A75               	incf	_data_receiv,w	;volatile
  5005  032A  1D03               	btfss	3,2
  5006  032B  2B2D               	goto	i1l2482
  5007                           
  5008                           ;main.c: 169:             timeout_receiv = 0;
  5009  032C  01EE               	clrf	_timeout_receiv	;volatile
  5010  032D                     i1l2482:
  5011                           
  5012                           ;main.c: 172:         if ((buffer_index2 <= 6) || ((buffer_index2 == 0) && (data_receiv 
      +                          == 0xFF))) {
  5013  032D  3007               	movlw	7
  5014  032E  0273               	subwf	_buffer_index2,w	;volatile
  5015  032F  1C03               	skipc
  5016  0330  2B59               	goto	i1l2510
  5017  0331  0873               	movf	_buffer_index2,w	;volatile
  5018  0332  1D03               	btfss	3,2
  5019  0333  2B72               	goto	i1l2512
  5020  0334  0A75               	incf	_data_receiv,w	;volatile
  5021  0335  1903               	btfsc	3,2
  5022  0336  2B59               	goto	i1l2510
  5023  0337  2B72               	goto	i1l2512
  5024  0338                     i1l2488:
  5025                           
  5026                           ;main.c: 175:                     buffer_data0[buffer_index2++] = data_receiv;
  5027  0338  0875               	movf	_data_receiv,w	;volatile
  5028  0339  00F6               	movwf	??_myISR
  5029  033A  0873               	movf	_buffer_index2,w
  5030  033B  3EC3               	addlw	(low (_buffer_data0| 0))& (0+255)
  5031  033C                     L13:
  5032  033C  0084               	movwf	4
  5033  033D  0876               	movf	??_myISR,w
  5034  033E  1383               	bcf	3,7	;select IRP bank1
  5035  033F  0080               	movwf	0
  5036  0340  3001               	movlw	1
  5037  0341  00F6               	movwf	??_myISR
  5038  0342  0876               	movf	??_myISR,w
  5039  0343  07F3               	addwf	_buffer_index2,f	;volatile
  5040                           
  5041                           ;main.c: 176:                     break;
  5042  0344  2B72               	goto	i1l2512
  5043  0345                     i1l2492:
  5044                           
  5045                           ;main.c: 178:                     buffer_data1[buffer_index2++] = data_receiv;
  5046  0345  0875               	movf	_data_receiv,w	;volatile
  5047  0346  00F6               	movwf	??_myISR
  5048  0347  0873               	movf	_buffer_index2,w
  5049  0348  3EBC               	addlw	(low (_buffer_data1| 0))& (0+255)
  5050  0349  2B3C               	goto	L13
  5051  034A                     i1l2496:
  5052                           
  5053                           ;main.c: 181:                     buffer_data2[buffer_index2++] = data_receiv;
  5054  034A  0875               	movf	_data_receiv,w	;volatile
  5055  034B  00F6               	movwf	??_myISR
  5056  034C  0873               	movf	_buffer_index2,w
  5057  034D  3EB5               	addlw	(low (_buffer_data2| 0))& (0+255)
  5058  034E  2B3C               	goto	L13
  5059  034F                     i1l2500:
  5060                           
  5061                           ;main.c: 184:                     buffer_data3[buffer_index2++] = data_receiv;
  5062  034F  0875               	movf	_data_receiv,w	;volatile
  5063  0350  00F6               	movwf	??_myISR
  5064  0351  0873               	movf	_buffer_index2,w
  5065  0352  3EAE               	addlw	(low (_buffer_data3| 0))& (0+255)
  5066  0353  2B3C               	goto	L13
  5067  0354                     i1l2504:
  5068                           
  5069                           ;main.c: 187:                     buffer_data4[buffer_index2++] = data_receiv;
  5070  0354  0875               	movf	_data_receiv,w	;volatile
  5071  0355  00F6               	movwf	??_myISR
  5072  0356  0873               	movf	_buffer_index2,w
  5073  0357  3EA7               	addlw	(low (_buffer_data4| 0))& (0+255)
  5074  0358  2B3C               	goto	L13
  5075  0359                     i1l2510:
  5076  0359  0874               	movf	_buffer_index1,w	;volatile
  5077  035A  00F6               	movwf	??_myISR
  5078  035B  01F7               	clrf	??_myISR+1
  5079                           
  5080                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5081                           ; Switch size 1, requested type "simple"
  5082                           ; Number of cases is 1, Range of values is 0 to 0
  5083                           ; switch strategies available:
  5084                           ; Name         Instructions Cycles
  5085                           ; simple_byte            4     3 (average)
  5086                           ; direct_byte            9     7 (fixed)
  5087                           ; jumptable            260     6 (fixed)
  5088                           ;	Chosen strategy is simple_byte
  5089  035C  0877               	movf	??_myISR+1,w
  5090  035D  3A00               	xorlw	0	; case 0
  5091  035E  1903               	skipnz
  5092  035F  2B61               	goto	i1l3884
  5093  0360  2B72               	goto	i1l2512
  5094  0361                     i1l3884:
  5095                           
  5096                           ; Switch size 1, requested type "simple"
  5097                           ; Number of cases is 5, Range of values is 0 to 4
  5098                           ; switch strategies available:
  5099                           ; Name         Instructions Cycles
  5100                           ; simple_byte           16     9 (average)
  5101                           ; direct_byte           17     7 (fixed)
  5102                           ; jumptable            260     6 (fixed)
  5103                           ;	Chosen strategy is simple_byte
  5104  0361  0876               	movf	??_myISR,w
  5105  0362  3A00               	xorlw	0	; case 0
  5106  0363  1903               	skipnz
  5107  0364  2B38               	goto	i1l2488
  5108  0365  3A01               	xorlw	1	; case 1
  5109  0366  1903               	skipnz
  5110  0367  2B45               	goto	i1l2492
  5111  0368  3A03               	xorlw	3	; case 2
  5112  0369  1903               	skipnz
  5113  036A  2B4A               	goto	i1l2496
  5114  036B  3A01               	xorlw	1	; case 3
  5115  036C  1903               	skipnz
  5116  036D  2B4F               	goto	i1l2500
  5117  036E  3A07               	xorlw	7	; case 4
  5118  036F  1903               	skipnz
  5119  0370  2B54               	goto	i1l2504
  5120  0371  2B72               	goto	i1l2512
  5121  0372                     i1l2512:
  5122                           
  5123                           ;main.c: 195:         if (buffer_index2 == 7) {
  5124  0372  3007               	movlw	7
  5125  0373  0673               	xorwf	_buffer_index2,w	;volatile
  5126  0374  1D03               	btfss	3,2
  5127  0375  2B89               	goto	i1l2524
  5128                           
  5129                           ;main.c: 196:             buffer_index2 = 0;
  5130  0376  01F3               	clrf	_buffer_index2	;volatile
  5131                           
  5132                           ;main.c: 198:             buffer_ready[buffer_index1] = 1;
  5133  0377  3001               	movlw	1
  5134  0378  00F6               	movwf	??_myISR
  5135  0379  0874               	movf	_buffer_index1,w
  5136  037A  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  5137  037B  0084               	movwf	4
  5138  037C  0876               	movf	??_myISR,w
  5139  037D  1383               	bcf	3,7	;select IRP bank1
  5140  037E  0080               	movwf	0
  5141                           
  5142                           ;main.c: 200:             if (buffer_index1 < 4) {
  5143  037F  3004               	movlw	4
  5144  0380  0274               	subwf	_buffer_index1,w	;volatile
  5145  0381  1803               	skipnc
  5146  0382  2B88               	goto	i1l2522
  5147                           
  5148                           ;main.c: 201:                 buffer_index1++;
  5149  0383  3001               	movlw	1
  5150  0384  00F6               	movwf	??_myISR
  5151  0385  0876               	movf	??_myISR,w
  5152  0386  07F4               	addwf	_buffer_index1,f	;volatile
  5153                           
  5154                           ;main.c: 202:             } else {
  5155  0387  2B89               	goto	i1l2524
  5156  0388                     i1l2522:
  5157                           
  5158                           ;main.c: 203:                 buffer_index1 = 0;
  5159  0388  01F4               	clrf	_buffer_index1	;volatile
  5160  0389                     i1l2524:
  5161                           
  5162                           ;main.c: 207:         PIR1bits.RCIF = 0;
  5163  0389  128C               	bcf	12,5	;volatile
  5164                           
  5165                           ;main.c: 208:     } else if (PIR1bits.TMR1IF == 1) {
  5166  038A  2CBA               	goto	i1l181
  5167  038B                     i1l179:
  5168  038B  1C0C               	btfss	12,0	;volatile
  5169  038C  2CBA               	goto	i1l181
  5170                           
  5171                           ;main.c: 210:         PIE1bits.TMR1IE = 1;
  5172  038D  1683               	bsf	3,5	;RP0=1, select bank1
  5173  038E  140C               	bsf	12,0	;volatile
  5174                           
  5175                           ;main.c: 211:         TMR1H = 255;
  5176  038F  30FF               	movlw	255
  5177  0390  1283               	bcf	3,5	;RP0=0, select bank0
  5178  0391  008F               	movwf	15	;volatile
  5179                           
  5180                           ;main.c: 212:         TMR1L = 131;
  5181  0392  3083               	movlw	131
  5182  0393  008E               	movwf	14	;volatile
  5183                           
  5184                           ;main.c: 214:         if (timeout_receiv < 15) {
  5185  0394  300F               	movlw	15
  5186  0395  026E               	subwf	_timeout_receiv,w	;volatile
  5187  0396  1803               	skipnc
  5188  0397  2B9D               	goto	i1l2532
  5189                           
  5190                           ;main.c: 215:             timeout_receiv++;
  5191  0398  3001               	movlw	1
  5192  0399  00F6               	movwf	??_myISR
  5193  039A  0876               	movf	??_myISR,w
  5194  039B  07EE               	addwf	_timeout_receiv,f	;volatile
  5195                           
  5196                           ;main.c: 216:         } else if (buffer_index2 > 0) {
  5197  039C  2BA1               	goto	i1l2536
  5198  039D                     i1l2532:
  5199  039D  0873               	movf	_buffer_index2,w	;volatile
  5200  039E  1903               	btfsc	3,2
  5201  039F  2BA1               	goto	i1l2536
  5202                           
  5203                           ;main.c: 217:             buffer_index2 = 0;
  5204  03A0  01F3               	clrf	_buffer_index2	;volatile
  5205  03A1                     i1l2536:
  5206                           
  5207                           ;main.c: 220:         if (timer1_pan < timer1_pan_ref) {
  5208  03A1  0862               	movf	_timer1_pan_ref,w	;volatile
  5209  03A2  0264               	subwf	_timer1_pan,w	;volatile
  5210  03A3  1803               	skipnc
  5211  03A4  2BAA               	goto	i1l2540
  5212                           
  5213                           ;main.c: 221:             timer1_pan++;
  5214  03A5  3001               	movlw	1
  5215  03A6  00F6               	movwf	??_myISR
  5216  03A7  0876               	movf	??_myISR,w
  5217  03A8  07E4               	addwf	_timer1_pan,f	;volatile
  5218                           
  5219                           ;main.c: 222:         } else {
  5220  03A9  2C2C               	goto	i1l2582
  5221  03AA                     i1l2540:
  5222                           
  5223                           ;main.c: 223:             timer1_pan = 0;
  5224  03AA  01E4               	clrf	_timer1_pan	;volatile
  5225                           
  5226                           ;main.c: 227:             if (pan_enabled == 1) {
  5227  03AB  036A               	decf	_pan_enabled,w	;volatile
  5228  03AC  1D03               	btfss	3,2
  5229  03AD  2C28               	goto	i1l204
  5230                           
  5231                           ;main.c: 228:                 if (pan_direction == 0) {
  5232  03AE  0869               	movf	_pan_direction,w	;volatile
  5233  03AF  1D03               	btfss	3,2
  5234  03B0  2BCD               	goto	i1l2558
  5235                           
  5236                           ;main.c: 229:                     if (pan_counter < 12000) {
  5237  03B1  302E               	movlw	46
  5238  03B2  0257               	subwf	_pan_counter+1,w	;volatile
  5239  03B3  30E0               	movlw	224
  5240  03B4  1903               	skipnz
  5241  03B5  0256               	subwf	_pan_counter,w	;volatile
  5242  03B6  1803               	skipnc
  5243  03B7  2BE4               	goto	i1l2568
  5244                           
  5245                           ;main.c: 230:                         pan_counter++;
  5246  03B8  3001               	movlw	1
  5247  03B9  07D6               	addwf	_pan_counter,f	;volatile
  5248  03BA  1803               	skipnc
  5249  03BB  0AD7               	incf	_pan_counter+1,f	;volatile
  5250  03BC  3000               	movlw	0
  5251  03BD  07D7               	addwf	_pan_counter+1,f	;volatile
  5252                           
  5253                           ;main.c: 232:                         if ((pan_step_phase == 0) || (pan_step_phase > 7))
      +                           {
  5254  03BE  0872               	movf	_pan_step_phase,w	;volatile
  5255  03BF  1903               	btfsc	3,2
  5256  03C0  2BC5               	goto	i1l2554
  5257  03C1  3008               	movlw	8
  5258  03C2  0272               	subwf	_pan_step_phase,w	;volatile
  5259  03C3  1C03               	skipc
  5260  03C4  2BCA               	goto	i1l2556
  5261  03C5                     i1l2554:
  5262                           
  5263                           ;main.c: 233:                             pan_step_phase = 7;
  5264  03C5  3007               	movlw	7
  5265  03C6  00F6               	movwf	??_myISR
  5266  03C7  0876               	movf	??_myISR,w
  5267  03C8  00F2               	movwf	_pan_step_phase	;volatile
  5268                           
  5269                           ;main.c: 234:                         } else {
  5270  03C9  2BE4               	goto	i1l2568
  5271  03CA                     i1l2556:
  5272                           
  5273                           ;main.c: 235:                             pan_step_phase--;
  5274  03CA  3001               	movlw	1
  5275  03CB  02F2               	subwf	_pan_step_phase,f	;volatile
  5276  03CC  2BE4               	goto	i1l2568
  5277  03CD                     i1l2558:
  5278                           
  5279                           ;main.c: 239:                     if ((pan_counter > 0) || (is_init == 1)) {
  5280  03CD  0856               	movf	_pan_counter,w	;volatile
  5281  03CE  0457               	iorwf	_pan_counter+1,w	;volatile
  5282  03CF  1D03               	btfss	3,2
  5283  03D0  2BD4               	goto	i1l2562
  5284  03D1  0370               	decf	_is_init,w
  5285  03D2  1D03               	btfss	3,2
  5286  03D3  2BE4               	goto	i1l2568
  5287  03D4                     i1l2562:
  5288                           
  5289                           ;main.c: 240:                         pan_counter--;
  5290  03D4  3001               	movlw	1
  5291  03D5  02D6               	subwf	_pan_counter,f	;volatile
  5292  03D6  3000               	movlw	0
  5293  03D7  1C03               	skipc
  5294  03D8  03D7               	decf	_pan_counter+1,f	;volatile
  5295  03D9  02D7               	subwf	_pan_counter+1,f	;volatile
  5296                           
  5297                           ;main.c: 242:                         if (pan_step_phase >= 7) {
  5298  03DA  3007               	movlw	7
  5299  03DB  0272               	subwf	_pan_step_phase,w	;volatile
  5300  03DC  1C03               	skipc
  5301  03DD  2BE0               	goto	i1l2566
  5302                           
  5303                           ;main.c: 243:                             pan_step_phase = 0;
  5304  03DE  01F2               	clrf	_pan_step_phase	;volatile
  5305                           
  5306                           ;main.c: 244:                         } else {
  5307  03DF  2BE4               	goto	i1l2568
  5308  03E0                     i1l2566:
  5309                           
  5310                           ;main.c: 245:                             pan_step_phase++;
  5311  03E0  3001               	movlw	1
  5312  03E1  00F6               	movwf	??_myISR
  5313  03E2  0876               	movf	??_myISR,w
  5314  03E3  07F2               	addwf	_pan_step_phase,f	;volatile
  5315  03E4                     i1l2568:
  5316                           
  5317                           ;main.c: 250:                 if (pan_goto == pan_counter) {
  5318  03E4  0857               	movf	_pan_counter+1,w	;volatile
  5319  03E5  0653               	xorwf	_pan_goto+1,w	;volatile
  5320  03E6  1D03               	skipz
  5321  03E7  2BEA               	goto	u217_25
  5322  03E8  0856               	movf	_pan_counter,w	;volatile
  5323  03E9  0652               	xorwf	_pan_goto,w	;volatile
  5324  03EA                     u217_25:
  5325  03EA  1D03               	skipz
  5326  03EB  2BF1               	goto	i1l2574
  5327                           
  5328                           ;main.c: 251:                     if (preset_pan_enabled == 1) {
  5329  03EC  036D               	decf	_preset_pan_enabled,w	;volatile
  5330  03ED  1D03               	btfss	3,2
  5331  03EE  2BF1               	goto	i1l2574
  5332                           
  5333                           ;main.c: 252:                         preset_pan_enabled = 0;
  5334  03EF  01ED               	clrf	_preset_pan_enabled	;volatile
  5335                           
  5336                           ;main.c: 254:                         pan_enabled = 0;
  5337  03F0  01EA               	clrf	_pan_enabled	;volatile
  5338  03F1                     i1l2574:
  5339                           
  5340                           ;main.c: 258:                 PORTAbits.RA0 = steps_1A[pan_step_phase];
  5341  03F1  0872               	movf	_pan_step_phase,w
  5342  03F2  3E21               	addlw	low ((_steps_1A-__stringbase)| (0+32768))
  5343  03F3  0084               	movwf	4
  5344  03F4  118A  2500  118A   	fcall	stringdir
  5345  03F7  00F6               	movwf	??_myISR
  5346  03F8  0805               	movf	5,w	;volatile
  5347  03F9  0676               	xorwf	??_myISR,w
  5348  03FA  39FE               	andlw	-2
  5349  03FB  0676               	xorwf	??_myISR,w
  5350  03FC  0085               	movwf	5	;volatile
  5351                           
  5352                           ;main.c: 259:                 PORTAbits.RA7 = steps_1B[pan_step_phase];
  5353  03FD  0872               	movf	_pan_step_phase,w
  5354  03FE  3E19               	addlw	low ((_steps_1B-__stringbase)| (0+32768))
  5355  03FF  0084               	movwf	4
  5356  0400  118A  2500  118A   	fcall	stringdir
  5357  0403  00F6               	movwf	??_myISR
  5358  0404  0CF6               	rrf	??_myISR,f
  5359  0405  0CF6               	rrf	??_myISR,f
  5360  0406  0805               	movf	5,w	;volatile
  5361  0407  0676               	xorwf	??_myISR,w
  5362  0408  397F               	andlw	-129
  5363  0409  0676               	xorwf	??_myISR,w
  5364  040A  0085               	movwf	5	;volatile
  5365                           
  5366                           ;main.c: 260:                 PORTAbits.RA6 = steps_2A[pan_step_phase];
  5367  040B  0872               	movf	_pan_step_phase,w
  5368  040C  3E11               	addlw	low ((_steps_2A-__stringbase)| (0+32768))
  5369  040D  0084               	movwf	4
  5370  040E  118A  2500  118A   	fcall	stringdir
  5371  0411  00F6               	movwf	??_myISR
  5372  0412  0EF6               	swapf	??_myISR,f
  5373  0413  0DF6               	rlf	??_myISR,f
  5374  0414  0DF6               	rlf	??_myISR,f
  5375  0415  0805               	movf	5,w	;volatile
  5376  0416  0676               	xorwf	??_myISR,w
  5377  0417  39BF               	andlw	-65
  5378  0418  0676               	xorwf	??_myISR,w
  5379  0419  0085               	movwf	5	;volatile
  5380                           
  5381                           ;main.c: 261:                 PORTAbits.RA1 = steps_2B[pan_step_phase];
  5382  041A  0872               	movf	_pan_step_phase,w
  5383  041B  3E09               	addlw	low ((_steps_2B-__stringbase)| (0+32768))
  5384  041C  0084               	movwf	4
  5385  041D  118A  2500  118A   	fcall	stringdir
  5386  0420  00F6               	movwf	??_myISR
  5387  0421  0DF6               	rlf	??_myISR,f
  5388  0422  0805               	movf	5,w	;volatile
  5389  0423  0676               	xorwf	??_myISR,w
  5390  0424  39FD               	andlw	-3
  5391  0425  0676               	xorwf	??_myISR,w
  5392  0426  0085               	movwf	5	;volatile
  5393                           
  5394                           ;main.c: 262:             } else {
  5395  0427  2C2C               	goto	i1l2582
  5396  0428                     i1l204:
  5397                           
  5398                           ;main.c: 263:                 PORTAbits.RA0 = 0;
  5399  0428  1005               	bcf	5,0	;volatile
  5400                           
  5401                           ;main.c: 264:                 PORTAbits.RA7 = 0;
  5402  0429  1385               	bcf	5,7	;volatile
  5403                           
  5404                           ;main.c: 265:                 PORTAbits.RA6 = 0;
  5405  042A  1305               	bcf	5,6	;volatile
  5406                           
  5407                           ;main.c: 266:                 PORTAbits.RA1 = 0;
  5408  042B  1085               	bcf	5,1	;volatile
  5409  042C                     i1l2582:
  5410                           
  5411                           ;main.c: 272:         if (timer1_tilt < timer1_tilt_ref) {
  5412  042C  0861               	movf	_timer1_tilt_ref,w	;volatile
  5413  042D  0263               	subwf	_timer1_tilt,w	;volatile
  5414  042E  1803               	skipnc
  5415  042F  2C35               	goto	i1l2586
  5416                           
  5417                           ;main.c: 273:             timer1_tilt++;
  5418  0430  3001               	movlw	1
  5419  0431  00F6               	movwf	??_myISR
  5420  0432  0876               	movf	??_myISR,w
  5421  0433  07E3               	addwf	_timer1_tilt,f	;volatile
  5422                           
  5423                           ;main.c: 274:         } else {
  5424  0434  2CB9               	goto	i1l221
  5425  0435                     i1l2586:
  5426                           
  5427                           ;main.c: 275:             timer1_tilt = 0;
  5428  0435  01E3               	clrf	_timer1_tilt	;volatile
  5429                           
  5430                           ;main.c: 277:             if (tilt_enabled == 1) {
  5431  0436  0367               	decf	_tilt_enabled,w	;volatile
  5432  0437  1D03               	btfss	3,2
  5433  0438  2CB5               	goto	i1l222
  5434                           
  5435                           ;main.c: 278:                 if (tilt_direction == 0) {
  5436  0439  0866               	movf	_tilt_direction,w	;volatile
  5437  043A  1D03               	btfss	3,2
  5438  043B  2C58               	goto	i1l2604
  5439                           
  5440                           ;main.c: 279:                     if (tilt_counter < 2800) {
  5441  043C  300A               	movlw	10
  5442  043D  0255               	subwf	_tilt_counter+1,w	;volatile
  5443  043E  30F0               	movlw	240
  5444  043F  1903               	skipnz
  5445  0440  0254               	subwf	_tilt_counter,w	;volatile
  5446  0441  1803               	skipnc
  5447  0442  2C6F               	goto	i1l2614
  5448                           
  5449                           ;main.c: 280:                         tilt_counter++;
  5450  0443  3001               	movlw	1
  5451  0444  07D4               	addwf	_tilt_counter,f	;volatile
  5452  0445  1803               	skipnc
  5453  0446  0AD5               	incf	_tilt_counter+1,f	;volatile
  5454  0447  3000               	movlw	0
  5455  0448  07D5               	addwf	_tilt_counter+1,f	;volatile
  5456                           
  5457                           ;main.c: 282:                         if ((tilt_step_phase == 0) || (tilt_step_phase > 7
      +                          )) {
  5458  0449  0871               	movf	_tilt_step_phase,w	;volatile
  5459  044A  1903               	btfsc	3,2
  5460  044B  2C50               	goto	i1l2600
  5461  044C  3008               	movlw	8
  5462  044D  0271               	subwf	_tilt_step_phase,w	;volatile
  5463  044E  1C03               	skipc
  5464  044F  2C55               	goto	i1l2602
  5465  0450                     i1l2600:
  5466                           
  5467                           ;main.c: 283:                             tilt_step_phase = 7;
  5468  0450  3007               	movlw	7
  5469  0451  00F6               	movwf	??_myISR
  5470  0452  0876               	movf	??_myISR,w
  5471  0453  00F1               	movwf	_tilt_step_phase	;volatile
  5472                           
  5473                           ;main.c: 284:                         } else {
  5474  0454  2C6F               	goto	i1l2614
  5475  0455                     i1l2602:
  5476                           
  5477                           ;main.c: 285:                             tilt_step_phase--;
  5478  0455  3001               	movlw	1
  5479  0456  02F1               	subwf	_tilt_step_phase,f	;volatile
  5480  0457  2C6F               	goto	i1l2614
  5481  0458                     i1l2604:
  5482                           
  5483                           ;main.c: 289:                     if ((tilt_counter > 0) || (is_init == 1)) {
  5484  0458  0854               	movf	_tilt_counter,w	;volatile
  5485  0459  0455               	iorwf	_tilt_counter+1,w	;volatile
  5486  045A  1D03               	btfss	3,2
  5487  045B  2C5F               	goto	i1l2608
  5488  045C  0370               	decf	_is_init,w
  5489  045D  1D03               	btfss	3,2
  5490  045E  2C6F               	goto	i1l2614
  5491  045F                     i1l2608:
  5492                           
  5493                           ;main.c: 290:                         tilt_counter--;
  5494  045F  3001               	movlw	1
  5495  0460  02D4               	subwf	_tilt_counter,f	;volatile
  5496  0461  3000               	movlw	0
  5497  0462  1C03               	skipc
  5498  0463  03D5               	decf	_tilt_counter+1,f	;volatile
  5499  0464  02D5               	subwf	_tilt_counter+1,f	;volatile
  5500                           
  5501                           ;main.c: 292:                         if (tilt_step_phase >= 7) {
  5502  0465  3007               	movlw	7
  5503  0466  0271               	subwf	_tilt_step_phase,w	;volatile
  5504  0467  1C03               	skipc
  5505  0468  2C6B               	goto	i1l2612
  5506                           
  5507                           ;main.c: 293:                             tilt_step_phase = 0;
  5508  0469  01F1               	clrf	_tilt_step_phase	;volatile
  5509                           
  5510                           ;main.c: 294:                         } else {
  5511  046A  2C6F               	goto	i1l2614
  5512  046B                     i1l2612:
  5513                           
  5514                           ;main.c: 295:                             tilt_step_phase++;
  5515  046B  3001               	movlw	1
  5516  046C  00F6               	movwf	??_myISR
  5517  046D  0876               	movf	??_myISR,w
  5518  046E  07F1               	addwf	_tilt_step_phase,f	;volatile
  5519  046F                     i1l2614:
  5520                           
  5521                           ;main.c: 300:                 if (tilt_goto == tilt_counter) {
  5522  046F  0855               	movf	_tilt_counter+1,w	;volatile
  5523  0470  0651               	xorwf	_tilt_goto+1,w	;volatile
  5524  0471  1D03               	skipz
  5525  0472  2C75               	goto	u228_25
  5526  0473  0854               	movf	_tilt_counter,w	;volatile
  5527  0474  0650               	xorwf	_tilt_goto,w	;volatile
  5528  0475                     u228_25:
  5529  0475  1D03               	skipz
  5530  0476  2C7C               	goto	i1l2620
  5531                           
  5532                           ;main.c: 301:                     if (preset_tilt_enabled == 1) {
  5533  0477  036B               	decf	_preset_tilt_enabled,w	;volatile
  5534  0478  1D03               	btfss	3,2
  5535  0479  2C7C               	goto	i1l2620
  5536                           
  5537                           ;main.c: 302:                         preset_tilt_enabled = 0;
  5538  047A  01EB               	clrf	_preset_tilt_enabled	;volatile
  5539                           
  5540                           ;main.c: 304:                         tilt_enabled = 0;
  5541  047B  01E7               	clrf	_tilt_enabled	;volatile
  5542  047C                     i1l2620:
  5543                           
  5544                           ;main.c: 308:                 PORTBbits.RB4 = steps_1A[tilt_step_phase];
  5545  047C  0871               	movf	_tilt_step_phase,w
  5546  047D  3E21               	addlw	low ((_steps_1A-__stringbase)| (0+32768))
  5547  047E  0084               	movwf	4
  5548  047F  118A  2500  118A   	fcall	stringdir
  5549  0482  00F6               	movwf	??_myISR
  5550  0483  0EF6               	swapf	??_myISR,f
  5551  0484  0806               	movf	6,w	;volatile
  5552  0485  0676               	xorwf	??_myISR,w
  5553  0486  39EF               	andlw	-17
  5554  0487  0676               	xorwf	??_myISR,w
  5555  0488  0086               	movwf	6	;volatile
  5556                           
  5557                           ;main.c: 309:                 PORTBbits.RB5 = steps_1B[tilt_step_phase];
  5558  0489  0871               	movf	_tilt_step_phase,w
  5559  048A  3E19               	addlw	low ((_steps_1B-__stringbase)| (0+32768))
  5560  048B  0084               	movwf	4
  5561  048C  118A  2500  118A   	fcall	stringdir
  5562  048F  00F6               	movwf	??_myISR
  5563  0490  0EF6               	swapf	??_myISR,f
  5564  0491  0DF6               	rlf	??_myISR,f
  5565  0492  0806               	movf	6,w	;volatile
  5566  0493  0676               	xorwf	??_myISR,w
  5567  0494  39DF               	andlw	-33
  5568  0495  0676               	xorwf	??_myISR,w
  5569  0496  0086               	movwf	6	;volatile
  5570                           
  5571                           ;main.c: 310:                 PORTBbits.RB6 = steps_2A[tilt_step_phase];
  5572  0497  0871               	movf	_tilt_step_phase,w
  5573  0498  3E11               	addlw	low ((_steps_2A-__stringbase)| (0+32768))
  5574  0499  0084               	movwf	4
  5575  049A  118A  2500  118A   	fcall	stringdir
  5576  049D  00F6               	movwf	??_myISR
  5577  049E  0EF6               	swapf	??_myISR,f
  5578  049F  0DF6               	rlf	??_myISR,f
  5579  04A0  0DF6               	rlf	??_myISR,f
  5580  04A1  0806               	movf	6,w	;volatile
  5581  04A2  0676               	xorwf	??_myISR,w
  5582  04A3  39BF               	andlw	-65
  5583  04A4  0676               	xorwf	??_myISR,w
  5584  04A5  0086               	movwf	6	;volatile
  5585                           
  5586                           ;main.c: 311:                 PORTBbits.RB7 = steps_2B[tilt_step_phase];
  5587  04A6  0871               	movf	_tilt_step_phase,w
  5588  04A7  3E09               	addlw	low ((_steps_2B-__stringbase)| (0+32768))
  5589  04A8  0084               	movwf	4
  5590  04A9  118A  2500  118A   	fcall	stringdir
  5591  04AC  00F6               	movwf	??_myISR
  5592  04AD  0CF6               	rrf	??_myISR,f
  5593  04AE  0CF6               	rrf	??_myISR,f
  5594  04AF  0806               	movf	6,w	;volatile
  5595  04B0  0676               	xorwf	??_myISR,w
  5596  04B1  397F               	andlw	-129
  5597  04B2  0676               	xorwf	??_myISR,w
  5598  04B3  0086               	movwf	6	;volatile
  5599                           
  5600                           ;main.c: 312:             } else {
  5601  04B4  2CB9               	goto	i1l221
  5602  04B5                     i1l222:
  5603                           
  5604                           ;main.c: 313:                 PORTBbits.RB4 = 0;
  5605  04B5  1206               	bcf	6,4	;volatile
  5606                           
  5607                           ;main.c: 314:                 PORTBbits.RB5 = 0;
  5608  04B6  1286               	bcf	6,5	;volatile
  5609                           
  5610                           ;main.c: 315:                 PORTBbits.RB6 = 0;
  5611  04B7  1306               	bcf	6,6	;volatile
  5612                           
  5613                           ;main.c: 316:                 PORTBbits.RB7 = 0;
  5614  04B8  1386               	bcf	6,7	;volatile
  5615  04B9                     i1l221:	
  5616                           ;main.c: 318:         }
  5617                           
  5618                           
  5619                           ;main.c: 320:         PIR1bits.TMR1IF = 0;
  5620  04B9  100C               	bcf	12,0	;volatile
  5621  04BA                     i1l181:
  5622  04BA  087B               	movf	??_myISR+5,w
  5623  04BB  00FF               	movwf	127
  5624  04BC  087A               	movf	??_myISR+4,w
  5625  04BD  008A               	movwf	10
  5626  04BE  0879               	movf	??_myISR+3,w
  5627  04BF  0084               	movwf	4
  5628  04C0  0E78               	swapf	??_myISR+2,w
  5629  04C1  0083               	movwf	3
  5630  04C2  0EFE               	swapf	126,f
  5631  04C3  0E7E               	swapf	126,w
  5632  04C4  0009               	retfie
  5633  04C5                     __end_of_myISR:
  5634  007E                     btemp	set	126	;btemp
  5635  007E                     wtemp0	set	126
  5636                           
  5637                           	psect	intentry
  5638  0004                     __pintentry:	
  5639                           ;incstack = 0
  5640                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+pclath]
  5641                           
  5642  0004                     interrupt_function:
  5643  007E                     saved_w	set	btemp
  5644  0004  00FE               	movwf	btemp
  5645  0005  0E03               	swapf	3,w
  5646  0006  00F8               	movwf	??_myISR+2
  5647  0007  0804               	movf	4,w
  5648  0008  00F9               	movwf	??_myISR+3
  5649  0009  080A               	movf	10,w
  5650  000A  00FA               	movwf	??_myISR+4
  5651  000B  087F               	movf	btemp+1,w
  5652  000C  00FB               	movwf	??_myISR+5
  5653  000D  118A  2B12         	ljmp	_myISR
  5654                           
  5655                           	psect	config
  5656                           
  5657                           ;Config register CONFIG @ 0x2007
  5658                           ;	Oscillator Selection bits
  5659                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  5660                           ;	Watchdog Timer Enable bit
  5661                           ;	WDTE = ON, WDT enabled
  5662                           ;	Power-up Timer Enable bit
  5663                           ;	PWRTE = ON, PWRT enabled
  5664                           ;	RA5/MCLR/VPP Pin Function Select bit
  5665                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  5666                           ;	Brown-out Detect Enable bit
  5667                           ;	BOREN = ON, BOD enabled
  5668                           ;	Low-Voltage Programming Enable bit
  5669                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  5670                           ;	Data EE Memory Code Protection bit
  5671                           ;	CPD = OFF, Data memory code protection off
  5672                           ;	Flash Program Memory Code Protection bit
  5673                           ;	CP = OFF, Code protection off
  5674  2007                     	org	8199
  5675  2007  3F54               	dw	16212

Data Sizes:
    Strings     197
    Constant    40
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     48      80
    BANK1            80      0      53
    BANK2            80      0       0

Pointer List with Targets:

    UART_Write_Text_CRLF@text	PTR unsigned char  size(1) Largest target is 23
		 -> STR_27(CODE[2]), STR_16(CODE[2]), STR_14(CODE[7]), STR_11(CODE[5]), 
		 -> STR_10(CODE[7]), STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_4(CODE[7]), STR_3(CODE[21]), STR_2(CODE[23]), 
		 -> STR_1(CODE[10]), 

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 14
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[3]), 
		 -> STR_22(CODE[5]), STR_21(CODE[6]), STR_20(CODE[5]), STR_19(CODE[13]), 
		 -> STR_18(CODE[14]), STR_17(CODE[12]), STR_15(CODE[7]), STR_13(CODE[8]), 
		 -> STR_12(CODE[10]), STR_5(CODE[14]), 

    print_cmd_mov@text	PTR unsigned char  size(1) Largest target is 6
		 -> STR_23(CODE[3]), STR_22(CODE[5]), STR_21(CODE[6]), STR_20(CODE[5]), 

    print_preset@text	PTR unsigned char  size(1) Largest target is 14
		 -> STR_19(CODE[13]), STR_18(CODE[14]), STR_17(CODE[12]), 

    PRESET_load@tilt	PTR unsigned int  size(1) Largest target is 2
		 -> main@tilt_tmp_440(BANK0[2]), main@tilt_tmp(BANK0[2]), 

    PRESET_load@pan	PTR unsigned int  size(1) Largest target is 2
		 -> main@pan_tmp_439(BANK0[2]), main@pan_tmp(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_print_preset
    _print_preset->_print_cnt
    _print_cmd_mov->_print_cnt
    _print_cnt->_print_val
    _print_val->_UART_Write
    _UART_Write_Text->_UART_Write
    _UART_Write_Text_CRLF->_UART_Write
    _BAUDS_get->_eeprom_read
    _SPEED_calc->___awdiv
    _PRESET_save->_eeprom_update
    _PRESET_load->_eeprom_read
    _MOTOR_Init->_delay_wdt
    _BAUDS_set->_eeprom_update
    _eeprom_update->_eeprom_write

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0   23762
                                             35 BANK0     13    13      0
                          _BAUDS_set
                         _MOTOR_Init
                        _PRESET_load
                        _PRESET_save
                         _SPEED_calc
                        _TIMER1_Init
                          _UART_Init
                    _UART_Write_Text
               _UART_Write_Text_CRLF
                            _UC_Init
                          _delay_wdt
                      _print_cmd_mov
                          _print_cnt
                       _print_preset
 ---------------------------------------------------------------------------------
 (1) _print_preset                                        10     5      5    6119
                                             25 BANK0     10     5      5
                         _UART_Write
                    _UART_Write_Text
                             ___bmul
                            ___lbdiv
                          _print_cnt
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     331
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _print_cmd_mov                                        5     1      4    6047
                                             25 BANK0      5     1      4
                    _UART_Write_Text
               _UART_Write_Text_CRLF
                          _print_cnt
 ---------------------------------------------------------------------------------
 (2) _print_cnt                                            4     0      4    3946
                                             21 BANK0      4     0      4
                    _UART_Write_Text
                          _print_val
 ---------------------------------------------------------------------------------
 (3) _print_val                                           12    10      2    2844
                                              9 BANK0     12    10      2
                         _UART_Write
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     856
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     961
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _UART_Write_Text                                      3     3      0     500
                                              9 BANK0      3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text_CRLF                                 3     3      0     644
                                              9 BANK0      3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (4) _UART_Write                                           9     9      0      46
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) _UC_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            3     3      0      65
                                              2 BANK0      3     3      0
                          _BAUDS_get
 ---------------------------------------------------------------------------------
 (2) _BAUDS_get                                            0     0      0      31
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _TIMER1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPEED_calc                                           4     4      0     829
                                              9 BANK0      4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     625
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _PRESET_save                                          8     4      4    1436
                                              6 BANK0      8     4      4
                      _eeprom_update
 ---------------------------------------------------------------------------------
 (1) _PRESET_load                                          6     4      2     704
                                              2 BANK0      6     4      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _MOTOR_Init                                           1     1      0     931
                                              3 BANK0      1     1      0
                          _delay_wdt
 ---------------------------------------------------------------------------------
 (1) _delay_wdt                                            3     1      2     931
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _BAUDS_set                                            2     2      0     788
                                              6 BANK0      2     2      0
                      _eeprom_update
 ---------------------------------------------------------------------------------
 (2) _eeprom_update                                        3     2      1     757
                                              3 BANK0      3     2      1
                        _eeprom_read
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     152
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myISR                                                6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BAUDS_set
     _eeprom_update
       _eeprom_read
       _eeprom_write
   _MOTOR_Init
     _delay_wdt
   _PRESET_load
     _eeprom_read
   _PRESET_save
     _eeprom_update
   _SPEED_calc
     ___awdiv
   _TIMER1_Init
   _UART_Init
     _BAUDS_get
       _eeprom_read
   _UART_Write_Text
     _UART_Write
   _UART_Write_Text_CRLF
     _UART_Write
   _UC_Init
   _delay_wdt
   _print_cmd_mov
     _UART_Write_Text
     _UART_Write_Text_CRLF
     _print_cnt
       _UART_Write_Text
       _print_val
         _UART_Write
         ___lwdiv
         ___wmul
   _print_cnt
   _print_preset
     _UART_Write
     _UART_Write_Text
     ___bmul
     ___lbdiv
     _print_cnt

 _myISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     30      50       3      100.0%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0      35       5       66.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      91       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      91      10        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed Feb 12 10:49:02 2025

                           pc 0002                ___bmul@product 0022                  ___awdiv@sign 0026  
                          fsr 0004           ___wmul@multiplicand 0022                           l300 02D7  
                         l400 07C3                           l401 07C7                           l402 07CB  
                         l242 0302                           l331 0EFF                           l403 07CF  
                         l404 07D4                           l261 00DC                           l328 0ED6  
                         l408 0F27                           l363 06D5                           l283 026C  
                         l518 0DCE                           l297 028D                           l538 0E47  
                         l548 0E71                           l398 07BF                           l399 07F0  
                         fsr0 0004                           indf 0000                          l3100 0E2D  
                        l2056 0F0B                          l2058 0F31                          l3220 0DAF  
                        l3304 0DE8                          l3080 0F83                          l3056 0E69  
                        l3160 06A5                          l3216 0DA9                          l3242 0773  
                        l3090 0FA4                          l3260 079F                          l3252 077B  
                        l3236 0768                          l3324 07C1                          l3172 06BD  
                        l3164 06AD                          l3254 0789                          l3086 0F99  
                        l3078 0F75                          l3182 06D1                          l3174 06C1  
                        l3166 06B1                          l3502 0066                          l3510 007B  
                        l3264 07AA                          l3338 07D7                          l3282 0E8F  
                        l3506 006D                          l3188 0E11                          l3268 07B2  
                        l3196 0EAC                          l3284 0E98                          l3700 0259  
                        l3612 0183                          l3524 008B                          l3454 0EF7  
                        l3198 0EC5                          l3294 0EA7                          l3448 0EDE  
                        l3560 00F3                          l3570 010C                          l3562 00F8  
                        l3490 0053                          l3482 004E                          l3740 02B3  
                        l3636 01C9                          l3564 00FD                          l3580 0132  
                        l3548 00DD                          l3670 0214                          l3566 0102  
                        l3574 0111                          l3494 0059                          l3568 0107  
                        l3576 012A                          l3674 0221                          l3578 012C  
                        l3498 005F                          l3692 024A                          l3782 02FE  
                        l3678 0223                          l3598 0155                          l3696 0257  
                        l3880 0119                          l3882 07DF                          STR_1 0599  
                        STR_2 052E                          STR_3 0545                          STR_4 05B9  
                        STR_5 0568                          STR_6 05D2                          STR_7 05DC  
                        STR_8 05C0                          STR_9 05C6                          _BRGH 04C2  
                        _CREN 00C4                          u3105 0796                          u3115 07A0  
                        u3205 0F39                          u3225 0FAD                          u1385 0F1A  
                        u1386 0F1B                          u3075 077E                          u1387 0F20  
                        u1388 0F21                          u1389 0F26                          u3095 078A  
                        u2805 0F84                          u2815 0F90                          u3615 0210  
                        u2825 0F9A                          u2745 0E72                          u3625 021A  
                        u2851 0DCD                          u2755 0E79                          u3717 0E23  
                        u3645 0246                          u3655 0250                          u2785 0F78  
                        _SPEN 00C7                          _TRMT 04C1                          _TXEN 04C5  
                        _SYNC 04C4                ??_eeprom_write 0021                   main@pan_tmp 0046  
                        _main 0026                          btemp 007E               __end_of_UC_Init 0DF8  
                        start 000F            _preset_pan_enabled 006D             ___bmul@multiplier 0023  
     __end_of_UART_Write_Text 0E46                   ?_MOTOR_Init 0076                         ?_main 0076  
             __end_of___awdiv 07B7               __end_of___lbdiv 0EA9                         _EEADR 009B  
                       STR_10 05B2                         STR_11 05D7                         STR_20 05E6  
                       STR_12 058F                         STR_21 05CC                         STR_13 05A3  
                       STR_14 05B9                         STR_22 05E1                         STR_23 05EE  
                       STR_15 05AB                         STR_16 05F1                         STR_24 05EB  
                       STR_25 05AF                         STR_17 0583                         STR_26 05AF  
                       STR_18 055A                         STR_27 05F1                         STR_19 0576  
                       _CMCON 001F                   ?_SPEED_calc 0076               ___awdiv@divisor 0020  
             __end_of___lwdiv 0FA9                         i1l204 0428                         i1l221 04B9  
                       i1l222 04B5                         i1l181 04BA                         i1l179 038B  
             ___awdiv@counter 0025                         _RCREG 001A               ??_eeprom_update 0024  
                       _TMR1H 000F                         _TMR1L 000E                         _SPBRG 0099  
                       _PORTA 0005                         _PORTB 0006                         _TRISA 0085  
                       _TRISB 0086                         _TXREG 0019                   ?_UART_Write 0076  
                       _myISR 0312                         main@i 004F                         main@m 004E  
             ??_print_cmd_mov 003D                         pclath 000A               _timer1_tilt_ref 0061  
                main@tilt_tmp 0048             __end_of_BAUDS_get 07FF             __end_of_BAUDS_set 0D87  
               print_cnt@_pan 0035                         status 0003                         wtemp0 007E  
             ___lbdiv@divisor 0020              print_val@val1000 0031               ___lbdiv@counter 0023  
             __initialization 0011                  __end_of_main 0312                 print_val@val1 002B  
                      ??_main 0043                  ?_TIMER1_Init 0076                  ?_PRESET_load 0022  
                ?_PRESET_save 0026                        ?_myISR 0076                        _EEDATA 009A  
                      _EECON1 009C                        _EECON2 009D              ___awdiv@dividend 0022  
                   ??_UC_Init 0020                        i1l2500 034F                        i1l2510 0359  
                      i1l2600 0450                        i1l2504 0354                        i1l2512 0372  
                      i1l2602 0455                        i1l2522 0388                        i1l2620 047C  
                      i1l2612 046B                        i1l2604 0458                        i1l2540 03AA  
                      i1l2532 039D                        i1l2524 0389                        i1l2614 046F  
                      i1l2608 045F                        i1l2536 03A1                        i1l2562 03D4  
                      i1l2554 03C5                        i1l2482 032D                        i1l2474 0326  
                      i1l2556 03CA                        i1l2492 0345                        i1l2574 03F1  
                      i1l2566 03E0                        i1l2558 03CD                        i1l2582 042C  
                      i1l2568 03E4                        i1l2496 034A                        i1l2488 0338  
                      i1l2586 0435                        i1l3884 0361                        u217_25 03EA  
                      u228_25 0475                        u196_20 0323                        _P_dat1 005B  
                      _P_dat2 005A                        _P_cmd1 005D                        _P_cmd2 005C  
                      _P_addr 005E       _preset_tilt_enabled_old 00D4             __end_of_UART_Init 07FB  
                      ___bmul 0DA7                        ___wmul 0E67                     ??___awdiv 0024  
                   ??___lbdiv 0021              ?_UART_Write_Text 0076             eeprom_update@addr 0025  
                   ??___lwdiv 0024              ___awdiv@quotient 0027          __end_of_eeprom_write 0E67  
             SPEED_calc@speed 002B                        saved_w 007E                print_cnt@_tilt 0037  
            __end_of_steps_1A 052E              __end_of_steps_1B 0526              __end_of_steps_2A 051E  
            __end_of_steps_2B 0516      UART_Write_Text_CRLF@text 002B              print_preset@tilt 003B  
            print_preset@text 003D              ___lbdiv@dividend 0022             print_val@val10000 0033  
     __end_of__initialization 0023               eeprom_read@addr 0021           ___bmul@multiplicand 0020  
              __pcstackCOMMON 0076                 _pan_direction 0069                 __end_of_myISR 04C5  
              print_val@val10 002D              ___lbdiv@quotient 0024                print_val@value 0029  
              _OPTION_REGbits 0081             eeprom_write@value 0020                       ??_myISR 0076  
              print_preset@id 0041                    __pbssBANK0 0050                    __pbssBANK1 00A0  
                  __pmaintext 0026                 _pan_speed_old 00D3                       ?___bmul 0020  
                  _header_cnt 006F                    _header_pos 00D1                       ?___wmul 0020  
                  __pintentry 0004                  ??_MOTOR_Init 0023                  ??_SPEED_calc 0029  
                ??_UART_Write 0020                       _UC_Init 0DE0                    __stringtab 0500  
                  _frame_data 00A0             __end_of_delay_wdt 0E29            __end_of_MOTOR_Init 075E  
                   _BAUDS_get 07FB  __end_of_UART_Write_Text_CRLF 0ECD                     _BAUDS_set 0D7E  
          __end_of_SPEED_calc 0F01         UART_Write_Text_CRLF@i 0029                       ___awdiv 075E  
                     ___lbdiv 0E88            __end_of_UART_Write 0F35                       ___lwdiv 0F6D  
    print_preset@preset_id_10 0042                       __ptext1 04C5                       __ptext2 0E88  
                     __ptext3 0DA7                       __ptext4 0DF8                       __ptext5 0DB8  
                     __ptext6 05F3                       __ptext7 0E67                       __ptext8 0F6D  
                     __ptext9 0E29            eeprom_update@value 0023                     _T1CONbits 0010  
                     _is_init 0070         __end_of_eeprom_update 0DA7                       clrloop0 0D77  
        end_of_initialization 0023           _preset_tilt_enabled 006B                  _eeprom_write 0E46  
       __end_of_print_cmd_mov 0E10                    ?_BAUDS_get 0076             __end_of_speed_ref 050E  
                  ?_BAUDS_set 0076                  _buffer_data0 00C3                  _buffer_data1 00BC  
                _buffer_data2 00B5                  _buffer_data3 00AE                  _buffer_data4 00A7  
           __end_of_print_cnt 0DCA             __end_of_print_val 06D9                  _buffer_ready 00CA  
                  _timer1_pan 0064                     _UART_Init 07B7                     _PORTAbits 0005  
                   _PORTBbits 0006                UART_Write@data 0024                 PRESET_load@id 0026  
                  _tilt_speed 0065                 PRESET_save@id 002C                 ?_print_preset 0039  
               ??_eeprom_read 0020                __end_of___bmul 0DB8                __end_of___wmul 0E88  
              _timer1_pan_ref 0062                    ?_UART_Init 0076               print_val@val100 002F  
         start_initialization 0011                ??_print_preset 003E          _UART_Write_Text_CRLF 0EA9  
                 ??_BAUDS_get 0022                   ??_BAUDS_set 0026                      ??___bmul 0021  
                    ??___wmul 0024           __end_of_eeprom_read 0DE0               print_preset@pan 0039  
                 __pbssCOMMON 0070         ?_UART_Write_Text_CRLF 0076                     ___latbits 0001  
               __pcstackBANK0 0020               main@chksum_calc 0045                   _data_receiv 0075  
                    ?_UC_Init 0076              eeprom_write@addr 0022                   _alarms_data 00CF  
            ___lwdiv@dividend 0022                     _delay_wdt 0E10                      ?___awdiv 0020  
                    ?___lbdiv 0020                      ?___lwdiv 0020                   ??_UART_Init 0022  
                   __pstrings 0500                 ??_TIMER1_Init 0020                 ??_PRESET_load 0024  
              _pan_step_phase 0072                 ??_PRESET_save 002A              ___lwdiv@quotient 0026  
     print_preset@preset_id_1 0040                     _is_reboot 0058                     _pan_speed 0068  
           ??_UART_Write_Text 0029             interrupt_function 0004                ___wmul@product 0024  
                   clear_ram0 0D76                   _eeprom_read 0DCA                      _PIE1bits 008C  
                    _PCONbits 008E                      _PIR1bits 000C                    ?_delay_wdt 0020  
        __end_of_print_preset 0500                     _speed_ref 0506                     _preset_id 0059  
                   _print_cnt 0DB8                     _tilt_goto 0050                     _print_val 05F3  
                 __stringbase 0505             ___wmul@multiplier 0020        ??_UART_Write_Text_CRLF 0029  
                 _frame_index 0060               main@pan_tmp_439 004A           __end_of_TIMER1_Init 0D96  
                    _P_chksum 00D0                  delay_wdt@_ms 0020           __end_of_PRESET_load 1000  
         __end_of_PRESET_save 0F6D                    _EECON1bits 009C                    ?_print_cnt 0035  
                  ?_print_val 0029                   _pan_enabled 006A            __end_of__stringtab 0506  
                 _pan_counter 0056                 _response_type 005F               ___lwdiv@divisor 0020  
             ___lwdiv@counter 0025                      __ptext10 0EA9                      __ptext11 0F01  
                    __ptext20 06D9                      __ptext12 0DE0                      __ptext21 0E10  
                    __ptext13 07B7                      __ptext22 0D7E                      __ptext14 07FB  
                    __ptext23 0D96                      __ptext15 0D87                      __ptext24 0E46  
                    __ptext16 0ECD                      __ptext25 0DCA                      __ptext17 075E  
                    __ptext26 0312                      __ptext18 0F35                      __ptext19 0FA9  
            main@tilt_tmp_440 004C                _timeout_receiv 006E                _tilt_direction 0066  
             _tilt_step_phase 0071           UART_Write_Text@text 002B                      _pan_goto 0052  
              BAUDS_set@index 0027                   ??_delay_wdt 0022                      _steps_1A 0526  
                    _steps_1B 051E                      _steps_2A 0516                      _steps_2B 050E  
                 _TIMER1_Init 0D87             print_cmd_mov@tilt 003B             print_cmd_mov@text 003D  
                  _INTCONbits 000B                   _PRESET_load 0FA9                 _eeprom_update 0D96  
                 _PRESET_save 0F35             SPEED_calc@sp_calc 002C                _tilt_speed_old 00D2  
                    intlevel1 0000              PRESET_load@_addr 0027                 _print_cmd_mov 0DF8  
                   stringcode 0500                 _buffer_index1 0074                 _buffer_index2 0073  
           UART_Write@timeout 0025              print_cmd_mov@pan 0039                   _timer1_tilt 0063  
                 ??_print_cnt 0039                   ??_print_val 002B                    _MOTOR_Init 06D9  
             _UART_Write_Text 0E29                    _SPEED_calc 0ECD                  _tilt_enabled 0067  
             PRESET_load@tilt 0023                      stringdir 0500              PRESET_save@_addr 002D  
                    stringtab 0500                ?_eeprom_update 0023                  _tilt_counter 0054  
                  _UART_Write 0F01                  _print_preset 04C5                PRESET_load@pan 0022  
            UART_Write_Text@i 0029                 ?_eeprom_write 0020          UART_Init@bauds_index 0024  
             PRESET_save@tilt 0028                    _STATUSbits 0003                ?_print_cmd_mov 0039  
      _preset_pan_enabled_old 006C                  ?_eeprom_read 0076                PRESET_save@pan 0026  
