

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed Feb 12 11:17:13 2025

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	16F648A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Generated 12/10/2023 GMT
    44                           ; 
    45                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F648A Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0015                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0017                     	;# 
    97  0018                     	;# 
    98  0019                     	;# 
    99  001A                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  008C                     	;# 
   105  008E                     	;# 
   106  0092                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009F                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001F                     	;# 
   138  0081                     	;# 
   139  0085                     	;# 
   140  0086                     	;# 
   141  008C                     	;# 
   142  008E                     	;# 
   143  0092                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009A                     	;# 
   147  009B                     	;# 
   148  009C                     	;# 
   149  009D                     	;# 
   150  009F                     	;# 
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0015                     	;# 
   168  0015                     	;# 
   169  0016                     	;# 
   170  0017                     	;# 
   171  0018                     	;# 
   172  0019                     	;# 
   173  001A                     	;# 
   174  001F                     	;# 
   175  0081                     	;# 
   176  0085                     	;# 
   177  0086                     	;# 
   178  008C                     	;# 
   179  008E                     	;# 
   180  0092                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009A                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009F                     	;# 
   188  0000                     	;# 
   189  0001                     	;# 
   190  0002                     	;# 
   191  0003                     	;# 
   192  0004                     	;# 
   193  0005                     	;# 
   194  0006                     	;# 
   195  000A                     	;# 
   196  000B                     	;# 
   197  000C                     	;# 
   198  000E                     	;# 
   199  000E                     	;# 
   200  000F                     	;# 
   201  0010                     	;# 
   202  0011                     	;# 
   203  0012                     	;# 
   204  0015                     	;# 
   205  0015                     	;# 
   206  0016                     	;# 
   207  0017                     	;# 
   208  0018                     	;# 
   209  0019                     	;# 
   210  001A                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  008C                     	;# 
   216  008E                     	;# 
   217  0092                     	;# 
   218  0098                     	;# 
   219  0099                     	;# 
   220  009A                     	;# 
   221  009B                     	;# 
   222  009C                     	;# 
   223  009D                     	;# 
   224  009F                     	;# 
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000E                     	;# 
   236  000E                     	;# 
   237  000F                     	;# 
   238  0010                     	;# 
   239  0011                     	;# 
   240  0012                     	;# 
   241  0015                     	;# 
   242  0015                     	;# 
   243  0016                     	;# 
   244  0017                     	;# 
   245  0018                     	;# 
   246  0019                     	;# 
   247  001A                     	;# 
   248  001F                     	;# 
   249  0081                     	;# 
   250  0085                     	;# 
   251  0086                     	;# 
   252  008C                     	;# 
   253  008E                     	;# 
   254  0092                     	;# 
   255  0098                     	;# 
   256  0099                     	;# 
   257  009A                     	;# 
   258  009B                     	;# 
   259  009C                     	;# 
   260  009D                     	;# 
   261  009F                     	;# 
   262                           
   263                           	psect	strings
   264  0500                     __pstrings:
   265  0500                     stringtab:
   266  0500                     __stringtab:
   267  0500                     stringcode:	
   268                           ;	String table - string pointers are 1 byte each
   269                           
   270  0500                     stringdir:
   271  0500  3005               	movlw	high stringdir
   272  0501  008A               	movwf	10
   273  0502  0804               	movf	4,w
   274  0503  0A84               	incf	4,f
   275  0504  0782               	addwf	2,f
   276  0505                     __stringbase:
   277  0505  3400               	retlw	0
   278  0506                     __end_of__stringtab:
   279  0506                     _speed_ref:
   280  0506  3406               	retlw	6
   281  0507  340C               	retlw	12
   282  0508  3412               	retlw	18
   283  0509  3419               	retlw	25
   284  050A  341F               	retlw	31
   285  050B  3425               	retlw	37
   286  050C  342C               	retlw	44
   287  050D  3432               	retlw	50
   288  050E                     __end_of_speed_ref:
   289  050E                     _steps_2B:
   290  050E  3400               	retlw	0
   291  050F  3400               	retlw	0
   292  0510  3400               	retlw	0
   293  0511  3400               	retlw	0
   294  0512  3400               	retlw	0
   295  0513  3401               	retlw	1
   296  0514  3401               	retlw	1
   297  0515  3401               	retlw	1
   298  0516                     __end_of_steps_2B:
   299  0516                     _steps_2A:
   300  0516  3400               	retlw	0
   301  0517  3400               	retlw	0
   302  0518  3400               	retlw	0
   303  0519  3401               	retlw	1
   304  051A  3401               	retlw	1
   305  051B  3401               	retlw	1
   306  051C  3400               	retlw	0
   307  051D  3400               	retlw	0
   308  051E                     __end_of_steps_2A:
   309  051E                     _steps_1B:
   310  051E  3400               	retlw	0
   311  051F  3401               	retlw	1
   312  0520  3401               	retlw	1
   313  0521  3401               	retlw	1
   314  0522  3400               	retlw	0
   315  0523  3400               	retlw	0
   316  0524  3400               	retlw	0
   317  0525  3400               	retlw	0
   318  0526                     __end_of_steps_1B:
   319  0526                     _steps_1A:
   320  0526  3401               	retlw	1
   321  0527  3401               	retlw	1
   322  0528  3400               	retlw	0
   323  0529  3400               	retlw	0
   324  052A  3400               	retlw	0
   325  052B  3400               	retlw	0
   326  052C  3400               	retlw	0
   327  052D  3401               	retlw	1
   328  052E                     __end_of_steps_1A:
   329  0003                     _STATUSbits	set	3
   330  0019                     _TXREG	set	25
   331  0010                     _T1CONbits	set	16
   332  000B                     _INTCONbits	set	11
   333  001F                     _CMCON	set	31
   334  0006                     _PORTB	set	6
   335  0005                     _PORTA	set	5
   336  0005                     _PORTAbits	set	5
   337  000E                     _TMR1L	set	14
   338  000F                     _TMR1H	set	15
   339  0006                     _PORTBbits	set	6
   340  001A                     _RCREG	set	26
   341  000C                     _PIR1bits	set	12
   342  00C4                     _CREN	set	196
   343  00C7                     _SPEN	set	199
   344  009D                     _EECON2	set	157
   345  009A                     _EEDATA	set	154
   346  009C                     _EECON1	set	156
   347  009B                     _EEADR	set	155
   348  009C                     _EECON1bits	set	156
   349  0099                     _SPBRG	set	153
   350  0086                     _TRISB	set	134
   351  0085                     _TRISA	set	133
   352  0081                     _OPTION_REGbits	set	129
   353  008E                     _PCONbits	set	142
   354  008C                     _PIE1bits	set	140
   355  04C1                     _TRMT	set	1217
   356  04C5                     _TXEN	set	1221
   357  04C4                     _SYNC	set	1220
   358  04C2                     _BRGH	set	1218
   359  052E                     STR_2:
   360  052E  3447               	retlw	71	;'G'
   361  052F  346F               	retlw	111	;'o'
   362  0530  3474               	retlw	116	;'t'
   363  0531  346F               	retlw	111	;'o'
   364  0532  3420               	retlw	32	;' '
   365  0533  3450               	retlw	80	;'P'
   366  0534  3441               	retlw	65	;'A'
   367  0535  344E               	retlw	78	;'N'
   368  0536  3420               	retlw	32	;' '
   369  0537  3461               	retlw	97	;'a'
   370  0538  346E               	retlw	110	;'n'
   371  0539  3464               	retlw	100	;'d'
   372  053A  3420               	retlw	32	;' '
   373  053B  3454               	retlw	84	;'T'
   374  053C  3449               	retlw	73	;'I'
   375  053D  344C               	retlw	76	;'L'
   376  053E  3454               	retlw	84	;'T'
   377  053F  3420               	retlw	32	;' '
   378  0540  3448               	retlw	72	;'H'
   379  0541  346F               	retlw	111	;'o'
   380  0542  346D               	retlw	109	;'m'
   381  0543  3465               	retlw	101	;'e'
   382  0544  3400               	retlw	0
   383  0545                     STR_3:
   384  0545  3457               	retlw	87	;'W'
   385  0546  3461               	retlw	97	;'a'
   386  0547  3469               	retlw	105	;'i'
   387  0548  3474               	retlw	116	;'t'
   388  0549  3469               	retlw	105	;'i'
   389  054A  346E               	retlw	110	;'n'
   390  054B  3467               	retlw	103	;'g'
   391  054C  3420               	retlw	32	;' '
   392  054D  3466               	retlw	102	;'f'
   393  054E  346F               	retlw	111	;'o'
   394  054F  3472               	retlw	114	;'r'
   395  0550  3420               	retlw	32	;' '
   396  0551  3463               	retlw	99	;'c'
   397  0552  346F               	retlw	111	;'o'
   398  0553  346D               	retlw	109	;'m'
   399  0554  346D               	retlw	109	;'m'
   400  0555  3461               	retlw	97	;'a'
   401  0556  346E               	retlw	110	;'n'
   402  0557  3464               	retlw	100	;'d'
   403  0558  3473               	retlw	115	;'s'
   404  0559  3400               	retlw	0
   405  055A                     STR_18:
   406  055A  3443               	retlw	67	;'C'
   407  055B  344C               	retlw	76	;'L'
   408  055C  3445               	retlw	69	;'E'
   409  055D  3441               	retlw	65	;'A'
   410  055E  3452               	retlw	82	;'R'
   411  055F  3420               	retlw	32	;' '
   412  0560  3450               	retlw	80	;'P'
   413  0561  3452               	retlw	82	;'R'
   414  0562  3445               	retlw	69	;'E'
   415  0563  3453               	retlw	83	;'S'
   416  0564  3445               	retlw	69	;'E'
   417  0565  3454               	retlw	84	;'T'
   418  0566  3420               	retlw	32	;' '
   419  0567  3400               	retlw	0
   420  0568                     STR_5:
   421  0568  3453               	retlw	83	;'S'
   422  0569  3445               	retlw	69	;'E'
   423  056A  3454               	retlw	84	;'T'
   424  056B  3420               	retlw	32	;' '
   425  056C  3442               	retlw	66	;'B'
   426  056D  3441               	retlw	65	;'A'
   427  056E  3455               	retlw	85	;'U'
   428  056F  3444               	retlw	68	;'D'
   429  0570  3420               	retlw	32	;' '
   430  0571  3452               	retlw	82	;'R'
   431  0572  3441               	retlw	65	;'A'
   432  0573  3454               	retlw	84	;'T'
   433  0574  3445               	retlw	69	;'E'
   434  0575  3400               	retlw	0
   435  0576                     STR_19:
   436  0576  3447               	retlw	71	;'G'
   437  0577  344F               	retlw	79	;'O'
   438  0578  3454               	retlw	84	;'T'
   439  0579  344F               	retlw	79	;'O'
   440  057A  3420               	retlw	32	;' '
   441  057B  3450               	retlw	80	;'P'
   442  057C  3452               	retlw	82	;'R'
   443  057D  3445               	retlw	69	;'E'
   444  057E  3453               	retlw	83	;'S'
   445  057F  3445               	retlw	69	;'E'
   446  0580  3454               	retlw	84	;'T'
   447  0581  3420               	retlw	32	;' '
   448  0582  3400               	retlw	0
   449  0583                     STR_17:
   450  0583  3453               	retlw	83	;'S'
   451  0584  3445               	retlw	69	;'E'
   452  0585  3454               	retlw	84	;'T'
   453  0586  3420               	retlw	32	;' '
   454  0587  3450               	retlw	80	;'P'
   455  0588  3452               	retlw	82	;'R'
   456  0589  3445               	retlw	69	;'E'
   457  058A  3453               	retlw	83	;'S'
   458  058B  3445               	retlw	69	;'E'
   459  058C  3454               	retlw	84	;'T'
   460  058D  3420               	retlw	32	;' '
   461  058E  3400               	retlw	0
   462  058F                     STR_12:
   463  058F  340D               	retlw	13
   464  0590  340A               	retlw	10
   465  0591  3450               	retlw	80	;'P'
   466  0592  344C               	retlw	76	;'L'
   467  0593  3445               	retlw	69	;'E'
   468  0594  3441               	retlw	65	;'A'
   469  0595  3453               	retlw	83	;'S'
   470  0596  3445               	retlw	69	;'E'
   471  0597  3420               	retlw	32	;' '
   472  0598  3400               	retlw	0
   473  0599                     STR_1:
   474  0599  340D               	retlw	13
   475  059A  340A               	retlw	10
   476  059B  340D               	retlw	13
   477  059C  340A               	retlw	10
   478  059D  3453               	retlw	83	;'S'
   479  059E  3474               	retlw	116	;'t'
   480  059F  3461               	retlw	97	;'a'
   481  05A0  3472               	retlw	114	;'r'
   482  05A1  3474               	retlw	116	;'t'
   483  05A2  3400               	retlw	0
   484  05A3                     STR_13:
   485  05A3  340D               	retlw	13
   486  05A4  340A               	retlw	10
   487  05A5  344E               	retlw	78	;'N'
   488  05A6  3445               	retlw	69	;'E'
   489  05A7  3445               	retlw	69	;'E'
   490  05A8  3444               	retlw	68	;'D'
   491  05A9  3420               	retlw	32	;' '
   492  05AA  3400               	retlw	0
   493  05AB                     STR_15:
   494  05AB  3453               	retlw	83	;'S'
   495  05AC  3454               	retlw	84	;'T'
   496  05AD  344F               	retlw	79	;'O'
   497  05AE  3450               	retlw	80	;'P'
   498  05AF  3420               	retlw	32	;' '
   499  05B0  3428               	retlw	40	;'('
   500  05B1  3400               	retlw	0
   501  05B2                     STR_10:
   502  05B2  3431               	retlw	49	;'1'
   503  05B3  3431               	retlw	49	;'1'
   504  05B4  3435               	retlw	53	;'5'
   505  05B5  3432               	retlw	50	;'2'
   506  05B6  3430               	retlw	48	;'0'
   507  05B7  3430               	retlw	48	;'0'
   508  05B8  3400               	retlw	0
   509  05B9                     STR_4:
   510  05B9  3452               	retlw	82	;'R'
   511  05BA  3445               	retlw	69	;'E'
   512  05BB  3442               	retlw	66	;'B'
   513  05BC  344F               	retlw	79	;'O'
   514  05BD  344F               	retlw	79	;'O'
   515  05BE  3454               	retlw	84	;'T'
   516  05BF  3400               	retlw	0
   517  05C0                     STR_8:
   518  05C0  3431               	retlw	49	;'1'
   519  05C1  3439               	retlw	57	;'9'
   520  05C2  3432               	retlw	50	;'2'
   521  05C3  3430               	retlw	48	;'0'
   522  05C4  3430               	retlw	48	;'0'
   523  05C5  3400               	retlw	0
   524  05C6                     STR_9:
   525  05C6  3433               	retlw	51	;'3'
   526  05C7  3438               	retlw	56	;'8'
   527  05C8  3434               	retlw	52	;'4'
   528  05C9  3430               	retlw	48	;'0'
   529  05CA  3430               	retlw	48	;'0'
   530  05CB  3400               	retlw	0
   531  05CC                     STR_21:
   532  05CC  3452               	retlw	82	;'R'
   533  05CD  3449               	retlw	73	;'I'
   534  05CE  3447               	retlw	71	;'G'
   535  05CF  3448               	retlw	72	;'H'
   536  05D0  3454               	retlw	84	;'T'
   537  05D1  3400               	retlw	0
   538  05D2                     STR_6:
   539  05D2  3432               	retlw	50	;'2'
   540  05D3  3434               	retlw	52	;'4'
   541  05D4  3430               	retlw	48	;'0'
   542  05D5  3430               	retlw	48	;'0'
   543  05D6  3400               	retlw	0
   544  05D7                     STR_11:
   545  05D7  3439               	retlw	57	;'9'
   546  05D8  3436               	retlw	54	;'6'
   547  05D9  3430               	retlw	48	;'0'
   548  05DA  3430               	retlw	48	;'0'
   549  05DB  3400               	retlw	0
   550  05DC                     STR_7:
   551  05DC  3434               	retlw	52	;'4'
   552  05DD  3438               	retlw	56	;'8'
   553  05DE  3430               	retlw	48	;'0'
   554  05DF  3430               	retlw	48	;'0'
   555  05E0  3400               	retlw	0
   556  05E1                     STR_22:
   557  05E1  3444               	retlw	68	;'D'
   558  05E2  344F               	retlw	79	;'O'
   559  05E3  3457               	retlw	87	;'W'
   560  05E4  344E               	retlw	78	;'N'
   561  05E5  3400               	retlw	0
   562  05E6                     STR_20:
   563  05E6  344C               	retlw	76	;'L'
   564  05E7  3445               	retlw	69	;'E'
   565  05E8  3446               	retlw	70	;'F'
   566  05E9  3454               	retlw	84	;'T'
   567  05EA  3400               	retlw	0
   568  05EB                     STR_24:
   569  05EB  342C               	retlw	44	;','
   570  05EC  3420               	retlw	32	;' '
   571  05ED  3400               	retlw	0
   572  05EE                     STR_23:
   573  05EE  3455               	retlw	85	;'U'
   574  05EF  3450               	retlw	80	;'P'
   575  05F0  3400               	retlw	0
   576  05F1                     STR_16:
   577  05F1  3429               	retlw	41	;')'
   578  05F2  3400               	retlw	0
   579  05AF                     
   580                           	psect	cinit
   581  0011                     start_initialization:	
   582                           ; #config settings
   583                           
   584  0011                     __initialization:
   585                           
   586                           ; Clear objects allocated to COMMON
   587  0011  3070               	movlw	low __pbssCOMMON
   588  0012  0084               	movwf	4
   589  0013  3076               	movlw	low (__pbssCOMMON+6)
   590  0014  158A  256F  118A   	fcall	clear_ram0
   591                           
   592                           ; Clear objects allocated to BANK0
   593  0017  1383               	bcf	3,7	;select IRP bank0
   594  0018  3050               	movlw	low __pbssBANK0
   595  0019  0084               	movwf	4
   596  001A  3070               	movlw	low (__pbssBANK0+32)
   597  001B  158A  256F  118A   	fcall	clear_ram0
   598                           
   599                           ; Clear objects allocated to BANK1
   600  001E  30A0               	movlw	low __pbssBANK1
   601  001F  0084               	movwf	4
   602  0020  30D5               	movlw	low (__pbssBANK1+53)
   603  0021  158A  256F         	fcall	clear_ram0
   604  0023                     end_of_initialization:	
   605                           ;End of C runtime variable initialization code
   606                           
   607  0023                     __end_of__initialization:
   608  0023  0183               	clrf	3
   609  0024  118A  2826         	ljmp	_main	;jump to C main() function
   610                           
   611                           	psect	bssCOMMON
   612  0070                     __pbssCOMMON:
   613  0070                     _is_init:
   614  0070                     	ds	1
   615  0071                     _tilt_step_phase:
   616  0071                     	ds	1
   617  0072                     _pan_step_phase:
   618  0072                     	ds	1
   619  0073                     _buffer_index2:
   620  0073                     	ds	1
   621  0074                     _buffer_index1:
   622  0074                     	ds	1
   623  0075                     _data_receiv:
   624  0075                     	ds	1
   625                           
   626                           	psect	bssBANK0
   627  0050                     __pbssBANK0:
   628  0050                     _tilt_goto:
   629  0050                     	ds	2
   630  0052                     _pan_goto:
   631  0052                     	ds	2
   632  0054                     _tilt_counter:
   633  0054                     	ds	2
   634  0056                     _pan_counter:
   635  0056                     	ds	2
   636  0058                     _is_reboot:
   637  0058                     	ds	1
   638  0059                     _preset_id:
   639  0059                     	ds	1
   640  005A                     _P_dat2:
   641  005A                     	ds	1
   642  005B                     _P_dat1:
   643  005B                     	ds	1
   644  005C                     _P_cmd2:
   645  005C                     	ds	1
   646  005D                     _P_cmd1:
   647  005D                     	ds	1
   648  005E                     _P_addr:
   649  005E                     	ds	1
   650  005F                     _response_type:
   651  005F                     	ds	1
   652  0060                     _frame_index:
   653  0060                     	ds	1
   654  0061                     _timer1_tilt_ref:
   655  0061                     	ds	1
   656  0062                     _timer1_pan_ref:
   657  0062                     	ds	1
   658  0063                     _timer1_tilt:
   659  0063                     	ds	1
   660  0064                     _timer1_pan:
   661  0064                     	ds	1
   662  0065                     _tilt_speed:
   663  0065                     	ds	1
   664  0066                     _tilt_direction:
   665  0066                     	ds	1
   666  0067                     _tilt_enabled:
   667  0067                     	ds	1
   668  0068                     _pan_speed:
   669  0068                     	ds	1
   670  0069                     _pan_direction:
   671  0069                     	ds	1
   672  006A                     _pan_enabled:
   673  006A                     	ds	1
   674  006B                     _preset_tilt_enabled:
   675  006B                     	ds	1
   676  006C                     _preset_pan_enabled_old:
   677  006C                     	ds	1
   678  006D                     _preset_pan_enabled:
   679  006D                     	ds	1
   680  006E                     _timeout_receiv:
   681  006E                     	ds	1
   682  006F                     _header_cnt:
   683  006F                     	ds	1
   684                           
   685                           	psect	bssBANK1
   686  00A0                     __pbssBANK1:
   687  00A0                     _frame_data:
   688  00A0                     	ds	7
   689  00A7                     _buffer_data4:
   690  00A7                     	ds	7
   691  00AE                     _buffer_data3:
   692  00AE                     	ds	7
   693  00B5                     _buffer_data2:
   694  00B5                     	ds	7
   695  00BC                     _buffer_data1:
   696  00BC                     	ds	7
   697  00C3                     _buffer_data0:
   698  00C3                     	ds	7
   699  00CA                     _buffer_ready:
   700  00CA                     	ds	5
   701  00CF                     _alarms_data:
   702  00CF                     	ds	1
   703  00D0                     _P_chksum:
   704  00D0                     	ds	1
   705  00D1                     _header_pos:
   706  00D1                     	ds	1
   707  00D2                     _tilt_speed_old:
   708  00D2                     	ds	1
   709  00D3                     _pan_speed_old:
   710  00D3                     	ds	1
   711  00D4                     _preset_tilt_enabled_old:
   712  00D4                     	ds	1
   713                           
   714                           	psect	clrtext
   715  0D6F                     clear_ram0:	
   716                           ;	Called with FSR containing the base address, and
   717                           ;	W with the last address+1
   718                           
   719  0D6F  0064               	clrwdt	;clear the watchdog before getting into this loop
   720  0D70                     clrloop0:
   721  0D70  0180               	clrf	0	;clear RAM location pointed to by FSR
   722  0D71  0A84               	incf	4,f	;increment pointer
   723  0D72  0604               	xorwf	4,w	;XOR with final address
   724  0D73  1903               	btfsc	3,2	;have we reached the end yet?
   725  0D74  3400               	retlw	0	;all done for this memory range, return
   726  0D75  0604               	xorwf	4,w	;XOR again to restore value
   727  0D76  2D70               	goto	clrloop0	;do the next byte
   728                           
   729                           	psect	cstackCOMMON
   730  0076                     __pcstackCOMMON:
   731  0076                     ?_UC_Init:
   732  0076                     ?_UART_Init:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0076                     ?_TIMER1_Init:	
   736                           ; 1 bytes @ 0x0
   737                           
   738  0076                     ?_UART_Write_Text_CRLF:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0076                     ?_MOTOR_Init:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0076                     ?_BAUDS_set:	
   745                           ; 1 bytes @ 0x0
   746                           
   747  0076                     ?_UART_Write_Text:	
   748                           ; 1 bytes @ 0x0
   749                           
   750  0076                     ?_SPEED_calc:	
   751                           ; 1 bytes @ 0x0
   752                           
   753  0076                     ?_eeprom_read:	
   754                           ; 1 bytes @ 0x0
   755                           
   756  0076                     ?_UART_Write:	
   757                           ; 1 bytes @ 0x0
   758                           
   759  0076                     ?_myISR:	
   760                           ; 1 bytes @ 0x0
   761                           
   762  0076                     ??_myISR:	
   763                           ; 1 bytes @ 0x0
   764                           
   765  0076                     ?_main:	
   766                           ; 1 bytes @ 0x0
   767                           
   768  0076                     ?_BAUDS_get:	
   769                           ; 1 bytes @ 0x0
   770                           
   771                           
   772                           ; 1 bytes @ 0x0
   773  0076                     	ds	6
   774                           
   775                           	psect	cstackBANK0
   776  0020                     __pcstackBANK0:
   777  0020                     ??_UC_Init:
   778  0020                     ??_TIMER1_Init:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  0020                     ?_delay_wdt:	
   782                           ; 1 bytes @ 0x0
   783                           
   784  0020                     ??_eeprom_read:	
   785                           ; 1 bytes @ 0x0
   786                           
   787  0020                     ?_eeprom_write:	
   788                           ; 1 bytes @ 0x0
   789                           
   790  0020                     ??_UART_Write:	
   791                           ; 1 bytes @ 0x0
   792                           
   793  0020                     ?___bmul:	
   794                           ; 1 bytes @ 0x0
   795                           
   796  0020                     ?___lbdiv:	
   797                           ; 1 bytes @ 0x0
   798                           
   799  0020                     ?___wmul:	
   800                           ; 1 bytes @ 0x0
   801                           
   802  0020                     ?___awdiv:	
   803                           ; 2 bytes @ 0x0
   804                           
   805  0020                     ?___lwdiv:	
   806                           ; 2 bytes @ 0x0
   807                           
   808  0020                     eeprom_write@value:	
   809                           ; 2 bytes @ 0x0
   810                           
   811  0020                     ___bmul@multiplicand:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0020                     ___lbdiv@divisor:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0020                     delay_wdt@_ms:	
   818                           ; 1 bytes @ 0x0
   819                           
   820  0020                     ___wmul@multiplier:	
   821                           ; 2 bytes @ 0x0
   822                           
   823  0020                     ___awdiv@divisor:	
   824                           ; 2 bytes @ 0x0
   825                           
   826  0020                     ___lwdiv@divisor:	
   827                           ; 2 bytes @ 0x0
   828                           
   829                           
   830                           ; 2 bytes @ 0x0
   831  0020                     	ds	1
   832  0021                     ??_eeprom_write:
   833  0021                     ??___bmul:	
   834                           ; 1 bytes @ 0x1
   835                           
   836  0021                     ??___lbdiv:	
   837                           ; 1 bytes @ 0x1
   838                           
   839  0021                     eeprom_read@addr:	
   840                           ; 1 bytes @ 0x1
   841                           
   842                           
   843                           ; 1 bytes @ 0x1
   844  0021                     	ds	1
   845  0022                     ??_UART_Init:
   846  0022                     ??_delay_wdt:	
   847                           ; 1 bytes @ 0x2
   848                           
   849  0022                     ?_PRESET_load:	
   850                           ; 1 bytes @ 0x2
   851                           
   852  0022                     ??_BAUDS_get:	
   853                           ; 1 bytes @ 0x2
   854                           
   855  0022                     PRESET_load@pan:	
   856                           ; 1 bytes @ 0x2
   857                           
   858  0022                     eeprom_write@addr:	
   859                           ; 1 bytes @ 0x2
   860                           
   861  0022                     ___bmul@product:	
   862                           ; 1 bytes @ 0x2
   863                           
   864  0022                     ___lbdiv@dividend:	
   865                           ; 1 bytes @ 0x2
   866                           
   867  0022                     ___wmul@multiplicand:	
   868                           ; 1 bytes @ 0x2
   869                           
   870  0022                     ___awdiv@dividend:	
   871                           ; 2 bytes @ 0x2
   872                           
   873  0022                     ___lwdiv@dividend:	
   874                           ; 2 bytes @ 0x2
   875                           
   876                           
   877                           ; 2 bytes @ 0x2
   878  0022                     	ds	1
   879  0023                     ??_MOTOR_Init:
   880  0023                     ?_eeprom_update:	
   881                           ; 1 bytes @ 0x3
   882                           
   883  0023                     eeprom_update@value:	
   884                           ; 1 bytes @ 0x3
   885                           
   886  0023                     PRESET_load@tilt:	
   887                           ; 1 bytes @ 0x3
   888                           
   889  0023                     ___bmul@multiplier:	
   890                           ; 1 bytes @ 0x3
   891                           
   892  0023                     ___lbdiv@counter:	
   893                           ; 1 bytes @ 0x3
   894                           
   895                           
   896                           ; 1 bytes @ 0x3
   897  0023                     	ds	1
   898  0024                     ??_PRESET_load:
   899  0024                     ??_eeprom_update:	
   900                           ; 1 bytes @ 0x4
   901                           
   902  0024                     ??___wmul:	
   903                           ; 1 bytes @ 0x4
   904                           
   905  0024                     ??___awdiv:	
   906                           ; 1 bytes @ 0x4
   907                           
   908  0024                     ??___lwdiv:	
   909                           ; 1 bytes @ 0x4
   910                           
   911  0024                     UART_Init@bauds_index:	
   912                           ; 1 bytes @ 0x4
   913                           
   914  0024                     UART_Write@data:	
   915                           ; 1 bytes @ 0x4
   916                           
   917  0024                     ___lbdiv@quotient:	
   918                           ; 1 bytes @ 0x4
   919                           
   920  0024                     ___wmul@product:	
   921                           ; 1 bytes @ 0x4
   922                           
   923                           
   924                           ; 2 bytes @ 0x4
   925  0024                     	ds	1
   926  0025                     eeprom_update@addr:
   927  0025                     ___awdiv@counter:	
   928                           ; 1 bytes @ 0x5
   929                           
   930  0025                     ___lwdiv@counter:	
   931                           ; 1 bytes @ 0x5
   932                           
   933  0025                     UART_Write@timeout:	
   934                           ; 1 bytes @ 0x5
   935                           
   936                           
   937                           ; 4 bytes @ 0x5
   938  0025                     	ds	1
   939  0026                     ??_BAUDS_set:
   940  0026                     ?_PRESET_save:	
   941                           ; 1 bytes @ 0x6
   942                           
   943  0026                     PRESET_load@id:	
   944                           ; 1 bytes @ 0x6
   945                           
   946  0026                     ___awdiv@sign:	
   947                           ; 1 bytes @ 0x6
   948                           
   949  0026                     PRESET_save@pan:	
   950                           ; 1 bytes @ 0x6
   951                           
   952  0026                     ___lwdiv@quotient:	
   953                           ; 2 bytes @ 0x6
   954                           
   955                           
   956                           ; 2 bytes @ 0x6
   957  0026                     	ds	1
   958  0027                     PRESET_load@_addr:
   959  0027                     BAUDS_set@index:	
   960                           ; 1 bytes @ 0x7
   961                           
   962  0027                     ___awdiv@quotient:	
   963                           ; 1 bytes @ 0x7
   964                           
   965                           
   966                           ; 2 bytes @ 0x7
   967  0027                     	ds	1
   968  0028                     PRESET_save@tilt:
   969                           
   970                           ; 2 bytes @ 0x8
   971  0028                     	ds	1
   972  0029                     ??_UART_Write_Text_CRLF:
   973  0029                     ??_UART_Write_Text:	
   974                           ; 1 bytes @ 0x9
   975                           
   976  0029                     ??_SPEED_calc:	
   977                           ; 1 bytes @ 0x9
   978                           
   979  0029                     ?_print_val:	
   980                           ; 1 bytes @ 0x9
   981                           
   982  0029                     print_val@value:	
   983                           ; 1 bytes @ 0x9
   984                           
   985  0029                     UART_Write_Text@i:	
   986                           ; 2 bytes @ 0x9
   987                           
   988  0029                     UART_Write_Text_CRLF@i:	
   989                           ; 2 bytes @ 0x9
   990                           
   991                           
   992                           ; 2 bytes @ 0x9
   993  0029                     	ds	1
   994  002A                     ??_PRESET_save:
   995                           
   996                           ; 1 bytes @ 0xA
   997  002A                     	ds	1
   998  002B                     ??_print_val:
   999  002B                     SPEED_calc@speed:	
  1000                           ; 1 bytes @ 0xB
  1001                           
  1002  002B                     UART_Write_Text@text:	
  1003                           ; 1 bytes @ 0xB
  1004                           
  1005  002B                     UART_Write_Text_CRLF@text:	
  1006                           ; 1 bytes @ 0xB
  1007                           
  1008  002B                     print_val@val1:	
  1009                           ; 1 bytes @ 0xB
  1010                           
  1011                           
  1012                           ; 2 bytes @ 0xB
  1013  002B                     	ds	1
  1014  002C                     SPEED_calc@sp_calc:
  1015  002C                     PRESET_save@id:	
  1016                           ; 1 bytes @ 0xC
  1017                           
  1018                           
  1019                           ; 1 bytes @ 0xC
  1020  002C                     	ds	1
  1021  002D                     PRESET_save@_addr:
  1022  002D                     print_val@val10:	
  1023                           ; 1 bytes @ 0xD
  1024                           
  1025                           
  1026                           ; 2 bytes @ 0xD
  1027  002D                     	ds	2
  1028  002F                     print_val@val100:
  1029                           
  1030                           ; 2 bytes @ 0xF
  1031  002F                     	ds	2
  1032  0031                     print_val@val1000:
  1033                           
  1034                           ; 2 bytes @ 0x11
  1035  0031                     	ds	2
  1036  0033                     print_val@val10000:
  1037                           
  1038                           ; 2 bytes @ 0x13
  1039  0033                     	ds	2
  1040  0035                     ?_print_cnt:
  1041  0035                     print_cnt@_pan:	
  1042                           ; 1 bytes @ 0x15
  1043                           
  1044                           
  1045                           ; 2 bytes @ 0x15
  1046  0035                     	ds	2
  1047  0037                     print_cnt@_tilt:
  1048                           
  1049                           ; 2 bytes @ 0x17
  1050  0037                     	ds	2
  1051  0039                     ??_print_cnt:
  1052  0039                     ?_print_preset:	
  1053                           ; 1 bytes @ 0x19
  1054                           
  1055  0039                     ?_print_cmd_mov:	
  1056                           ; 1 bytes @ 0x19
  1057                           
  1058  0039                     print_preset@pan:	
  1059                           ; 1 bytes @ 0x19
  1060                           
  1061  0039                     print_cmd_mov@pan:	
  1062                           ; 2 bytes @ 0x19
  1063                           
  1064                           
  1065                           ; 2 bytes @ 0x19
  1066  0039                     	ds	2
  1067  003B                     print_preset@tilt:
  1068  003B                     print_cmd_mov@tilt:	
  1069                           ; 2 bytes @ 0x1B
  1070                           
  1071                           
  1072                           ; 2 bytes @ 0x1B
  1073  003B                     	ds	2
  1074  003D                     ??_print_cmd_mov:
  1075  003D                     print_preset@text:	
  1076                           ; 1 bytes @ 0x1D
  1077                           
  1078  003D                     print_cmd_mov@text:	
  1079                           ; 1 bytes @ 0x1D
  1080                           
  1081                           
  1082                           ; 1 bytes @ 0x1D
  1083  003D                     	ds	1
  1084  003E                     ??_print_preset:
  1085                           
  1086                           ; 1 bytes @ 0x1E
  1087  003E                     	ds	2
  1088  0040                     print_preset@preset_id_1:
  1089                           
  1090                           ; 1 bytes @ 0x20
  1091  0040                     	ds	1
  1092  0041                     print_preset@id:
  1093                           
  1094                           ; 1 bytes @ 0x21
  1095  0041                     	ds	1
  1096  0042                     print_preset@preset_id_10:
  1097                           
  1098                           ; 1 bytes @ 0x22
  1099  0042                     	ds	1
  1100  0043                     ??_main:
  1101                           
  1102                           ; 1 bytes @ 0x23
  1103  0043                     	ds	2
  1104  0045                     main@chksum_calc:
  1105                           
  1106                           ; 1 bytes @ 0x25
  1107  0045                     	ds	1
  1108  0046                     main@pan_tmp:
  1109                           
  1110                           ; 2 bytes @ 0x26
  1111  0046                     	ds	2
  1112  0048                     main@tilt_tmp:
  1113                           
  1114                           ; 2 bytes @ 0x28
  1115  0048                     	ds	2
  1116  004A                     main@pan_tmp_439:
  1117                           
  1118                           ; 2 bytes @ 0x2A
  1119  004A                     	ds	2
  1120  004C                     main@tilt_tmp_440:
  1121                           
  1122                           ; 2 bytes @ 0x2C
  1123  004C                     	ds	2
  1124  004E                     main@m:
  1125                           
  1126                           ; 1 bytes @ 0x2E
  1127  004E                     	ds	1
  1128  004F                     main@i:
  1129                           
  1130                           ; 1 bytes @ 0x2F
  1131  004F                     	ds	1
  1132                           
  1133                           	psect	maintext
  1134  0026                     __pmaintext:	
  1135 ;;
  1136 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1137 ;;
  1138 ;; *************** function _main *****************
  1139 ;; Defined at:
  1140 ;;		line 322 in file "main.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  tilt_tmp        2   44[BANK0 ] unsigned int 
  1145 ;;  pan_tmp         2   42[BANK0 ] unsigned int 
  1146 ;;  tilt_tmp        2   40[BANK0 ] unsigned int 
  1147 ;;  pan_tmp         2   38[BANK0 ] unsigned int 
  1148 ;;  m               1   46[BANK0 ] unsigned char 
  1149 ;;  chksum_calc     1   37[BANK0 ] unsigned char 
  1150 ;;  i               1   47[BANK0 ] unsigned char 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : B00/0
  1157 ;;		On exit  : B00/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1160 ;;      Params:         0       0       0       0
  1161 ;;      Locals:         0      11       0       0
  1162 ;;      Temps:          0       2       0       0
  1163 ;;      Totals:         0      13       0       0
  1164 ;;Total ram usage:       13 bytes
  1165 ;; Hardware stack levels required when called: 6
  1166 ;; This function calls:
  1167 ;;		_BAUDS_set
  1168 ;;		_MOTOR_Init
  1169 ;;		_PRESET_load
  1170 ;;		_PRESET_save
  1171 ;;		_SPEED_calc
  1172 ;;		_TIMER1_Init
  1173 ;;		_UART_Init
  1174 ;;		_UART_Write_Text
  1175 ;;		_UART_Write_Text_CRLF
  1176 ;;		_UC_Init
  1177 ;;		_delay_wdt
  1178 ;;		_print_cmd_mov
  1179 ;;		_print_cnt
  1180 ;;		_print_preset
  1181 ;; This function is called by:
  1182 ;;		Startup code after reset
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186  0026                     _main:	
  1187                           ;psect for function _main
  1188                           
  1189                           
  1190                           ;main.c: 323:     UC_Init();
  1191                           
  1192                           ;incstack = 0
  1193                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1194  0026  158A  25D9  118A   	fcall	_UC_Init
  1195                           
  1196                           ;main.c: 325:     UART_Init();
  1197  0029  118A  27B7  118A   	fcall	_UART_Init
  1198                           
  1199                           ;main.c: 327:     TIMER1_Init();
  1200  002C  158A  2580  118A   	fcall	_TIMER1_Init
  1201                           
  1202                           ;main.c: 329:     delay_wdt(500);
  1203  002F  30F4               	movlw	244
  1204  0030  1283               	bcf	3,5	;RP0=0, select bank0
  1205  0031  00A0               	movwf	delay_wdt@_ms
  1206  0032  3001               	movlw	1
  1207  0033  00A1               	movwf	delay_wdt@_ms+1
  1208  0034  158A  2609  118A   	fcall	_delay_wdt
  1209                           
  1210                           ;main.c: 331:     UART_Write_Text_CRLF("\r\n\r\nStart");
  1211  0037  3094               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1212  0038  158A  26A2  118A   	fcall	_UART_Write_Text_CRLF
  1213                           
  1214                           ;main.c: 333:     UART_Write_Text_CRLF("Goto PAN and TILT Home");
  1215  003B  3029               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1216  003C  158A  26A2  118A   	fcall	_UART_Write_Text_CRLF
  1217                           
  1218                           ;main.c: 335:     delay_wdt(50);
  1219  003F  3032               	movlw	50
  1220  0040  00A0               	movwf	delay_wdt@_ms
  1221  0041  3000               	movlw	0
  1222  0042  00A1               	movwf	delay_wdt@_ms+1
  1223  0043  158A  2609  118A   	fcall	_delay_wdt
  1224                           
  1225                           ;main.c: 337:     MOTOR_Init();
  1226  0046  118A  26D9  118A   	fcall	_MOTOR_Init
  1227                           
  1228                           ;main.c: 339:     UART_Write_Text_CRLF("Waiting for commands");
  1229  0049  3040               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1230  004A                     L6:
  1231  004A  158A  26A2  118A   	fcall	_UART_Write_Text_CRLF
  1232  004D  2B02               	goto	l242
  1233  004E                     l3488:
  1234                           
  1235                           ;main.c: 345:             buffer_ready[frame_index] = 0;
  1236  004E  0860               	movf	_frame_index,w
  1237  004F  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  1238  0050  0084               	movwf	4
  1239  0051  0180               	clrf	0
  1240                           
  1241                           ;main.c: 347:             for (uint8_t i = 0; i < 7; i++) {
  1242  0052  01CF               	clrf	main@i
  1243  0053                     l3496:
  1244                           
  1245                           ;main.c: 348:                 if (frame_index == 0) {
  1246  0053  0860               	movf	_frame_index,w
  1247  0054  1D03               	btfss	3,2
  1248  0055  2859               	goto	l3500
  1249                           
  1250                           ;main.c: 349:                     frame_data[i] = buffer_data0[i];
  1251  0056  084F               	movf	main@i,w
  1252  0057  3EC3               	addlw	(low (_buffer_data0| 0))& (0+255)
  1253  0058  2873               	goto	L4
  1254  0059                     l3500:	
  1255                           ;main.c: 350:                 } else if (frame_index == 1) {
  1256                           
  1257  0059  0360               	decf	_frame_index,w
  1258  005A  1D03               	btfss	3,2
  1259  005B  285F               	goto	l3504
  1260                           
  1261                           ;main.c: 351:                     frame_data[i] = buffer_data1[i];
  1262  005C  084F               	movf	main@i,w
  1263  005D  3EBC               	addlw	(low (_buffer_data1| 0))& (0+255)
  1264  005E  2873               	goto	L4
  1265  005F                     l3504:	
  1266                           ;main.c: 352:                 } else if (frame_index == 2) {
  1267                           
  1268  005F  3002               	movlw	2
  1269  0060  0660               	xorwf	_frame_index,w
  1270  0061  1D03               	btfss	3,2
  1271  0062  2866               	goto	l3508
  1272                           
  1273                           ;main.c: 353:                     frame_data[i] = buffer_data2[i];
  1274  0063  084F               	movf	main@i,w
  1275  0064  3EB5               	addlw	(low (_buffer_data2| 0))& (0+255)
  1276  0065  2873               	goto	L4
  1277  0066                     l3508:	
  1278                           ;main.c: 354:                 } else if (frame_index == 3) {
  1279                           
  1280  0066  3003               	movlw	3
  1281  0067  0660               	xorwf	_frame_index,w
  1282  0068  1D03               	btfss	3,2
  1283  0069  286D               	goto	l3512
  1284                           
  1285                           ;main.c: 355:                     frame_data[i] = buffer_data3[i];
  1286  006A  084F               	movf	main@i,w
  1287  006B  3EAE               	addlw	(low (_buffer_data3| 0))& (0+255)
  1288  006C  2873               	goto	L4
  1289  006D                     l3512:	
  1290                           ;main.c: 356:                 } else if (frame_index == 4) {
  1291                           
  1292  006D  3004               	movlw	4
  1293  006E  0660               	xorwf	_frame_index,w
  1294  006F  1D03               	btfss	3,2
  1295  0070  287B               	goto	l3516
  1296                           
  1297                           ;main.c: 357:                     frame_data[i] = buffer_data4[i];
  1298  0071  084F               	movf	main@i,w
  1299  0072  3EA7               	addlw	(low (_buffer_data4| 0))& (0+255)
  1300  0073                     L4:
  1301  0073  0084               	movwf	4
  1302  0074  0800               	movf	0,w
  1303  0075  00C3               	movwf	??_main
  1304  0076  084F               	movf	main@i,w
  1305  0077  3EA0               	addlw	(low (_frame_data| 0))& (0+255)
  1306  0078  0084               	movwf	4
  1307  0079  0843               	movf	??_main,w
  1308  007A  0080               	movwf	0
  1309  007B                     l3516:
  1310                           
  1311                           ;main.c: 361:             }
  1312  007B  3001               	movlw	1
  1313  007C  00C3               	movwf	??_main
  1314  007D  0843               	movf	??_main,w
  1315  007E  07CF               	addwf	main@i,f
  1316  007F  3007               	movlw	7
  1317  0080  024F               	subwf	main@i,w
  1318  0081  1C03               	skipc
  1319  0082  2853               	goto	l3496
  1320                           
  1321                           ;main.c: 363:             if (frame_data[0] == 0xFF) {
  1322  0083  1683               	bsf	3,5	;RP0=1, select bank1
  1323  0084  0A20               	incf	_frame_data^(0+128),w
  1324  0085  1D03               	btfss	3,2
  1325  0086  2B02               	goto	l242
  1326                           
  1327                           ;main.c: 364:                 uint8_t chksum_calc = 0;
  1328  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1329  0088  01C5               	clrf	main@chksum_calc
  1330                           
  1331                           ;main.c: 366:                 for (uint8_t m = 1; m <= 5; m++) {
  1332  0089  01CE               	clrf	main@m
  1333  008A  0ACE               	incf	main@m,f
  1334  008B                     l3530:
  1335                           
  1336                           ;main.c: 367:                     chksum_calc += frame_data[m];
  1337  008B  084E               	movf	main@m,w
  1338  008C  3EA0               	addlw	(low (_frame_data| 0))& (0+255)
  1339  008D  0084               	movwf	4
  1340  008E  0800               	movf	0,w
  1341  008F  00C3               	movwf	??_main
  1342  0090  0843               	movf	??_main,w
  1343  0091  07C5               	addwf	main@chksum_calc,f
  1344                           
  1345                           ;main.c: 368:                 }
  1346  0092  3001               	movlw	1
  1347  0093  00C3               	movwf	??_main
  1348  0094  0843               	movf	??_main,w
  1349  0095  07CE               	addwf	main@m,f
  1350  0096  3006               	movlw	6
  1351  0097  024E               	subwf	main@m,w
  1352  0098  1C03               	skipc
  1353  0099  288B               	goto	l3530
  1354                           
  1355                           ;main.c: 370:                 if (chksum_calc == frame_data[6]) {
  1356  009A  1683               	bsf	3,5	;RP0=1, select bank1
  1357  009B  0826               	movf	(_frame_data^(0+128)+6),w
  1358  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1359  009D  0645               	xorwf	main@chksum_calc,w
  1360  009E  1D03               	skipz
  1361  009F  2B02               	goto	l242
  1362                           
  1363                           ;main.c: 372:                     P_addr = frame_data[1];
  1364  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  1365  00A1  0821               	movf	(_frame_data^(0+128)+1),w
  1366  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  1367  00A3  00C3               	movwf	??_main
  1368  00A4  0843               	movf	??_main,w
  1369  00A5  00DE               	movwf	_P_addr
  1370                           
  1371                           ;main.c: 373:                     P_cmd1 = frame_data[2];
  1372  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  1373  00A7  0822               	movf	(_frame_data^(0+128)+2),w
  1374  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  1375  00A9  00C3               	movwf	??_main
  1376  00AA  0843               	movf	??_main,w
  1377  00AB  00DD               	movwf	_P_cmd1
  1378                           
  1379                           ;main.c: 374:                     P_cmd2 = frame_data[3];
  1380  00AC  1683               	bsf	3,5	;RP0=1, select bank1
  1381  00AD  0823               	movf	(_frame_data^(0+128)+3),w
  1382  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1383  00AF  00C3               	movwf	??_main
  1384  00B0  0843               	movf	??_main,w
  1385  00B1  00DC               	movwf	_P_cmd2
  1386                           
  1387                           ;main.c: 375:                     P_dat1 = frame_data[4];
  1388  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  1389  00B3  0824               	movf	(_frame_data^(0+128)+4),w
  1390  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1391  00B5  00C3               	movwf	??_main
  1392  00B6  0843               	movf	??_main,w
  1393  00B7  00DB               	movwf	_P_dat1
  1394                           
  1395                           ;main.c: 376:                     P_dat2 = frame_data[5];
  1396  00B8  1683               	bsf	3,5	;RP0=1, select bank1
  1397  00B9  0825               	movf	(_frame_data^(0+128)+5),w
  1398  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1399  00BB  00C3               	movwf	??_main
  1400  00BC  0843               	movf	??_main,w
  1401  00BD  00DA               	movwf	_P_dat2
  1402                           
  1403                           ;main.c: 377:                     P_chksum = frame_data[6];
  1404  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  1405  00BF  0826               	movf	(_frame_data^(0+128)+6),w
  1406  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1407  00C1  00C3               	movwf	??_main
  1408  00C2  0843               	movf	??_main,w
  1409  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  1410  00C4  00D0               	movwf	_P_chksum^(0+128)
  1411                           
  1412                           ;main.c: 379:                     response_type = 0x00;
  1413  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  1414  00C6  01DF               	clrf	_response_type
  1415                           
  1416                           ;main.c: 382:                     if (P_addr == 0x01) {
  1417  00C7  035E               	decf	_P_addr,w
  1418  00C8  1D03               	btfss	3,2
  1419  00C9  2B02               	goto	l242
  1420                           
  1421                           ;main.c: 383:                         if ((P_cmd1 == 0xF0) && (P_cmd2 == 0x83) && (P_dat
      +                          1 == 0x00) && (P_dat2 == 0x01)) {
  1422  00CA  30F0               	movlw	240
  1423  00CB  065D               	xorwf	_P_cmd1,w
  1424  00CC  1D03               	btfss	3,2
  1425  00CD  28DD               	goto	l3554
  1426  00CE  3083               	movlw	131
  1427  00CF  065C               	xorwf	_P_cmd2,w
  1428  00D0  1D03               	btfss	3,2
  1429  00D1  28DD               	goto	l3554
  1430  00D2  085B               	movf	_P_dat1,w
  1431  00D3  1D03               	btfss	3,2
  1432  00D4  28DD               	goto	l3554
  1433  00D5  035A               	decf	_P_dat2,w
  1434  00D6  1D03               	btfss	3,2
  1435  00D7  28DD               	goto	l3554
  1436                           
  1437                           ;main.c: 384:                             UART_Write_Text_CRLF("REBOOT");
  1438  00D8  30B4               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1439  00D9  158A  26A2  118A   	fcall	_UART_Write_Text_CRLF
  1440  00DC                     l261:	
  1441                           ;main.c: 386:                             while (1) {
  1442                           
  1443                           
  1444                           ;main.c: 388:                             }
  1445  00DC  28DC               	goto	l261
  1446  00DD                     l3554:
  1447  00DD  085D               	movf	_P_cmd1,w
  1448  00DE  1D03               	btfss	3,2
  1449  00DF  2932               	goto	l3586
  1450  00E0  3067               	movlw	103
  1451  00E1  065C               	xorwf	_P_cmd2,w
  1452  00E2  1D03               	btfss	3,2
  1453  00E3  2932               	goto	l3586
  1454  00E4  085B               	movf	_P_dat1,w
  1455  00E5  1D03               	btfss	3,2
  1456  00E6  2932               	goto	l3586
  1457                           
  1458                           ;main.c: 391:                             if (is_reboot == 1) {
  1459  00E7  0358               	decf	_is_reboot,w
  1460  00E8  1D03               	btfss	3,2
  1461  00E9  292C               	goto	l3584
  1462                           
  1463                           ;main.c: 392:                                 BAUDS_set(P_dat2);
  1464  00EA  085A               	movf	_P_dat2,w
  1465  00EB  158A  2577  118A   	fcall	_BAUDS_set
  1466                           
  1467                           ;main.c: 394:                                 UART_Write_Text("SET BAUD RATE");
  1468  00EE  3063               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1469  00EF  158A  2622  118A   	fcall	_UART_Write_Text
  1470                           
  1471                           ;main.c: 396:                                 switch (P_dat2) {
  1472  00F2  2911               	goto	l3580
  1473  00F3                     l3566:
  1474                           
  1475                           ;main.c: 398:                                         UART_Write_Text_CRLF("2400");
  1476  00F3  30CD               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1477  00F4  158A  26A2  118A   	fcall	_UART_Write_Text_CRLF
  1478                           
  1479                           ;main.c: 399:                                         break;
  1480  00F7  292A               	goto	l3582
  1481  00F8                     l3568:
  1482                           
  1483                           ;main.c: 401:                                         UART_Write_Text_CRLF("4800");
  1484  00F8  30D7               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1485  00F9  158A  26A2  118A   	fcall	_UART_Write_Text_CRLF
  1486                           
  1487                           ;main.c: 402:                                         break;
  1488  00FC  292A               	goto	l3582
  1489  00FD                     l3570:
  1490                           
  1491                           ;main.c: 404:                                         UART_Write_Text_CRLF("19200");
  1492  00FD  30BB               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1493  00FE  158A  26A2  118A   	fcall	_UART_Write_Text_CRLF
  1494                           
  1495                           ;main.c: 405:                                         break;
  1496  0101  292A               	goto	l3582
  1497  0102                     l3572:
  1498                           
  1499                           ;main.c: 407:                                         UART_Write_Text_CRLF("38400");
  1500  0102  30C1               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1501  0103  158A  26A2  118A   	fcall	_UART_Write_Text_CRLF
  1502                           
  1503                           ;main.c: 408:                                         break;
  1504  0106  292A               	goto	l3582
  1505  0107                     l3574:
  1506                           
  1507                           ;main.c: 410:                                         UART_Write_Text_CRLF("115200");
  1508  0107  30AD               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1509  0108  158A  26A2  118A   	fcall	_UART_Write_Text_CRLF
  1510                           
  1511                           ;main.c: 411:                                         break;
  1512  010B  292A               	goto	l3582
  1513  010C                     l3576:
  1514                           
  1515                           ;main.c: 414:                                         UART_Write_Text_CRLF("9600");
  1516  010C  30D2               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1517  010D  158A  26A2  118A   	fcall	_UART_Write_Text_CRLF
  1518                           
  1519                           ;main.c: 415:                                         break;
  1520  0110  292A               	goto	l3582
  1521  0111                     l3580:
  1522  0111  085A               	movf	_P_dat2,w
  1523  0112  00C3               	movwf	??_main
  1524  0113  01C4               	clrf	??_main+1
  1525                           
  1526                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1527                           ; Switch size 1, requested type "simple"
  1528                           ; Number of cases is 1, Range of values is 0 to 0
  1529                           ; switch strategies available:
  1530                           ; Name         Instructions Cycles
  1531                           ; simple_byte            4     3 (average)
  1532                           ; direct_byte            9     7 (fixed)
  1533                           ; jumptable            260     6 (fixed)
  1534                           ;	Chosen strategy is simple_byte
  1535  0114  0844               	movf	??_main+1,w
  1536  0115  3A00               	xorlw	0	; case 0
  1537  0116  1903               	skipnz
  1538  0117  2919               	goto	l3886
  1539  0118  290C               	goto	l3576
  1540  0119                     l3886:
  1541                           
  1542                           ; Switch size 1, requested type "simple"
  1543                           ; Number of cases is 5, Range of values is 0 to 5
  1544                           ; switch strategies available:
  1545                           ; Name         Instructions Cycles
  1546                           ; simple_byte           16     9 (average)
  1547                           ; direct_byte           19     7 (fixed)
  1548                           ; jumptable            260     6 (fixed)
  1549                           ;	Chosen strategy is simple_byte
  1550  0119  0843               	movf	??_main,w
  1551  011A  3A00               	xorlw	0	; case 0
  1552  011B  1903               	skipnz
  1553  011C  28F3               	goto	l3566
  1554  011D  3A01               	xorlw	1	; case 1
  1555  011E  1903               	skipnz
  1556  011F  28F8               	goto	l3568
  1557  0120  3A02               	xorlw	2	; case 3
  1558  0121  1903               	skipnz
  1559  0122  28FD               	goto	l3570
  1560  0123  3A07               	xorlw	7	; case 4
  1561  0124  1903               	skipnz
  1562  0125  2902               	goto	l3572
  1563  0126  3A01               	xorlw	1	; case 5
  1564  0127  1903               	skipnz
  1565  0128  2907               	goto	l3574
  1566  0129  290C               	goto	l3576
  1567  012A                     l3582:
  1568                           
  1569                           ;main.c: 418:                                 UART_Write_Text("\r\nPLEASE ");
  1570  012A  308A               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1571  012B  292D               	goto	L5
  1572  012C                     l3584:	
  1573                           ;main.c: 419:                             } else {
  1574                           
  1575                           
  1576                           ;main.c: 420:                                 UART_Write_Text("\r\nNEED ");
  1577  012C  309E               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1578  012D                     L5:
  1579  012D  158A  2622  118A   	fcall	_UART_Write_Text
  1580                           
  1581                           ;main.c: 423:                             UART_Write_Text_CRLF("REBOOT");
  1582                           
  1583                           ;main.c: 421:                             }
  1584  0130  30B4               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1585  0131  284A               	goto	L6
  1586  0132                     l3586:	
  1587                           ;main.c: 424:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x00) &&
      +                           (P_dat1 == 0x00) && (P_dat2 == 0x00)) {
  1588                           
  1589  0132  085D               	movf	_P_cmd1,w
  1590  0133  1D03               	btfss	3,2
  1591  0134  2955               	goto	l3604
  1592  0135  085C               	movf	_P_cmd2,w
  1593  0136  1D03               	btfss	3,2
  1594  0137  2955               	goto	l3604
  1595  0138  085B               	movf	_P_dat1,w
  1596  0139  1D03               	btfss	3,2
  1597  013A  2955               	goto	l3604
  1598  013B  085A               	movf	_P_dat2,w
  1599  013C  1D03               	btfss	3,2
  1600  013D  2955               	goto	l3604
  1601                           
  1602                           ;main.c: 425:                             pan_enabled = 0;
  1603  013E  01EA               	clrf	_pan_enabled	;volatile
  1604                           
  1605                           ;main.c: 426:                             tilt_enabled = 0;
  1606  013F  01E7               	clrf	_tilt_enabled	;volatile
  1607                           
  1608                           ;main.c: 427:                             preset_pan_enabled = 0;
  1609  0140  01ED               	clrf	_preset_pan_enabled	;volatile
  1610                           
  1611                           ;main.c: 428:                             preset_tilt_enabled = 0;
  1612  0141  01EB               	clrf	_preset_tilt_enabled	;volatile
  1613                           
  1614                           ;main.c: 430:                             response_type = 0x01;
  1615  0142  01DF               	clrf	_response_type
  1616  0143  0ADF               	incf	_response_type,f
  1617                           
  1618                           ;main.c: 431:                             UART_Write_Text("STOP (");
  1619  0144  30A6               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1620  0145  158A  2622  118A   	fcall	_UART_Write_Text
  1621                           
  1622                           ;main.c: 432:                             print_cnt(pan_counter, tilt_counter);
  1623  0148  0857               	movf	_pan_counter+1,w	;volatile
  1624  0149  00B6               	movwf	print_cnt@_pan+1
  1625  014A  0856               	movf	_pan_counter,w	;volatile
  1626  014B  00B5               	movwf	print_cnt@_pan
  1627  014C  0855               	movf	_tilt_counter+1,w	;volatile
  1628  014D  00B8               	movwf	print_cnt@_tilt+1
  1629  014E  0854               	movf	_tilt_counter,w	;volatile
  1630  014F  00B7               	movwf	print_cnt@_tilt
  1631  0150  158A  25B1  118A   	fcall	_print_cnt
  1632                           
  1633                           ;main.c: 433:                             UART_Write_Text_CRLF(")");
  1634  0153  30EC               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1635  0154  284A               	goto	L6
  1636  0155                     l3604:	
  1637                           ;main.c: 435:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x03) &&
      +                           (P_dat1 == 0x00)) {
  1638                           
  1639  0155  085D               	movf	_P_cmd1,w
  1640  0156  1D03               	btfss	3,2
  1641  0157  2983               	goto	l3618
  1642  0158  3003               	movlw	3
  1643  0159  065C               	xorwf	_P_cmd2,w
  1644  015A  1D03               	btfss	3,2
  1645  015B  2983               	goto	l3618
  1646  015C  085B               	movf	_P_dat1,w
  1647  015D  1D03               	btfss	3,2
  1648  015E  2983               	goto	l3618
  1649                           
  1650                           ;main.c: 436:                             preset_id = P_dat2;
  1651  015F  085A               	movf	_P_dat2,w
  1652  0160  00C3               	movwf	??_main
  1653  0161  0843               	movf	??_main,w
  1654  0162  00D9               	movwf	_preset_id
  1655                           
  1656                           ;main.c: 437:                             PRESET_save(preset_id, pan_counter, tilt_count
      +                          er);
  1657  0163  0857               	movf	_pan_counter+1,w	;volatile
  1658  0164  00A7               	movwf	PRESET_save@pan+1
  1659  0165  0856               	movf	_pan_counter,w	;volatile
  1660  0166  00A6               	movwf	PRESET_save@pan
  1661  0167  0855               	movf	_tilt_counter+1,w	;volatile
  1662  0168  00A9               	movwf	PRESET_save@tilt+1
  1663  0169  0854               	movf	_tilt_counter,w	;volatile
  1664  016A  00A8               	movwf	PRESET_save@tilt
  1665  016B  0859               	movf	_preset_id,w
  1666  016C  118A  24C5  118A   	fcall	_PRESET_save
  1667                           
  1668                           ;main.c: 438:                             response_type = 0x01;
  1669  016F  1283               	bcf	3,5	;RP0=0, select bank0
  1670  0170  01DF               	clrf	_response_type
  1671  0171  0ADF               	incf	_response_type,f
  1672                           
  1673                           ;main.c: 440:                             print_preset(preset_id, pan_counter, tilt_coun
      +                          ter, "SET PRESET ");
  1674  0172  0857               	movf	_pan_counter+1,w	;volatile
  1675  0173  00BA               	movwf	print_preset@pan+1
  1676  0174  0856               	movf	_pan_counter,w	;volatile
  1677  0175  00B9               	movwf	print_preset@pan
  1678  0176  0855               	movf	_tilt_counter+1,w	;volatile
  1679  0177  00BC               	movwf	print_preset@tilt+1
  1680  0178  0854               	movf	_tilt_counter,w	;volatile
  1681  0179  00BB               	movwf	print_preset@tilt
  1682  017A  307E               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  1683  017B  00C3               	movwf	??_main
  1684  017C  0843               	movf	??_main,w
  1685  017D  00BD               	movwf	print_preset@text
  1686  017E  0859               	movf	_preset_id,w
  1687  017F  158A  276A  118A   	fcall	_print_preset
  1688                           
  1689                           ;main.c: 441:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x05) &&
      +                           (P_dat1 == 0x00)) {
  1690  0182  2B02               	goto	l242
  1691  0183                     l3618:
  1692  0183  085D               	movf	_P_cmd1,w
  1693  0184  1D03               	btfss	3,2
  1694  0185  29C9               	goto	l3642
  1695  0186  3005               	movlw	5
  1696  0187  065C               	xorwf	_P_cmd2,w
  1697  0188  1D03               	btfss	3,2
  1698  0189  29C9               	goto	l3642
  1699  018A  085B               	movf	_P_dat1,w
  1700  018B  1D03               	btfss	3,2
  1701  018C  29C9               	goto	l3642
  1702                           
  1703                           ;main.c: 442:                             preset_id = P_dat2;
  1704  018D  085A               	movf	_P_dat2,w
  1705  018E  00C3               	movwf	??_main
  1706  018F  0843               	movf	??_main,w
  1707  0190  00D9               	movwf	_preset_id
  1708                           
  1709                           ;main.c: 443:                             PRESET_save(preset_id, 0xFFFF, 0xFFFF);
  1710  0191  30FF               	movlw	255
  1711  0192  00A6               	movwf	PRESET_save@pan
  1712  0193  30FF               	movlw	255
  1713  0194  00A7               	movwf	PRESET_save@pan+1
  1714  0195  30FF               	movlw	255
  1715  0196  00A8               	movwf	PRESET_save@tilt
  1716  0197  30FF               	movlw	255
  1717  0198  00A9               	movwf	PRESET_save@tilt+1
  1718  0199  0859               	movf	_preset_id,w
  1719  019A  118A  24C5  118A   	fcall	_PRESET_save
  1720                           
  1721                           ;main.c: 445:                             uint16_t pan_tmp = 0;
  1722  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1723  019E  01C6               	clrf	main@pan_tmp
  1724  019F  01C7               	clrf	main@pan_tmp+1
  1725                           
  1726                           ;main.c: 446:                             uint16_t tilt_tmp = 0;
  1727  01A0  01C8               	clrf	main@tilt_tmp
  1728  01A1  01C9               	clrf	main@tilt_tmp+1
  1729                           
  1730                           ;main.c: 447:                             PRESET_load(preset_id, &pan_tmp, &tilt_tmp);
  1731  01A2  3046               	movlw	(low (main@pan_tmp| 0))& (0+255)
  1732  01A3  00C3               	movwf	??_main
  1733  01A4  0843               	movf	??_main,w
  1734  01A5  00A2               	movwf	PRESET_load@pan
  1735  01A6  3048               	movlw	(low (main@tilt_tmp| 0))& (0+255)
  1736  01A7  00C4               	movwf	??_main+1
  1737  01A8  0844               	movf	??_main+1,w
  1738  01A9  00A3               	movwf	PRESET_load@tilt
  1739  01AA  0859               	movf	_preset_id,w
  1740  01AB  158A  27A9  118A   	fcall	_PRESET_load
  1741                           
  1742                           ;main.c: 448:                             pan_goto = pan_tmp;
  1743  01AE  0847               	movf	main@pan_tmp+1,w
  1744  01AF  00D3               	movwf	_pan_goto+1	;volatile
  1745  01B0  0846               	movf	main@pan_tmp,w
  1746  01B1  00D2               	movwf	_pan_goto	;volatile
  1747                           
  1748                           ;main.c: 449:                             tilt_goto = tilt_tmp;
  1749  01B2  0849               	movf	main@tilt_tmp+1,w
  1750  01B3  00D1               	movwf	_tilt_goto+1	;volatile
  1751  01B4  0848               	movf	main@tilt_tmp,w
  1752  01B5  00D0               	movwf	_tilt_goto	;volatile
  1753                           
  1754                           ;main.c: 451:                             response_type = 0x01;
  1755  01B6  01DF               	clrf	_response_type
  1756  01B7  0ADF               	incf	_response_type,f
  1757                           
  1758                           ;main.c: 453:                             print_preset(preset_id, pan_goto, tilt_goto, "
      +                          CLEAR PRESET ");
  1759  01B8  0853               	movf	_pan_goto+1,w	;volatile
  1760  01B9  00BA               	movwf	print_preset@pan+1
  1761  01BA  0852               	movf	_pan_goto,w	;volatile
  1762  01BB  00B9               	movwf	print_preset@pan
  1763  01BC  0851               	movf	_tilt_goto+1,w	;volatile
  1764  01BD  00BC               	movwf	print_preset@tilt+1
  1765  01BE  0850               	movf	_tilt_goto,w	;volatile
  1766  01BF  00BB               	movwf	print_preset@tilt
  1767  01C0  3055               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  1768  01C1  00C3               	movwf	??_main
  1769  01C2  0843               	movf	??_main,w
  1770  01C3  00BD               	movwf	print_preset@text
  1771  01C4  0859               	movf	_preset_id,w
  1772  01C5  158A  276A  118A   	fcall	_print_preset
  1773                           
  1774                           ;main.c: 454:                         } else if ((P_cmd1 == 0x00) && (P_cmd2 == 0x07) &&
      +                           (P_dat1 == 0x00)) {
  1775  01C8  2B02               	goto	l242
  1776  01C9                     l3642:
  1777  01C9  085D               	movf	_P_cmd1,w
  1778  01CA  1D03               	btfss	3,2
  1779  01CB  2A6C               	goto	l283
  1780  01CC  3007               	movlw	7
  1781  01CD  065C               	xorwf	_P_cmd2,w
  1782  01CE  1D03               	btfss	3,2
  1783  01CF  2A6C               	goto	l283
  1784  01D0  085B               	movf	_P_dat1,w
  1785  01D1  1D03               	btfss	3,2
  1786  01D2  2A6C               	goto	l283
  1787                           
  1788                           ;main.c: 455:                             preset_id = P_dat2;
  1789  01D3  085A               	movf	_P_dat2,w
  1790  01D4  00C3               	movwf	??_main
  1791  01D5  0843               	movf	??_main,w
  1792  01D6  00D9               	movwf	_preset_id
  1793                           
  1794                           ;main.c: 457:                             uint16_t pan_tmp = 0;
  1795  01D7  01CA               	clrf	main@pan_tmp_439
  1796  01D8  01CB               	clrf	main@pan_tmp_439+1
  1797                           
  1798                           ;main.c: 458:                             uint16_t tilt_tmp = 0;
  1799  01D9  01CC               	clrf	main@tilt_tmp_440
  1800  01DA  01CD               	clrf	main@tilt_tmp_440+1
  1801                           
  1802                           ;main.c: 459:                             PRESET_load(preset_id, &pan_tmp, &tilt_tmp);
  1803  01DB  304A               	movlw	(low (main@pan_tmp_439| 0))& (0+255)
  1804  01DC  00C3               	movwf	??_main
  1805  01DD  0843               	movf	??_main,w
  1806  01DE  00A2               	movwf	PRESET_load@pan
  1807  01DF  304C               	movlw	(low (main@tilt_tmp_440| 0))& (0+255)
  1808  01E0  00C4               	movwf	??_main+1
  1809  01E1  0844               	movf	??_main+1,w
  1810  01E2  00A3               	movwf	PRESET_load@tilt
  1811  01E3  0859               	movf	_preset_id,w
  1812  01E4  158A  27A9  118A   	fcall	_PRESET_load
  1813                           
  1814                           ;main.c: 460:                             pan_goto = pan_tmp;
  1815  01E7  084B               	movf	main@pan_tmp_439+1,w
  1816  01E8  00D3               	movwf	_pan_goto+1	;volatile
  1817  01E9  084A               	movf	main@pan_tmp_439,w
  1818  01EA  00D2               	movwf	_pan_goto	;volatile
  1819                           
  1820                           ;main.c: 461:                             tilt_goto = tilt_tmp;
  1821  01EB  084D               	movf	main@tilt_tmp_440+1,w
  1822  01EC  00D1               	movwf	_tilt_goto+1	;volatile
  1823  01ED  084C               	movf	main@tilt_tmp_440,w
  1824  01EE  00D0               	movwf	_tilt_goto	;volatile
  1825                           
  1826                           ;main.c: 463:                             preset_pan_enabled = 1;
  1827  01EF  3001               	movlw	1
  1828  01F0  00C3               	movwf	??_main
  1829  01F1  0843               	movf	??_main,w
  1830  01F2  00ED               	movwf	_preset_pan_enabled	;volatile
  1831                           
  1832                           ;main.c: 464:                             preset_pan_enabled_old = 0;
  1833  01F3  01EC               	clrf	_preset_pan_enabled_old	;volatile
  1834                           
  1835                           ;main.c: 466:                             pan_speed = 0x32;
  1836  01F4  3032               	movlw	50
  1837  01F5  00C3               	movwf	??_main
  1838  01F6  0843               	movf	??_main,w
  1839  01F7  00E8               	movwf	_pan_speed	;volatile
  1840                           
  1841                           ;main.c: 467:                             timer1_pan_ref = SPEED_calc(pan_speed);
  1842  01F8  0868               	movf	_pan_speed,w	;volatile
  1843  01F9  158A  26C6  118A   	fcall	_SPEED_calc
  1844  01FC  00C3               	movwf	??_main
  1845  01FD  0843               	movf	??_main,w
  1846  01FE  00E2               	movwf	_timer1_pan_ref	;volatile
  1847                           
  1848                           ;main.c: 468:                             pan_enabled = 1;
  1849  01FF  3001               	movlw	1
  1850  0200  00C3               	movwf	??_main
  1851  0201  0843               	movf	??_main,w
  1852  0202  00EA               	movwf	_pan_enabled	;volatile
  1853                           
  1854                           ;main.c: 470:                             if (pan_goto < 11700) {
  1855  0203  302D               	movlw	45
  1856  0204  0253               	subwf	_pan_goto+1,w	;volatile
  1857  0205  30B4               	movlw	180
  1858  0206  1903               	skipnz
  1859  0207  0252               	subwf	_pan_goto,w	;volatile
  1860  0208  1803               	skipnc
  1861  0209  2A21               	goto	l3680
  1862                           
  1863                           ;main.c: 471:                                 if (pan_goto > pan_counter) {
  1864  020A  0853               	movf	_pan_goto+1,w	;volatile
  1865  020B  0257               	subwf	_pan_counter+1,w	;volatile
  1866  020C  1D03               	skipz
  1867  020D  2A10               	goto	u3615
  1868  020E  0852               	movf	_pan_goto,w	;volatile
  1869  020F  0256               	subwf	_pan_counter,w	;volatile
  1870  0210                     u3615:
  1871  0210  1803               	skipnc
  1872  0211  2A14               	goto	l3676
  1873                           
  1874                           ;main.c: 472:                                     pan_direction = 0;
  1875  0212  01E9               	clrf	_pan_direction	;volatile
  1876                           
  1877                           ;main.c: 473:                                 } else if (pan_goto < pan_counter) {
  1878  0213  2A23               	goto	l3684
  1879  0214                     l3676:
  1880  0214  0857               	movf	_pan_counter+1,w	;volatile
  1881  0215  0253               	subwf	_pan_goto+1,w	;volatile
  1882  0216  1D03               	skipz
  1883  0217  2A1A               	goto	u3625
  1884  0218  0856               	movf	_pan_counter,w	;volatile
  1885  0219  0252               	subwf	_pan_goto,w	;volatile
  1886  021A                     u3625:
  1887  021A  1803               	skipnc
  1888  021B  2A21               	goto	l3680
  1889                           
  1890                           ;main.c: 474:                                     pan_direction = 1;
  1891  021C  3001               	movlw	1
  1892  021D  00C3               	movwf	??_main
  1893  021E  0843               	movf	??_main,w
  1894  021F  00E9               	movwf	_pan_direction	;volatile
  1895                           
  1896                           ;main.c: 475:                                 } else {
  1897  0220  2A23               	goto	l3684
  1898  0221                     l3680:
  1899                           
  1900                           ;main.c: 476:                                     preset_pan_enabled = 0;
  1901  0221  01ED               	clrf	_preset_pan_enabled	;volatile
  1902                           
  1903                           ;main.c: 477:                                     pan_enabled = 0;
  1904  0222  01EA               	clrf	_pan_enabled	;volatile
  1905  0223                     l3684:
  1906                           
  1907                           ;main.c: 484:                             preset_tilt_enabled = 1;
  1908  0223  3001               	movlw	1
  1909  0224  00C3               	movwf	??_main
  1910  0225  0843               	movf	??_main,w
  1911  0226  00EB               	movwf	_preset_tilt_enabled	;volatile
  1912                           
  1913                           ;main.c: 485:                             preset_tilt_enabled_old = 0;
  1914  0227  1683               	bsf	3,5	;RP0=1, select bank1
  1915  0228  01D4               	clrf	_preset_tilt_enabled_old^(0+128)	;volatile
  1916                           
  1917                           ;main.c: 487:                             tilt_speed = 0x32;
  1918  0229  3032               	movlw	50
  1919  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1920  022B  00C3               	movwf	??_main
  1921  022C  0843               	movf	??_main,w
  1922  022D  00E5               	movwf	_tilt_speed	;volatile
  1923                           
  1924                           ;main.c: 488:                             timer1_tilt_ref = SPEED_calc(tilt_speed);
  1925  022E  0865               	movf	_tilt_speed,w	;volatile
  1926  022F  158A  26C6  118A   	fcall	_SPEED_calc
  1927  0232  00C3               	movwf	??_main
  1928  0233  0843               	movf	??_main,w
  1929  0234  00E1               	movwf	_timer1_tilt_ref	;volatile
  1930                           
  1931                           ;main.c: 489:                             tilt_enabled = 1;
  1932  0235  3001               	movlw	1
  1933  0236  00C3               	movwf	??_main
  1934  0237  0843               	movf	??_main,w
  1935  0238  00E7               	movwf	_tilt_enabled	;volatile
  1936                           
  1937                           ;main.c: 491:                             if (tilt_goto < 2300) {
  1938  0239  3008               	movlw	8
  1939  023A  0251               	subwf	_tilt_goto+1,w	;volatile
  1940  023B  30FC               	movlw	252
  1941  023C  1903               	skipnz
  1942  023D  0250               	subwf	_tilt_goto,w	;volatile
  1943  023E  1803               	skipnc
  1944  023F  2A57               	goto	l3702
  1945                           
  1946                           ;main.c: 492:                                 if (tilt_goto > tilt_counter) {
  1947  0240  0851               	movf	_tilt_goto+1,w	;volatile
  1948  0241  0255               	subwf	_tilt_counter+1,w	;volatile
  1949  0242  1D03               	skipz
  1950  0243  2A46               	goto	u3645
  1951  0244  0850               	movf	_tilt_goto,w	;volatile
  1952  0245  0254               	subwf	_tilt_counter,w	;volatile
  1953  0246                     u3645:
  1954  0246  1803               	skipnc
  1955  0247  2A4A               	goto	l3698
  1956                           
  1957                           ;main.c: 493:                                     tilt_direction = 0;
  1958  0248  01E6               	clrf	_tilt_direction	;volatile
  1959                           
  1960                           ;main.c: 494:                                 } else if (tilt_goto < tilt_counter) {
  1961  0249  2A59               	goto	l3706
  1962  024A                     l3698:
  1963  024A  0855               	movf	_tilt_counter+1,w	;volatile
  1964  024B  0251               	subwf	_tilt_goto+1,w	;volatile
  1965  024C  1D03               	skipz
  1966  024D  2A50               	goto	u3655
  1967  024E  0854               	movf	_tilt_counter,w	;volatile
  1968  024F  0250               	subwf	_tilt_goto,w	;volatile
  1969  0250                     u3655:
  1970  0250  1803               	skipnc
  1971  0251  2A57               	goto	l3702
  1972                           
  1973                           ;main.c: 495:                                     tilt_direction = 1;
  1974  0252  3001               	movlw	1
  1975  0253  00C3               	movwf	??_main
  1976  0254  0843               	movf	??_main,w
  1977  0255  00E6               	movwf	_tilt_direction	;volatile
  1978                           
  1979                           ;main.c: 496:                                 } else {
  1980  0256  2A59               	goto	l3706
  1981  0257                     l3702:
  1982                           
  1983                           ;main.c: 497:                                     preset_tilt_enabled = 0;
  1984  0257  01EB               	clrf	_preset_tilt_enabled	;volatile
  1985                           
  1986                           ;main.c: 498:                                     tilt_enabled = 0;
  1987  0258  01E7               	clrf	_tilt_enabled	;volatile
  1988  0259                     l3706:
  1989                           
  1990                           ;main.c: 505:                             response_type = 0x01;
  1991  0259  01DF               	clrf	_response_type
  1992  025A  0ADF               	incf	_response_type,f
  1993                           
  1994                           ;main.c: 507:                             print_preset(preset_id, pan_goto, tilt_goto, "
      +                          GOTO PRESET ");
  1995  025B  0853               	movf	_pan_goto+1,w	;volatile
  1996  025C  00BA               	movwf	print_preset@pan+1
  1997  025D  0852               	movf	_pan_goto,w	;volatile
  1998  025E  00B9               	movwf	print_preset@pan
  1999  025F  0851               	movf	_tilt_goto+1,w	;volatile
  2000  0260  00BC               	movwf	print_preset@tilt+1
  2001  0261  0850               	movf	_tilt_goto,w	;volatile
  2002  0262  00BB               	movwf	print_preset@tilt
  2003  0263  3071               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  2004  0264  00C3               	movwf	??_main
  2005  0265  0843               	movf	??_main,w
  2006  0266  00BD               	movwf	print_preset@text
  2007  0267  0859               	movf	_preset_id,w
  2008  0268  158A  276A  118A   	fcall	_print_preset
  2009                           
  2010                           ;main.c: 508:                         } else {
  2011  026B  2B02               	goto	l242
  2012  026C                     l283:
  2013                           
  2014                           ;main.c: 509:                             if ((P_cmd2 & 0x04) == 0x04) {
  2015  026C  1D5C               	btfss	_P_cmd2,2
  2016  026D  2A8D               	goto	l297
  2017                           
  2018                           ;main.c: 510:                                 pan_speed = P_dat1;
  2019  026E  085B               	movf	_P_dat1,w
  2020  026F  00C3               	movwf	??_main
  2021  0270  0843               	movf	??_main,w
  2022  0271  00E8               	movwf	_pan_speed	;volatile
  2023                           
  2024                           ;main.c: 511:                                 timer1_pan_ref = SPEED_calc(pan_speed);
  2025  0272  0868               	movf	_pan_speed,w	;volatile
  2026  0273  158A  26C6  118A   	fcall	_SPEED_calc
  2027  0276  00C3               	movwf	??_main
  2028  0277  0843               	movf	??_main,w
  2029  0278  00E2               	movwf	_timer1_pan_ref	;volatile
  2030                           
  2031                           ;main.c: 512:                                 pan_direction = 0;
  2032  0279  01E9               	clrf	_pan_direction	;volatile
  2033                           
  2034                           ;main.c: 513:                                 pan_enabled = 1;
  2035  027A  3001               	movlw	1
  2036  027B  00C3               	movwf	??_main
  2037  027C  0843               	movf	??_main,w
  2038  027D  00EA               	movwf	_pan_enabled	;volatile
  2039                           
  2040                           ;main.c: 515:                                 preset_pan_enabled = 0;
  2041  027E  01ED               	clrf	_preset_pan_enabled	;volatile
  2042                           
  2043                           ;main.c: 516:                                 preset_tilt_enabled = 0;
  2044  027F  01EB               	clrf	_preset_tilt_enabled	;volatile
  2045                           
  2046                           ;main.c: 518:                                 response_type = 0x01;
  2047  0280  01DF               	clrf	_response_type
  2048  0281  0ADF               	incf	_response_type,f
  2049                           
  2050                           ;main.c: 519:                                 is_reboot = 0;
  2051  0282  01D8               	clrf	_is_reboot
  2052                           
  2053                           ;main.c: 521:                                 print_cmd_mov("LEFT", pan_counter, tilt_co
      +                          unter);
  2054  0283  0857               	movf	_pan_counter+1,w	;volatile
  2055  0284  00BA               	movwf	print_cmd_mov@pan+1
  2056  0285  0856               	movf	_pan_counter,w	;volatile
  2057  0286  00B9               	movwf	print_cmd_mov@pan
  2058  0287  0855               	movf	_tilt_counter+1,w	;volatile
  2059  0288  00BC               	movwf	print_cmd_mov@tilt+1
  2060  0289  0854               	movf	_tilt_counter,w	;volatile
  2061  028A  00BB               	movwf	print_cmd_mov@tilt
  2062  028B  30E1               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  2063  028C  2AB0               	goto	L7
  2064  028D                     l297:	
  2065                           ;main.c: 522:                             } else if ((P_cmd2 & 0x02) == 0x02) {
  2066                           
  2067  028D  1CDC               	btfss	_P_cmd2,1
  2068  028E  2AB3               	goto	l3746
  2069                           
  2070                           ;main.c: 523:                                 pan_speed = P_dat1;
  2071  028F  085B               	movf	_P_dat1,w
  2072  0290  00C3               	movwf	??_main
  2073  0291  0843               	movf	??_main,w
  2074  0292  00E8               	movwf	_pan_speed	;volatile
  2075                           
  2076                           ;main.c: 524:                                 timer1_pan_ref = SPEED_calc(pan_speed);
  2077  0293  0868               	movf	_pan_speed,w	;volatile
  2078  0294  158A  26C6  118A   	fcall	_SPEED_calc
  2079  0297  00C3               	movwf	??_main
  2080  0298  0843               	movf	??_main,w
  2081  0299  00E2               	movwf	_timer1_pan_ref	;volatile
  2082                           
  2083                           ;main.c: 525:                                 pan_direction = 1;
  2084  029A  3001               	movlw	1
  2085  029B  00C3               	movwf	??_main
  2086  029C  0843               	movf	??_main,w
  2087  029D  00E9               	movwf	_pan_direction	;volatile
  2088                           
  2089                           ;main.c: 526:                                 pan_enabled = 1;
  2090  029E  3001               	movlw	1
  2091  029F  00C3               	movwf	??_main
  2092  02A0  0843               	movf	??_main,w
  2093  02A1  00EA               	movwf	_pan_enabled	;volatile
  2094                           
  2095                           ;main.c: 528:                                 preset_pan_enabled = 0;
  2096  02A2  01ED               	clrf	_preset_pan_enabled	;volatile
  2097                           
  2098                           ;main.c: 529:                                 preset_tilt_enabled = 0;
  2099  02A3  01EB               	clrf	_preset_tilt_enabled	;volatile
  2100                           
  2101                           ;main.c: 531:                                 response_type = 0x01;
  2102  02A4  01DF               	clrf	_response_type
  2103  02A5  0ADF               	incf	_response_type,f
  2104                           
  2105                           ;main.c: 532:                                 is_reboot = 0;
  2106  02A6  01D8               	clrf	_is_reboot
  2107                           
  2108                           ;main.c: 534:                                 print_cmd_mov("RIGHT", pan_counter, tilt_c
      +                          ounter);
  2109  02A7  0857               	movf	_pan_counter+1,w	;volatile
  2110  02A8  00BA               	movwf	print_cmd_mov@pan+1
  2111  02A9  0856               	movf	_pan_counter,w	;volatile
  2112  02AA  00B9               	movwf	print_cmd_mov@pan
  2113  02AB  0855               	movf	_tilt_counter+1,w	;volatile
  2114  02AC  00BC               	movwf	print_cmd_mov@tilt+1
  2115  02AD  0854               	movf	_tilt_counter,w	;volatile
  2116  02AE  00BB               	movwf	print_cmd_mov@tilt
  2117  02AF  30C7               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  2118  02B0                     L7:
  2119  02B0  158A  25F1  118A   	fcall	_print_cmd_mov
  2120  02B3                     l3746:
  2121                           
  2122                           ;main.c: 537:                             if ((P_cmd2 & 0x10) == 0x10) {
  2123  02B3  1E5C               	btfss	_P_cmd2,4
  2124  02B4  2AD7               	goto	l300
  2125                           
  2126                           ;main.c: 538:                                 tilt_speed = P_dat2;
  2127  02B5  085A               	movf	_P_dat2,w
  2128  02B6  00C3               	movwf	??_main
  2129  02B7  0843               	movf	??_main,w
  2130  02B8  00E5               	movwf	_tilt_speed	;volatile
  2131                           
  2132                           ;main.c: 539:                                 timer1_tilt_ref = SPEED_calc(tilt_speed);
  2133  02B9  0865               	movf	_tilt_speed,w	;volatile
  2134  02BA  158A  26C6  118A   	fcall	_SPEED_calc
  2135  02BD  00C3               	movwf	??_main
  2136  02BE  0843               	movf	??_main,w
  2137  02BF  00E1               	movwf	_timer1_tilt_ref	;volatile
  2138                           
  2139                           ;main.c: 540:                                 tilt_direction = 0;
  2140  02C0  01E6               	clrf	_tilt_direction	;volatile
  2141                           
  2142                           ;main.c: 541:                                 tilt_enabled = 1;
  2143  02C1  3001               	movlw	1
  2144  02C2  00C3               	movwf	??_main
  2145  02C3  0843               	movf	??_main,w
  2146  02C4  00E7               	movwf	_tilt_enabled	;volatile
  2147                           
  2148                           ;main.c: 543:                                 preset_pan_enabled = 0;
  2149  02C5  01ED               	clrf	_preset_pan_enabled	;volatile
  2150                           
  2151                           ;main.c: 544:                                 preset_tilt_enabled = 0;
  2152  02C6  01EB               	clrf	_preset_tilt_enabled	;volatile
  2153                           
  2154                           ;main.c: 546:                                 response_type = 0x01;
  2155  02C7  01DF               	clrf	_response_type
  2156  02C8  0ADF               	incf	_response_type,f
  2157                           
  2158                           ;main.c: 547:                                 is_reboot = 0;
  2159  02C9  01D8               	clrf	_is_reboot
  2160                           
  2161                           ;main.c: 549:                                 print_cmd_mov("DOWN", pan_counter, tilt_co
      +                          unter);
  2162  02CA  0857               	movf	_pan_counter+1,w	;volatile
  2163  02CB  00BA               	movwf	print_cmd_mov@pan+1
  2164  02CC  0856               	movf	_pan_counter,w	;volatile
  2165  02CD  00B9               	movwf	print_cmd_mov@pan
  2166  02CE  0855               	movf	_tilt_counter+1,w	;volatile
  2167  02CF  00BC               	movwf	print_cmd_mov@tilt+1
  2168  02D0  0854               	movf	_tilt_counter,w	;volatile
  2169  02D1  00BB               	movwf	print_cmd_mov@tilt
  2170  02D2  30DC               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  2171  02D3  158A  25F1  118A   	fcall	_print_cmd_mov
  2172                           
  2173                           ;main.c: 550:                             } else if ((P_cmd2 & 0x08) == 0x08) {
  2174  02D6  2B02               	goto	l242
  2175  02D7                     l300:
  2176  02D7  1DDC               	btfss	_P_cmd2,3
  2177  02D8  2B02               	goto	l242
  2178                           
  2179                           ;main.c: 551:                                 tilt_speed = P_dat2;
  2180  02D9  085A               	movf	_P_dat2,w
  2181  02DA  00C3               	movwf	??_main
  2182  02DB  0843               	movf	??_main,w
  2183  02DC  00E5               	movwf	_tilt_speed	;volatile
  2184                           
  2185                           ;main.c: 552:                                 timer1_tilt_ref = SPEED_calc(tilt_speed);
  2186  02DD  0865               	movf	_tilt_speed,w	;volatile
  2187  02DE  158A  26C6  118A   	fcall	_SPEED_calc
  2188  02E1  00C3               	movwf	??_main
  2189  02E2  0843               	movf	??_main,w
  2190  02E3  00E1               	movwf	_timer1_tilt_ref	;volatile
  2191                           
  2192                           ;main.c: 553:                                 tilt_direction = 1;
  2193  02E4  3001               	movlw	1
  2194  02E5  00C3               	movwf	??_main
  2195  02E6  0843               	movf	??_main,w
  2196  02E7  00E6               	movwf	_tilt_direction	;volatile
  2197                           
  2198                           ;main.c: 554:                                 tilt_enabled = 1;
  2199  02E8  3001               	movlw	1
  2200  02E9  00C3               	movwf	??_main
  2201  02EA  0843               	movf	??_main,w
  2202  02EB  00E7               	movwf	_tilt_enabled	;volatile
  2203                           
  2204                           ;main.c: 556:                                 preset_pan_enabled = 0;
  2205  02EC  01ED               	clrf	_preset_pan_enabled	;volatile
  2206                           
  2207                           ;main.c: 557:                                 preset_tilt_enabled = 0;
  2208  02ED  01EB               	clrf	_preset_tilt_enabled	;volatile
  2209                           
  2210                           ;main.c: 559:                                 response_type = 0x01;
  2211  02EE  01DF               	clrf	_response_type
  2212  02EF  0ADF               	incf	_response_type,f
  2213                           
  2214                           ;main.c: 560:                                 is_reboot = 0;
  2215  02F0  01D8               	clrf	_is_reboot
  2216                           
  2217                           ;main.c: 562:                                 print_cmd_mov("UP", pan_counter, tilt_coun
      +                          ter);
  2218  02F1  0857               	movf	_pan_counter+1,w	;volatile
  2219  02F2  00BA               	movwf	print_cmd_mov@pan+1
  2220  02F3  0856               	movf	_pan_counter,w	;volatile
  2221  02F4  00B9               	movwf	print_cmd_mov@pan
  2222  02F5  0855               	movf	_tilt_counter+1,w	;volatile
  2223  02F6  00BC               	movwf	print_cmd_mov@tilt+1
  2224  02F7  0854               	movf	_tilt_counter,w	;volatile
  2225  02F8  00BB               	movwf	print_cmd_mov@tilt
  2226  02F9  30E9               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  2227  02FA  158A  25F1  118A   	fcall	_print_cmd_mov
  2228  02FD  2B02               	goto	l242
  2229  02FE                     l3788:
  2230                           
  2231                           ;main.c: 574:                 frame_index++;
  2232  02FE  3001               	movlw	1
  2233  02FF  00C3               	movwf	??_main
  2234  0300  0843               	movf	??_main,w
  2235  0301  07E0               	addwf	_frame_index,f
  2236  0302                     l242:	
  2237                           ;main.c: 341:     while (1) {
  2238                           
  2239                           ;main.c: 575:             } else {
  2240                           
  2241  0302  0064               	clrwdt	;# 
  2242                           
  2243                           ;main.c: 344:         if (buffer_ready[frame_index] == 1) {
  2244  0303  1283               	bcf	3,5	;RP0=0, select bank0
  2245  0304  1303               	bcf	3,6	;RP1=0, select bank0
  2246  0305  0860               	movf	_frame_index,w
  2247  0306  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  2248  0307  0084               	movwf	4
  2249  0308  1383               	bcf	3,7	;select IRP bank1
  2250  0309  0300               	decf	0,w
  2251  030A  1903               	btfsc	3,2
  2252  030B  284E               	goto	l3488
  2253                           
  2254                           ;main.c: 573:             if (frame_index < 4) {
  2255  030C  3004               	movlw	4
  2256  030D  0260               	subwf	_frame_index,w
  2257  030E  1C03               	btfss	3,0
  2258  030F  2AFE               	goto	l3788
  2259                           
  2260                           ;main.c: 577:                 frame_index = 0;
  2261  0310  01E0               	clrf	_frame_index
  2262  0311  2B02               	goto	l242
  2263  0312                     __end_of_main:
  2264                           
  2265                           	psect	text1
  2266  0F6A                     __ptext1:	
  2267 ;; *************** function _print_preset *****************
  2268 ;; Defined at:
  2269 ;;		line 974 in file "main.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;  id              1    wreg     unsigned char 
  2272 ;;  pan             2   25[BANK0 ] unsigned int 
  2273 ;;  tilt            2   27[BANK0 ] unsigned int 
  2274 ;;  text            1   29[BANK0 ] PTR unsigned char 
  2275 ;;		 -> STR_19(13), STR_18(14), STR_17(12), 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  id              1   33[BANK0 ] unsigned char 
  2278 ;;  preset_id_10    1   34[BANK0 ] unsigned char 
  2279 ;;  preset_id_1     1   32[BANK0 ] unsigned char 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 300/0
  2286 ;;		On exit  : 300/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2289 ;;      Params:         0       5       0       0
  2290 ;;      Locals:         0       3       0       0
  2291 ;;      Temps:          0       2       0       0
  2292 ;;      Totals:         0      10       0       0
  2293 ;;Total ram usage:       10 bytes
  2294 ;; Hardware stack levels used: 1
  2295 ;; Hardware stack levels required when called: 5
  2296 ;; This function calls:
  2297 ;;		_UART_Write
  2298 ;;		_UART_Write_Text
  2299 ;;		_UART_Write_Text_CRLF
  2300 ;;		___bmul
  2301 ;;		___lbdiv
  2302 ;;		_print_cnt
  2303 ;; This function is called by:
  2304 ;;		_main
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308  0F6A                     _print_preset:	
  2309                           ;psect for function _print_preset
  2310                           
  2311                           
  2312                           ;incstack = 0
  2313                           ; Regs used in _print_preset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2314                           ;print_preset@id stored from wreg
  2315  0F6A  00C1               	movwf	print_preset@id
  2316                           
  2317                           ;main.c: 975:     uint8_t preset_id_10 = id / 10;
  2318  0F6B  300A               	movlw	10
  2319  0F6C  00BE               	movwf	??_print_preset
  2320  0F6D  083E               	movf	??_print_preset,w
  2321  0F6E  00A0               	movwf	___lbdiv@divisor
  2322  0F6F  0841               	movf	print_preset@id,w
  2323  0F70  158A  2681  158A   	fcall	___lbdiv
  2324  0F73  00BF               	movwf	??_print_preset+1
  2325  0F74  083F               	movf	??_print_preset+1,w
  2326  0F75  00C2               	movwf	print_preset@preset_id_10
  2327                           
  2328                           ;main.c: 976:     uint8_t preset_id_1 = id - (preset_id_10 * 10);
  2329  0F76  30F6               	movlw	246
  2330  0F77  00BE               	movwf	??_print_preset
  2331  0F78  083E               	movf	??_print_preset,w
  2332  0F79  00A0               	movwf	___bmul@multiplicand
  2333  0F7A  0842               	movf	print_preset@preset_id_10,w
  2334  0F7B  158A  25A0  158A   	fcall	___bmul
  2335  0F7E  0741               	addwf	print_preset@id,w
  2336  0F7F  00BF               	movwf	??_print_preset+1
  2337  0F80  083F               	movf	??_print_preset+1,w
  2338  0F81  00C0               	movwf	print_preset@preset_id_1
  2339                           
  2340                           ;main.c: 978:     preset_id_10 += 48;
  2341  0F82  3030               	movlw	48
  2342  0F83  00BE               	movwf	??_print_preset
  2343  0F84  083E               	movf	??_print_preset,w
  2344  0F85  07C2               	addwf	print_preset@preset_id_10,f
  2345                           
  2346                           ;main.c: 979:     preset_id_1 += 48;
  2347  0F86  3030               	movlw	48
  2348  0F87  00BE               	movwf	??_print_preset
  2349  0F88  083E               	movf	??_print_preset,w
  2350  0F89  07C0               	addwf	print_preset@preset_id_1,f
  2351                           
  2352                           ;main.c: 981:     UART_Write_Text(text);
  2353  0F8A  083D               	movf	print_preset@text,w
  2354  0F8B  158A  2622  158A   	fcall	_UART_Write_Text
  2355                           
  2356                           ;main.c: 982:     UART_Write(preset_id_10);
  2357  0F8E  0842               	movf	print_preset@preset_id_10,w
  2358  0F8F  158A  26FA  158A   	fcall	_UART_Write
  2359                           
  2360                           ;main.c: 983:     UART_Write(preset_id_1);
  2361  0F92  0840               	movf	print_preset@preset_id_1,w
  2362  0F93  158A  26FA  158A   	fcall	_UART_Write
  2363                           
  2364                           ;main.c: 984:     UART_Write_Text(" (");
  2365  0F96  30AA               	movlw	(low (((STR_15+4)-__stringbase)| (0+32768)))& (0+255)
  2366  0F97  158A  2622  158A   	fcall	_UART_Write_Text
  2367                           
  2368                           ;main.c: 985:     print_cnt(pan, tilt);
  2369  0F9A  083A               	movf	print_preset@pan+1,w
  2370  0F9B  00B6               	movwf	print_cnt@_pan+1
  2371  0F9C  0839               	movf	print_preset@pan,w
  2372  0F9D  00B5               	movwf	print_cnt@_pan
  2373  0F9E  083C               	movf	print_preset@tilt+1,w
  2374  0F9F  00B8               	movwf	print_cnt@_tilt+1
  2375  0FA0  083B               	movf	print_preset@tilt,w
  2376  0FA1  00B7               	movwf	print_cnt@_tilt
  2377  0FA2  158A  25B1  158A   	fcall	_print_cnt
  2378                           
  2379                           ;main.c: 986:     UART_Write_Text_CRLF(")");
  2380  0FA5  30EC               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2381  0FA6  158A  26A2         	fcall	_UART_Write_Text_CRLF
  2382  0FA8  0008               	return
  2383  0FA9                     __end_of_print_preset:
  2384                           
  2385                           	psect	text2
  2386  0E81                     __ptext2:	
  2387 ;; *************** function ___lbdiv *****************
  2388 ;; Defined at:
  2389 ;;		line 4 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/lbdiv.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  dividend        1    wreg     unsigned char 
  2392 ;;  divisor         1    0[BANK0 ] unsigned char 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  dividend        1    2[BANK0 ] unsigned char 
  2395 ;;  quotient        1    4[BANK0 ] unsigned char 
  2396 ;;  counter         1    3[BANK0 ] unsigned char 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      unsigned char 
  2399 ;; Registers used:
  2400 ;;		wreg, status,2, status,0
  2401 ;; Tracked objects:
  2402 ;;		On entry : 300/0
  2403 ;;		On exit  : 300/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2406 ;;      Params:         0       1       0       0
  2407 ;;      Locals:         0       3       0       0
  2408 ;;      Temps:          0       1       0       0
  2409 ;;      Totals:         0       5       0       0
  2410 ;;Total ram usage:        5 bytes
  2411 ;; Hardware stack levels used: 1
  2412 ;; Hardware stack levels required when called: 2
  2413 ;; This function calls:
  2414 ;;		Nothing
  2415 ;; This function is called by:
  2416 ;;		_print_preset
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420  0E81                     ___lbdiv:	
  2421                           ;psect for function ___lbdiv
  2422                           
  2423                           
  2424                           ;incstack = 0
  2425                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2426                           ;___lbdiv@dividend stored from wreg
  2427  0E81  00A2               	movwf	___lbdiv@dividend
  2428  0E82  01A4               	clrf	___lbdiv@quotient
  2429  0E83  0820               	movf	___lbdiv@divisor,w
  2430  0E84  1903               	btfsc	3,2
  2431  0E85  2EA0               	goto	l3298
  2432  0E86  01A3               	clrf	___lbdiv@counter
  2433  0E87  0AA3               	incf	___lbdiv@counter,f
  2434  0E88                     l3286:
  2435  0E88  1BA0               	btfsc	___lbdiv@divisor,7
  2436  0E89  2E91               	goto	l3288
  2437  0E8A  1003               	clrc
  2438  0E8B  0DA0               	rlf	___lbdiv@divisor,f
  2439  0E8C  3001               	movlw	1
  2440  0E8D  00A1               	movwf	??___lbdiv
  2441  0E8E  0821               	movf	??___lbdiv,w
  2442  0E8F  07A3               	addwf	___lbdiv@counter,f
  2443  0E90  2E88               	goto	l3286
  2444  0E91                     l3288:
  2445  0E91  1003               	clrc
  2446  0E92  0DA4               	rlf	___lbdiv@quotient,f
  2447  0E93  0820               	movf	___lbdiv@divisor,w
  2448  0E94  0222               	subwf	___lbdiv@dividend,w
  2449  0E95  1C03               	skipc
  2450  0E96  2E9B               	goto	L8
  2451  0E97  0820               	movf	___lbdiv@divisor,w
  2452  0E98  02A2               	subwf	___lbdiv@dividend,f
  2453  0E99  1424               	bsf	___lbdiv@quotient,0
  2454  0E9A  1003               	clrc
  2455  0E9B                     L8:
  2456  0E9B  0CA0               	rrf	___lbdiv@divisor,f
  2457  0E9C  3001               	movlw	1
  2458  0E9D  02A3               	subwf	___lbdiv@counter,f
  2459  0E9E  1D03               	btfss	3,2
  2460  0E9F  2E91               	goto	l3288
  2461  0EA0                     l3298:
  2462  0EA0  0824               	movf	___lbdiv@quotient,w
  2463  0EA1  0008               	return
  2464  0EA2                     __end_of___lbdiv:
  2465                           
  2466                           	psect	text3
  2467  0DA0                     __ptext3:	
  2468 ;; *************** function ___bmul *****************
  2469 ;; Defined at:
  2470 ;;		line 4 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/Umul8.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  multiplier      1    wreg     unsigned char 
  2473 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2476 ;;  product         1    2[BANK0 ] unsigned char 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  1    wreg      unsigned char 
  2479 ;; Registers used:
  2480 ;;		wreg, status,2, status,0
  2481 ;; Tracked objects:
  2482 ;;		On entry : 300/0
  2483 ;;		On exit  : 300/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2486 ;;      Params:         0       1       0       0
  2487 ;;      Locals:         0       2       0       0
  2488 ;;      Temps:          0       1       0       0
  2489 ;;      Totals:         0       4       0       0
  2490 ;;Total ram usage:        4 bytes
  2491 ;; Hardware stack levels used: 1
  2492 ;; Hardware stack levels required when called: 2
  2493 ;; This function calls:
  2494 ;;		Nothing
  2495 ;; This function is called by:
  2496 ;;		_print_preset
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500  0DA0                     ___bmul:	
  2501                           ;psect for function ___bmul
  2502                           
  2503                           
  2504                           ;incstack = 0
  2505                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2506                           ;___bmul@multiplier stored from wreg
  2507  0DA0  00A3               	movwf	___bmul@multiplier
  2508  0DA1  01A2               	clrf	___bmul@product
  2509  0DA2                     l3220:
  2510  0DA2  1C23               	btfss	___bmul@multiplier,0
  2511  0DA3  2DA8               	goto	l3224
  2512  0DA4  0820               	movf	___bmul@multiplicand,w
  2513  0DA5  00A1               	movwf	??___bmul
  2514  0DA6  0821               	movf	??___bmul,w
  2515  0DA7  07A2               	addwf	___bmul@product,f
  2516  0DA8                     l3224:
  2517  0DA8  1003               	clrc
  2518  0DA9  0DA0               	rlf	___bmul@multiplicand,f
  2519  0DAA  1003               	clrc
  2520  0DAB  0CA3               	rrf	___bmul@multiplier,f
  2521  0DAC  0823               	movf	___bmul@multiplier,w
  2522  0DAD  1D03               	btfss	3,2
  2523  0DAE  2DA2               	goto	l3220
  2524  0DAF  0822               	movf	___bmul@product,w
  2525  0DB0  0008               	return
  2526  0DB1                     __end_of___bmul:
  2527                           
  2528                           	psect	text4
  2529  0DF1                     __ptext4:	
  2530 ;; *************** function _print_cmd_mov *****************
  2531 ;; Defined at:
  2532 ;;		line 989 in file "main.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;  text            1    wreg     PTR unsigned char 
  2535 ;;		 -> STR_23(3), STR_22(5), STR_21(6), STR_20(5), 
  2536 ;;  pan             2   25[BANK0 ] unsigned int 
  2537 ;;  tilt            2   27[BANK0 ] unsigned int 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;  text            1   29[BANK0 ] PTR unsigned char 
  2540 ;;		 -> STR_23(3), STR_22(5), STR_21(6), STR_20(5), 
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      void 
  2543 ;; Registers used:
  2544 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : 300/0
  2547 ;;		On exit  : 300/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2550 ;;      Params:         0       4       0       0
  2551 ;;      Locals:         0       1       0       0
  2552 ;;      Temps:          0       0       0       0
  2553 ;;      Totals:         0       5       0       0
  2554 ;;Total ram usage:        5 bytes
  2555 ;; Hardware stack levels used: 1
  2556 ;; Hardware stack levels required when called: 5
  2557 ;; This function calls:
  2558 ;;		_UART_Write_Text
  2559 ;;		_UART_Write_Text_CRLF
  2560 ;;		_print_cnt
  2561 ;; This function is called by:
  2562 ;;		_main
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566  0DF1                     _print_cmd_mov:	
  2567                           ;psect for function _print_cmd_mov
  2568                           
  2569                           
  2570                           ;incstack = 0
  2571                           ; Regs used in _print_cmd_mov: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2572                           ;print_cmd_mov@text stored from wreg
  2573  0DF1  00BD               	movwf	print_cmd_mov@text
  2574                           
  2575                           ;main.c: 990:     UART_Write_Text(text);
  2576  0DF2  083D               	movf	print_cmd_mov@text,w
  2577  0DF3  158A  2622  158A   	fcall	_UART_Write_Text
  2578                           
  2579                           ;main.c: 991:     UART_Write_Text(" (");
  2580  0DF6  30AA               	movlw	(low (((STR_15+4)-__stringbase)| (0+32768)))& (0+255)
  2581  0DF7  158A  2622  158A   	fcall	_UART_Write_Text
  2582                           
  2583                           ;main.c: 992:     print_cnt(pan, tilt);
  2584  0DFA  083A               	movf	print_cmd_mov@pan+1,w
  2585  0DFB  00B6               	movwf	print_cnt@_pan+1
  2586  0DFC  0839               	movf	print_cmd_mov@pan,w
  2587  0DFD  00B5               	movwf	print_cnt@_pan
  2588  0DFE  083C               	movf	print_cmd_mov@tilt+1,w
  2589  0DFF  00B8               	movwf	print_cnt@_tilt+1
  2590  0E00  083B               	movf	print_cmd_mov@tilt,w
  2591  0E01  00B7               	movwf	print_cnt@_tilt
  2592  0E02  158A  25B1  158A   	fcall	_print_cnt
  2593                           
  2594                           ;main.c: 993:     UART_Write_Text_CRLF(")");
  2595  0E05  30EC               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2596  0E06  158A  26A2         	fcall	_UART_Write_Text_CRLF
  2597  0E08  0008               	return
  2598  0E09                     __end_of_print_cmd_mov:
  2599                           
  2600                           	psect	text5
  2601  0DB1                     __ptext5:	
  2602 ;; *************** function _print_cnt *****************
  2603 ;; Defined at:
  2604 ;;		line 921 in file "main.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;  _pan            2   21[BANK0 ] unsigned int 
  2607 ;;  _tilt           2   23[BANK0 ] unsigned int 
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 300/0
  2616 ;;		On exit  : 300/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2619 ;;      Params:         0       4       0       0
  2620 ;;      Locals:         0       0       0       0
  2621 ;;      Temps:          0       0       0       0
  2622 ;;      Totals:         0       4       0       0
  2623 ;;Total ram usage:        4 bytes
  2624 ;; Hardware stack levels used: 1
  2625 ;; Hardware stack levels required when called: 4
  2626 ;; This function calls:
  2627 ;;		_UART_Write_Text
  2628 ;;		_print_val
  2629 ;; This function is called by:
  2630 ;;		_main
  2631 ;;		_print_preset
  2632 ;;		_print_cmd_mov
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636  0DB1                     _print_cnt:	
  2637                           ;psect for function _print_cnt
  2638                           
  2639                           
  2640                           ;main.c: 922:     print_val(_pan);
  2641                           
  2642                           ;incstack = 0
  2643                           ; Regs used in _print_cnt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2644  0DB1  0836               	movf	print_cnt@_pan+1,w
  2645  0DB2  00AA               	movwf	print_val@value+1
  2646  0DB3  0835               	movf	print_cnt@_pan,w
  2647  0DB4  00A9               	movwf	print_val@value
  2648  0DB5  118A  25F3  158A   	fcall	_print_val
  2649                           
  2650                           ;main.c: 924:     UART_Write_Text(", ");
  2651  0DB8  30E6               	movlw	(low ((STR_24-__stringbase)| (0+32768)))& (0+255)
  2652  0DB9  158A  2622  158A   	fcall	_UART_Write_Text
  2653                           
  2654                           ;main.c: 926:     print_val(_tilt);
  2655  0DBC  0838               	movf	print_cnt@_tilt+1,w
  2656  0DBD  00AA               	movwf	print_val@value+1
  2657  0DBE  0837               	movf	print_cnt@_tilt,w
  2658  0DBF  00A9               	movwf	print_val@value
  2659  0DC0  118A  25F3         	fcall	_print_val
  2660  0DC2  0008               	return
  2661  0DC3                     __end_of_print_cnt:
  2662                           
  2663                           	psect	text6
  2664  05F3                     __ptext6:	
  2665 ;; *************** function _print_val *****************
  2666 ;; Defined at:
  2667 ;;		line 929 in file "main.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;  value           2    9[BANK0 ] unsigned int 
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  val10000        2   19[BANK0 ] unsigned int 
  2672 ;;  val1000         2   17[BANK0 ] unsigned int 
  2673 ;;  val100          2   15[BANK0 ] unsigned int 
  2674 ;;  val10           2   13[BANK0 ] unsigned int 
  2675 ;;  val1            2   11[BANK0 ] unsigned int 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      void 
  2678 ;; Registers used:
  2679 ;;		wreg, status,2, status,0, pclath, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 300/0
  2682 ;;		On exit  : 300/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2685 ;;      Params:         0       2       0       0
  2686 ;;      Locals:         0      10       0       0
  2687 ;;      Temps:          0       0       0       0
  2688 ;;      Totals:         0      12       0       0
  2689 ;;Total ram usage:       12 bytes
  2690 ;; Hardware stack levels used: 1
  2691 ;; Hardware stack levels required when called: 3
  2692 ;; This function calls:
  2693 ;;		_UART_Write
  2694 ;;		___lwdiv
  2695 ;;		___wmul
  2696 ;; This function is called by:
  2697 ;;		_print_cnt
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701  05F3                     _print_val:	
  2702                           ;psect for function _print_val
  2703                           
  2704                           
  2705                           ;main.c: 931:     uint16_t val1000 = 0;
  2706                           
  2707                           ;incstack = 0
  2708                           ; Regs used in _print_val: [wreg+status,2+status,0+pclath+cstack]
  2709  05F3  01B1               	clrf	print_val@val1000
  2710  05F4  01B2               	clrf	print_val@val1000+1
  2711                           
  2712                           ;main.c: 932:     uint16_t val100 = 0;
  2713  05F5  01AF               	clrf	print_val@val100
  2714  05F6  01B0               	clrf	print_val@val100+1
  2715                           
  2716                           ;main.c: 933:     uint16_t val10 = 0;
  2717  05F7  01AD               	clrf	print_val@val10
  2718  05F8  01AE               	clrf	print_val@val10+1
  2719                           
  2720                           ;main.c: 934:     uint16_t val1 = 0;
  2721  05F9  01AB               	clrf	print_val@val1
  2722  05FA  01AC               	clrf	print_val@val1+1
  2723                           
  2724                           ;main.c: 936:     val10000 = value / 10000;
  2725  05FB  3010               	movlw	16
  2726  05FC  00A0               	movwf	___lwdiv@divisor
  2727  05FD  3027               	movlw	39
  2728  05FE  00A1               	movwf	___lwdiv@divisor+1
  2729  05FF  082A               	movf	print_val@value+1,w
  2730  0600  00A3               	movwf	___lwdiv@dividend+1
  2731  0601  0829               	movf	print_val@value,w
  2732  0602  00A2               	movwf	___lwdiv@dividend
  2733  0603  158A  272E  118A   	fcall	___lwdiv
  2734  0606  0821               	movf	?___lwdiv+1,w
  2735  0607  00B4               	movwf	print_val@val10000+1
  2736  0608  0820               	movf	?___lwdiv,w
  2737  0609  00B3               	movwf	print_val@val10000
  2738                           
  2739                           ;main.c: 937:     value -= val10000 * 10000;
  2740  060A  0834               	movf	print_val@val10000+1,w
  2741  060B  00A1               	movwf	___wmul@multiplier+1
  2742  060C  0833               	movf	print_val@val10000,w
  2743  060D  00A0               	movwf	___wmul@multiplier
  2744  060E  3010               	movlw	16
  2745  060F  00A2               	movwf	___wmul@multiplicand
  2746  0610  3027               	movlw	39
  2747  0611  00A3               	movwf	___wmul@multiplicand+1
  2748  0612  158A  2660  118A   	fcall	___wmul
  2749  0615  0820               	movf	?___wmul,w
  2750  0616  02A9               	subwf	print_val@value,f
  2751  0617  0821               	movf	?___wmul+1,w
  2752  0618  1C03               	skipc
  2753  0619  03AA               	decf	print_val@value+1,f
  2754  061A  02AA               	subwf	print_val@value+1,f
  2755                           
  2756                           ;main.c: 939:     val1000 = value / 1000;
  2757  061B  30E8               	movlw	232
  2758  061C  00A0               	movwf	___lwdiv@divisor
  2759  061D  3003               	movlw	3
  2760  061E  00A1               	movwf	___lwdiv@divisor+1
  2761  061F  082A               	movf	print_val@value+1,w
  2762  0620  00A3               	movwf	___lwdiv@dividend+1
  2763  0621  0829               	movf	print_val@value,w
  2764  0622  00A2               	movwf	___lwdiv@dividend
  2765  0623  158A  272E  118A   	fcall	___lwdiv
  2766  0626  0821               	movf	?___lwdiv+1,w
  2767  0627  00B2               	movwf	print_val@val1000+1
  2768  0628  0820               	movf	?___lwdiv,w
  2769  0629  00B1               	movwf	print_val@val1000
  2770                           
  2771                           ;main.c: 940:     value -= val1000 * 1000;
  2772  062A  0832               	movf	print_val@val1000+1,w
  2773  062B  00A1               	movwf	___wmul@multiplier+1
  2774  062C  0831               	movf	print_val@val1000,w
  2775  062D  00A0               	movwf	___wmul@multiplier
  2776  062E  30E8               	movlw	232
  2777  062F  00A2               	movwf	___wmul@multiplicand
  2778  0630  3003               	movlw	3
  2779  0631  00A3               	movwf	___wmul@multiplicand+1
  2780  0632  158A  2660  118A   	fcall	___wmul
  2781  0635  0820               	movf	?___wmul,w
  2782  0636  02A9               	subwf	print_val@value,f
  2783  0637  0821               	movf	?___wmul+1,w
  2784  0638  1C03               	skipc
  2785  0639  03AA               	decf	print_val@value+1,f
  2786  063A  02AA               	subwf	print_val@value+1,f
  2787                           
  2788                           ;main.c: 942:     val100 = value / 100;
  2789  063B  3064               	movlw	100
  2790  063C  00A0               	movwf	___lwdiv@divisor
  2791  063D  3000               	movlw	0
  2792  063E  00A1               	movwf	___lwdiv@divisor+1
  2793  063F  082A               	movf	print_val@value+1,w
  2794  0640  00A3               	movwf	___lwdiv@dividend+1
  2795  0641  0829               	movf	print_val@value,w
  2796  0642  00A2               	movwf	___lwdiv@dividend
  2797  0643  158A  272E  118A   	fcall	___lwdiv
  2798  0646  0821               	movf	?___lwdiv+1,w
  2799  0647  00B0               	movwf	print_val@val100+1
  2800  0648  0820               	movf	?___lwdiv,w
  2801  0649  00AF               	movwf	print_val@val100
  2802                           
  2803                           ;main.c: 943:     value -= val100 * 100;
  2804  064A  0830               	movf	print_val@val100+1,w
  2805  064B  00A1               	movwf	___wmul@multiplier+1
  2806  064C  082F               	movf	print_val@val100,w
  2807  064D  00A0               	movwf	___wmul@multiplier
  2808  064E  3064               	movlw	100
  2809  064F  00A2               	movwf	___wmul@multiplicand
  2810  0650  3000               	movlw	0
  2811  0651  00A3               	movwf	___wmul@multiplicand+1
  2812  0652  158A  2660  118A   	fcall	___wmul
  2813  0655  0820               	movf	?___wmul,w
  2814  0656  02A9               	subwf	print_val@value,f
  2815  0657  0821               	movf	?___wmul+1,w
  2816  0658  1C03               	skipc
  2817  0659  03AA               	decf	print_val@value+1,f
  2818  065A  02AA               	subwf	print_val@value+1,f
  2819                           
  2820                           ;main.c: 945:     val10 = value / 10;
  2821  065B  300A               	movlw	10
  2822  065C  00A0               	movwf	___lwdiv@divisor
  2823  065D  3000               	movlw	0
  2824  065E  00A1               	movwf	___lwdiv@divisor+1
  2825  065F  082A               	movf	print_val@value+1,w
  2826  0660  00A3               	movwf	___lwdiv@dividend+1
  2827  0661  0829               	movf	print_val@value,w
  2828  0662  00A2               	movwf	___lwdiv@dividend
  2829  0663  158A  272E  118A   	fcall	___lwdiv
  2830  0666  0821               	movf	?___lwdiv+1,w
  2831  0667  00AE               	movwf	print_val@val10+1
  2832  0668  0820               	movf	?___lwdiv,w
  2833  0669  00AD               	movwf	print_val@val10
  2834                           
  2835                           ;main.c: 946:     value -= val10 * 10;
  2836  066A  082E               	movf	print_val@val10+1,w
  2837  066B  00A1               	movwf	___wmul@multiplier+1
  2838  066C  082D               	movf	print_val@val10,w
  2839  066D  00A0               	movwf	___wmul@multiplier
  2840  066E  300A               	movlw	10
  2841  066F  00A2               	movwf	___wmul@multiplicand
  2842  0670  3000               	movlw	0
  2843  0671  00A3               	movwf	___wmul@multiplicand+1
  2844  0672  158A  2660  118A   	fcall	___wmul
  2845  0675  0820               	movf	?___wmul,w
  2846  0676  02A9               	subwf	print_val@value,f
  2847  0677  0821               	movf	?___wmul+1,w
  2848  0678  1C03               	skipc
  2849  0679  03AA               	decf	print_val@value+1,f
  2850  067A  02AA               	subwf	print_val@value+1,f
  2851                           
  2852                           ;main.c: 948:     val1 = value;
  2853  067B  082A               	movf	print_val@value+1,w
  2854  067C  00AC               	movwf	print_val@val1+1
  2855  067D  0829               	movf	print_val@value,w
  2856  067E  00AB               	movwf	print_val@val1
  2857                           
  2858                           ;main.c: 950:     val10000 += 48;
  2859  067F  3030               	movlw	48
  2860  0680  07B3               	addwf	print_val@val10000,f
  2861  0681  1803               	skipnc
  2862  0682  0AB4               	incf	print_val@val10000+1,f
  2863  0683  3000               	movlw	0
  2864  0684  07B4               	addwf	print_val@val10000+1,f
  2865                           
  2866                           ;main.c: 951:     val1000 += 48;
  2867  0685  3030               	movlw	48
  2868  0686  07B1               	addwf	print_val@val1000,f
  2869  0687  1803               	skipnc
  2870  0688  0AB2               	incf	print_val@val1000+1,f
  2871  0689  3000               	movlw	0
  2872  068A  07B2               	addwf	print_val@val1000+1,f
  2873                           
  2874                           ;main.c: 952:     val100 += 48;
  2875  068B  3030               	movlw	48
  2876  068C  07AF               	addwf	print_val@val100,f
  2877  068D  1803               	skipnc
  2878  068E  0AB0               	incf	print_val@val100+1,f
  2879  068F  3000               	movlw	0
  2880  0690  07B0               	addwf	print_val@val100+1,f
  2881                           
  2882                           ;main.c: 953:     val10 += 48;
  2883  0691  3030               	movlw	48
  2884  0692  07AD               	addwf	print_val@val10,f
  2885  0693  1803               	skipnc
  2886  0694  0AAE               	incf	print_val@val10+1,f
  2887  0695  3000               	movlw	0
  2888  0696  07AE               	addwf	print_val@val10+1,f
  2889                           
  2890                           ;main.c: 954:     val1 += 48;
  2891  0697  3030               	movlw	48
  2892  0698  07AB               	addwf	print_val@val1,f
  2893  0699  1803               	skipnc
  2894  069A  0AAC               	incf	print_val@val1+1,f
  2895  069B  3000               	movlw	0
  2896  069C  07AC               	addwf	print_val@val1+1,f
  2897                           
  2898                           ;main.c: 956:     if (val10000 > 0) {
  2899  069D  0833               	movf	print_val@val10000,w
  2900  069E  0434               	iorwf	print_val@val10000+1,w
  2901  069F  1903               	btfsc	3,2
  2902  06A0  2EA5               	goto	l3164
  2903                           
  2904                           ;main.c: 957:         UART_Write((uint8_t) val10000);
  2905  06A1  0833               	movf	print_val@val10000,w
  2906  06A2  158A  26FA  118A   	fcall	_UART_Write
  2907  06A5                     l3164:
  2908                           
  2909                           ;main.c: 960:     if ((val10000 > 0) || (val1000 > 0)) {
  2910  06A5  0833               	movf	print_val@val10000,w
  2911  06A6  0434               	iorwf	print_val@val10000+1,w
  2912  06A7  1D03               	btfss	3,2
  2913  06A8  2EAD               	goto	l3168
  2914  06A9  0831               	movf	print_val@val1000,w
  2915  06AA  0432               	iorwf	print_val@val1000+1,w
  2916  06AB  1903               	btfsc	3,2
  2917  06AC  2EB1               	goto	l3170
  2918  06AD                     l3168:
  2919                           
  2920                           ;main.c: 961:         UART_Write((uint8_t) val1000);
  2921  06AD  0831               	movf	print_val@val1000,w
  2922  06AE  158A  26FA  118A   	fcall	_UART_Write
  2923  06B1                     l3170:
  2924                           
  2925                           ;main.c: 964:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0)) {
  2926  06B1  0833               	movf	print_val@val10000,w
  2927  06B2  0434               	iorwf	print_val@val10000+1,w
  2928  06B3  1D03               	btfss	3,2
  2929  06B4  2EBD               	goto	l3176
  2930  06B5  0831               	movf	print_val@val1000,w
  2931  06B6  0432               	iorwf	print_val@val1000+1,w
  2932  06B7  1D03               	btfss	3,2
  2933  06B8  2EBD               	goto	l3176
  2934  06B9  082F               	movf	print_val@val100,w
  2935  06BA  0430               	iorwf	print_val@val100+1,w
  2936  06BB  1903               	btfsc	3,2
  2937  06BC  2EC1               	goto	l3178
  2938  06BD                     l3176:
  2939                           
  2940                           ;main.c: 965:         UART_Write((uint8_t) val100);
  2941  06BD  082F               	movf	print_val@val100,w
  2942  06BE  158A  26FA  118A   	fcall	_UART_Write
  2943  06C1                     l3178:
  2944                           
  2945                           ;main.c: 967:     if ((val10000 > 0) || (val1000 > 0) || (val100 > 0) || (val10 > 0)) {
  2946  06C1  0833               	movf	print_val@val10000,w
  2947  06C2  0434               	iorwf	print_val@val10000+1,w
  2948  06C3  1D03               	btfss	3,2
  2949  06C4  2ED1               	goto	l3186
  2950  06C5  0831               	movf	print_val@val1000,w
  2951  06C6  0432               	iorwf	print_val@val1000+1,w
  2952  06C7  1D03               	btfss	3,2
  2953  06C8  2ED1               	goto	l3186
  2954  06C9  082F               	movf	print_val@val100,w
  2955  06CA  0430               	iorwf	print_val@val100+1,w
  2956  06CB  1D03               	btfss	3,2
  2957  06CC  2ED1               	goto	l3186
  2958  06CD  082D               	movf	print_val@val10,w
  2959  06CE  042E               	iorwf	print_val@val10+1,w
  2960  06CF  1903               	btfsc	3,2
  2961  06D0  2ED5               	goto	l363
  2962  06D1                     l3186:
  2963                           
  2964                           ;main.c: 968:         UART_Write((uint8_t) val10);
  2965  06D1  082D               	movf	print_val@val10,w
  2966  06D2  158A  26FA  118A   	fcall	_UART_Write
  2967  06D5                     l363:	
  2968                           ;main.c: 969:     }
  2969                           
  2970                           
  2971                           ;main.c: 971:     UART_Write((uint8_t) val1);
  2972  06D5  082B               	movf	print_val@val1,w
  2973  06D6  158A  26FA         	fcall	_UART_Write
  2974  06D8  0008               	return
  2975  06D9                     __end_of_print_val:
  2976                           
  2977                           	psect	text7
  2978  0E60                     __ptext7:	
  2979 ;; *************** function ___wmul *****************
  2980 ;; Defined at:
  2981 ;;		line 15 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/Umul16.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2984 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;  product         2    4[BANK0 ] unsigned int 
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  2    0[BANK0 ] unsigned int 
  2989 ;; Registers used:
  2990 ;;		wreg, status,2, status,0
  2991 ;; Tracked objects:
  2992 ;;		On entry : 300/0
  2993 ;;		On exit  : 300/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2996 ;;      Params:         0       4       0       0
  2997 ;;      Locals:         0       2       0       0
  2998 ;;      Temps:          0       0       0       0
  2999 ;;      Totals:         0       6       0       0
  3000 ;;Total ram usage:        6 bytes
  3001 ;; Hardware stack levels used: 1
  3002 ;; Hardware stack levels required when called: 2
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		_print_val
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010  0E60                     ___wmul:	
  3011                           ;psect for function ___wmul
  3012                           
  3013                           
  3014                           ;incstack = 0
  3015                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3016  0E60  01A4               	clrf	___wmul@product
  3017  0E61  01A5               	clrf	___wmul@product+1
  3018  0E62                     l3060:
  3019  0E62  1C20               	btfss	___wmul@multiplier,0
  3020  0E63  2E6A               	goto	l548
  3021  0E64  0822               	movf	___wmul@multiplicand,w
  3022  0E65  07A4               	addwf	___wmul@product,f
  3023  0E66  1803               	skipnc
  3024  0E67  0AA5               	incf	___wmul@product+1,f
  3025  0E68  0823               	movf	___wmul@multiplicand+1,w
  3026  0E69  07A5               	addwf	___wmul@product+1,f
  3027  0E6A                     l548:
  3028  0E6A  3001               	movlw	1
  3029  0E6B                     u2745:
  3030  0E6B  1003               	clrc
  3031  0E6C  0DA2               	rlf	___wmul@multiplicand,f
  3032  0E6D  0DA3               	rlf	___wmul@multiplicand+1,f
  3033  0E6E  3EFF               	addlw	-1
  3034  0E6F  1D03               	skipz
  3035  0E70  2E6B               	goto	u2745
  3036  0E71  3001               	movlw	1
  3037  0E72                     u2755:
  3038  0E72  1003               	clrc
  3039  0E73  0CA1               	rrf	___wmul@multiplier+1,f
  3040  0E74  0CA0               	rrf	___wmul@multiplier,f
  3041  0E75  3EFF               	addlw	-1
  3042  0E76  1D03               	skipz
  3043  0E77  2E72               	goto	u2755
  3044  0E78  0820               	movf	___wmul@multiplier,w
  3045  0E79  0421               	iorwf	___wmul@multiplier+1,w
  3046  0E7A  1D03               	btfss	3,2
  3047  0E7B  2E62               	goto	l3060
  3048  0E7C  0825               	movf	___wmul@product+1,w
  3049  0E7D  00A1               	movwf	?___wmul+1
  3050  0E7E  0824               	movf	___wmul@product,w
  3051  0E7F  00A0               	movwf	?___wmul
  3052  0E80  0008               	return
  3053  0E81                     __end_of___wmul:
  3054                           
  3055                           	psect	text8
  3056  0F2E                     __ptext8:	
  3057 ;; *************** function ___lwdiv *****************
  3058 ;; Defined at:
  3059 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/lwdiv.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  divisor         2    0[BANK0 ] unsigned int 
  3062 ;;  dividend        2    2[BANK0 ] unsigned int 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  quotient        2    6[BANK0 ] unsigned int 
  3065 ;;  counter         1    5[BANK0 ] unsigned char 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  2    0[BANK0 ] unsigned int 
  3068 ;; Registers used:
  3069 ;;		wreg, status,2, status,0
  3070 ;; Tracked objects:
  3071 ;;		On entry : 300/0
  3072 ;;		On exit  : 300/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3075 ;;      Params:         0       4       0       0
  3076 ;;      Locals:         0       3       0       0
  3077 ;;      Temps:          0       1       0       0
  3078 ;;      Totals:         0       8       0       0
  3079 ;;Total ram usage:        8 bytes
  3080 ;; Hardware stack levels used: 1
  3081 ;; Hardware stack levels required when called: 2
  3082 ;; This function calls:
  3083 ;;		Nothing
  3084 ;; This function is called by:
  3085 ;;		_print_val
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089  0F2E                     ___lwdiv:	
  3090                           ;psect for function ___lwdiv
  3091                           
  3092                           
  3093                           ;incstack = 0
  3094                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3095  0F2E  01A6               	clrf	___lwdiv@quotient
  3096  0F2F  01A7               	clrf	___lwdiv@quotient+1
  3097  0F30  0820               	movf	___lwdiv@divisor,w
  3098  0F31  0421               	iorwf	___lwdiv@divisor+1,w
  3099  0F32  1903               	btfsc	3,2
  3100  0F33  2F65               	goto	l3094
  3101  0F34  01A5               	clrf	___lwdiv@counter
  3102  0F35  0AA5               	incf	___lwdiv@counter,f
  3103  0F36                     l3082:
  3104  0F36  1BA1               	btfsc	___lwdiv@divisor+1,7
  3105  0F37  2F44               	goto	l3084
  3106  0F38  3001               	movlw	1
  3107  0F39                     u2785:
  3108  0F39  1003               	clrc
  3109  0F3A  0DA0               	rlf	___lwdiv@divisor,f
  3110  0F3B  0DA1               	rlf	___lwdiv@divisor+1,f
  3111  0F3C  3EFF               	addlw	-1
  3112  0F3D  1D03               	skipz
  3113  0F3E  2F39               	goto	u2785
  3114  0F3F  3001               	movlw	1
  3115  0F40  00A4               	movwf	??___lwdiv
  3116  0F41  0824               	movf	??___lwdiv,w
  3117  0F42  07A5               	addwf	___lwdiv@counter,f
  3118  0F43  2F36               	goto	l3082
  3119  0F44                     l3084:
  3120  0F44  3001               	movlw	1
  3121  0F45                     u2805:
  3122  0F45  1003               	clrc
  3123  0F46  0DA6               	rlf	___lwdiv@quotient,f
  3124  0F47  0DA7               	rlf	___lwdiv@quotient+1,f
  3125  0F48  3EFF               	addlw	-1
  3126  0F49  1D03               	skipz
  3127  0F4A  2F45               	goto	u2805
  3128  0F4B  0821               	movf	___lwdiv@divisor+1,w
  3129  0F4C  0223               	subwf	___lwdiv@dividend+1,w
  3130  0F4D  1D03               	skipz
  3131  0F4E  2F51               	goto	u2815
  3132  0F4F  0820               	movf	___lwdiv@divisor,w
  3133  0F50  0222               	subwf	___lwdiv@dividend,w
  3134  0F51                     u2815:
  3135  0F51  1C03               	skipc
  3136  0F52  2F5A               	goto	l3090
  3137  0F53  0820               	movf	___lwdiv@divisor,w
  3138  0F54  02A2               	subwf	___lwdiv@dividend,f
  3139  0F55  0821               	movf	___lwdiv@divisor+1,w
  3140  0F56  1C03               	skipc
  3141  0F57  03A3               	decf	___lwdiv@dividend+1,f
  3142  0F58  02A3               	subwf	___lwdiv@dividend+1,f
  3143  0F59  1426               	bsf	___lwdiv@quotient,0
  3144  0F5A                     l3090:
  3145  0F5A  3001               	movlw	1
  3146  0F5B                     u2825:
  3147  0F5B  1003               	clrc
  3148  0F5C  0CA1               	rrf	___lwdiv@divisor+1,f
  3149  0F5D  0CA0               	rrf	___lwdiv@divisor,f
  3150  0F5E  3EFF               	addlw	-1
  3151  0F5F  1D03               	skipz
  3152  0F60  2F5B               	goto	u2825
  3153  0F61  3001               	movlw	1
  3154  0F62  02A5               	subwf	___lwdiv@counter,f
  3155  0F63  1D03               	btfss	3,2
  3156  0F64  2F44               	goto	l3084
  3157  0F65                     l3094:
  3158  0F65  0827               	movf	___lwdiv@quotient+1,w
  3159  0F66  00A1               	movwf	?___lwdiv+1
  3160  0F67  0826               	movf	___lwdiv@quotient,w
  3161  0F68  00A0               	movwf	?___lwdiv
  3162  0F69  0008               	return
  3163  0F6A                     __end_of___lwdiv:
  3164                           
  3165                           	psect	text9
  3166  0E22                     __ptext9:	
  3167 ;; *************** function _UART_Write_Text *****************
  3168 ;; Defined at:
  3169 ;;		line 73 in file "usart.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;  text            1    wreg     PTR unsigned char 
  3172 ;;		 -> STR_27(3), STR_25(3), STR_24(3), STR_23(3), 
  3173 ;;		 -> STR_22(5), STR_21(6), STR_20(5), STR_19(13), 
  3174 ;;		 -> STR_18(14), STR_17(12), STR_15(7), STR_13(8), 
  3175 ;;		 -> STR_12(10), STR_5(14), 
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;  text            1   11[BANK0 ] PTR unsigned char 
  3178 ;;		 -> STR_27(3), STR_25(3), STR_24(3), STR_23(3), 
  3179 ;;		 -> STR_22(5), STR_21(6), STR_20(5), STR_19(13), 
  3180 ;;		 -> STR_18(14), STR_17(12), STR_15(7), STR_13(8), 
  3181 ;;		 -> STR_12(10), STR_5(14), 
  3182 ;;  i               2    9[BANK0 ] int 
  3183 ;; Return value:  Size  Location     Type
  3184 ;;                  1    wreg      void 
  3185 ;; Registers used:
  3186 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3187 ;; Tracked objects:
  3188 ;;		On entry : 200/0
  3189 ;;		On exit  : 300/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3192 ;;      Params:         0       0       0       0
  3193 ;;      Locals:         0       3       0       0
  3194 ;;      Temps:          0       0       0       0
  3195 ;;      Totals:         0       3       0       0
  3196 ;;Total ram usage:        3 bytes
  3197 ;; Hardware stack levels used: 1
  3198 ;; Hardware stack levels required when called: 3
  3199 ;; This function calls:
  3200 ;;		_UART_Write
  3201 ;; This function is called by:
  3202 ;;		_main
  3203 ;;		_print_cnt
  3204 ;;		_print_preset
  3205 ;;		_print_cmd_mov
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209  0E22                     _UART_Write_Text:	
  3210                           ;psect for function _UART_Write_Text
  3211                           
  3212                           
  3213                           ;incstack = 0
  3214                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3215                           ;UART_Write_Text@text stored from wreg
  3216  0E22  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0E23  00AB               	movwf	UART_Write_Text@text
  3218                           
  3219                           ;usart.c: 74:     int i;;usart.c: 75:     for (i = 0; text[i] != '\0'; i++)
  3220  0E24  01A9               	clrf	UART_Write_Text@i
  3221  0E25  01AA               	clrf	UART_Write_Text@i+1
  3222  0E26                     l3104:
  3223  0E26  0829               	movf	UART_Write_Text@i,w
  3224  0E27  072B               	addwf	UART_Write_Text@text,w
  3225  0E28  0084               	movwf	4
  3226  0E29  118A  2500  158A   	fcall	stringdir
  3227  0E2C  3A00               	xorlw	0
  3228  0E2D  1903               	btfsc	3,2
  3229  0E2E  0008               	return
  3230                           
  3231                           ;usart.c: 76:         UART_Write(text[i]);
  3232  0E2F  0829               	movf	UART_Write_Text@i,w
  3233  0E30  072B               	addwf	UART_Write_Text@text,w
  3234  0E31  0084               	movwf	4
  3235  0E32  118A  2500  158A   	fcall	stringdir
  3236  0E35  158A  26FA  158A   	fcall	_UART_Write
  3237  0E38  3001               	movlw	1
  3238  0E39  07A9               	addwf	UART_Write_Text@i,f
  3239  0E3A  1803               	skipnc
  3240  0E3B  0AAA               	incf	UART_Write_Text@i+1,f
  3241  0E3C  3000               	movlw	0
  3242  0E3D  07AA               	addwf	UART_Write_Text@i+1,f
  3243  0E3E  2E26               	goto	l3104
  3244  0E3F                     __end_of_UART_Write_Text:
  3245                           
  3246                           	psect	text10
  3247  0EA2                     __ptext10:	
  3248 ;; *************** function _UART_Write_Text_CRLF *****************
  3249 ;; Defined at:
  3250 ;;		line 79 in file "usart.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;  text            1    wreg     PTR unsigned char 
  3253 ;;		 -> STR_28(2), STR_26(2), STR_16(2), STR_14(7), 
  3254 ;;		 -> STR_11(5), STR_10(7), STR_9(6), STR_8(6), 
  3255 ;;		 -> STR_7(5), STR_6(5), STR_4(7), STR_3(21), 
  3256 ;;		 -> STR_2(23), STR_1(10), 
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  text            1   11[BANK0 ] PTR unsigned char 
  3259 ;;		 -> STR_28(2), STR_26(2), STR_16(2), STR_14(7), 
  3260 ;;		 -> STR_11(5), STR_10(7), STR_9(6), STR_8(6), 
  3261 ;;		 -> STR_7(5), STR_6(5), STR_4(7), STR_3(21), 
  3262 ;;		 -> STR_2(23), STR_1(10), 
  3263 ;;  i               2    9[BANK0 ] int 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  1    wreg      void 
  3266 ;; Registers used:
  3267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 300/0
  3270 ;;		On exit  : 300/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3273 ;;      Params:         0       0       0       0
  3274 ;;      Locals:         0       3       0       0
  3275 ;;      Temps:          0       0       0       0
  3276 ;;      Totals:         0       3       0       0
  3277 ;;Total ram usage:        3 bytes
  3278 ;; Hardware stack levels used: 1
  3279 ;; Hardware stack levels required when called: 3
  3280 ;; This function calls:
  3281 ;;		_UART_Write
  3282 ;; This function is called by:
  3283 ;;		_main
  3284 ;;		_print_preset
  3285 ;;		_print_cmd_mov
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289  0EA2                     _UART_Write_Text_CRLF:	
  3290                           ;psect for function _UART_Write_Text_CRLF
  3291                           
  3292                           
  3293                           ;incstack = 0
  3294                           ; Regs used in _UART_Write_Text_CRLF: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3295                           ;UART_Write_Text_CRLF@text stored from wreg
  3296  0EA2  00AB               	movwf	UART_Write_Text_CRLF@text
  3297                           
  3298                           ;usart.c: 80:     int i;;usart.c: 81:     for (i = 0; text[i] != '\0'; i++) {
  3299  0EA3  01A9               	clrf	UART_Write_Text_CRLF@i
  3300  0EA4  01AA               	clrf	UART_Write_Text_CRLF@i+1
  3301  0EA5                     l3200:
  3302  0EA5  0829               	movf	UART_Write_Text_CRLF@i,w
  3303  0EA6  072B               	addwf	UART_Write_Text_CRLF@text,w
  3304  0EA7  0084               	movwf	4
  3305  0EA8  118A  2500  158A   	fcall	stringdir
  3306  0EAB  3A00               	xorlw	0
  3307  0EAC  1903               	btfsc	3,2
  3308  0EAD  2EBE               	goto	l3202
  3309                           
  3310                           ;usart.c: 82:         UART_Write(text[i]);
  3311  0EAE  0829               	movf	UART_Write_Text_CRLF@i,w
  3312  0EAF  072B               	addwf	UART_Write_Text_CRLF@text,w
  3313  0EB0  0084               	movwf	4
  3314  0EB1  118A  2500  158A   	fcall	stringdir
  3315  0EB4  158A  26FA  158A   	fcall	_UART_Write
  3316                           
  3317                           ;usart.c: 83:     }
  3318  0EB7  3001               	movlw	1
  3319  0EB8  07A9               	addwf	UART_Write_Text_CRLF@i,f
  3320  0EB9  1803               	skipnc
  3321  0EBA  0AAA               	incf	UART_Write_Text_CRLF@i+1,f
  3322  0EBB  3000               	movlw	0
  3323  0EBC  07AA               	addwf	UART_Write_Text_CRLF@i+1,f
  3324  0EBD  2EA5               	goto	l3200
  3325  0EBE                     l3202:
  3326                           
  3327                           ;usart.c: 84:     UART_Write(0x0C);
  3328  0EBE  300C               	movlw	12
  3329  0EBF  158A  26FA  158A   	fcall	_UART_Write
  3330                           
  3331                           ;usart.c: 85:     UART_Write(0x0A);
  3332  0EC2  300A               	movlw	10
  3333  0EC3  158A  26FA         	fcall	_UART_Write
  3334  0EC5  0008               	return
  3335  0EC6                     __end_of_UART_Write_Text_CRLF:
  3336                           
  3337                           	psect	text11
  3338  0EFA                     __ptext11:	
  3339 ;; *************** function _UART_Write *****************
  3340 ;; Defined at:
  3341 ;;		line 59 in file "usart.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;  data            1    wreg     unsigned char 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;  data            1    4[BANK0 ] unsigned char 
  3346 ;;  timeout         4    5[BANK0 ] unsigned long 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  1    wreg      void 
  3349 ;; Registers used:
  3350 ;;		wreg
  3351 ;; Tracked objects:
  3352 ;;		On entry : 300/0
  3353 ;;		On exit  : 300/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3356 ;;      Params:         0       0       0       0
  3357 ;;      Locals:         0       5       0       0
  3358 ;;      Temps:          0       4       0       0
  3359 ;;      Totals:         0       9       0       0
  3360 ;;Total ram usage:        9 bytes
  3361 ;; Hardware stack levels used: 1
  3362 ;; Hardware stack levels required when called: 2
  3363 ;; This function calls:
  3364 ;;		Nothing
  3365 ;; This function is called by:
  3366 ;;		_print_val
  3367 ;;		_print_preset
  3368 ;;		_UART_Write_Text
  3369 ;;		_UART_Write_Text_CRLF
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373  0EFA                     _UART_Write:	
  3374                           ;psect for function _UART_Write
  3375                           
  3376                           
  3377                           ;incstack = 0
  3378                           ; Regs used in _UART_Write: [wreg]
  3379                           ;UART_Write@data stored from wreg
  3380  0EFA  00A4               	movwf	UART_Write@data
  3381                           
  3382                           ;usart.c: 60:     unsigned long timeout = 0x1FFFF;
  3383  0EFB  3000               	movlw	0
  3384  0EFC  00A8               	movwf	UART_Write@timeout+3
  3385  0EFD  3001               	movlw	1
  3386  0EFE  00A7               	movwf	UART_Write@timeout+2
  3387  0EFF  30FF               	movlw	255
  3388  0F00  00A6               	movwf	UART_Write@timeout+1
  3389  0F01  30FF               	movlw	255
  3390  0F02  00A5               	movwf	UART_Write@timeout
  3391                           
  3392                           ;usart.c: 62:     while (!TRMT) {
  3393  0F03  2F20               	goto	l408
  3394  0F04                     l2058:
  3395                           
  3396                           ;usart.c: 64:             timeout--;
  3397  0F04  3001               	movlw	1
  3398  0F05  00A0               	movwf	??_UART_Write
  3399  0F06  3000               	movlw	0
  3400  0F07  00A1               	movwf	??_UART_Write+1
  3401  0F08  3000               	movlw	0
  3402  0F09  00A2               	movwf	??_UART_Write+2
  3403  0F0A  3000               	movlw	0
  3404  0F0B  00A3               	movwf	??_UART_Write+3
  3405  0F0C  0820               	movf	??_UART_Write,w
  3406  0F0D  02A5               	subwf	UART_Write@timeout,f
  3407  0F0E  0821               	movf	??_UART_Write+1,w
  3408  0F0F  1C03               	skipc
  3409  0F10  0F21               	incfsz	??_UART_Write+1,w
  3410  0F11  2F13               	goto	u1385
  3411  0F12  2F14               	goto	u1386
  3412  0F13                     u1385:
  3413  0F13  02A6               	subwf	UART_Write@timeout+1,f
  3414  0F14                     u1386:
  3415  0F14  0822               	movf	??_UART_Write+2,w
  3416  0F15  1C03               	skipc
  3417  0F16  0F22               	incfsz	??_UART_Write+2,w
  3418  0F17  2F19               	goto	u1387
  3419  0F18  2F1A               	goto	u1388
  3420  0F19                     u1387:
  3421  0F19  02A7               	subwf	UART_Write@timeout+2,f
  3422  0F1A                     u1388:
  3423  0F1A  0823               	movf	??_UART_Write+3,w
  3424  0F1B  1C03               	skipc
  3425  0F1C  0F23               	incfsz	??_UART_Write+3,w
  3426  0F1D  2F1F               	goto	u1389
  3427  0F1E  2F20               	goto	l408
  3428  0F1F                     u1389:
  3429  0F1F  02A8               	subwf	UART_Write@timeout+3,f
  3430  0F20                     l408:	
  3431                           ;usart.c: 68:     }
  3432                           
  3433                           
  3434                           ;usart.c: 62:     while (!TRMT) {
  3435  0F20  1683               	bsf	3,5	;RP0=1, select bank1
  3436  0F21  1898               	btfsc	24,1	;volatile
  3437  0F22  2F2A               	goto	l2060
  3438                           
  3439                           ;usart.c: 63:         if (timeout > 0) {
  3440  0F23  1283               	bcf	3,5	;RP0=0, select bank0
  3441  0F24  0828               	movf	UART_Write@timeout+3,w
  3442  0F25  0427               	iorwf	UART_Write@timeout+2,w
  3443  0F26  0426               	iorwf	UART_Write@timeout+1,w
  3444  0F27  0425               	iorwf	UART_Write@timeout,w
  3445  0F28  1D03               	btfss	3,2
  3446  0F29  2F04               	goto	l2058
  3447  0F2A                     l2060:
  3448                           
  3449                           ;usart.c: 70:     TXREG = data;
  3450  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  3451  0F2B  0824               	movf	UART_Write@data,w
  3452  0F2C  0099               	movwf	25	;volatile
  3453  0F2D  0008               	return
  3454  0F2E                     __end_of_UART_Write:
  3455                           
  3456                           	psect	text12
  3457  0DD9                     __ptext12:	
  3458 ;; *************** function _UC_Init *****************
  3459 ;; Defined at:
  3460 ;;		line 587 in file "main.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;		None
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;		None
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  1    wreg      void 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0
  3469 ;; Tracked objects:
  3470 ;;		On entry : B00/0
  3471 ;;		On exit  : B00/100
  3472 ;;		Unchanged: 800/0
  3473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3474 ;;      Params:         0       0       0       0
  3475 ;;      Locals:         0       0       0       0
  3476 ;;      Temps:          0       0       0       0
  3477 ;;      Totals:         0       0       0       0
  3478 ;;Total ram usage:        0 bytes
  3479 ;; Hardware stack levels used: 1
  3480 ;; Hardware stack levels required when called: 2
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_main
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488  0DD9                     _UC_Init:	
  3489                           ;psect for function _UC_Init
  3490                           
  3491                           
  3492                           ;main.c: 588:     PCONbits.OSCF = 1;
  3493                           
  3494                           ;incstack = 0
  3495                           ; Regs used in _UC_Init: [wreg+status,2+status,0]
  3496  0DD9  1683               	bsf	3,5	;RP0=1, select bank1
  3497  0DDA  158E               	bsf	14,3	;volatile
  3498                           
  3499                           ;main.c: 591:     if ((PCONbits.nPOR == 1) && (PCONbits.nBOR == 1)) {
  3500  0DDB  188E               	btfsc	14,1	;volatile
  3501  0DDC  1C0E               	btfss	14,0	;volatile
  3502  0DDD  2DE1               	goto	l3308
  3503                           
  3504                           ;main.c: 593:         is_reboot = 1;
  3505  0DDE  1283               	bcf	3,5	;RP0=0, select bank0
  3506  0DDF  01D8               	clrf	_is_reboot
  3507  0DE0  0AD8               	incf	_is_reboot,f
  3508  0DE1                     l3308:
  3509                           
  3510                           ;main.c: 596:     PORTA = 0;
  3511  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  3512  0DE2  0185               	clrf	5	;volatile
  3513                           
  3514                           ;main.c: 597:     PORTB = 0;
  3515  0DE3  0186               	clrf	6	;volatile
  3516                           
  3517                           ;main.c: 599:     CMCON = 7;
  3518  0DE4  3007               	movlw	7
  3519  0DE5  009F               	movwf	31	;volatile
  3520                           
  3521                           ;main.c: 601:     OPTION_REGbits.nRBPU = 1;
  3522  0DE6  1683               	bsf	3,5	;RP0=1, select bank1
  3523  0DE7  1781               	bsf	1,7	;volatile
  3524                           
  3525                           ;main.c: 602:     OPTION_REGbits.PSA = 1;
  3526  0DE8  1581               	bsf	1,3	;volatile
  3527                           
  3528                           ;main.c: 603:     OPTION_REGbits.PS = 0b111;
  3529  0DE9  3007               	movlw	7
  3530  0DEA  0481               	iorwf	1,f	;volatile
  3531                           
  3532                           ;main.c: 608:     INTCONbits.GIE = 1;
  3533  0DEB  178B               	bsf	11,7	;volatile
  3534                           
  3535                           ;main.c: 609:     INTCONbits.PEIE = 1;
  3536  0DEC  170B               	bsf	11,6	;volatile
  3537                           
  3538                           ;main.c: 618:     TRISA = 0b00000000;
  3539  0DED  0185               	clrf	5	;volatile
  3540                           
  3541                           ;main.c: 628:     TRISB = 0b00000010;
  3542  0DEE  3002               	movlw	2
  3543  0DEF  0086               	movwf	6	;volatile
  3544  0DF0  0008               	return
  3545  0DF1                     __end_of_UC_Init:
  3546                           
  3547                           	psect	text13
  3548  07B7                     __ptext13:	
  3549 ;; *************** function _UART_Init *****************
  3550 ;; Defined at:
  3551 ;;		line 12 in file "usart.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;		None
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;  bauds_index     1    4[BANK0 ] unsigned char 
  3556 ;; Return value:  Size  Location     Type
  3557 ;;                  1    wreg      void 
  3558 ;; Registers used:
  3559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3560 ;; Tracked objects:
  3561 ;;		On entry : B00/100
  3562 ;;		On exit  : 300/100
  3563 ;;		Unchanged: 0/0
  3564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3565 ;;      Params:         0       0       0       0
  3566 ;;      Locals:         0       1       0       0
  3567 ;;      Temps:          0       2       0       0
  3568 ;;      Totals:         0       3       0       0
  3569 ;;Total ram usage:        3 bytes
  3570 ;; Hardware stack levels used: 1
  3571 ;; Hardware stack levels required when called: 4
  3572 ;; This function calls:
  3573 ;;		_BAUDS_get
  3574 ;; This function is called by:
  3575 ;;		_main
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579  07B7                     _UART_Init:	
  3580                           ;psect for function _UART_Init
  3581                           
  3582                           
  3583                           ;usart.c: 16:     uint8_t bauds_index = BAUDS_get();
  3584                           
  3585                           ;incstack = 0
  3586                           ; Regs used in _UART_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3587  07B7  118A  27FB  118A   	fcall	_BAUDS_get
  3588  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  3589  07BB  00A2               	movwf	??_UART_Init
  3590  07BC  0822               	movf	??_UART_Init,w
  3591  07BD  00A4               	movwf	UART_Init@bauds_index
  3592                           
  3593                           ;usart.c: 18:     switch (bauds_index) {
  3594  07BE  2FD7               	goto	l3342
  3595  07BF                     l398:	
  3596                           ;usart.c: 19:         case 0:
  3597                           
  3598                           
  3599                           ;usart.c: 20:             BRGH = 0;
  3600  07BF  1683               	bsf	3,5	;RP0=1, select bank1
  3601  07C0  1118               	bcf	24,2	;volatile
  3602  07C1                     l3328:
  3603                           
  3604                           ;usart.c: 21:             SPBRG = 25;
  3605  07C1  3019               	movlw	25
  3606  07C2  2FD2               	goto	L12
  3607  07C3                     l400:	
  3608                           ;usart.c: 23:         case 1:
  3609                           
  3610                           ;usart.c: 22:             break;
  3611                           
  3612                           
  3613                           ;usart.c: 24:             BRGH = 1;
  3614  07C3  1683               	bsf	3,5	;RP0=1, select bank1
  3615  07C4  1518               	bsf	24,2	;volatile
  3616                           
  3617                           ;usart.c: 25:             SPBRG = 51;
  3618  07C5  3033               	movlw	51
  3619  07C6  2FD2               	goto	L12
  3620  07C7                     l401:	
  3621                           ;usart.c: 30:         case 3:
  3622                           
  3623                           ;usart.c: 26:             break;
  3624                           
  3625                           
  3626                           ;usart.c: 31:             BRGH = 1;
  3627  07C7  1683               	bsf	3,5	;RP0=1, select bank1
  3628  07C8  1518               	bsf	24,2	;volatile
  3629                           
  3630                           ;usart.c: 32:             SPBRG = 12;
  3631  07C9  300C               	movlw	12
  3632  07CA  2FD2               	goto	L12
  3633  07CB                     l402:	
  3634                           ;usart.c: 34:         case 4:
  3635                           
  3636                           ;usart.c: 33:             break;
  3637                           
  3638                           
  3639                           ;usart.c: 35:             BRGH = 1;
  3640  07CB  1683               	bsf	3,5	;RP0=1, select bank1
  3641  07CC  1518               	bsf	24,2	;volatile
  3642                           
  3643                           ;usart.c: 36:             SPBRG = 6;
  3644  07CD  3006               	movlw	6
  3645  07CE  2FD2               	goto	L12
  3646  07CF                     l403:	
  3647                           ;usart.c: 38:         case 5:
  3648                           
  3649                           ;usart.c: 37:             break;
  3650                           
  3651                           
  3652                           ;usart.c: 39:             BRGH = 1;
  3653  07CF  1683               	bsf	3,5	;RP0=1, select bank1
  3654  07D0  1518               	bsf	24,2	;volatile
  3655                           
  3656                           ;usart.c: 40:             SPBRG = 1;
  3657  07D1  3001               	movlw	1
  3658  07D2                     L12:
  3659  07D2  0099               	movwf	25	;volatile
  3660                           
  3661                           ;usart.c: 41:             break;
  3662  07D3  2FF0               	goto	l399
  3663  07D4                     l404:	
  3664                           ;usart.c: 42:         default:
  3665                           
  3666                           
  3667                           ;usart.c: 43:             BRGH = 1;
  3668  07D4  1683               	bsf	3,5	;RP0=1, select bank1
  3669  07D5  1518               	bsf	24,2	;volatile
  3670  07D6  2FC1               	goto	l3328
  3671  07D7                     l3342:
  3672  07D7  0824               	movf	UART_Init@bauds_index,w
  3673  07D8  00A2               	movwf	??_UART_Init
  3674  07D9  01A3               	clrf	??_UART_Init+1
  3675                           
  3676                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3677                           ; Switch size 1, requested type "simple"
  3678                           ; Number of cases is 1, Range of values is 0 to 0
  3679                           ; switch strategies available:
  3680                           ; Name         Instructions Cycles
  3681                           ; simple_byte            4     3 (average)
  3682                           ; direct_byte            9     7 (fixed)
  3683                           ; jumptable            260     6 (fixed)
  3684                           ;	Chosen strategy is simple_byte
  3685  07DA  0823               	movf	??_UART_Init+1,w
  3686  07DB  3A00               	xorlw	0	; case 0
  3687  07DC  1903               	skipnz
  3688  07DD  2FDF               	goto	l3888
  3689  07DE  2FD4               	goto	l404
  3690  07DF                     l3888:
  3691                           
  3692                           ; Switch size 1, requested type "simple"
  3693                           ; Number of cases is 5, Range of values is 0 to 5
  3694                           ; switch strategies available:
  3695                           ; Name         Instructions Cycles
  3696                           ; simple_byte           16     9 (average)
  3697                           ; direct_byte           19     7 (fixed)
  3698                           ; jumptable            260     6 (fixed)
  3699                           ;	Chosen strategy is simple_byte
  3700  07DF  0822               	movf	??_UART_Init,w
  3701  07E0  3A00               	xorlw	0	; case 0
  3702  07E1  1903               	skipnz
  3703  07E2  2FBF               	goto	l398
  3704  07E3  3A01               	xorlw	1	; case 1
  3705  07E4  1903               	skipnz
  3706  07E5  2FC3               	goto	l400
  3707  07E6  3A02               	xorlw	2	; case 3
  3708  07E7  1903               	skipnz
  3709  07E8  2FC7               	goto	l401
  3710  07E9  3A07               	xorlw	7	; case 4
  3711  07EA  1903               	skipnz
  3712  07EB  2FCB               	goto	l402
  3713  07EC  3A01               	xorlw	1	; case 5
  3714  07ED  1903               	skipnz
  3715  07EE  2FCF               	goto	l403
  3716  07EF  2FD4               	goto	l404
  3717  07F0                     l399:
  3718                           
  3719                           ;usart.c: 50:     SYNC = 0;
  3720  07F0  1218               	bcf	24,4	;volatile
  3721                           
  3722                           ;usart.c: 51:     SPEN = 1;
  3723  07F1  1283               	bcf	3,5	;RP0=0, select bank0
  3724  07F2  1798               	bsf	24,7	;volatile
  3725                           
  3726                           ;usart.c: 52:     CREN = 1;
  3727  07F3  1618               	bsf	24,4	;volatile
  3728                           
  3729                           ;usart.c: 53:     TXEN = 1;
  3730  07F4  1683               	bsf	3,5	;RP0=1, select bank1
  3731  07F5  1698               	bsf	24,5	;volatile
  3732                           
  3733                           ;usart.c: 55:     PIR1bits.RCIF = 0;
  3734  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  3735  07F7  128C               	bcf	12,5	;volatile
  3736                           
  3737                           ;usart.c: 56:     PIE1bits.RCIE = 1;
  3738  07F8  1683               	bsf	3,5	;RP0=1, select bank1
  3739  07F9  168C               	bsf	12,5	;volatile
  3740  07FA  0008               	return
  3741  07FB                     __end_of_UART_Init:
  3742                           
  3743                           	psect	text14
  3744  07FB                     __ptext14:	
  3745 ;; *************** function _BAUDS_get *****************
  3746 ;; Defined at:
  3747 ;;		line 916 in file "main.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;		None
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;		None
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  1    wreg      unsigned char 
  3754 ;; Registers used:
  3755 ;;		wreg, status,2, status,0, pclath, cstack
  3756 ;; Tracked objects:
  3757 ;;		On entry : B00/100
  3758 ;;		On exit  : 300/100
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3761 ;;      Params:         0       0       0       0
  3762 ;;      Locals:         0       0       0       0
  3763 ;;      Temps:          0       0       0       0
  3764 ;;      Totals:         0       0       0       0
  3765 ;;Total ram usage:        0 bytes
  3766 ;; Hardware stack levels used: 1
  3767 ;; Hardware stack levels required when called: 3
  3768 ;; This function calls:
  3769 ;;		_eeprom_read
  3770 ;; This function is called by:
  3771 ;;		_UART_Init
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775  07FB                     _BAUDS_get:	
  3776                           ;psect for function _BAUDS_get
  3777                           
  3778                           
  3779                           ;main.c: 918:     return eeprom_read(0xFF);
  3780                           
  3781                           ;incstack = 0
  3782                           ; Regs used in _BAUDS_get: [wreg+status,2+status,0+pclath+cstack]
  3783  07FB  30FF               	movlw	255
  3784  07FC  158A  25C3         	fcall	_eeprom_read
  3785  07FE  0008               	return
  3786  07FF                     __end_of_BAUDS_get:
  3787                           
  3788                           	psect	text15
  3789  0D80                     __ptext15:	
  3790 ;; *************** function _TIMER1_Init *****************
  3791 ;; Defined at:
  3792 ;;		line 639 in file "main.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;		None
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;		None
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      void 
  3799 ;; Registers used:
  3800 ;;		wreg
  3801 ;; Tracked objects:
  3802 ;;		On entry : 300/100
  3803 ;;		On exit  : 300/100
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3806 ;;      Params:         0       0       0       0
  3807 ;;      Locals:         0       0       0       0
  3808 ;;      Temps:          0       0       0       0
  3809 ;;      Totals:         0       0       0       0
  3810 ;;Total ram usage:        0 bytes
  3811 ;; Hardware stack levels used: 1
  3812 ;; Hardware stack levels required when called: 2
  3813 ;; This function calls:
  3814 ;;		Nothing
  3815 ;; This function is called by:
  3816 ;;		_main
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820  0D80                     _TIMER1_Init:	
  3821                           ;psect for function _TIMER1_Init
  3822                           
  3823                           
  3824                           ;main.c: 642:     T1CONbits.T1CKPS1 = 1;
  3825                           
  3826                           ;incstack = 0
  3827                           ; Regs used in _TIMER1_Init: [wreg]
  3828  0D80  1283               	bcf	3,5	;RP0=0, select bank0
  3829  0D81  1690               	bsf	16,5	;volatile
  3830                           
  3831                           ;main.c: 643:     T1CONbits.T1CKPS0 = 1;
  3832  0D82  1610               	bsf	16,4	;volatile
  3833                           
  3834                           ;main.c: 644:     T1CONbits.T1OSCEN = 0;
  3835  0D83  1190               	bcf	16,3	;volatile
  3836                           
  3837                           ;main.c: 645:     T1CONbits.nT1SYNC = 1;
  3838  0D84  1510               	bsf	16,2	;volatile
  3839                           
  3840                           ;main.c: 646:     T1CONbits.TMR1CS = 0;
  3841  0D85  1090               	bcf	16,1	;volatile
  3842                           
  3843                           ;main.c: 647:     T1CONbits.TMR1ON = 1;
  3844  0D86  1410               	bsf	16,0	;volatile
  3845                           
  3846                           ;main.c: 648:     TMR1H = 255;
  3847  0D87  30FF               	movlw	255
  3848  0D88  008F               	movwf	15	;volatile
  3849                           
  3850                           ;main.c: 649:     TMR1L = 131;
  3851  0D89  3083               	movlw	131
  3852  0D8A  008E               	movwf	14	;volatile
  3853                           
  3854                           ;main.c: 651:     PIR1bits.TMR1IF = 0;
  3855  0D8B  100C               	bcf	12,0	;volatile
  3856                           
  3857                           ;main.c: 652:     PIE1bits.TMR1IE = 1;
  3858  0D8C  1683               	bsf	3,5	;RP0=1, select bank1
  3859  0D8D  140C               	bsf	12,0	;volatile
  3860  0D8E  0008               	return
  3861  0D8F                     __end_of_TIMER1_Init:
  3862                           
  3863                           	psect	text16
  3864  0EC6                     __ptext16:	
  3865 ;; *************** function _SPEED_calc *****************
  3866 ;; Defined at:
  3867 ;;		line 854 in file "main.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;  speed           1    wreg     unsigned char 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  speed           1   11[BANK0 ] unsigned char 
  3872 ;;  sp_calc         1   12[BANK0 ] unsigned char 
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  1    wreg      unsigned char 
  3875 ;; Registers used:
  3876 ;;		wreg, status,2, status,0, pclath, cstack
  3877 ;; Tracked objects:
  3878 ;;		On entry : 300/0
  3879 ;;		On exit  : 300/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3882 ;;      Params:         0       0       0       0
  3883 ;;      Locals:         0       2       0       0
  3884 ;;      Temps:          0       2       0       0
  3885 ;;      Totals:         0       4       0       0
  3886 ;;Total ram usage:        4 bytes
  3887 ;; Hardware stack levels used: 1
  3888 ;; Hardware stack levels required when called: 3
  3889 ;; This function calls:
  3890 ;;		___awdiv
  3891 ;; This function is called by:
  3892 ;;		_main
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896  0EC6                     _SPEED_calc:	
  3897                           ;psect for function _SPEED_calc
  3898                           
  3899                           
  3900                           ;incstack = 0
  3901                           ; Regs used in _SPEED_calc: [wreg+status,2+status,0+pclath+cstack]
  3902                           ;SPEED_calc@speed stored from wreg
  3903  0EC6  00AB               	movwf	SPEED_calc@speed
  3904                           
  3905                           ;main.c: 857:     if (speed > 0x32) {
  3906  0EC7  3033               	movlw	51
  3907  0EC8  022B               	subwf	SPEED_calc@speed,w
  3908  0EC9  1C03               	skipc
  3909  0ECA  2ECF               	goto	l328
  3910                           
  3911                           ;main.c: 858:         speed = 0x32;
  3912  0ECB  3032               	movlw	50
  3913  0ECC  00A9               	movwf	??_SPEED_calc
  3914  0ECD  0829               	movf	??_SPEED_calc,w
  3915  0ECE  00AB               	movwf	SPEED_calc@speed
  3916  0ECF                     l328:	
  3917                           ;main.c: 859:     }
  3918                           
  3919                           
  3920                           ;main.c: 861:     if (speed < 0x06) {
  3921  0ECF  3006               	movlw	6
  3922  0ED0  022B               	subwf	SPEED_calc@speed,w
  3923  0ED1  1803               	skipnc
  3924  0ED2  2ED7               	goto	l3454
  3925                           
  3926                           ;main.c: 862:         speed = 0x06;
  3927  0ED3  3006               	movlw	6
  3928  0ED4  00A9               	movwf	??_SPEED_calc
  3929  0ED5  0829               	movf	??_SPEED_calc,w
  3930  0ED6  00AB               	movwf	SPEED_calc@speed
  3931  0ED7                     l3454:
  3932                           
  3933                           ;main.c: 865:     sp_calc = 1 + ((0x32 - speed) / 2);
  3934  0ED7  3002               	movlw	2
  3935  0ED8  00A0               	movwf	___awdiv@divisor
  3936  0ED9  3000               	movlw	0
  3937  0EDA  00A1               	movwf	___awdiv@divisor+1
  3938  0EDB  3032               	movlw	50
  3939  0EDC  00A9               	movwf	??_SPEED_calc
  3940  0EDD  082B               	movf	SPEED_calc@speed,w
  3941  0EDE  0229               	subwf	??_SPEED_calc,w
  3942  0EDF  00A2               	movwf	___awdiv@dividend
  3943  0EE0  01A3               	clrf	___awdiv@dividend+1
  3944  0EE1  1C03               	skipc
  3945  0EE2  03A3               	decf	___awdiv@dividend+1,f
  3946  0EE3  118A  275E  158A   	fcall	___awdiv
  3947  0EE6  0820               	movf	?___awdiv,w
  3948  0EE7  3E01               	addlw	1
  3949  0EE8  00AA               	movwf	??_SPEED_calc+1
  3950  0EE9  082A               	movf	??_SPEED_calc+1,w
  3951  0EEA  00AC               	movwf	SPEED_calc@sp_calc
  3952                           
  3953                           ;main.c: 867:     if (sp_calc < 1) {
  3954  0EEB  082C               	movf	SPEED_calc@sp_calc,w
  3955  0EEC  1D03               	btfss	3,2
  3956  0EED  2EF0               	goto	l3460
  3957                           
  3958                           ;main.c: 868:         sp_calc = 1;
  3959  0EEE  01AC               	clrf	SPEED_calc@sp_calc
  3960  0EEF  0AAC               	incf	SPEED_calc@sp_calc,f
  3961  0EF0                     l3460:
  3962                           
  3963                           ;main.c: 871:     if (sp_calc > 19) {
  3964  0EF0  3014               	movlw	20
  3965  0EF1  022C               	subwf	SPEED_calc@sp_calc,w
  3966  0EF2  1C03               	skipc
  3967  0EF3  2EF8               	goto	l331
  3968                           
  3969                           ;main.c: 873:         sp_calc = 19;
  3970  0EF4  3013               	movlw	19
  3971  0EF5  00A9               	movwf	??_SPEED_calc
  3972  0EF6  0829               	movf	??_SPEED_calc,w
  3973  0EF7  00AC               	movwf	SPEED_calc@sp_calc
  3974  0EF8                     l331:	
  3975                           ;main.c: 874:     }
  3976                           
  3977                           
  3978                           ;main.c: 876:     return sp_calc;
  3979  0EF8  082C               	movf	SPEED_calc@sp_calc,w
  3980  0EF9  0008               	return
  3981  0EFA                     __end_of_SPEED_calc:
  3982                           
  3983                           	psect	text17
  3984  075E                     __ptext17:	
  3985 ;; *************** function ___awdiv *****************
  3986 ;; Defined at:
  3987 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/awdiv.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;  divisor         2    0[BANK0 ] int 
  3990 ;;  dividend        2    2[BANK0 ] int 
  3991 ;; Auto vars:     Size  Location     Type
  3992 ;;  quotient        2    7[BANK0 ] int 
  3993 ;;  sign            1    6[BANK0 ] unsigned char 
  3994 ;;  counter         1    5[BANK0 ] unsigned char 
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  2    0[BANK0 ] int 
  3997 ;; Registers used:
  3998 ;;		wreg, status,2, status,0
  3999 ;; Tracked objects:
  4000 ;;		On entry : 300/0
  4001 ;;		On exit  : 300/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4004 ;;      Params:         0       4       0       0
  4005 ;;      Locals:         0       4       0       0
  4006 ;;      Temps:          0       1       0       0
  4007 ;;      Totals:         0       9       0       0
  4008 ;;Total ram usage:        9 bytes
  4009 ;; Hardware stack levels used: 1
  4010 ;; Hardware stack levels required when called: 2
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_SPEED_calc
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018  075E                     ___awdiv:	
  4019                           ;psect for function ___awdiv
  4020                           
  4021                           
  4022                           ;incstack = 0
  4023                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4024  075E  01A6               	clrf	___awdiv@sign
  4025  075F  1FA1               	btfss	___awdiv@divisor+1,7
  4026  0760  2F68               	goto	l3240
  4027  0761  09A0               	comf	___awdiv@divisor,f
  4028  0762  09A1               	comf	___awdiv@divisor+1,f
  4029  0763  0AA0               	incf	___awdiv@divisor,f
  4030  0764  1903               	skipnz
  4031  0765  0AA1               	incf	___awdiv@divisor+1,f
  4032  0766  01A6               	clrf	___awdiv@sign
  4033  0767  0AA6               	incf	___awdiv@sign,f
  4034  0768                     l3240:
  4035  0768  1FA3               	btfss	___awdiv@dividend+1,7
  4036  0769  2F73               	goto	l3246
  4037  076A  09A2               	comf	___awdiv@dividend,f
  4038  076B  09A3               	comf	___awdiv@dividend+1,f
  4039  076C  0AA2               	incf	___awdiv@dividend,f
  4040  076D  1903               	skipnz
  4041  076E  0AA3               	incf	___awdiv@dividend+1,f
  4042  076F  3001               	movlw	1
  4043  0770  00A4               	movwf	??___awdiv
  4044  0771  0824               	movf	??___awdiv,w
  4045  0772  06A6               	xorwf	___awdiv@sign,f
  4046  0773                     l3246:
  4047  0773  01A7               	clrf	___awdiv@quotient
  4048  0774  01A8               	clrf	___awdiv@quotient+1
  4049  0775  0820               	movf	___awdiv@divisor,w
  4050  0776  0421               	iorwf	___awdiv@divisor+1,w
  4051  0777  1903               	btfsc	3,2
  4052  0778  2FAA               	goto	l3268
  4053  0779  01A5               	clrf	___awdiv@counter
  4054  077A  0AA5               	incf	___awdiv@counter,f
  4055  077B                     l3256:
  4056  077B  1BA1               	btfsc	___awdiv@divisor+1,7
  4057  077C  2F89               	goto	l3258
  4058  077D  3001               	movlw	1
  4059  077E                     u3075:
  4060  077E  1003               	clrc
  4061  077F  0DA0               	rlf	___awdiv@divisor,f
  4062  0780  0DA1               	rlf	___awdiv@divisor+1,f
  4063  0781  3EFF               	addlw	-1
  4064  0782  1D03               	skipz
  4065  0783  2F7E               	goto	u3075
  4066  0784  3001               	movlw	1
  4067  0785  00A4               	movwf	??___awdiv
  4068  0786  0824               	movf	??___awdiv,w
  4069  0787  07A5               	addwf	___awdiv@counter,f
  4070  0788  2F7B               	goto	l3256
  4071  0789                     l3258:
  4072  0789  3001               	movlw	1
  4073  078A                     u3095:
  4074  078A  1003               	clrc
  4075  078B  0DA7               	rlf	___awdiv@quotient,f
  4076  078C  0DA8               	rlf	___awdiv@quotient+1,f
  4077  078D  3EFF               	addlw	-1
  4078  078E  1D03               	skipz
  4079  078F  2F8A               	goto	u3095
  4080  0790  0821               	movf	___awdiv@divisor+1,w
  4081  0791  0223               	subwf	___awdiv@dividend+1,w
  4082  0792  1D03               	skipz
  4083  0793  2F96               	goto	u3105
  4084  0794  0820               	movf	___awdiv@divisor,w
  4085  0795  0222               	subwf	___awdiv@dividend,w
  4086  0796                     u3105:
  4087  0796  1C03               	skipc
  4088  0797  2F9F               	goto	l3264
  4089  0798  0820               	movf	___awdiv@divisor,w
  4090  0799  02A2               	subwf	___awdiv@dividend,f
  4091  079A  0821               	movf	___awdiv@divisor+1,w
  4092  079B  1C03               	skipc
  4093  079C  03A3               	decf	___awdiv@dividend+1,f
  4094  079D  02A3               	subwf	___awdiv@dividend+1,f
  4095  079E  1427               	bsf	___awdiv@quotient,0
  4096  079F                     l3264:
  4097  079F  3001               	movlw	1
  4098  07A0                     u3115:
  4099  07A0  1003               	clrc
  4100  07A1  0CA1               	rrf	___awdiv@divisor+1,f
  4101  07A2  0CA0               	rrf	___awdiv@divisor,f
  4102  07A3  3EFF               	addlw	-1
  4103  07A4  1D03               	skipz
  4104  07A5  2FA0               	goto	u3115
  4105  07A6  3001               	movlw	1
  4106  07A7  02A5               	subwf	___awdiv@counter,f
  4107  07A8  1D03               	btfss	3,2
  4108  07A9  2F89               	goto	l3258
  4109  07AA                     l3268:
  4110  07AA  0826               	movf	___awdiv@sign,w
  4111  07AB  1903               	btfsc	3,2
  4112  07AC  2FB2               	goto	l3272
  4113  07AD  09A7               	comf	___awdiv@quotient,f
  4114  07AE  09A8               	comf	___awdiv@quotient+1,f
  4115  07AF  0AA7               	incf	___awdiv@quotient,f
  4116  07B0  1903               	skipnz
  4117  07B1  0AA8               	incf	___awdiv@quotient+1,f
  4118  07B2                     l3272:
  4119  07B2  0828               	movf	___awdiv@quotient+1,w
  4120  07B3  00A1               	movwf	?___awdiv+1
  4121  07B4  0827               	movf	___awdiv@quotient,w
  4122  07B5  00A0               	movwf	?___awdiv
  4123  07B6  0008               	return
  4124  07B7                     __end_of___awdiv:
  4125                           
  4126                           	psect	text18
  4127  04C5                     __ptext18:	
  4128 ;; *************** function _PRESET_save *****************
  4129 ;; Defined at:
  4130 ;;		line 885 in file "main.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;  id              1    wreg     unsigned char 
  4133 ;;  pan             2    6[BANK0 ] unsigned int 
  4134 ;;  tilt            2    8[BANK0 ] unsigned int 
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;  id              1   12[BANK0 ] unsigned char 
  4137 ;;  _addr           1   13[BANK0 ] unsigned char 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  1    wreg      void 
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0, pclath, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : B00/0
  4144 ;;		On exit  : 200/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4147 ;;      Params:         0       4       0       0
  4148 ;;      Locals:         0       2       0       0
  4149 ;;      Temps:          0       2       0       0
  4150 ;;      Totals:         0       8       0       0
  4151 ;;Total ram usage:        8 bytes
  4152 ;; Hardware stack levels used: 1
  4153 ;; Hardware stack levels required when called: 4
  4154 ;; This function calls:
  4155 ;;		_eeprom_update
  4156 ;; This function is called by:
  4157 ;;		_main
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161  04C5                     _PRESET_save:	
  4162                           ;psect for function _PRESET_save
  4163                           
  4164                           
  4165                           ;incstack = 0
  4166                           ; Regs used in _PRESET_save: [wreg+status,2+status,0+pclath+cstack]
  4167                           ;PRESET_save@id stored from wreg
  4168  04C5  00AC               	movwf	PRESET_save@id
  4169                           
  4170                           ;main.c: 886:     uint8_t _addr = id * 4;
  4171  04C6  082C               	movf	PRESET_save@id,w
  4172  04C7  00AA               	movwf	??_PRESET_save
  4173  04C8  3001               	movlw	1
  4174  04C9                     u3205:
  4175  04C9  1003               	clrc
  4176  04CA  0DAA               	rlf	??_PRESET_save,f
  4177  04CB  3EFF               	addlw	-1
  4178  04CC  1D03               	skipz
  4179  04CD  2CC9               	goto	u3205
  4180  04CE  1003               	clrc
  4181  04CF  0D2A               	rlf	??_PRESET_save,w
  4182  04D0  00AB               	movwf	??_PRESET_save+1
  4183  04D1  082B               	movf	??_PRESET_save+1,w
  4184  04D2  00AD               	movwf	PRESET_save@_addr
  4185                           
  4186                           ;main.c: 888:     if (id < 50) {
  4187  04D3  3032               	movlw	50
  4188  04D4  022C               	subwf	PRESET_save@id,w
  4189  04D5  1803               	skipnc
  4190  04D6  0008               	return
  4191                           
  4192                           ;main.c: 890:         eeprom_update(_addr, pan & 0xFF);
  4193  04D7  0826               	movf	PRESET_save@pan,w
  4194  04D8  00AA               	movwf	??_PRESET_save
  4195  04D9  082A               	movf	??_PRESET_save,w
  4196  04DA  00A3               	movwf	eeprom_update@value
  4197  04DB  082D               	movf	PRESET_save@_addr,w
  4198  04DC  158A  258F  118A   	fcall	_eeprom_update
  4199                           
  4200                           ;main.c: 891:         eeprom_update(_addr + 1, (pan >> 8) & 0xFF);
  4201  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  4202  04E0  0827               	movf	PRESET_save@pan+1,w
  4203  04E1  00AA               	movwf	??_PRESET_save
  4204  04E2  082A               	movf	??_PRESET_save,w
  4205  04E3  00A3               	movwf	eeprom_update@value
  4206  04E4  082D               	movf	PRESET_save@_addr,w
  4207  04E5  3E01               	addlw	1
  4208  04E6  158A  258F  118A   	fcall	_eeprom_update
  4209                           
  4210                           ;main.c: 893:         eeprom_update(_addr + 2, tilt & 0xFF);
  4211  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  4212  04EA  0828               	movf	PRESET_save@tilt,w
  4213  04EB  00AA               	movwf	??_PRESET_save
  4214  04EC  082A               	movf	??_PRESET_save,w
  4215  04ED  00A3               	movwf	eeprom_update@value
  4216  04EE  082D               	movf	PRESET_save@_addr,w
  4217  04EF  3E02               	addlw	2
  4218  04F0  158A  258F  118A   	fcall	_eeprom_update
  4219                           
  4220                           ;main.c: 894:         eeprom_update(_addr + 3, (tilt >> 8) & 0xFF);
  4221  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  4222  04F4  0829               	movf	PRESET_save@tilt+1,w
  4223  04F5  00AA               	movwf	??_PRESET_save
  4224  04F6  082A               	movf	??_PRESET_save,w
  4225  04F7  00A3               	movwf	eeprom_update@value
  4226  04F8  082D               	movf	PRESET_save@_addr,w
  4227  04F9  3E03               	addlw	3
  4228  04FA  158A  258F         	fcall	_eeprom_update
  4229  04FC  0008               	return
  4230  04FD                     __end_of_PRESET_save:
  4231                           
  4232                           	psect	text19
  4233  0FA9                     __ptext19:	
  4234 ;; *************** function _PRESET_load *****************
  4235 ;; Defined at:
  4236 ;;		line 898 in file "main.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  id              1    wreg     unsigned char 
  4239 ;;  pan             1    2[BANK0 ] PTR unsigned int 
  4240 ;;		 -> main@pan_tmp_439(2), main@pan_tmp(2), 
  4241 ;;  tilt            1    3[BANK0 ] PTR unsigned int 
  4242 ;;		 -> main@tilt_tmp_440(2), main@tilt_tmp(2), 
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;  id              1    6[BANK0 ] unsigned char 
  4245 ;;  _addr           1    7[BANK0 ] unsigned char 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  1    wreg      void 
  4248 ;; Registers used:
  4249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 300/0
  4252 ;;		On exit  : 300/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4255 ;;      Params:         0       2       0       0
  4256 ;;      Locals:         0       2       0       0
  4257 ;;      Temps:          0       2       0       0
  4258 ;;      Totals:         0       6       0       0
  4259 ;;Total ram usage:        6 bytes
  4260 ;; Hardware stack levels used: 1
  4261 ;; Hardware stack levels required when called: 3
  4262 ;; This function calls:
  4263 ;;		_eeprom_read
  4264 ;; This function is called by:
  4265 ;;		_main
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269  0FA9                     _PRESET_load:	
  4270                           ;psect for function _PRESET_load
  4271                           
  4272                           
  4273                           ;incstack = 0
  4274                           ; Regs used in _PRESET_load: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4275                           ;PRESET_load@id stored from wreg
  4276  0FA9  00A6               	movwf	PRESET_load@id
  4277                           
  4278                           ;main.c: 899:     uint8_t _addr = id * 4;
  4279  0FAA  0826               	movf	PRESET_load@id,w
  4280  0FAB  00A4               	movwf	??_PRESET_load
  4281  0FAC  3001               	movlw	1
  4282  0FAD                     u3225:
  4283  0FAD  1003               	clrc
  4284  0FAE  0DA4               	rlf	??_PRESET_load,f
  4285  0FAF  3EFF               	addlw	-1
  4286  0FB0  1D03               	skipz
  4287  0FB1  2FAD               	goto	u3225
  4288  0FB2  1003               	clrc
  4289  0FB3  0D24               	rlf	??_PRESET_load,w
  4290  0FB4  00A5               	movwf	??_PRESET_load+1
  4291  0FB5  0825               	movf	??_PRESET_load+1,w
  4292  0FB6  00A7               	movwf	PRESET_load@_addr
  4293                           
  4294                           ;main.c: 901:     if (id < 50) {
  4295  0FB7  3032               	movlw	50
  4296  0FB8  0226               	subwf	PRESET_load@id,w
  4297  0FB9  1803               	skipnc
  4298  0FBA  0008               	return
  4299                           
  4300                           ;main.c: 903:         *pan = (uint16_t) (eeprom_read(_addr));
  4301  0FBB  0827               	movf	PRESET_load@_addr,w
  4302  0FBC  158A  25C3  158A   	fcall	_eeprom_read
  4303  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  4304  0FC0  00A4               	movwf	??_PRESET_load
  4305  0FC1  01A5               	clrf	??_PRESET_load+1
  4306  0FC2  0822               	movf	PRESET_load@pan,w
  4307  0FC3  0084               	movwf	4
  4308  0FC4  0824               	movf	??_PRESET_load,w
  4309  0FC5  1383               	bcf	3,7	;select IRP bank0
  4310  0FC6  0080               	movwf	0
  4311  0FC7  0A84               	incf	4,f
  4312  0FC8  0825               	movf	??_PRESET_load+1,w
  4313  0FC9  0080               	movwf	0
  4314                           
  4315                           ;main.c: 904:         *pan |= (uint16_t) (eeprom_read(_addr + 1) << 8);
  4316  0FCA  0827               	movf	PRESET_load@_addr,w
  4317  0FCB  3E01               	addlw	1
  4318  0FCC  158A  25C3  158A   	fcall	_eeprom_read
  4319  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  4320  0FD0  00A4               	movwf	??_PRESET_load
  4321  0FD1  01A5               	clrf	??_PRESET_load+1
  4322  0FD2  0824               	movf	??_PRESET_load,w
  4323  0FD3  00A5               	movwf	??_PRESET_load+1
  4324  0FD4  01A4               	clrf	??_PRESET_load
  4325  0FD5  0822               	movf	PRESET_load@pan,w
  4326  0FD6  0084               	movwf	4
  4327  0FD7  0824               	movf	??_PRESET_load,w
  4328  0FD8  1383               	bcf	3,7	;select IRP bank0
  4329  0FD9  0480               	iorwf	0,f
  4330  0FDA  0A84               	incf	4,f
  4331  0FDB  0825               	movf	??_PRESET_load+1,w
  4332  0FDC  0480               	iorwf	0,f
  4333                           
  4334                           ;main.c: 906:         *tilt = (uint16_t) (eeprom_read(_addr + 2));
  4335  0FDD  0827               	movf	PRESET_load@_addr,w
  4336  0FDE  3E02               	addlw	2
  4337  0FDF  158A  25C3  158A   	fcall	_eeprom_read
  4338  0FE2  1283               	bcf	3,5	;RP0=0, select bank0
  4339  0FE3  00A4               	movwf	??_PRESET_load
  4340  0FE4  01A5               	clrf	??_PRESET_load+1
  4341  0FE5  0823               	movf	PRESET_load@tilt,w
  4342  0FE6  0084               	movwf	4
  4343  0FE7  0824               	movf	??_PRESET_load,w
  4344  0FE8  1383               	bcf	3,7	;select IRP bank0
  4345  0FE9  0080               	movwf	0
  4346  0FEA  0A84               	incf	4,f
  4347  0FEB  0825               	movf	??_PRESET_load+1,w
  4348  0FEC  0080               	movwf	0
  4349                           
  4350                           ;main.c: 907:         *tilt |= (uint16_t) (eeprom_read(_addr + 3) << 8);
  4351  0FED  0827               	movf	PRESET_load@_addr,w
  4352  0FEE  3E03               	addlw	3
  4353  0FEF  158A  25C3         	fcall	_eeprom_read
  4354  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  4355  0FF2  00A4               	movwf	??_PRESET_load
  4356  0FF3  01A5               	clrf	??_PRESET_load+1
  4357  0FF4  0824               	movf	??_PRESET_load,w
  4358  0FF5  00A5               	movwf	??_PRESET_load+1
  4359  0FF6  01A4               	clrf	??_PRESET_load
  4360  0FF7  0823               	movf	PRESET_load@tilt,w
  4361  0FF8  0084               	movwf	4
  4362  0FF9  0824               	movf	??_PRESET_load,w
  4363  0FFA  1383               	bcf	3,7	;select IRP bank0
  4364  0FFB  0480               	iorwf	0,f
  4365  0FFC  0A84               	incf	4,f
  4366  0FFD  0825               	movf	??_PRESET_load+1,w
  4367  0FFE  0480               	iorwf	0,f
  4368  0FFF  0008               	return
  4369  1000                     __end_of_PRESET_load:
  4370                           
  4371                           	psect	text20
  4372  06D9                     __ptext20:	
  4373 ;; *************** function _MOTOR_Init *****************
  4374 ;; Defined at:
  4375 ;;		line 708 in file "main.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;		None
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;		None
  4380 ;; Return value:  Size  Location     Type
  4381 ;;                  1    wreg      void 
  4382 ;; Registers used:
  4383 ;;		wreg, status,2, status,0, pclath, cstack
  4384 ;; Tracked objects:
  4385 ;;		On entry : 300/0
  4386 ;;		On exit  : 300/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4389 ;;      Params:         0       0       0       0
  4390 ;;      Locals:         0       0       0       0
  4391 ;;      Temps:          0       1       0       0
  4392 ;;      Totals:         0       1       0       0
  4393 ;;Total ram usage:        1 bytes
  4394 ;; Hardware stack levels used: 1
  4395 ;; Hardware stack levels required when called: 3
  4396 ;; This function calls:
  4397 ;;		_delay_wdt
  4398 ;; This function is called by:
  4399 ;;		_main
  4400 ;; This function uses a non-reentrant model
  4401 ;;
  4402                           
  4403  06D9                     _MOTOR_Init:	
  4404                           ;psect for function _MOTOR_Init
  4405                           
  4406                           
  4407                           ;main.c: 709:     is_init = 1;
  4408                           
  4409                           ;incstack = 0
  4410                           ; Regs used in _MOTOR_Init: [wreg+status,2+status,0+pclath+cstack]
  4411  06D9  01F0               	clrf	_is_init
  4412  06DA  0AF0               	incf	_is_init,f
  4413                           
  4414                           ;main.c: 762:     pan_speed = 0x32;
  4415  06DB  3032               	movlw	50
  4416  06DC  00A3               	movwf	??_MOTOR_Init
  4417  06DD  0823               	movf	??_MOTOR_Init,w
  4418  06DE  00E8               	movwf	_pan_speed	;volatile
  4419                           
  4420                           ;main.c: 763:     pan_direction = 1;
  4421  06DF  3001               	movlw	1
  4422  06E0  00A3               	movwf	??_MOTOR_Init
  4423  06E1  0823               	movf	??_MOTOR_Init,w
  4424  06E2  00E9               	movwf	_pan_direction	;volatile
  4425                           
  4426                           ;main.c: 764:     pan_enabled = 1;
  4427  06E3  3001               	movlw	1
  4428  06E4  00A3               	movwf	??_MOTOR_Init
  4429  06E5  0823               	movf	??_MOTOR_Init,w
  4430  06E6  00EA               	movwf	_pan_enabled	;volatile
  4431                           
  4432                           ;main.c: 767:     tilt_speed = 0x32;
  4433  06E7  3032               	movlw	50
  4434  06E8  00A3               	movwf	??_MOTOR_Init
  4435  06E9  0823               	movf	??_MOTOR_Init,w
  4436  06EA  00E5               	movwf	_tilt_speed	;volatile
  4437                           
  4438                           ;main.c: 768:     tilt_direction = 1;
  4439  06EB  3001               	movlw	1
  4440  06EC  00A3               	movwf	??_MOTOR_Init
  4441  06ED  0823               	movf	??_MOTOR_Init,w
  4442  06EE  00E6               	movwf	_tilt_direction	;volatile
  4443                           
  4444                           ;main.c: 769:     tilt_enabled = 1;
  4445  06EF  3001               	movlw	1
  4446  06F0  00A3               	movwf	??_MOTOR_Init
  4447  06F1  0823               	movf	??_MOTOR_Init,w
  4448  06F2  00E7               	movwf	_tilt_enabled	;volatile
  4449                           
  4450                           ;main.c: 772:     delay_wdt(6000);
  4451  06F3  3070               	movlw	112
  4452  06F4  00A0               	movwf	delay_wdt@_ms
  4453  06F5  3017               	movlw	23
  4454  06F6  00A1               	movwf	delay_wdt@_ms+1
  4455  06F7  158A  2609  118A   	fcall	_delay_wdt
  4456                           
  4457                           ;main.c: 774:     tilt_enabled = 0;
  4458  06FA  01E7               	clrf	_tilt_enabled	;volatile
  4459                           
  4460                           ;main.c: 776:     tilt_counter = 0;
  4461  06FB  01D4               	clrf	_tilt_counter	;volatile
  4462  06FC  01D5               	clrf	_tilt_counter+1	;volatile
  4463                           
  4464                           ;main.c: 778:     delay_wdt(100);
  4465  06FD  3064               	movlw	100
  4466  06FE  00A0               	movwf	delay_wdt@_ms
  4467  06FF  3000               	movlw	0
  4468  0700  00A1               	movwf	delay_wdt@_ms+1
  4469  0701  158A  2609  118A   	fcall	_delay_wdt
  4470                           
  4471                           ;main.c: 781:     tilt_speed = 0x32;
  4472  0704  3032               	movlw	50
  4473  0705  00A3               	movwf	??_MOTOR_Init
  4474  0706  0823               	movf	??_MOTOR_Init,w
  4475  0707  00E5               	movwf	_tilt_speed	;volatile
  4476                           
  4477                           ;main.c: 782:     tilt_direction = 0;
  4478  0708  01E6               	clrf	_tilt_direction	;volatile
  4479                           
  4480                           ;main.c: 783:     tilt_enabled = 1;
  4481  0709  3001               	movlw	1
  4482  070A  00A3               	movwf	??_MOTOR_Init
  4483  070B  0823               	movf	??_MOTOR_Init,w
  4484  070C  00E7               	movwf	_tilt_enabled	;volatile
  4485                           
  4486                           ;main.c: 785:     delay_wdt(750);
  4487  070D  30EE               	movlw	238
  4488  070E  00A0               	movwf	delay_wdt@_ms
  4489  070F  3002               	movlw	2
  4490  0710  00A1               	movwf	delay_wdt@_ms+1
  4491  0711  158A  2609  118A   	fcall	_delay_wdt
  4492                           
  4493                           ;main.c: 787:     tilt_enabled = 0;
  4494  0714  01E7               	clrf	_tilt_enabled	;volatile
  4495                           
  4496                           ;main.c: 789:     tilt_counter = 0;
  4497  0715  01D4               	clrf	_tilt_counter	;volatile
  4498  0716  01D5               	clrf	_tilt_counter+1	;volatile
  4499                           
  4500                           ;main.c: 793:     delay_wdt(15650);
  4501  0717  3022               	movlw	34
  4502  0718  00A0               	movwf	delay_wdt@_ms
  4503  0719  303D               	movlw	61
  4504  071A  00A1               	movwf	delay_wdt@_ms+1
  4505  071B  158A  2609  118A   	fcall	_delay_wdt
  4506                           
  4507                           ;main.c: 795:     pan_enabled = 0;
  4508  071E  01EA               	clrf	_pan_enabled	;volatile
  4509                           
  4510                           ;main.c: 797:     pan_counter = 0;
  4511  071F  01D6               	clrf	_pan_counter	;volatile
  4512  0720  01D7               	clrf	_pan_counter+1	;volatile
  4513                           
  4514                           ;main.c: 799:     delay_wdt(100);
  4515  0721  3064               	movlw	100
  4516  0722  00A0               	movwf	delay_wdt@_ms
  4517  0723  3000               	movlw	0
  4518  0724  00A1               	movwf	delay_wdt@_ms+1
  4519  0725  158A  2609  118A   	fcall	_delay_wdt
  4520                           
  4521                           ;main.c: 802:     pan_speed = 0x32;
  4522  0728  3032               	movlw	50
  4523  0729  00A3               	movwf	??_MOTOR_Init
  4524  072A  0823               	movf	??_MOTOR_Init,w
  4525  072B  00E8               	movwf	_pan_speed	;volatile
  4526                           
  4527                           ;main.c: 803:     pan_direction = 0;
  4528  072C  01E9               	clrf	_pan_direction	;volatile
  4529                           
  4530                           ;main.c: 804:     pan_enabled = 1;
  4531  072D  3001               	movlw	1
  4532  072E  00A3               	movwf	??_MOTOR_Init
  4533  072F  0823               	movf	??_MOTOR_Init,w
  4534  0730  00EA               	movwf	_pan_enabled	;volatile
  4535                           
  4536                           ;main.c: 806:     delay_wdt(500);
  4537  0731  30F4               	movlw	244
  4538  0732  00A0               	movwf	delay_wdt@_ms
  4539  0733  3001               	movlw	1
  4540  0734  00A1               	movwf	delay_wdt@_ms+1
  4541  0735  158A  2609  118A   	fcall	_delay_wdt
  4542                           
  4543                           ;main.c: 808:     pan_enabled = 0;
  4544  0738  01EA               	clrf	_pan_enabled	;volatile
  4545                           
  4546                           ;main.c: 810:     pan_counter = 0;
  4547  0739  01D6               	clrf	_pan_counter	;volatile
  4548  073A  01D7               	clrf	_pan_counter+1	;volatile
  4549                           
  4550                           ;main.c: 831:     pan_speed = 0x32;
  4551  073B  3032               	movlw	50
  4552  073C  00A3               	movwf	??_MOTOR_Init
  4553  073D  0823               	movf	??_MOTOR_Init,w
  4554  073E  00E8               	movwf	_pan_speed	;volatile
  4555                           
  4556                           ;main.c: 832:     pan_direction = 0;
  4557  073F  01E9               	clrf	_pan_direction	;volatile
  4558                           
  4559                           ;main.c: 833:     pan_enabled = 1;
  4560  0740  3001               	movlw	1
  4561  0741  00A3               	movwf	??_MOTOR_Init
  4562  0742  0823               	movf	??_MOTOR_Init,w
  4563  0743  00EA               	movwf	_pan_enabled	;volatile
  4564                           
  4565                           ;main.c: 836:     tilt_speed = 0x32;
  4566  0744  3032               	movlw	50
  4567  0745  00A3               	movwf	??_MOTOR_Init
  4568  0746  0823               	movf	??_MOTOR_Init,w
  4569  0747  00E5               	movwf	_tilt_speed	;volatile
  4570                           
  4571                           ;main.c: 837:     tilt_direction = 0;
  4572  0748  01E6               	clrf	_tilt_direction	;volatile
  4573                           
  4574                           ;main.c: 838:     tilt_enabled = 1;
  4575  0749  3001               	movlw	1
  4576  074A  00A3               	movwf	??_MOTOR_Init
  4577  074B  0823               	movf	??_MOTOR_Init,w
  4578  074C  00E7               	movwf	_tilt_enabled	;volatile
  4579                           
  4580                           ;main.c: 841:     delay_wdt(1000);
  4581  074D  30E8               	movlw	232
  4582  074E  00A0               	movwf	delay_wdt@_ms
  4583  074F  3003               	movlw	3
  4584  0750  00A1               	movwf	delay_wdt@_ms+1
  4585  0751  158A  2609  118A   	fcall	_delay_wdt
  4586                           
  4587                           ;main.c: 843:     tilt_enabled = 0;
  4588  0754  01E7               	clrf	_tilt_enabled	;volatile
  4589                           
  4590                           ;main.c: 847:     delay_wdt(3500);
  4591  0755  30AC               	movlw	172
  4592  0756  00A0               	movwf	delay_wdt@_ms
  4593  0757  300D               	movlw	13
  4594  0758  00A1               	movwf	delay_wdt@_ms+1
  4595  0759  158A  2609         	fcall	_delay_wdt
  4596                           
  4597                           ;main.c: 849:     pan_enabled = 0;
  4598  075B  01EA               	clrf	_pan_enabled	;volatile
  4599                           
  4600                           ;main.c: 851:     is_init = 0;
  4601  075C  01F0               	clrf	_is_init
  4602  075D  0008               	return
  4603  075E                     __end_of_MOTOR_Init:
  4604                           
  4605                           	psect	text21
  4606  0E09                     __ptext21:	
  4607 ;; *************** function _delay_wdt *****************
  4608 ;; Defined at:
  4609 ;;		line 698 in file "main.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  _ms             2    0[BANK0 ] unsigned int 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      void 
  4616 ;; Registers used:
  4617 ;;		wreg, status,2, status,0
  4618 ;; Tracked objects:
  4619 ;;		On entry : 300/0
  4620 ;;		On exit  : 300/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4623 ;;      Params:         0       2       0       0
  4624 ;;      Locals:         0       0       0       0
  4625 ;;      Temps:          0       1       0       0
  4626 ;;      Totals:         0       3       0       0
  4627 ;;Total ram usage:        3 bytes
  4628 ;; Hardware stack levels used: 1
  4629 ;; Hardware stack levels required when called: 2
  4630 ;; This function calls:
  4631 ;;		Nothing
  4632 ;; This function is called by:
  4633 ;;		_main
  4634 ;;		_MOTOR_Init
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638  0E09                     _delay_wdt:	
  4639                           ;psect for function _delay_wdt
  4640                           
  4641                           
  4642                           ;incstack = 0
  4643                           ; Regs used in _delay_wdt: [wreg+status,2+status,0]
  4644  0E09  0064               	clrwdt	;# 
  4645  0E0A                     l3192:	
  4646                           ;main.c: 701:     while (_ms--) {
  4647                           
  4648                           
  4649                           ;main.c: 701:     while (_ms--) {
  4650  0E0A  3001               	movlw	1
  4651  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  4652  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
  4653  0E0D  02A0               	subwf	delay_wdt@_ms,f
  4654  0E0E  3000               	movlw	0
  4655  0E0F  1C03               	skipc
  4656  0E10  03A1               	decf	delay_wdt@_ms+1,f
  4657  0E11  02A1               	subwf	delay_wdt@_ms+1,f
  4658  0E12  0A20               	incf	delay_wdt@_ms,w
  4659  0E13  1903               	btfsc	3,2
  4660  0E14  0A21               	incf	delay_wdt@_ms+1,w
  4661  0E15  1903               	btfsc	3,2
  4662  0E16  0008               	return
  4663  0E17  0064               	clrwdt	;# 
  4664                           
  4665                           ;main.c: 704:         _delay((unsigned long)((1)*(4000000/4000.0)));
  4666  0E18  30C7               	movlw	199
  4667  0E19  1283               	bcf	3,5	;RP0=0, select bank0
  4668  0E1A  1303               	bcf	3,6	;RP1=0, select bank0
  4669  0E1B  00A2               	movwf	??_delay_wdt
  4670  0E1C                     u3717:
  4671  0E1C  2E1D               	nop2
  4672  0E1D  0BA2               	decfsz	??_delay_wdt,f
  4673  0E1E  2E1C               	goto	u3717
  4674  0E1F  2E20               	nop2
  4675  0E20  0000               	nop
  4676  0E21  2E0A               	goto	l3192
  4677  0E22                     __end_of_delay_wdt:
  4678                           
  4679                           	psect	text22
  4680  0D77                     __ptext22:	
  4681 ;; *************** function _BAUDS_set *****************
  4682 ;; Defined at:
  4683 ;;		line 911 in file "main.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;  index           1    wreg     unsigned char 
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;  index           1    7[BANK0 ] unsigned char 
  4688 ;; Return value:  Size  Location     Type
  4689 ;;                  1    wreg      void 
  4690 ;; Registers used:
  4691 ;;		wreg, status,2, status,0, pclath, cstack
  4692 ;; Tracked objects:
  4693 ;;		On entry : B00/0
  4694 ;;		On exit  : 200/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4697 ;;      Params:         0       0       0       0
  4698 ;;      Locals:         0       1       0       0
  4699 ;;      Temps:          0       1       0       0
  4700 ;;      Totals:         0       2       0       0
  4701 ;;Total ram usage:        2 bytes
  4702 ;; Hardware stack levels used: 1
  4703 ;; Hardware stack levels required when called: 4
  4704 ;; This function calls:
  4705 ;;		_eeprom_update
  4706 ;; This function is called by:
  4707 ;;		_main
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711  0D77                     _BAUDS_set:	
  4712                           ;psect for function _BAUDS_set
  4713                           
  4714                           
  4715                           ;incstack = 0
  4716                           ; Regs used in _BAUDS_set: [wreg+status,2+status,0+pclath+cstack]
  4717                           ;BAUDS_set@index stored from wreg
  4718  0D77  00A7               	movwf	BAUDS_set@index
  4719                           
  4720                           ;main.c: 913:     eeprom_update(0xFF, index);
  4721  0D78  0827               	movf	BAUDS_set@index,w
  4722  0D79  00A6               	movwf	??_BAUDS_set
  4723  0D7A  0826               	movf	??_BAUDS_set,w
  4724  0D7B  00A3               	movwf	eeprom_update@value
  4725  0D7C  30FF               	movlw	255
  4726  0D7D  158A  258F         	fcall	_eeprom_update
  4727  0D7F  0008               	return
  4728  0D80                     __end_of_BAUDS_set:
  4729                           
  4730                           	psect	text23
  4731  0D8F                     __ptext23:	
  4732 ;; *************** function _eeprom_update *****************
  4733 ;; Defined at:
  4734 ;;		line 879 in file "main.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;  addr            1    wreg     unsigned char 
  4737 ;;  value           1    3[BANK0 ] unsigned char 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  addr            1    5[BANK0 ] unsigned char 
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, status,2, status,0, pclath, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : 300/0
  4746 ;;		On exit  : 200/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4749 ;;      Params:         0       1       0       0
  4750 ;;      Locals:         0       1       0       0
  4751 ;;      Temps:          0       1       0       0
  4752 ;;      Totals:         0       3       0       0
  4753 ;;Total ram usage:        3 bytes
  4754 ;; Hardware stack levels used: 1
  4755 ;; Hardware stack levels required when called: 3
  4756 ;; This function calls:
  4757 ;;		_eeprom_read
  4758 ;;		_eeprom_write
  4759 ;; This function is called by:
  4760 ;;		_PRESET_save
  4761 ;;		_BAUDS_set
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765  0D8F                     _eeprom_update:	
  4766                           ;psect for function _eeprom_update
  4767                           
  4768                           
  4769                           ;incstack = 0
  4770                           ; Regs used in _eeprom_update: [wreg+status,2+status,0+pclath+cstack]
  4771                           ;eeprom_update@addr stored from wreg
  4772  0D8F  00A5               	movwf	eeprom_update@addr
  4773                           
  4774                           ;main.c: 880:     if (value != eeprom_read(addr)) {
  4775  0D90  0825               	movf	eeprom_update@addr,w
  4776  0D91  158A  25C3  158A   	fcall	_eeprom_read
  4777  0D94  1283               	bcf	3,5	;RP0=0, select bank0
  4778  0D95  0623               	xorwf	eeprom_update@value,w
  4779  0D96  1903               	skipnz
  4780  0D97  0008               	return
  4781                           
  4782                           ;main.c: 881:         eeprom_write(addr, value);
  4783  0D98  0823               	movf	eeprom_update@value,w
  4784  0D99  00A4               	movwf	??_eeprom_update
  4785  0D9A  0824               	movf	??_eeprom_update,w
  4786  0D9B  00A0               	movwf	eeprom_write@value
  4787  0D9C  0825               	movf	eeprom_update@addr,w
  4788  0D9D  158A  263F         	fcall	_eeprom_write
  4789  0D9F  0008               	return
  4790  0DA0                     __end_of_eeprom_update:
  4791                           
  4792                           	psect	text24
  4793  0E3F                     __ptext24:	
  4794 ;; *************** function _eeprom_write *****************
  4795 ;; Defined at:
  4796 ;;		line 6 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;  addr            1    wreg     unsigned char 
  4799 ;;  value           1    0[BANK0 ] unsigned char 
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;  addr            1    2[BANK0 ] unsigned char 
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      void 
  4804 ;; Registers used:
  4805 ;;		wreg, status,2, status,0
  4806 ;; Tracked objects:
  4807 ;;		On entry : 300/0
  4808 ;;		On exit  : 300/100
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4811 ;;      Params:         0       1       0       0
  4812 ;;      Locals:         0       1       0       0
  4813 ;;      Temps:          0       1       0       0
  4814 ;;      Totals:         0       3       0       0
  4815 ;;Total ram usage:        3 bytes
  4816 ;; Hardware stack levels used: 1
  4817 ;; Hardware stack levels required when called: 2
  4818 ;; This function calls:
  4819 ;;		Nothing
  4820 ;; This function is called by:
  4821 ;;		_eeprom_update
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825  0E3F                     _eeprom_write:	
  4826                           ;psect for function _eeprom_write
  4827                           
  4828                           
  4829                           ;incstack = 0
  4830                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  4831                           ;eeprom_write@addr stored from wreg
  4832  0E3F  00A2               	movwf	eeprom_write@addr
  4833  0E40                     l538:	
  4834                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 6: eeprom_write(unsigned char
      +                           addr, unsigned char value);/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 7:
      +                           {;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eewrite.c: 8:  do{ while (EECON1bits.W
      +                          R) { continue; } EEADR = (addr); EEDATA = (value); EECON1 &= 0x3F; STATUSbits.CARRY = 0;
      +                           if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCONbits.GIE = 0; EECON1bits.WREN = 1; 
      +                          EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EECON1bits.WREN = 0; if (STATUSbits.CAR
      +                          RY) { INTCONbits.GIE = 1; } } while (0);
  4835                           
  4836  0E40  1683               	bsf	3,5	;RP0=1, select bank1
  4837  0E41  189C               	btfsc	28,1	;volsfr
  4838  0E42  2E40               	goto	l538
  4839  0E43  1283               	bcf	3,5	;RP0=0, select bank0
  4840  0E44  0822               	movf	eeprom_write@addr,w
  4841  0E45  1683               	bsf	3,5	;RP0=1, select bank1
  4842  0E46  009B               	movwf	27	;volatile
  4843  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  4844  0E48  0820               	movf	eeprom_write@value,w
  4845  0E49  1683               	bsf	3,5	;RP0=1, select bank1
  4846  0E4A  009A               	movwf	26	;volatile
  4847  0E4B  303F               	movlw	63
  4848  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
  4849  0E4D  00A1               	movwf	??_eeprom_write
  4850  0E4E  0821               	movf	??_eeprom_write,w
  4851  0E4F  1683               	bsf	3,5	;RP0=1, select bank1
  4852  0E50  059C               	andwf	28,f	;volsfr
  4853  0E51  1003               	bcf	3,0	;volatile
  4854  0E52  1B8B               	btfsc	11,7	;volatile
  4855  0E53  1403               	bsf	3,0	;volatile
  4856  0E54  138B               	bcf	11,7	;volatile
  4857  0E55  151C               	bsf	28,2	;volsfr
  4858  0E56  3055               	movlw	85
  4859  0E57  009D               	movwf	29	;volsfr
  4860  0E58  30AA               	movlw	170
  4861  0E59  009D               	movwf	29	;volsfr
  4862  0E5A  149C               	bsf	28,1	;volsfr
  4863  0E5B  111C               	bcf	28,2	;volsfr
  4864  0E5C  1C03               	btfss	3,0	;volatile
  4865  0E5D  0008               	return
  4866  0E5E  178B               	bsf	11,7	;volatile
  4867  0E5F  0008               	return
  4868  0E60                     __end_of_eeprom_write:
  4869                           
  4870                           	psect	text25
  4871  0DC3                     __ptext25:	
  4872 ;; *************** function _eeprom_read *****************
  4873 ;; Defined at:
  4874 ;;		line 6 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;  addr            1    wreg     unsigned char 
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;  addr            1    1[BANK0 ] unsigned char 
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  1    wreg      unsigned char 
  4881 ;; Registers used:
  4882 ;;		wreg, status,2, status,0
  4883 ;; Tracked objects:
  4884 ;;		On entry : 200/100
  4885 ;;		On exit  : 300/100
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4888 ;;      Params:         0       0       0       0
  4889 ;;      Locals:         0       1       0       0
  4890 ;;      Temps:          0       1       0       0
  4891 ;;      Totals:         0       2       0       0
  4892 ;;Total ram usage:        2 bytes
  4893 ;; Hardware stack levels used: 1
  4894 ;; Hardware stack levels required when called: 2
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_eeprom_update
  4899 ;;		_PRESET_load
  4900 ;;		_BAUDS_get
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904  0DC3                     _eeprom_read:	
  4905                           ;psect for function _eeprom_read
  4906                           
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4910                           ;eeprom_read@addr stored from wreg
  4911  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  4912  0DC4  00A1               	movwf	eeprom_read@addr
  4913  0DC5  2DC7               	goto	l518
  4914  0DC6                     u2851:
  4915  0DC6  1283               	bcf	3,5	;RP0=0, select bank0
  4916  0DC7                     l518:	
  4917                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 6: eeprom_read(unsigned char a
      +                          ddr);/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 7: {;/opt/microchip/xc8/v2
      +                          .36/pic/sources/c90/pic/__eeread.c: 8:  do
  4918                           
  4919  0DC7  0064               	clrwdt	;# 
  4920  0DC8  1683               	bsf	3,5	;RP0=1, select bank1
  4921  0DC9  1303               	bcf	3,6	;RP1=0, select bank1
  4922  0DCA  189C               	btfsc	28,1	;volsfr
  4923  0DCB  2DC6               	goto	u2851
  4924                           
  4925                           ;/opt/microchip/xc8/v2.36/pic/sources/c90/pic/__eeread.c: 18:  return ( EEADR = addr, EE
      +                          CON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  4926  0DCC  1283               	bcf	3,5	;RP0=0, select bank0
  4927  0DCD  0821               	movf	eeprom_read@addr,w
  4928  0DCE  1683               	bsf	3,5	;RP0=1, select bank1
  4929  0DCF  009B               	movwf	27	;volatile
  4930  0DD0  303F               	movlw	63
  4931  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  4932  0DD2  00A0               	movwf	??_eeprom_read
  4933  0DD3  0820               	movf	??_eeprom_read,w
  4934  0DD4  1683               	bsf	3,5	;RP0=1, select bank1
  4935  0DD5  059C               	andwf	28,f	;volsfr
  4936  0DD6  141C               	bsf	28,0	;volsfr
  4937  0DD7  081A               	movf	26,w	;volatile
  4938  0DD8  0008               	return
  4939  0DD9                     __end_of_eeprom_read:
  4940                           
  4941                           	psect	text26
  4942  0312                     __ptext26:	
  4943 ;; *************** function _myISR *****************
  4944 ;; Defined at:
  4945 ;;		line 158 in file "main.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;		None
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;		None
  4950 ;; Return value:  Size  Location     Type
  4951 ;;                  1    wreg      void 
  4952 ;; Registers used:
  4953 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4954 ;; Tracked objects:
  4955 ;;		On entry : 0/0
  4956 ;;		On exit  : 300/0
  4957 ;;		Unchanged: 0/0
  4958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4959 ;;      Params:         0       0       0       0
  4960 ;;      Locals:         0       0       0       0
  4961 ;;      Temps:          6       0       0       0
  4962 ;;      Totals:         6       0       0       0
  4963 ;;Total ram usage:        6 bytes
  4964 ;; Hardware stack levels used: 2
  4965 ;; This function calls:
  4966 ;;		Nothing
  4967 ;; This function is called by:
  4968 ;;		Interrupt level 1
  4969 ;; This function uses a non-reentrant model
  4970 ;;
  4971                           
  4972  0312                     _myISR:	
  4973                           ;psect for function _myISR
  4974                           
  4975                           
  4976                           ;main.c: 159:     if (PIR1bits.RCIF == 1) {
  4977  0312  1283               	bcf	3,5	;RP0=0, select bank0
  4978  0313  1303               	bcf	3,6	;RP1=0, select bank0
  4979  0314  1E8C               	btfss	12,5	;volatile
  4980  0315  2B8B               	goto	i1l179
  4981                           
  4982                           ;main.c: 160:         data_receiv = RCREG;
  4983  0316  081A               	movf	26,w	;volatile
  4984  0317  00F6               	movwf	??_myISR
  4985  0318  0876               	movf	??_myISR,w
  4986  0319  00F5               	movwf	_data_receiv	;volatile
  4987                           
  4988                           ;main.c: 162:         PORTBbits.RB3 = !PORTBbits.RB3;
  4989  031A  1003               	clrc
  4990  031B  1D86               	btfss	6,3	;volatile
  4991  031C  1403               	setc
  4992  031D  1C03               	btfss	3,0
  4993  031E  2B23               	goto	u196_20
  4994  031F  1283               	bcf	3,5	;RP0=0, select bank0
  4995  0320  1303               	bcf	3,6	;RP1=0, select bank0
  4996  0321  1586               	bsf	6,3	;volatile
  4997  0322  2B26               	goto	i1l2478
  4998  0323                     u196_20:
  4999  0323  1283               	bcf	3,5	;RP0=0, select bank0
  5000  0324  1303               	bcf	3,6	;RP1=0, select bank0
  5001  0325  1186               	bcf	6,3	;volatile
  5002  0326                     i1l2478:
  5003                           
  5004                           ;main.c: 164:         if (is_init == 1) {
  5005  0326  0370               	decf	_is_init,w
  5006  0327  1903               	btfsc	3,2
  5007  0328  2CBA               	goto	i1l181
  5008                           
  5009                           ;main.c: 168:         if (data_receiv == 0xFF) {
  5010  0329  0A75               	incf	_data_receiv,w	;volatile
  5011  032A  1D03               	btfss	3,2
  5012  032B  2B2D               	goto	i1l2486
  5013                           
  5014                           ;main.c: 169:             timeout_receiv = 0;
  5015  032C  01EE               	clrf	_timeout_receiv	;volatile
  5016  032D                     i1l2486:
  5017                           
  5018                           ;main.c: 172:         if ((buffer_index2 <= 6) || ((buffer_index2 == 0) && (data_receiv 
      +                          == 0xFF))) {
  5019  032D  3007               	movlw	7
  5020  032E  0273               	subwf	_buffer_index2,w	;volatile
  5021  032F  1C03               	skipc
  5022  0330  2B59               	goto	i1l2514
  5023  0331  0873               	movf	_buffer_index2,w	;volatile
  5024  0332  1D03               	btfss	3,2
  5025  0333  2B72               	goto	i1l2516
  5026  0334  0A75               	incf	_data_receiv,w	;volatile
  5027  0335  1903               	btfsc	3,2
  5028  0336  2B59               	goto	i1l2514
  5029  0337  2B72               	goto	i1l2516
  5030  0338                     i1l2492:
  5031                           
  5032                           ;main.c: 175:                     buffer_data0[buffer_index2++] = data_receiv;
  5033  0338  0875               	movf	_data_receiv,w	;volatile
  5034  0339  00F6               	movwf	??_myISR
  5035  033A  0873               	movf	_buffer_index2,w
  5036  033B  3EC3               	addlw	(low (_buffer_data0| 0))& (0+255)
  5037  033C                     L13:
  5038  033C  0084               	movwf	4
  5039  033D  0876               	movf	??_myISR,w
  5040  033E  1383               	bcf	3,7	;select IRP bank1
  5041  033F  0080               	movwf	0
  5042  0340  3001               	movlw	1
  5043  0341  00F6               	movwf	??_myISR
  5044  0342  0876               	movf	??_myISR,w
  5045  0343  07F3               	addwf	_buffer_index2,f	;volatile
  5046                           
  5047                           ;main.c: 176:                     break;
  5048  0344  2B72               	goto	i1l2516
  5049  0345                     i1l2496:
  5050                           
  5051                           ;main.c: 178:                     buffer_data1[buffer_index2++] = data_receiv;
  5052  0345  0875               	movf	_data_receiv,w	;volatile
  5053  0346  00F6               	movwf	??_myISR
  5054  0347  0873               	movf	_buffer_index2,w
  5055  0348  3EBC               	addlw	(low (_buffer_data1| 0))& (0+255)
  5056  0349  2B3C               	goto	L13
  5057  034A                     i1l2500:
  5058                           
  5059                           ;main.c: 181:                     buffer_data2[buffer_index2++] = data_receiv;
  5060  034A  0875               	movf	_data_receiv,w	;volatile
  5061  034B  00F6               	movwf	??_myISR
  5062  034C  0873               	movf	_buffer_index2,w
  5063  034D  3EB5               	addlw	(low (_buffer_data2| 0))& (0+255)
  5064  034E  2B3C               	goto	L13
  5065  034F                     i1l2504:
  5066                           
  5067                           ;main.c: 184:                     buffer_data3[buffer_index2++] = data_receiv;
  5068  034F  0875               	movf	_data_receiv,w	;volatile
  5069  0350  00F6               	movwf	??_myISR
  5070  0351  0873               	movf	_buffer_index2,w
  5071  0352  3EAE               	addlw	(low (_buffer_data3| 0))& (0+255)
  5072  0353  2B3C               	goto	L13
  5073  0354                     i1l2508:
  5074                           
  5075                           ;main.c: 187:                     buffer_data4[buffer_index2++] = data_receiv;
  5076  0354  0875               	movf	_data_receiv,w	;volatile
  5077  0355  00F6               	movwf	??_myISR
  5078  0356  0873               	movf	_buffer_index2,w
  5079  0357  3EA7               	addlw	(low (_buffer_data4| 0))& (0+255)
  5080  0358  2B3C               	goto	L13
  5081  0359                     i1l2514:
  5082  0359  0874               	movf	_buffer_index1,w	;volatile
  5083  035A  00F6               	movwf	??_myISR
  5084  035B  01F7               	clrf	??_myISR+1
  5085                           
  5086                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5087                           ; Switch size 1, requested type "simple"
  5088                           ; Number of cases is 1, Range of values is 0 to 0
  5089                           ; switch strategies available:
  5090                           ; Name         Instructions Cycles
  5091                           ; simple_byte            4     3 (average)
  5092                           ; direct_byte            9     7 (fixed)
  5093                           ; jumptable            260     6 (fixed)
  5094                           ;	Chosen strategy is simple_byte
  5095  035C  0877               	movf	??_myISR+1,w
  5096  035D  3A00               	xorlw	0	; case 0
  5097  035E  1903               	skipnz
  5098  035F  2B61               	goto	i1l3890
  5099  0360  2B72               	goto	i1l2516
  5100  0361                     i1l3890:
  5101                           
  5102                           ; Switch size 1, requested type "simple"
  5103                           ; Number of cases is 5, Range of values is 0 to 4
  5104                           ; switch strategies available:
  5105                           ; Name         Instructions Cycles
  5106                           ; simple_byte           16     9 (average)
  5107                           ; direct_byte           17     7 (fixed)
  5108                           ; jumptable            260     6 (fixed)
  5109                           ;	Chosen strategy is simple_byte
  5110  0361  0876               	movf	??_myISR,w
  5111  0362  3A00               	xorlw	0	; case 0
  5112  0363  1903               	skipnz
  5113  0364  2B38               	goto	i1l2492
  5114  0365  3A01               	xorlw	1	; case 1
  5115  0366  1903               	skipnz
  5116  0367  2B45               	goto	i1l2496
  5117  0368  3A03               	xorlw	3	; case 2
  5118  0369  1903               	skipnz
  5119  036A  2B4A               	goto	i1l2500
  5120  036B  3A01               	xorlw	1	; case 3
  5121  036C  1903               	skipnz
  5122  036D  2B4F               	goto	i1l2504
  5123  036E  3A07               	xorlw	7	; case 4
  5124  036F  1903               	skipnz
  5125  0370  2B54               	goto	i1l2508
  5126  0371  2B72               	goto	i1l2516
  5127  0372                     i1l2516:
  5128                           
  5129                           ;main.c: 195:         if (buffer_index2 == 7) {
  5130  0372  3007               	movlw	7
  5131  0373  0673               	xorwf	_buffer_index2,w	;volatile
  5132  0374  1D03               	btfss	3,2
  5133  0375  2B89               	goto	i1l2528
  5134                           
  5135                           ;main.c: 196:             buffer_index2 = 0;
  5136  0376  01F3               	clrf	_buffer_index2	;volatile
  5137                           
  5138                           ;main.c: 198:             buffer_ready[buffer_index1] = 1;
  5139  0377  3001               	movlw	1
  5140  0378  00F6               	movwf	??_myISR
  5141  0379  0874               	movf	_buffer_index1,w
  5142  037A  3ECA               	addlw	(low (_buffer_ready| 0))& (0+255)
  5143  037B  0084               	movwf	4
  5144  037C  0876               	movf	??_myISR,w
  5145  037D  1383               	bcf	3,7	;select IRP bank1
  5146  037E  0080               	movwf	0
  5147                           
  5148                           ;main.c: 200:             if (buffer_index1 < 4) {
  5149  037F  3004               	movlw	4
  5150  0380  0274               	subwf	_buffer_index1,w	;volatile
  5151  0381  1803               	skipnc
  5152  0382  2B88               	goto	i1l2526
  5153                           
  5154                           ;main.c: 201:                 buffer_index1++;
  5155  0383  3001               	movlw	1
  5156  0384  00F6               	movwf	??_myISR
  5157  0385  0876               	movf	??_myISR,w
  5158  0386  07F4               	addwf	_buffer_index1,f	;volatile
  5159                           
  5160                           ;main.c: 202:             } else {
  5161  0387  2B89               	goto	i1l2528
  5162  0388                     i1l2526:
  5163                           
  5164                           ;main.c: 203:                 buffer_index1 = 0;
  5165  0388  01F4               	clrf	_buffer_index1	;volatile
  5166  0389                     i1l2528:
  5167                           
  5168                           ;main.c: 207:         PIR1bits.RCIF = 0;
  5169  0389  128C               	bcf	12,5	;volatile
  5170                           
  5171                           ;main.c: 208:     } else if (PIR1bits.TMR1IF == 1) {
  5172  038A  2CBA               	goto	i1l181
  5173  038B                     i1l179:
  5174  038B  1C0C               	btfss	12,0	;volatile
  5175  038C  2CBA               	goto	i1l181
  5176                           
  5177                           ;main.c: 210:         PIE1bits.TMR1IE = 1;
  5178  038D  1683               	bsf	3,5	;RP0=1, select bank1
  5179  038E  140C               	bsf	12,0	;volatile
  5180                           
  5181                           ;main.c: 211:         TMR1H = 255;
  5182  038F  30FF               	movlw	255
  5183  0390  1283               	bcf	3,5	;RP0=0, select bank0
  5184  0391  008F               	movwf	15	;volatile
  5185                           
  5186                           ;main.c: 212:         TMR1L = 131;
  5187  0392  3083               	movlw	131
  5188  0393  008E               	movwf	14	;volatile
  5189                           
  5190                           ;main.c: 214:         if (timeout_receiv < 15) {
  5191  0394  300F               	movlw	15
  5192  0395  026E               	subwf	_timeout_receiv,w	;volatile
  5193  0396  1803               	skipnc
  5194  0397  2B9D               	goto	i1l2536
  5195                           
  5196                           ;main.c: 215:             timeout_receiv++;
  5197  0398  3001               	movlw	1
  5198  0399  00F6               	movwf	??_myISR
  5199  039A  0876               	movf	??_myISR,w
  5200  039B  07EE               	addwf	_timeout_receiv,f	;volatile
  5201                           
  5202                           ;main.c: 216:         } else if (buffer_index2 > 0) {
  5203  039C  2BA1               	goto	i1l2540
  5204  039D                     i1l2536:
  5205  039D  0873               	movf	_buffer_index2,w	;volatile
  5206  039E  1903               	btfsc	3,2
  5207  039F  2BA1               	goto	i1l2540
  5208                           
  5209                           ;main.c: 217:             buffer_index2 = 0;
  5210  03A0  01F3               	clrf	_buffer_index2	;volatile
  5211  03A1                     i1l2540:
  5212                           
  5213                           ;main.c: 220:         if (timer1_pan < timer1_pan_ref) {
  5214  03A1  0862               	movf	_timer1_pan_ref,w	;volatile
  5215  03A2  0264               	subwf	_timer1_pan,w	;volatile
  5216  03A3  1803               	skipnc
  5217  03A4  2BAA               	goto	i1l2544
  5218                           
  5219                           ;main.c: 221:             timer1_pan++;
  5220  03A5  3001               	movlw	1
  5221  03A6  00F6               	movwf	??_myISR
  5222  03A7  0876               	movf	??_myISR,w
  5223  03A8  07E4               	addwf	_timer1_pan,f	;volatile
  5224                           
  5225                           ;main.c: 222:         } else {
  5226  03A9  2C2C               	goto	i1l2586
  5227  03AA                     i1l2544:
  5228                           
  5229                           ;main.c: 223:             timer1_pan = 0;
  5230  03AA  01E4               	clrf	_timer1_pan	;volatile
  5231                           
  5232                           ;main.c: 225:             if (pan_enabled == 1) {
  5233  03AB  036A               	decf	_pan_enabled,w	;volatile
  5234  03AC  1D03               	btfss	3,2
  5235  03AD  2C28               	goto	i1l204
  5236                           
  5237                           ;main.c: 226:                 if (pan_direction == 0) {
  5238  03AE  0869               	movf	_pan_direction,w	;volatile
  5239  03AF  1D03               	btfss	3,2
  5240  03B0  2BCD               	goto	i1l2562
  5241                           
  5242                           ;main.c: 227:                     if (pan_counter < (11700 - 1)) {
  5243  03B1  302D               	movlw	45
  5244  03B2  0257               	subwf	_pan_counter+1,w	;volatile
  5245  03B3  30B3               	movlw	179
  5246  03B4  1903               	skipnz
  5247  03B5  0256               	subwf	_pan_counter,w	;volatile
  5248  03B6  1803               	skipnc
  5249  03B7  2BE4               	goto	i1l2572
  5250                           
  5251                           ;main.c: 228:                         pan_counter++;
  5252  03B8  3001               	movlw	1
  5253  03B9  07D6               	addwf	_pan_counter,f	;volatile
  5254  03BA  1803               	skipnc
  5255  03BB  0AD7               	incf	_pan_counter+1,f	;volatile
  5256  03BC  3000               	movlw	0
  5257  03BD  07D7               	addwf	_pan_counter+1,f	;volatile
  5258                           
  5259                           ;main.c: 230:                         if ((pan_step_phase == 0) || (pan_step_phase > 7))
      +                           {
  5260  03BE  0872               	movf	_pan_step_phase,w	;volatile
  5261  03BF  1903               	btfsc	3,2
  5262  03C0  2BC5               	goto	i1l2558
  5263  03C1  3008               	movlw	8
  5264  03C2  0272               	subwf	_pan_step_phase,w	;volatile
  5265  03C3  1C03               	skipc
  5266  03C4  2BCA               	goto	i1l2560
  5267  03C5                     i1l2558:
  5268                           
  5269                           ;main.c: 231:                             pan_step_phase = 7;
  5270  03C5  3007               	movlw	7
  5271  03C6  00F6               	movwf	??_myISR
  5272  03C7  0876               	movf	??_myISR,w
  5273  03C8  00F2               	movwf	_pan_step_phase	;volatile
  5274                           
  5275                           ;main.c: 232:                         } else {
  5276  03C9  2BE4               	goto	i1l2572
  5277  03CA                     i1l2560:
  5278                           
  5279                           ;main.c: 233:                             pan_step_phase--;
  5280  03CA  3001               	movlw	1
  5281  03CB  02F2               	subwf	_pan_step_phase,f	;volatile
  5282  03CC  2BE4               	goto	i1l2572
  5283  03CD                     i1l2562:
  5284                           
  5285                           ;main.c: 237:                     if ((pan_counter > 0) || (is_init == 1)) {
  5286  03CD  0856               	movf	_pan_counter,w	;volatile
  5287  03CE  0457               	iorwf	_pan_counter+1,w	;volatile
  5288  03CF  1D03               	btfss	3,2
  5289  03D0  2BD4               	goto	i1l2566
  5290  03D1  0370               	decf	_is_init,w
  5291  03D2  1D03               	btfss	3,2
  5292  03D3  2BE4               	goto	i1l2572
  5293  03D4                     i1l2566:
  5294                           
  5295                           ;main.c: 238:                         pan_counter--;
  5296  03D4  3001               	movlw	1
  5297  03D5  02D6               	subwf	_pan_counter,f	;volatile
  5298  03D6  3000               	movlw	0
  5299  03D7  1C03               	skipc
  5300  03D8  03D7               	decf	_pan_counter+1,f	;volatile
  5301  03D9  02D7               	subwf	_pan_counter+1,f	;volatile
  5302                           
  5303                           ;main.c: 240:                         if (pan_step_phase >= 7) {
  5304  03DA  3007               	movlw	7
  5305  03DB  0272               	subwf	_pan_step_phase,w	;volatile
  5306  03DC  1C03               	skipc
  5307  03DD  2BE0               	goto	i1l2570
  5308                           
  5309                           ;main.c: 241:                             pan_step_phase = 0;
  5310  03DE  01F2               	clrf	_pan_step_phase	;volatile
  5311                           
  5312                           ;main.c: 242:                         } else {
  5313  03DF  2BE4               	goto	i1l2572
  5314  03E0                     i1l2570:
  5315                           
  5316                           ;main.c: 243:                             pan_step_phase++;
  5317  03E0  3001               	movlw	1
  5318  03E1  00F6               	movwf	??_myISR
  5319  03E2  0876               	movf	??_myISR,w
  5320  03E3  07F2               	addwf	_pan_step_phase,f	;volatile
  5321  03E4                     i1l2572:
  5322                           
  5323                           ;main.c: 248:                 if (pan_goto == pan_counter) {
  5324  03E4  0857               	movf	_pan_counter+1,w	;volatile
  5325  03E5  0653               	xorwf	_pan_goto+1,w	;volatile
  5326  03E6  1D03               	skipz
  5327  03E7  2BEA               	goto	u217_25
  5328  03E8  0856               	movf	_pan_counter,w	;volatile
  5329  03E9  0652               	xorwf	_pan_goto,w	;volatile
  5330  03EA                     u217_25:
  5331  03EA  1D03               	skipz
  5332  03EB  2BF1               	goto	i1l2578
  5333                           
  5334                           ;main.c: 249:                     if (preset_pan_enabled == 1) {
  5335  03EC  036D               	decf	_preset_pan_enabled,w	;volatile
  5336  03ED  1D03               	btfss	3,2
  5337  03EE  2BF1               	goto	i1l2578
  5338                           
  5339                           ;main.c: 250:                         preset_pan_enabled = 0;
  5340  03EF  01ED               	clrf	_preset_pan_enabled	;volatile
  5341                           
  5342                           ;main.c: 252:                         pan_enabled = 0;
  5343  03F0  01EA               	clrf	_pan_enabled	;volatile
  5344  03F1                     i1l2578:
  5345                           
  5346                           ;main.c: 256:                 PORTAbits.RA0 = steps_1A[pan_step_phase];
  5347  03F1  0872               	movf	_pan_step_phase,w
  5348  03F2  3E21               	addlw	low ((_steps_1A-__stringbase)| (0+32768))
  5349  03F3  0084               	movwf	4
  5350  03F4  118A  2500  118A   	fcall	stringdir
  5351  03F7  00F6               	movwf	??_myISR
  5352  03F8  0805               	movf	5,w	;volatile
  5353  03F9  0676               	xorwf	??_myISR,w
  5354  03FA  39FE               	andlw	-2
  5355  03FB  0676               	xorwf	??_myISR,w
  5356  03FC  0085               	movwf	5	;volatile
  5357                           
  5358                           ;main.c: 257:                 PORTAbits.RA7 = steps_1B[pan_step_phase];
  5359  03FD  0872               	movf	_pan_step_phase,w
  5360  03FE  3E19               	addlw	low ((_steps_1B-__stringbase)| (0+32768))
  5361  03FF  0084               	movwf	4
  5362  0400  118A  2500  118A   	fcall	stringdir
  5363  0403  00F6               	movwf	??_myISR
  5364  0404  0CF6               	rrf	??_myISR,f
  5365  0405  0CF6               	rrf	??_myISR,f
  5366  0406  0805               	movf	5,w	;volatile
  5367  0407  0676               	xorwf	??_myISR,w
  5368  0408  397F               	andlw	-129
  5369  0409  0676               	xorwf	??_myISR,w
  5370  040A  0085               	movwf	5	;volatile
  5371                           
  5372                           ;main.c: 258:                 PORTAbits.RA6 = steps_2A[pan_step_phase];
  5373  040B  0872               	movf	_pan_step_phase,w
  5374  040C  3E11               	addlw	low ((_steps_2A-__stringbase)| (0+32768))
  5375  040D  0084               	movwf	4
  5376  040E  118A  2500  118A   	fcall	stringdir
  5377  0411  00F6               	movwf	??_myISR
  5378  0412  0EF6               	swapf	??_myISR,f
  5379  0413  0DF6               	rlf	??_myISR,f
  5380  0414  0DF6               	rlf	??_myISR,f
  5381  0415  0805               	movf	5,w	;volatile
  5382  0416  0676               	xorwf	??_myISR,w
  5383  0417  39BF               	andlw	-65
  5384  0418  0676               	xorwf	??_myISR,w
  5385  0419  0085               	movwf	5	;volatile
  5386                           
  5387                           ;main.c: 259:                 PORTAbits.RA1 = steps_2B[pan_step_phase];
  5388  041A  0872               	movf	_pan_step_phase,w
  5389  041B  3E09               	addlw	low ((_steps_2B-__stringbase)| (0+32768))
  5390  041C  0084               	movwf	4
  5391  041D  118A  2500  118A   	fcall	stringdir
  5392  0420  00F6               	movwf	??_myISR
  5393  0421  0DF6               	rlf	??_myISR,f
  5394  0422  0805               	movf	5,w	;volatile
  5395  0423  0676               	xorwf	??_myISR,w
  5396  0424  39FD               	andlw	-3
  5397  0425  0676               	xorwf	??_myISR,w
  5398  0426  0085               	movwf	5	;volatile
  5399                           
  5400                           ;main.c: 260:             } else {
  5401  0427  2C2C               	goto	i1l2586
  5402  0428                     i1l204:
  5403                           
  5404                           ;main.c: 261:                 PORTAbits.RA0 = 0;
  5405  0428  1005               	bcf	5,0	;volatile
  5406                           
  5407                           ;main.c: 262:                 PORTAbits.RA7 = 0;
  5408  0429  1385               	bcf	5,7	;volatile
  5409                           
  5410                           ;main.c: 263:                 PORTAbits.RA6 = 0;
  5411  042A  1305               	bcf	5,6	;volatile
  5412                           
  5413                           ;main.c: 264:                 PORTAbits.RA1 = 0;
  5414  042B  1085               	bcf	5,1	;volatile
  5415  042C                     i1l2586:
  5416                           
  5417                           ;main.c: 270:         if (timer1_tilt < timer1_tilt_ref) {
  5418  042C  0861               	movf	_timer1_tilt_ref,w	;volatile
  5419  042D  0263               	subwf	_timer1_tilt,w	;volatile
  5420  042E  1803               	skipnc
  5421  042F  2C35               	goto	i1l2590
  5422                           
  5423                           ;main.c: 271:             timer1_tilt++;
  5424  0430  3001               	movlw	1
  5425  0431  00F6               	movwf	??_myISR
  5426  0432  0876               	movf	??_myISR,w
  5427  0433  07E3               	addwf	_timer1_tilt,f	;volatile
  5428                           
  5429                           ;main.c: 272:         } else {
  5430  0434  2CB9               	goto	i1l221
  5431  0435                     i1l2590:
  5432                           
  5433                           ;main.c: 273:             timer1_tilt = 0;
  5434  0435  01E3               	clrf	_timer1_tilt	;volatile
  5435                           
  5436                           ;main.c: 275:             if (tilt_enabled == 1) {
  5437  0436  0367               	decf	_tilt_enabled,w	;volatile
  5438  0437  1D03               	btfss	3,2
  5439  0438  2CB5               	goto	i1l222
  5440                           
  5441                           ;main.c: 276:                 if (tilt_direction == 0) {
  5442  0439  0866               	movf	_tilt_direction,w	;volatile
  5443  043A  1D03               	btfss	3,2
  5444  043B  2C58               	goto	i1l2608
  5445                           
  5446                           ;main.c: 277:                     if (tilt_counter < (2300 - 1)) {
  5447  043C  3008               	movlw	8
  5448  043D  0255               	subwf	_tilt_counter+1,w	;volatile
  5449  043E  30FB               	movlw	251
  5450  043F  1903               	skipnz
  5451  0440  0254               	subwf	_tilt_counter,w	;volatile
  5452  0441  1803               	skipnc
  5453  0442  2C6F               	goto	i1l2618
  5454                           
  5455                           ;main.c: 278:                         tilt_counter++;
  5456  0443  3001               	movlw	1
  5457  0444  07D4               	addwf	_tilt_counter,f	;volatile
  5458  0445  1803               	skipnc
  5459  0446  0AD5               	incf	_tilt_counter+1,f	;volatile
  5460  0447  3000               	movlw	0
  5461  0448  07D5               	addwf	_tilt_counter+1,f	;volatile
  5462                           
  5463                           ;main.c: 280:                         if ((tilt_step_phase == 0) || (tilt_step_phase > 7
      +                          )) {
  5464  0449  0871               	movf	_tilt_step_phase,w	;volatile
  5465  044A  1903               	btfsc	3,2
  5466  044B  2C50               	goto	i1l2604
  5467  044C  3008               	movlw	8
  5468  044D  0271               	subwf	_tilt_step_phase,w	;volatile
  5469  044E  1C03               	skipc
  5470  044F  2C55               	goto	i1l2606
  5471  0450                     i1l2604:
  5472                           
  5473                           ;main.c: 281:                             tilt_step_phase = 7;
  5474  0450  3007               	movlw	7
  5475  0451  00F6               	movwf	??_myISR
  5476  0452  0876               	movf	??_myISR,w
  5477  0453  00F1               	movwf	_tilt_step_phase	;volatile
  5478                           
  5479                           ;main.c: 282:                         } else {
  5480  0454  2C6F               	goto	i1l2618
  5481  0455                     i1l2606:
  5482                           
  5483                           ;main.c: 283:                             tilt_step_phase--;
  5484  0455  3001               	movlw	1
  5485  0456  02F1               	subwf	_tilt_step_phase,f	;volatile
  5486  0457  2C6F               	goto	i1l2618
  5487  0458                     i1l2608:
  5488                           
  5489                           ;main.c: 287:                     if ((tilt_counter > 0) || (is_init == 1)) {
  5490  0458  0854               	movf	_tilt_counter,w	;volatile
  5491  0459  0455               	iorwf	_tilt_counter+1,w	;volatile
  5492  045A  1D03               	btfss	3,2
  5493  045B  2C5F               	goto	i1l2612
  5494  045C  0370               	decf	_is_init,w
  5495  045D  1D03               	btfss	3,2
  5496  045E  2C6F               	goto	i1l2618
  5497  045F                     i1l2612:
  5498                           
  5499                           ;main.c: 288:                         tilt_counter--;
  5500  045F  3001               	movlw	1
  5501  0460  02D4               	subwf	_tilt_counter,f	;volatile
  5502  0461  3000               	movlw	0
  5503  0462  1C03               	skipc
  5504  0463  03D5               	decf	_tilt_counter+1,f	;volatile
  5505  0464  02D5               	subwf	_tilt_counter+1,f	;volatile
  5506                           
  5507                           ;main.c: 290:                         if (tilt_step_phase >= 7) {
  5508  0465  3007               	movlw	7
  5509  0466  0271               	subwf	_tilt_step_phase,w	;volatile
  5510  0467  1C03               	skipc
  5511  0468  2C6B               	goto	i1l2616
  5512                           
  5513                           ;main.c: 291:                             tilt_step_phase = 0;
  5514  0469  01F1               	clrf	_tilt_step_phase	;volatile
  5515                           
  5516                           ;main.c: 292:                         } else {
  5517  046A  2C6F               	goto	i1l2618
  5518  046B                     i1l2616:
  5519                           
  5520                           ;main.c: 293:                             tilt_step_phase++;
  5521  046B  3001               	movlw	1
  5522  046C  00F6               	movwf	??_myISR
  5523  046D  0876               	movf	??_myISR,w
  5524  046E  07F1               	addwf	_tilt_step_phase,f	;volatile
  5525  046F                     i1l2618:
  5526                           
  5527                           ;main.c: 298:                 if (tilt_goto == tilt_counter) {
  5528  046F  0855               	movf	_tilt_counter+1,w	;volatile
  5529  0470  0651               	xorwf	_tilt_goto+1,w	;volatile
  5530  0471  1D03               	skipz
  5531  0472  2C75               	goto	u228_25
  5532  0473  0854               	movf	_tilt_counter,w	;volatile
  5533  0474  0650               	xorwf	_tilt_goto,w	;volatile
  5534  0475                     u228_25:
  5535  0475  1D03               	skipz
  5536  0476  2C7C               	goto	i1l2624
  5537                           
  5538                           ;main.c: 299:                     if (preset_tilt_enabled == 1) {
  5539  0477  036B               	decf	_preset_tilt_enabled,w	;volatile
  5540  0478  1D03               	btfss	3,2
  5541  0479  2C7C               	goto	i1l2624
  5542                           
  5543                           ;main.c: 300:                         preset_tilt_enabled = 0;
  5544  047A  01EB               	clrf	_preset_tilt_enabled	;volatile
  5545                           
  5546                           ;main.c: 302:                         tilt_enabled = 0;
  5547  047B  01E7               	clrf	_tilt_enabled	;volatile
  5548  047C                     i1l2624:
  5549                           
  5550                           ;main.c: 306:                 PORTBbits.RB4 = steps_1A[tilt_step_phase];
  5551  047C  0871               	movf	_tilt_step_phase,w
  5552  047D  3E21               	addlw	low ((_steps_1A-__stringbase)| (0+32768))
  5553  047E  0084               	movwf	4
  5554  047F  118A  2500  118A   	fcall	stringdir
  5555  0482  00F6               	movwf	??_myISR
  5556  0483  0EF6               	swapf	??_myISR,f
  5557  0484  0806               	movf	6,w	;volatile
  5558  0485  0676               	xorwf	??_myISR,w
  5559  0486  39EF               	andlw	-17
  5560  0487  0676               	xorwf	??_myISR,w
  5561  0488  0086               	movwf	6	;volatile
  5562                           
  5563                           ;main.c: 307:                 PORTBbits.RB5 = steps_1B[tilt_step_phase];
  5564  0489  0871               	movf	_tilt_step_phase,w
  5565  048A  3E19               	addlw	low ((_steps_1B-__stringbase)| (0+32768))
  5566  048B  0084               	movwf	4
  5567  048C  118A  2500  118A   	fcall	stringdir
  5568  048F  00F6               	movwf	??_myISR
  5569  0490  0EF6               	swapf	??_myISR,f
  5570  0491  0DF6               	rlf	??_myISR,f
  5571  0492  0806               	movf	6,w	;volatile
  5572  0493  0676               	xorwf	??_myISR,w
  5573  0494  39DF               	andlw	-33
  5574  0495  0676               	xorwf	??_myISR,w
  5575  0496  0086               	movwf	6	;volatile
  5576                           
  5577                           ;main.c: 308:                 PORTBbits.RB6 = steps_2A[tilt_step_phase];
  5578  0497  0871               	movf	_tilt_step_phase,w
  5579  0498  3E11               	addlw	low ((_steps_2A-__stringbase)| (0+32768))
  5580  0499  0084               	movwf	4
  5581  049A  118A  2500  118A   	fcall	stringdir
  5582  049D  00F6               	movwf	??_myISR
  5583  049E  0EF6               	swapf	??_myISR,f
  5584  049F  0DF6               	rlf	??_myISR,f
  5585  04A0  0DF6               	rlf	??_myISR,f
  5586  04A1  0806               	movf	6,w	;volatile
  5587  04A2  0676               	xorwf	??_myISR,w
  5588  04A3  39BF               	andlw	-65
  5589  04A4  0676               	xorwf	??_myISR,w
  5590  04A5  0086               	movwf	6	;volatile
  5591                           
  5592                           ;main.c: 309:                 PORTBbits.RB7 = steps_2B[tilt_step_phase];
  5593  04A6  0871               	movf	_tilt_step_phase,w
  5594  04A7  3E09               	addlw	low ((_steps_2B-__stringbase)| (0+32768))
  5595  04A8  0084               	movwf	4
  5596  04A9  118A  2500  118A   	fcall	stringdir
  5597  04AC  00F6               	movwf	??_myISR
  5598  04AD  0CF6               	rrf	??_myISR,f
  5599  04AE  0CF6               	rrf	??_myISR,f
  5600  04AF  0806               	movf	6,w	;volatile
  5601  04B0  0676               	xorwf	??_myISR,w
  5602  04B1  397F               	andlw	-129
  5603  04B2  0676               	xorwf	??_myISR,w
  5604  04B3  0086               	movwf	6	;volatile
  5605                           
  5606                           ;main.c: 310:             } else {
  5607  04B4  2CB9               	goto	i1l221
  5608  04B5                     i1l222:
  5609                           
  5610                           ;main.c: 311:                 PORTBbits.RB4 = 0;
  5611  04B5  1206               	bcf	6,4	;volatile
  5612                           
  5613                           ;main.c: 312:                 PORTBbits.RB5 = 0;
  5614  04B6  1286               	bcf	6,5	;volatile
  5615                           
  5616                           ;main.c: 313:                 PORTBbits.RB6 = 0;
  5617  04B7  1306               	bcf	6,6	;volatile
  5618                           
  5619                           ;main.c: 314:                 PORTBbits.RB7 = 0;
  5620  04B8  1386               	bcf	6,7	;volatile
  5621  04B9                     i1l221:	
  5622                           ;main.c: 316:         }
  5623                           
  5624                           
  5625                           ;main.c: 318:         PIR1bits.TMR1IF = 0;
  5626  04B9  100C               	bcf	12,0	;volatile
  5627  04BA                     i1l181:
  5628  04BA  087B               	movf	??_myISR+5,w
  5629  04BB  00FF               	movwf	127
  5630  04BC  087A               	movf	??_myISR+4,w
  5631  04BD  008A               	movwf	10
  5632  04BE  0879               	movf	??_myISR+3,w
  5633  04BF  0084               	movwf	4
  5634  04C0  0E78               	swapf	??_myISR+2,w
  5635  04C1  0083               	movwf	3
  5636  04C2  0EFE               	swapf	126,f
  5637  04C3  0E7E               	swapf	126,w
  5638  04C4  0009               	retfie
  5639  04C5                     __end_of_myISR:
  5640  007E                     btemp	set	126	;btemp
  5641  007E                     wtemp0	set	126
  5642                           
  5643                           	psect	intentry
  5644  0004                     __pintentry:	
  5645                           ;incstack = 0
  5646                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+pclath]
  5647                           
  5648  0004                     interrupt_function:
  5649  007E                     saved_w	set	btemp
  5650  0004  00FE               	movwf	btemp
  5651  0005  0E03               	swapf	3,w
  5652  0006  00F8               	movwf	??_myISR+2
  5653  0007  0804               	movf	4,w
  5654  0008  00F9               	movwf	??_myISR+3
  5655  0009  080A               	movf	10,w
  5656  000A  00FA               	movwf	??_myISR+4
  5657  000B  087F               	movf	btemp+1,w
  5658  000C  00FB               	movwf	??_myISR+5
  5659  000D  118A  2B12         	ljmp	_myISR
  5660                           
  5661                           	psect	config
  5662                           
  5663                           ;Config register CONFIG @ 0x2007
  5664                           ;	Oscillator Selection bits
  5665                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  5666                           ;	Watchdog Timer Enable bit
  5667                           ;	WDTE = ON, WDT enabled
  5668                           ;	Power-up Timer Enable bit
  5669                           ;	PWRTE = ON, PWRT enabled
  5670                           ;	RA5/MCLR/VPP Pin Function Select bit
  5671                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  5672                           ;	Brown-out Detect Enable bit
  5673                           ;	BOREN = ON, BOD enabled
  5674                           ;	Low-Voltage Programming Enable bit
  5675                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  5676                           ;	Data EE Memory Code Protection bit
  5677                           ;	CPD = OFF, Data memory code protection off
  5678                           ;	Flash Program Memory Code Protection bit
  5679                           ;	CP = OFF, Code protection off
  5680  2007                     	org	8199
  5681  2007  3F54               	dw	16212

Data Sizes:
    Strings     197
    Constant    40
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     48      80
    BANK1            80      0      53
    BANK2            80      0       0

Pointer List with Targets:

    UART_Write_Text_CRLF@text	PTR unsigned char  size(1) Largest target is 23
		 -> STR_28(CODE[2]), STR_26(CODE[2]), STR_16(CODE[2]), STR_14(CODE[7]), 
		 -> STR_11(CODE[5]), STR_10(CODE[7]), STR_9(CODE[6]), STR_8(CODE[6]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_4(CODE[7]), STR_3(CODE[21]), 
		 -> STR_2(CODE[23]), STR_1(CODE[10]), 

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 14
		 -> STR_27(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[3]), 
		 -> STR_22(CODE[5]), STR_21(CODE[6]), STR_20(CODE[5]), STR_19(CODE[13]), 
		 -> STR_18(CODE[14]), STR_17(CODE[12]), STR_15(CODE[7]), STR_13(CODE[8]), 
		 -> STR_12(CODE[10]), STR_5(CODE[14]), 

    print_cmd_mov@text	PTR unsigned char  size(1) Largest target is 6
		 -> STR_23(CODE[3]), STR_22(CODE[5]), STR_21(CODE[6]), STR_20(CODE[5]), 

    print_preset@text	PTR unsigned char  size(1) Largest target is 14
		 -> STR_19(CODE[13]), STR_18(CODE[14]), STR_17(CODE[12]), 

    PRESET_load@tilt	PTR unsigned int  size(1) Largest target is 2
		 -> main@tilt_tmp_440(BANK0[2]), main@tilt_tmp(BANK0[2]), 

    PRESET_load@pan	PTR unsigned int  size(1) Largest target is 2
		 -> main@pan_tmp_439(BANK0[2]), main@pan_tmp(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_print_preset
    _print_preset->_print_cnt
    _print_cmd_mov->_print_cnt
    _print_cnt->_print_val
    _print_val->_UART_Write
    _UART_Write_Text->_UART_Write
    _UART_Write_Text_CRLF->_UART_Write
    _BAUDS_get->_eeprom_read
    _SPEED_calc->___awdiv
    _PRESET_save->_eeprom_update
    _PRESET_load->_eeprom_read
    _MOTOR_Init->_delay_wdt
    _BAUDS_set->_eeprom_update
    _eeprom_update->_eeprom_write

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0   24514
                                             35 BANK0     13    13      0
                          _BAUDS_set
                         _MOTOR_Init
                        _PRESET_load
                        _PRESET_save
                         _SPEED_calc
                        _TIMER1_Init
                          _UART_Init
                    _UART_Write_Text
               _UART_Write_Text_CRLF
                            _UC_Init
                          _delay_wdt
                      _print_cmd_mov
                          _print_cnt
                       _print_preset
 ---------------------------------------------------------------------------------
 (1) _print_preset                                        10     5      5    6799
                                             25 BANK0     10     5      5
                         _UART_Write
                    _UART_Write_Text
               _UART_Write_Text_CRLF
                             ___bmul
                            ___lbdiv
                          _print_cnt
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     331
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _print_cmd_mov                                        5     1      4    6083
                                             25 BANK0      5     1      4
                    _UART_Write_Text
               _UART_Write_Text_CRLF
                          _print_cnt
 ---------------------------------------------------------------------------------
 (2) _print_cnt                                            4     0      4    3946
                                             21 BANK0      4     0      4
                    _UART_Write_Text
                          _print_val
 ---------------------------------------------------------------------------------
 (3) _print_val                                           12    10      2    2844
                                              9 BANK0     12    10      2
                         _UART_Write
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     856
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     961
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _UART_Write_Text                                      3     3      0     500
                                              9 BANK0      3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text_CRLF                                 3     3      0     680
                                              9 BANK0      3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (4) _UART_Write                                           9     9      0      46
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) _UC_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            3     3      0      65
                                              2 BANK0      3     3      0
                          _BAUDS_get
 ---------------------------------------------------------------------------------
 (2) _BAUDS_get                                            0     0      0      31
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _TIMER1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPEED_calc                                           4     4      0     829
                                              9 BANK0      4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     625
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _PRESET_save                                          8     4      4    1436
                                              6 BANK0      8     4      4
                      _eeprom_update
 ---------------------------------------------------------------------------------
 (1) _PRESET_load                                          6     4      2     704
                                              2 BANK0      6     4      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _MOTOR_Init                                           1     1      0     931
                                              3 BANK0      1     1      0
                          _delay_wdt
 ---------------------------------------------------------------------------------
 (1) _delay_wdt                                            3     1      2     931
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _BAUDS_set                                            2     2      0     788
                                              6 BANK0      2     2      0
                      _eeprom_update
 ---------------------------------------------------------------------------------
 (2) _eeprom_update                                        3     2      1     757
                                              3 BANK0      3     2      1
                        _eeprom_read
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     152
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myISR                                                6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BAUDS_set
     _eeprom_update
       _eeprom_read
       _eeprom_write
   _MOTOR_Init
     _delay_wdt
   _PRESET_load
     _eeprom_read
   _PRESET_save
     _eeprom_update
   _SPEED_calc
     ___awdiv
   _TIMER1_Init
   _UART_Init
     _BAUDS_get
       _eeprom_read
   _UART_Write_Text
     _UART_Write
   _UART_Write_Text_CRLF
     _UART_Write
   _UC_Init
   _delay_wdt
   _print_cmd_mov
     _UART_Write_Text
     _UART_Write_Text_CRLF
     _print_cnt
       _UART_Write_Text
       _print_val
         _UART_Write
         ___lwdiv
         ___wmul
   _print_cnt
   _print_preset
     _UART_Write
     _UART_Write_Text
     _UART_Write_Text_CRLF
     ___bmul
     ___lbdiv
     _print_cnt

 _myISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     30      50       3      100.0%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0      35       5       66.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      91       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      91      10        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed Feb 12 11:17:13 2025

                           pc 0002                ___bmul@product 0022                  ___awdiv@sign 0026  
                          fsr 0004           ___wmul@multiplicand 0022                           l300 02D7  
                         l400 07C3                           l401 07C7                           l402 07CB  
                         l242 0302                           l331 0EF8                           l403 07CF  
                         l404 07D4                           l261 00DC                           l328 0ECF  
                         l408 0F20                           l363 06D5                           l283 026C  
                         l518 0DC7                           l297 028D                           l538 0E40  
                         l548 0E6A                           l398 07BF                           l399 07F0  
                         fsr0 0004                           indf 0000                          l2060 0F2A  
                        l3200 0EA5                          l3104 0E26                          l2058 0F04  
                        l3202 0EBE                          l3060 0E62                          l3220 0DA2  
                        l3240 0768                          l3224 0DA8                          l3090 0F5A  
                        l3082 0F36                          l3170 06B1                          l3308 0DE1  
                        l3084 0F44                          l3164 06A5                          l3500 0059  
                        l3246 0773                          l3342 07D7                          l3094 0F65  
                        l3192 0E0A                          l3272 07B2                          l3264 079F  
                        l3256 077B                          l3328 07C1                          l3176 06BD  
                        l3168 06AD                          l3512 006D                          l3504 005F  
                        l3258 0789                          l3186 06D1                          l3178 06C1  
                        l3530 008B                          l3268 07AA                          l3460 0EF0  
                        l3604 0155                          l3508 0066                          l3516 007B  
                        l3454 0ED7                          l3286 0E88                          l3702 0257  
                        l3288 0E91                          l3298 0EA0                          l3706 0259  
                        l3642 01C9                          l3618 0183                          l3570 00FD  
                        l3554 00DD                          l3572 0102                          l3580 0111  
                        l3574 0107                          l3582 012A                          l3566 00F3  
                        l3680 0221                          l3576 010C                          l3568 00F8  
                        l3584 012C                          l3496 0053                          l3488 004E  
                        l3746 02B3                          l3586 0132                          l3684 0223  
                        l3676 0214                          l3698 024A                          l3788 02FE  
                        l3886 0119                          l3888 07DF                          STR_1 0599  
                        STR_2 052E                          STR_3 0545                          STR_4 05B9  
                        STR_5 0568                          STR_6 05D2                          STR_7 05DC  
                        STR_8 05C0                          STR_9 05C6                          _BRGH 04C2  
                        _CREN 00C4                          u3105 0796                          u3115 07A0  
                        u3205 04C9                          u3225 0FAD                          u1385 0F13  
                        u1386 0F14                          u3075 077E                          u1387 0F19  
                        u1388 0F1A                          u1389 0F1F                          u3095 078A  
                        u2805 0F45                          u2815 0F51                          u3615 0210  
                        u2825 0F5B                          u2745 0E6B                          u3625 021A  
                        u2851 0DC6                          u2755 0E72                          u3717 0E1C  
                        u3645 0246                          u3655 0250                          u2785 0F39  
                        _SPEN 00C7                          _TRMT 04C1                          _TXEN 04C5  
                        _SYNC 04C4                ??_eeprom_write 0021                   main@pan_tmp 0046  
                        _main 0026                          btemp 007E               __end_of_UC_Init 0DF1  
                        start 000F            _preset_pan_enabled 006D             ___bmul@multiplier 0023  
     __end_of_UART_Write_Text 0E3F                   ?_MOTOR_Init 0076                         ?_main 0076  
             __end_of___awdiv 07B7               __end_of___lbdiv 0EA2                         _EEADR 009B  
                       STR_10 05B2                         STR_11 05D7                         STR_20 05E6  
                       STR_12 058F                         STR_21 05CC                         STR_13 05A3  
                       STR_14 05B9                         STR_22 05E1                         STR_23 05EE  
                       STR_15 05AB                         STR_16 05F1                         STR_24 05EB  
                       STR_25 05AF                         STR_17 0583                         STR_26 05F1  
                       STR_18 055A                         STR_27 05AF                         STR_19 0576  
                       STR_28 05F1                         _CMCON 001F                   ?_SPEED_calc 0076  
             ___awdiv@divisor 0020               __end_of___lwdiv 0F6A                         i1l204 0428  
                       i1l221 04B9                         i1l222 04B5                         i1l181 04BA  
                       i1l179 038B               ___awdiv@counter 0025                         _RCREG 001A  
             ??_eeprom_update 0024                         _TMR1H 000F                         _TMR1L 000E  
                       _SPBRG 0099                         _PORTA 0005                         _PORTB 0006  
                       _TRISA 0085                         _TRISB 0086                         _TXREG 0019  
                 ?_UART_Write 0076                         _myISR 0312                         main@i 004F  
                       main@m 004E               ??_print_cmd_mov 003D                         pclath 000A  
             _timer1_tilt_ref 0061                  main@tilt_tmp 0048             __end_of_BAUDS_get 07FF  
           __end_of_BAUDS_set 0D80                 print_cnt@_pan 0035                         status 0003  
                       wtemp0 007E               ___lbdiv@divisor 0020              print_val@val1000 0031  
             ___lbdiv@counter 0023               __initialization 0011                  __end_of_main 0312  
               print_val@val1 002B                        ??_main 0043                  ?_TIMER1_Init 0076  
                ?_PRESET_load 0022                  ?_PRESET_save 0026                        ?_myISR 0076  
                      _EEDATA 009A                        _EECON1 009C                        _EECON2 009D  
            ___awdiv@dividend 0022                     ??_UC_Init 0020                        i1l2500 034A  
                      i1l2504 034F                        i1l2514 0359                        i1l2612 045F  
                      i1l2604 0450                        i1l2540 03A1                        i1l2508 0354  
                      i1l2516 0372                        i1l2606 0455                        i1l2526 0388  
                      i1l2624 047C                        i1l2616 046B                        i1l2608 0458  
                      i1l2560 03CA                        i1l2544 03AA                        i1l2536 039D  
                      i1l2528 0389                        i1l2618 046F                        i1l2570 03E0  
                      i1l2562 03CD                        i1l2572 03E4                        i1l2492 0338  
                      i1l2590 0435                        i1l2566 03D4                        i1l2558 03C5  
                      i1l2486 032D                        i1l2478 0326                        i1l2496 0345  
                      i1l2578 03F1                        i1l2586 042C                        i1l3890 0361  
                      u217_25 03EA                        u228_25 0475                        u196_20 0323  
                      _P_dat1 005B                        _P_dat2 005A                        _P_cmd1 005D  
                      _P_cmd2 005C                        _P_addr 005E       _preset_tilt_enabled_old 00D4  
           __end_of_UART_Init 07FB                        ___bmul 0DA0                        ___wmul 0E60  
                   ??___awdiv 0024                     ??___lbdiv 0021              ?_UART_Write_Text 0076  
           eeprom_update@addr 0025                     ??___lwdiv 0024              ___awdiv@quotient 0027  
        __end_of_eeprom_write 0E60               SPEED_calc@speed 002B                        saved_w 007E  
              print_cnt@_tilt 0037              __end_of_steps_1A 052E              __end_of_steps_1B 0526  
            __end_of_steps_2A 051E              __end_of_steps_2B 0516      UART_Write_Text_CRLF@text 002B  
            print_preset@tilt 003B              print_preset@text 003D              ___lbdiv@dividend 0022  
           print_val@val10000 0033       __end_of__initialization 0023               eeprom_read@addr 0021  
         ___bmul@multiplicand 0020                __pcstackCOMMON 0076                 _pan_direction 0069  
               __end_of_myISR 04C5                print_val@val10 002D              ___lbdiv@quotient 0024  
              print_val@value 0029                _OPTION_REGbits 0081             eeprom_write@value 0020  
                     ??_myISR 0076                print_preset@id 0041                    __pbssBANK0 0050  
                  __pbssBANK1 00A0                    __pmaintext 0026                 _pan_speed_old 00D3  
                     ?___bmul 0020                    _header_cnt 006F                    _header_pos 00D1  
                     ?___wmul 0020                    __pintentry 0004                  ??_MOTOR_Init 0023  
                ??_SPEED_calc 0029                  ??_UART_Write 0020                       _UC_Init 0DD9  
                  __stringtab 0500                    _frame_data 00A0             __end_of_delay_wdt 0E22  
          __end_of_MOTOR_Init 075E                     _BAUDS_get 07FB  __end_of_UART_Write_Text_CRLF 0EC6  
                   _BAUDS_set 0D77            __end_of_SPEED_calc 0EFA         UART_Write_Text_CRLF@i 0029  
                     ___awdiv 075E                       ___lbdiv 0E81            __end_of_UART_Write 0F2E  
                     ___lwdiv 0F2E      print_preset@preset_id_10 0042                       __ptext1 0F6A  
                     __ptext2 0E81                       __ptext3 0DA0                       __ptext4 0DF1  
                     __ptext5 0DB1                       __ptext6 05F3                       __ptext7 0E60  
                     __ptext8 0F2E                       __ptext9 0E22            eeprom_update@value 0023  
                   _T1CONbits 0010                       _is_init 0070         __end_of_eeprom_update 0DA0  
                     clrloop0 0D70          end_of_initialization 0023           _preset_tilt_enabled 006B  
                _eeprom_write 0E3F         __end_of_print_cmd_mov 0E09                    ?_BAUDS_get 0076  
           __end_of_speed_ref 050E                    ?_BAUDS_set 0076                  _buffer_data0 00C3  
                _buffer_data1 00BC                  _buffer_data2 00B5                  _buffer_data3 00AE  
                _buffer_data4 00A7             __end_of_print_cnt 0DC3             __end_of_print_val 06D9  
                _buffer_ready 00CA                    _timer1_pan 0064                     _UART_Init 07B7  
                   _PORTAbits 0005                     _PORTBbits 0006                UART_Write@data 0024  
               PRESET_load@id 0026                    _tilt_speed 0065                 PRESET_save@id 002C  
               ?_print_preset 0039                 ??_eeprom_read 0020                __end_of___bmul 0DB1  
              __end_of___wmul 0E81                _timer1_pan_ref 0062                    ?_UART_Init 0076  
             print_val@val100 002F           start_initialization 0011                ??_print_preset 003E  
        _UART_Write_Text_CRLF 0EA2                   ??_BAUDS_get 0022                   ??_BAUDS_set 0026  
                    ??___bmul 0021                      ??___wmul 0024           __end_of_eeprom_read 0DD9  
             print_preset@pan 0039                   __pbssCOMMON 0070         ?_UART_Write_Text_CRLF 0076  
                   ___latbits 0001                 __pcstackBANK0 0020               main@chksum_calc 0045  
                 _data_receiv 0075                      ?_UC_Init 0076              eeprom_write@addr 0022  
                 _alarms_data 00CF              ___lwdiv@dividend 0022                     _delay_wdt 0E09  
                    ?___awdiv 0020                      ?___lbdiv 0020                      ?___lwdiv 0020  
                 ??_UART_Init 0022                     __pstrings 0500                 ??_TIMER1_Init 0020  
               ??_PRESET_load 0024                _pan_step_phase 0072                 ??_PRESET_save 002A  
            ___lwdiv@quotient 0026       print_preset@preset_id_1 0040                     _is_reboot 0058  
                   _pan_speed 0068             ??_UART_Write_Text 0029             interrupt_function 0004  
              ___wmul@product 0024                     clear_ram0 0D6F                   _eeprom_read 0DC3  
                    _PIE1bits 008C                      _PCONbits 008E                      _PIR1bits 000C  
                  ?_delay_wdt 0020          __end_of_print_preset 0FA9                     _speed_ref 0506  
                   _preset_id 0059                     _print_cnt 0DB1                     _tilt_goto 0050  
                   _print_val 05F3                   __stringbase 0505             ___wmul@multiplier 0020  
      ??_UART_Write_Text_CRLF 0029                   _frame_index 0060               main@pan_tmp_439 004A  
         __end_of_TIMER1_Init 0D8F                      _P_chksum 00D0                  delay_wdt@_ms 0020  
         __end_of_PRESET_load 1000           __end_of_PRESET_save 04FD                    _EECON1bits 009C  
                  ?_print_cnt 0035                    ?_print_val 0029                   _pan_enabled 006A  
          __end_of__stringtab 0506                   _pan_counter 0056                 _response_type 005F  
             ___lwdiv@divisor 0020               ___lwdiv@counter 0025                      __ptext10 0EA2  
                    __ptext11 0EFA                      __ptext20 06D9                      __ptext12 0DD9  
                    __ptext21 0E09                      __ptext13 07B7                      __ptext22 0D77  
                    __ptext14 07FB                      __ptext23 0D8F                      __ptext15 0D80  
                    __ptext24 0E3F                      __ptext16 0EC6                      __ptext25 0DC3  
                    __ptext17 075E                      __ptext26 0312                      __ptext18 04C5  
                    __ptext19 0FA9              main@tilt_tmp_440 004C                _timeout_receiv 006E  
              _tilt_direction 0066               _tilt_step_phase 0071           UART_Write_Text@text 002B  
                    _pan_goto 0052                BAUDS_set@index 0027                   ??_delay_wdt 0022  
                    _steps_1A 0526                      _steps_1B 051E                      _steps_2A 0516  
                    _steps_2B 050E                   _TIMER1_Init 0D80             print_cmd_mov@tilt 003B  
           print_cmd_mov@text 003D                    _INTCONbits 000B                   _PRESET_load 0FA9  
               _eeprom_update 0D8F                   _PRESET_save 04C5             SPEED_calc@sp_calc 002C  
              _tilt_speed_old 00D2                      intlevel1 0000              PRESET_load@_addr 0027  
               _print_cmd_mov 0DF1                     stringcode 0500                 _buffer_index1 0074  
               _buffer_index2 0073             UART_Write@timeout 0025              print_cmd_mov@pan 0039  
                 _timer1_tilt 0063                   ??_print_cnt 0039                   ??_print_val 002B  
                  _MOTOR_Init 06D9               _UART_Write_Text 0E22                    _SPEED_calc 0EC6  
                _tilt_enabled 0067               PRESET_load@tilt 0023                      stringdir 0500  
            PRESET_save@_addr 002D                      stringtab 0500                ?_eeprom_update 0023  
                _tilt_counter 0054                    _UART_Write 0EFA                  _print_preset 0F6A  
              PRESET_load@pan 0022              UART_Write_Text@i 0029                 ?_eeprom_write 0020  
        UART_Init@bauds_index 0024               PRESET_save@tilt 0028                    _STATUSbits 0003  
              ?_print_cmd_mov 0039        _preset_pan_enabled_old 006C                  ?_eeprom_read 0076  
              PRESET_save@pan 0026  
